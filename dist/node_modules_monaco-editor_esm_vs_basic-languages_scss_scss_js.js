"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_scss_scss_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/scss/scss.js":
/*!************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/scss/scss.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conf: () => (/* binding */ conf),\n/* harmony export */   language: () => (/* binding */ language)\n/* harmony export */ });\n/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/basic-languages/scss/scss.ts\r\nvar conf = {\r\n  wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\r\n  comments: {\r\n    blockComment: [\"/*\", \"*/\"],\r\n    lineComment: \"//\"\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] },\r\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\r\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\r\n      end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".scss\",\r\n  ws: \"[ \t\\n\\r\\f]*\",\r\n  // whitespaces (referenced in several rules)\r\n  identifier: \"-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*\",\r\n  brackets: [\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.bracket\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n  ],\r\n  tokenizer: {\r\n    root: [{ include: \"@selector\" }],\r\n    selector: [\r\n      { include: \"@comments\" },\r\n      { include: \"@import\" },\r\n      { include: \"@variabledeclaration\" },\r\n      { include: \"@warndebug\" },\r\n      // sass: log statements\r\n      [\"[@](include)\", { token: \"keyword\", next: \"@includedeclaration\" }],\r\n      // sass: include statement\r\n      [\r\n        \"[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)\",\r\n        { token: \"keyword\", next: \"@keyframedeclaration\" }\r\n      ],\r\n      [\"[@](page|content|font-face|-moz-document)\", { token: \"keyword\" }],\r\n      // sass: placeholder for includes\r\n      [\"[@](charset|namespace)\", { token: \"keyword\", next: \"@declarationbody\" }],\r\n      [\"[@](function)\", { token: \"keyword\", next: \"@functiondeclaration\" }],\r\n      [\"[@](mixin)\", { token: \"keyword\", next: \"@mixindeclaration\" }],\r\n      [\"url(\\\\-prefix)?\\\\(\", { token: \"meta\", next: \"@urldeclaration\" }],\r\n      { include: \"@controlstatement\" },\r\n      // sass control statements\r\n      { include: \"@selectorname\" },\r\n      [\"[&\\\\*]\", \"tag\"],\r\n      // selector symbols\r\n      [\"[>\\\\+,]\", \"delimiter\"],\r\n      // selector operators\r\n      [\"\\\\[\", { token: \"delimiter.bracket\", next: \"@selectorattribute\" }],\r\n      [\"{\", { token: \"delimiter.curly\", next: \"@selectorbody\" }]\r\n    ],\r\n    selectorbody: [\r\n      [\"[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))\", \"attribute.name\", \"@rulevalue\"],\r\n      // rule definition: to distinguish from a nested selector check for whitespace, number or a semicolon\r\n      { include: \"@selector\" },\r\n      // sass: nested selectors\r\n      [\"[@](extend)\", { token: \"keyword\", next: \"@extendbody\" }],\r\n      // sass: extend other selectors\r\n      [\"[@](return)\", { token: \"keyword\", next: \"@declarationbody\" }],\r\n      [\"}\", { token: \"delimiter.curly\", next: \"@pop\" }]\r\n    ],\r\n    selectorname: [\r\n      [\"#{\", { token: \"meta\", next: \"@variableinterpolation\" }],\r\n      // sass: interpolation\r\n      [\"(\\\\.|#(?=[^{])|%|(@identifier)|:)+\", \"tag\"]\r\n      // selector (.foo, div, ...)\r\n    ],\r\n    selectorattribute: [{ include: \"@term\" }, [\"]\", { token: \"delimiter.bracket\", next: \"@pop\" }]],\r\n    term: [\r\n      { include: \"@comments\" },\r\n      [\"url(\\\\-prefix)?\\\\(\", { token: \"meta\", next: \"@urldeclaration\" }],\r\n      { include: \"@functioninvocation\" },\r\n      { include: \"@numbers\" },\r\n      { include: \"@strings\" },\r\n      { include: \"@variablereference\" },\r\n      [\"(and\\\\b|or\\\\b|not\\\\b)\", \"operator\"],\r\n      { include: \"@name\" },\r\n      [\"([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])\", \"operator\"],\r\n      [\",\", \"delimiter\"],\r\n      [\"!default\", \"literal\"],\r\n      [\"\\\\(\", { token: \"delimiter.parenthesis\", next: \"@parenthizedterm\" }]\r\n    ],\r\n    rulevalue: [\r\n      { include: \"@term\" },\r\n      [\"!important\", \"literal\"],\r\n      [\";\", \"delimiter\", \"@pop\"],\r\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@nestedproperty\" }],\r\n      // sass: nested properties\r\n      [\"(?=})\", { token: \"\", next: \"@pop\" }]\r\n      // missing semicolon\r\n    ],\r\n    nestedproperty: [\r\n      [\"[*_]?@identifier@ws:\", \"attribute.name\", \"@rulevalue\"],\r\n      { include: \"@comments\" },\r\n      [\"}\", { token: \"delimiter.curly\", next: \"@pop\" }]\r\n    ],\r\n    warndebug: [[\"[@](warn|debug)\", { token: \"keyword\", next: \"@declarationbody\" }]],\r\n    import: [[\"[@](import)\", { token: \"keyword\", next: \"@declarationbody\" }]],\r\n    variabledeclaration: [\r\n      // sass variables\r\n      [\"\\\\$@identifier@ws:\", \"variable.decl\", \"@declarationbody\"]\r\n    ],\r\n    urldeclaration: [\r\n      { include: \"@strings\" },\r\n      [\"[^)\\r\\n]+\", \"string\"],\r\n      [\"\\\\)\", { token: \"meta\", next: \"@pop\" }]\r\n    ],\r\n    parenthizedterm: [\r\n      { include: \"@term\" },\r\n      [\"\\\\)\", { token: \"delimiter.parenthesis\", next: \"@pop\" }]\r\n    ],\r\n    declarationbody: [\r\n      { include: \"@term\" },\r\n      [\";\", \"delimiter\", \"@pop\"],\r\n      [\"(?=})\", { token: \"\", next: \"@pop\" }]\r\n      // missing semicolon\r\n    ],\r\n    extendbody: [\r\n      { include: \"@selectorname\" },\r\n      [\"!optional\", \"literal\"],\r\n      [\";\", \"delimiter\", \"@pop\"],\r\n      [\"(?=})\", { token: \"\", next: \"@pop\" }]\r\n      // missing semicolon\r\n    ],\r\n    variablereference: [\r\n      // sass variable reference\r\n      [\"\\\\$@identifier\", \"variable.ref\"],\r\n      [\"\\\\.\\\\.\\\\.\", \"operator\"],\r\n      // var args in reference\r\n      [\"#{\", { token: \"meta\", next: \"@variableinterpolation\" }]\r\n      // sass var resolve\r\n    ],\r\n    variableinterpolation: [\r\n      { include: \"@variablereference\" },\r\n      [\"}\", { token: \"meta\", next: \"@pop\" }]\r\n    ],\r\n    comments: [\r\n      [\"\\\\/\\\\*\", \"comment\", \"@comment\"],\r\n      [\"\\\\/\\\\/+.*\", \"comment\"]\r\n    ],\r\n    comment: [\r\n      [\"\\\\*\\\\/\", \"comment\", \"@pop\"],\r\n      [\".\", \"comment\"]\r\n    ],\r\n    name: [[\"@identifier\", \"attribute.value\"]],\r\n    numbers: [\r\n      [\"(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?\", { token: \"number\", next: \"@units\" }],\r\n      [\"#[0-9a-fA-F_]+(?!\\\\w)\", \"number.hex\"]\r\n    ],\r\n    units: [\r\n      [\r\n        \"(em|ex|ch|rem|fr|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?\",\r\n        \"number\",\r\n        \"@pop\"\r\n      ]\r\n    ],\r\n    functiondeclaration: [\r\n      [\"@identifier@ws\\\\(\", { token: \"meta\", next: \"@parameterdeclaration\" }],\r\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@functionbody\" }]\r\n    ],\r\n    mixindeclaration: [\r\n      // mixin with parameters\r\n      [\"@identifier@ws\\\\(\", { token: \"meta\", next: \"@parameterdeclaration\" }],\r\n      // mixin without parameters\r\n      [\"@identifier\", \"meta\"],\r\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@selectorbody\" }]\r\n    ],\r\n    parameterdeclaration: [\r\n      [\"\\\\$@identifier@ws:\", \"variable.decl\"],\r\n      [\"\\\\.\\\\.\\\\.\", \"operator\"],\r\n      // var args in declaration\r\n      [\",\", \"delimiter\"],\r\n      { include: \"@term\" },\r\n      [\"\\\\)\", { token: \"meta\", next: \"@pop\" }]\r\n    ],\r\n    includedeclaration: [\r\n      { include: \"@functioninvocation\" },\r\n      [\"@identifier\", \"meta\"],\r\n      [\";\", \"delimiter\", \"@pop\"],\r\n      [\"(?=})\", { token: \"\", next: \"@pop\" }],\r\n      // missing semicolon\r\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@selectorbody\" }]\r\n    ],\r\n    keyframedeclaration: [\r\n      [\"@identifier\", \"meta\"],\r\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@keyframebody\" }]\r\n    ],\r\n    keyframebody: [\r\n      { include: \"@term\" },\r\n      [\"{\", { token: \"delimiter.curly\", next: \"@selectorbody\" }],\r\n      [\"}\", { token: \"delimiter.curly\", next: \"@pop\" }]\r\n    ],\r\n    controlstatement: [\r\n      [\r\n        \"[@](if|else|for|while|each|media)\",\r\n        { token: \"keyword.flow\", next: \"@controlstatementdeclaration\" }\r\n      ]\r\n    ],\r\n    controlstatementdeclaration: [\r\n      [\"(in|from|through|if|to)\\\\b\", { token: \"keyword.flow\" }],\r\n      { include: \"@term\" },\r\n      [\"{\", { token: \"delimiter.curly\", switchTo: \"@selectorbody\" }]\r\n    ],\r\n    functionbody: [\r\n      [\"[@](return)\", { token: \"keyword\" }],\r\n      { include: \"@variabledeclaration\" },\r\n      { include: \"@term\" },\r\n      { include: \"@controlstatement\" },\r\n      [\";\", \"delimiter\"],\r\n      [\"}\", { token: \"delimiter.curly\", next: \"@pop\" }]\r\n    ],\r\n    functioninvocation: [[\"@identifier\\\\(\", { token: \"meta\", next: \"@functionarguments\" }]],\r\n    functionarguments: [\r\n      [\"\\\\$@identifier@ws:\", \"attribute.name\"],\r\n      [\"[,]\", \"delimiter\"],\r\n      { include: \"@term\" },\r\n      [\"\\\\)\", { token: \"meta\", next: \"@pop\" }]\r\n    ],\r\n    strings: [\r\n      ['~?\"', { token: \"string.delimiter\", next: \"@stringenddoublequote\" }],\r\n      [\"~?'\", { token: \"string.delimiter\", next: \"@stringendquote\" }]\r\n    ],\r\n    stringenddoublequote: [\r\n      [\"\\\\\\\\.\", \"string\"],\r\n      ['\"', { token: \"string.delimiter\", next: \"@pop\" }],\r\n      [\".\", \"string\"]\r\n    ],\r\n    stringendquote: [\r\n      [\"\\\\\\\\.\", \"string\"],\r\n      [\"'\", { token: \"string.delimiter\", next: \"@pop\" }],\r\n      [\".\", \"string\"]\r\n    ]\r\n  }\r\n};\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/scss/scss.js\n");

/***/ })

}]);