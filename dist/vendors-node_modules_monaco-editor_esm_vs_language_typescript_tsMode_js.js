"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_language_typescript_tsMode_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/language/typescript/tsMode.js":
/*!*************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/typescript/tsMode.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Adapter: () => (/* binding */ Adapter),\n/* harmony export */   CodeActionAdaptor: () => (/* binding */ CodeActionAdaptor),\n/* harmony export */   DefinitionAdapter: () => (/* binding */ DefinitionAdapter),\n/* harmony export */   DiagnosticsAdapter: () => (/* binding */ DiagnosticsAdapter),\n/* harmony export */   DocumentHighlightAdapter: () => (/* binding */ DocumentHighlightAdapter),\n/* harmony export */   FormatAdapter: () => (/* binding */ FormatAdapter),\n/* harmony export */   FormatHelper: () => (/* binding */ FormatHelper),\n/* harmony export */   FormatOnTypeAdapter: () => (/* binding */ FormatOnTypeAdapter),\n/* harmony export */   InlayHintsAdapter: () => (/* binding */ InlayHintsAdapter),\n/* harmony export */   Kind: () => (/* binding */ Kind),\n/* harmony export */   LibFiles: () => (/* binding */ LibFiles),\n/* harmony export */   OutlineAdapter: () => (/* binding */ OutlineAdapter),\n/* harmony export */   QuickInfoAdapter: () => (/* binding */ QuickInfoAdapter),\n/* harmony export */   ReferenceAdapter: () => (/* binding */ ReferenceAdapter),\n/* harmony export */   RenameAdapter: () => (/* binding */ RenameAdapter),\n/* harmony export */   SignatureHelpAdapter: () => (/* binding */ SignatureHelpAdapter),\n/* harmony export */   SuggestAdapter: () => (/* binding */ SuggestAdapter),\n/* harmony export */   WorkerManager: () => (/* binding */ WorkerManager),\n/* harmony export */   flattenDiagnosticMessageText: () => (/* binding */ flattenDiagnosticMessageText),\n/* harmony export */   getJavaScriptWorker: () => (/* binding */ getJavaScriptWorker),\n/* harmony export */   getTypeScriptWorker: () => (/* binding */ getTypeScriptWorker),\n/* harmony export */   setupJavaScript: () => (/* binding */ setupJavaScript),\n/* harmony export */   setupTypeScript: () => (/* binding */ setupTypeScript)\n/* harmony export */ });\n/* harmony import */ var _editor_editor_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../editor/editor.api.js */ \"./node_modules/monaco-editor/esm/vs/editor/editor.api.js\");\n/* harmony import */ var _monaco_contribution_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./monaco.contribution.js */ \"./node_modules/monaco-editor/esm/vs/language/typescript/monaco.contribution.js\");\n/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\nvar __defProp = Object.defineProperty;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __copyProps = (to, from, except, desc) => {\r\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\r\n    for (let key of __getOwnPropNames(from))\r\n      if (!__hasOwnProp.call(to, key) && key !== except)\r\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\r\n  }\r\n  return to;\r\n};\r\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\r\n\r\n// src/fillers/monaco-editor-core.ts\r\nvar monaco_editor_core_exports = {};\r\n__reExport(monaco_editor_core_exports, _editor_editor_api_js__WEBPACK_IMPORTED_MODULE_0__);\r\n\r\n\r\n// src/language/typescript/workerManager.ts\r\nvar WorkerManager = class {\r\n  constructor(_modeId, _defaults) {\r\n    this._modeId = _modeId;\r\n    this._defaults = _defaults;\r\n    this._worker = null;\r\n    this._client = null;\r\n    this._configChangeListener = this._defaults.onDidChange(() => this._stopWorker());\r\n    this._updateExtraLibsToken = 0;\r\n    this._extraLibsChangeListener = this._defaults.onDidExtraLibsChange(\r\n      () => this._updateExtraLibs()\r\n    );\r\n  }\r\n  dispose() {\r\n    this._configChangeListener.dispose();\r\n    this._extraLibsChangeListener.dispose();\r\n    this._stopWorker();\r\n  }\r\n  _stopWorker() {\r\n    if (this._worker) {\r\n      this._worker.dispose();\r\n      this._worker = null;\r\n    }\r\n    this._client = null;\r\n  }\r\n  async _updateExtraLibs() {\r\n    if (!this._worker) {\r\n      return;\r\n    }\r\n    const myToken = ++this._updateExtraLibsToken;\r\n    const proxy = await this._worker.getProxy();\r\n    if (this._updateExtraLibsToken !== myToken) {\r\n      return;\r\n    }\r\n    proxy.updateExtraLibs(this._defaults.getExtraLibs());\r\n  }\r\n  _getClient() {\r\n    if (!this._client) {\r\n      this._client = (async () => {\r\n        this._worker = monaco_editor_core_exports.editor.createWebWorker({\r\n          // module that exports the create() method and returns a `TypeScriptWorker` instance\r\n          moduleId: \"vs/language/typescript/tsWorker\",\r\n          label: this._modeId,\r\n          keepIdleModels: true,\r\n          // passed in to the create() method\r\n          createData: {\r\n            compilerOptions: this._defaults.getCompilerOptions(),\r\n            extraLibs: this._defaults.getExtraLibs(),\r\n            customWorkerPath: this._defaults.workerOptions.customWorkerPath,\r\n            inlayHintsOptions: this._defaults.inlayHintsOptions\r\n          }\r\n        });\r\n        if (this._defaults.getEagerModelSync()) {\r\n          return await this._worker.withSyncedResources(\r\n            monaco_editor_core_exports.editor.getModels().filter((model) => model.getLanguageId() === this._modeId).map((model) => model.uri)\r\n          );\r\n        }\r\n        return await this._worker.getProxy();\r\n      })();\r\n    }\r\n    return this._client;\r\n  }\r\n  async getLanguageServiceWorker(...resources) {\r\n    const client = await this._getClient();\r\n    if (this._worker) {\r\n      await this._worker.withSyncedResources(resources);\r\n    }\r\n    return client;\r\n  }\r\n};\r\n\r\n// src/language/typescript/languageFeatures.ts\r\n\r\n\r\n// src/language/typescript/lib/lib.index.ts\r\nvar libFileSet = {};\r\nlibFileSet[\"lib.d.ts\"] = true;\r\nlibFileSet[\"lib.decorators.d.ts\"] = true;\r\nlibFileSet[\"lib.decorators.legacy.d.ts\"] = true;\r\nlibFileSet[\"lib.dom.asynciterable.d.ts\"] = true;\r\nlibFileSet[\"lib.dom.d.ts\"] = true;\r\nlibFileSet[\"lib.dom.iterable.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.collection.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.core.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.generator.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.iterable.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.promise.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.proxy.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.reflect.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.symbol.d.ts\"] = true;\r\nlibFileSet[\"lib.es2015.symbol.wellknown.d.ts\"] = true;\r\nlibFileSet[\"lib.es2016.array.include.d.ts\"] = true;\r\nlibFileSet[\"lib.es2016.d.ts\"] = true;\r\nlibFileSet[\"lib.es2016.full.d.ts\"] = true;\r\nlibFileSet[\"lib.es2016.intl.d.ts\"] = true;\r\nlibFileSet[\"lib.es2017.d.ts\"] = true;\r\nlibFileSet[\"lib.es2017.date.d.ts\"] = true;\r\nlibFileSet[\"lib.es2017.full.d.ts\"] = true;\r\nlibFileSet[\"lib.es2017.intl.d.ts\"] = true;\r\nlibFileSet[\"lib.es2017.object.d.ts\"] = true;\r\nlibFileSet[\"lib.es2017.sharedmemory.d.ts\"] = true;\r\nlibFileSet[\"lib.es2017.string.d.ts\"] = true;\r\nlibFileSet[\"lib.es2017.typedarrays.d.ts\"] = true;\r\nlibFileSet[\"lib.es2018.asyncgenerator.d.ts\"] = true;\r\nlibFileSet[\"lib.es2018.asynciterable.d.ts\"] = true;\r\nlibFileSet[\"lib.es2018.d.ts\"] = true;\r\nlibFileSet[\"lib.es2018.full.d.ts\"] = true;\r\nlibFileSet[\"lib.es2018.intl.d.ts\"] = true;\r\nlibFileSet[\"lib.es2018.promise.d.ts\"] = true;\r\nlibFileSet[\"lib.es2018.regexp.d.ts\"] = true;\r\nlibFileSet[\"lib.es2019.array.d.ts\"] = true;\r\nlibFileSet[\"lib.es2019.d.ts\"] = true;\r\nlibFileSet[\"lib.es2019.full.d.ts\"] = true;\r\nlibFileSet[\"lib.es2019.intl.d.ts\"] = true;\r\nlibFileSet[\"lib.es2019.object.d.ts\"] = true;\r\nlibFileSet[\"lib.es2019.string.d.ts\"] = true;\r\nlibFileSet[\"lib.es2019.symbol.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.bigint.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.date.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.full.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.intl.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.number.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.promise.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.sharedmemory.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.string.d.ts\"] = true;\r\nlibFileSet[\"lib.es2020.symbol.wellknown.d.ts\"] = true;\r\nlibFileSet[\"lib.es2021.d.ts\"] = true;\r\nlibFileSet[\"lib.es2021.full.d.ts\"] = true;\r\nlibFileSet[\"lib.es2021.intl.d.ts\"] = true;\r\nlibFileSet[\"lib.es2021.promise.d.ts\"] = true;\r\nlibFileSet[\"lib.es2021.string.d.ts\"] = true;\r\nlibFileSet[\"lib.es2021.weakref.d.ts\"] = true;\r\nlibFileSet[\"lib.es2022.array.d.ts\"] = true;\r\nlibFileSet[\"lib.es2022.d.ts\"] = true;\r\nlibFileSet[\"lib.es2022.error.d.ts\"] = true;\r\nlibFileSet[\"lib.es2022.full.d.ts\"] = true;\r\nlibFileSet[\"lib.es2022.intl.d.ts\"] = true;\r\nlibFileSet[\"lib.es2022.object.d.ts\"] = true;\r\nlibFileSet[\"lib.es2022.regexp.d.ts\"] = true;\r\nlibFileSet[\"lib.es2022.sharedmemory.d.ts\"] = true;\r\nlibFileSet[\"lib.es2022.string.d.ts\"] = true;\r\nlibFileSet[\"lib.es2023.array.d.ts\"] = true;\r\nlibFileSet[\"lib.es2023.collection.d.ts\"] = true;\r\nlibFileSet[\"lib.es2023.d.ts\"] = true;\r\nlibFileSet[\"lib.es2023.full.d.ts\"] = true;\r\nlibFileSet[\"lib.es5.d.ts\"] = true;\r\nlibFileSet[\"lib.es6.d.ts\"] = true;\r\nlibFileSet[\"lib.esnext.collection.d.ts\"] = true;\r\nlibFileSet[\"lib.esnext.d.ts\"] = true;\r\nlibFileSet[\"lib.esnext.decorators.d.ts\"] = true;\r\nlibFileSet[\"lib.esnext.disposable.d.ts\"] = true;\r\nlibFileSet[\"lib.esnext.full.d.ts\"] = true;\r\nlibFileSet[\"lib.esnext.intl.d.ts\"] = true;\r\nlibFileSet[\"lib.esnext.object.d.ts\"] = true;\r\nlibFileSet[\"lib.esnext.promise.d.ts\"] = true;\r\nlibFileSet[\"lib.scripthost.d.ts\"] = true;\r\nlibFileSet[\"lib.webworker.asynciterable.d.ts\"] = true;\r\nlibFileSet[\"lib.webworker.d.ts\"] = true;\r\nlibFileSet[\"lib.webworker.importscripts.d.ts\"] = true;\r\nlibFileSet[\"lib.webworker.iterable.d.ts\"] = true;\r\n\r\n// src/language/typescript/languageFeatures.ts\r\nfunction flattenDiagnosticMessageText(diag, newLine, indent = 0) {\r\n  if (typeof diag === \"string\") {\r\n    return diag;\r\n  } else if (diag === void 0) {\r\n    return \"\";\r\n  }\r\n  let result = \"\";\r\n  if (indent) {\r\n    result += newLine;\r\n    for (let i = 0; i < indent; i++) {\r\n      result += \"  \";\r\n    }\r\n  }\r\n  result += diag.messageText;\r\n  indent++;\r\n  if (diag.next) {\r\n    for (const kid of diag.next) {\r\n      result += flattenDiagnosticMessageText(kid, newLine, indent);\r\n    }\r\n  }\r\n  return result;\r\n}\r\nfunction displayPartsToString(displayParts) {\r\n  if (displayParts) {\r\n    return displayParts.map((displayPart) => displayPart.text).join(\"\");\r\n  }\r\n  return \"\";\r\n}\r\nvar Adapter = class {\r\n  constructor(_worker) {\r\n    this._worker = _worker;\r\n  }\r\n  // protected _positionToOffset(model: editor.ITextModel, position: monaco.IPosition): number {\r\n  // \treturn model.getOffsetAt(position);\r\n  // }\r\n  // protected _offsetToPosition(model: editor.ITextModel, offset: number): monaco.IPosition {\r\n  // \treturn model.getPositionAt(offset);\r\n  // }\r\n  _textSpanToRange(model, span) {\r\n    let p1 = model.getPositionAt(span.start);\r\n    let p2 = model.getPositionAt(span.start + span.length);\r\n    let { lineNumber: startLineNumber, column: startColumn } = p1;\r\n    let { lineNumber: endLineNumber, column: endColumn } = p2;\r\n    return { startLineNumber, startColumn, endLineNumber, endColumn };\r\n  }\r\n};\r\nvar LibFiles = class {\r\n  constructor(_worker) {\r\n    this._worker = _worker;\r\n    this._libFiles = {};\r\n    this._hasFetchedLibFiles = false;\r\n    this._fetchLibFilesPromise = null;\r\n  }\r\n  isLibFile(uri) {\r\n    if (!uri) {\r\n      return false;\r\n    }\r\n    if (uri.path.indexOf(\"/lib.\") === 0) {\r\n      return !!libFileSet[uri.path.slice(1)];\r\n    }\r\n    return false;\r\n  }\r\n  getOrCreateModel(fileName) {\r\n    const uri = monaco_editor_core_exports.Uri.parse(fileName);\r\n    const model = monaco_editor_core_exports.editor.getModel(uri);\r\n    if (model) {\r\n      return model;\r\n    }\r\n    if (this.isLibFile(uri) && this._hasFetchedLibFiles) {\r\n      return monaco_editor_core_exports.editor.createModel(this._libFiles[uri.path.slice(1)], \"typescript\", uri);\r\n    }\r\n    const matchedLibFile = _monaco_contribution_js__WEBPACK_IMPORTED_MODULE_1__.typescriptDefaults.getExtraLibs()[fileName];\r\n    if (matchedLibFile) {\r\n      return monaco_editor_core_exports.editor.createModel(matchedLibFile.content, \"typescript\", uri);\r\n    }\r\n    return null;\r\n  }\r\n  _containsLibFile(uris) {\r\n    for (let uri of uris) {\r\n      if (this.isLibFile(uri)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  async fetchLibFilesIfNecessary(uris) {\r\n    if (!this._containsLibFile(uris)) {\r\n      return;\r\n    }\r\n    await this._fetchLibFiles();\r\n  }\r\n  _fetchLibFiles() {\r\n    if (!this._fetchLibFilesPromise) {\r\n      this._fetchLibFilesPromise = this._worker().then((w) => w.getLibFiles()).then((libFiles) => {\r\n        this._hasFetchedLibFiles = true;\r\n        this._libFiles = libFiles;\r\n      });\r\n    }\r\n    return this._fetchLibFilesPromise;\r\n  }\r\n};\r\nvar DiagnosticsAdapter = class extends Adapter {\r\n  constructor(_libFiles, _defaults, _selector, worker) {\r\n    super(worker);\r\n    this._libFiles = _libFiles;\r\n    this._defaults = _defaults;\r\n    this._selector = _selector;\r\n    this._disposables = [];\r\n    this._listener = /* @__PURE__ */ Object.create(null);\r\n    const onModelAdd = (model) => {\r\n      if (model.getLanguageId() !== _selector) {\r\n        return;\r\n      }\r\n      const maybeValidate = () => {\r\n        const { onlyVisible } = this._defaults.getDiagnosticsOptions();\r\n        if (onlyVisible) {\r\n          if (model.isAttachedToEditor()) {\r\n            this._doValidate(model);\r\n          }\r\n        } else {\r\n          this._doValidate(model);\r\n        }\r\n      };\r\n      let handle;\r\n      const changeSubscription = model.onDidChangeContent(() => {\r\n        clearTimeout(handle);\r\n        handle = window.setTimeout(maybeValidate, 500);\r\n      });\r\n      const visibleSubscription = model.onDidChangeAttached(() => {\r\n        const { onlyVisible } = this._defaults.getDiagnosticsOptions();\r\n        if (onlyVisible) {\r\n          if (model.isAttachedToEditor()) {\r\n            maybeValidate();\r\n          } else {\r\n            monaco_editor_core_exports.editor.setModelMarkers(model, this._selector, []);\r\n          }\r\n        }\r\n      });\r\n      this._listener[model.uri.toString()] = {\r\n        dispose() {\r\n          changeSubscription.dispose();\r\n          visibleSubscription.dispose();\r\n          clearTimeout(handle);\r\n        }\r\n      };\r\n      maybeValidate();\r\n    };\r\n    const onModelRemoved = (model) => {\r\n      monaco_editor_core_exports.editor.setModelMarkers(model, this._selector, []);\r\n      const key = model.uri.toString();\r\n      if (this._listener[key]) {\r\n        this._listener[key].dispose();\r\n        delete this._listener[key];\r\n      }\r\n    };\r\n    this._disposables.push(\r\n      monaco_editor_core_exports.editor.onDidCreateModel((model) => onModelAdd(model))\r\n    );\r\n    this._disposables.push(monaco_editor_core_exports.editor.onWillDisposeModel(onModelRemoved));\r\n    this._disposables.push(\r\n      monaco_editor_core_exports.editor.onDidChangeModelLanguage((event) => {\r\n        onModelRemoved(event.model);\r\n        onModelAdd(event.model);\r\n      })\r\n    );\r\n    this._disposables.push({\r\n      dispose() {\r\n        for (const model of monaco_editor_core_exports.editor.getModels()) {\r\n          onModelRemoved(model);\r\n        }\r\n      }\r\n    });\r\n    const recomputeDiagostics = () => {\r\n      for (const model of monaco_editor_core_exports.editor.getModels()) {\r\n        onModelRemoved(model);\r\n        onModelAdd(model);\r\n      }\r\n    };\r\n    this._disposables.push(this._defaults.onDidChange(recomputeDiagostics));\r\n    this._disposables.push(this._defaults.onDidExtraLibsChange(recomputeDiagostics));\r\n    monaco_editor_core_exports.editor.getModels().forEach((model) => onModelAdd(model));\r\n  }\r\n  dispose() {\r\n    this._disposables.forEach((d) => d && d.dispose());\r\n    this._disposables = [];\r\n  }\r\n  async _doValidate(model) {\r\n    const worker = await this._worker(model.uri);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const promises = [];\r\n    const { noSyntaxValidation, noSemanticValidation, noSuggestionDiagnostics } = this._defaults.getDiagnosticsOptions();\r\n    if (!noSyntaxValidation) {\r\n      promises.push(worker.getSyntacticDiagnostics(model.uri.toString()));\r\n    }\r\n    if (!noSemanticValidation) {\r\n      promises.push(worker.getSemanticDiagnostics(model.uri.toString()));\r\n    }\r\n    if (!noSuggestionDiagnostics) {\r\n      promises.push(worker.getSuggestionDiagnostics(model.uri.toString()));\r\n    }\r\n    const allDiagnostics = await Promise.all(promises);\r\n    if (!allDiagnostics || model.isDisposed()) {\r\n      return;\r\n    }\r\n    const diagnostics = allDiagnostics.reduce((p, c) => c.concat(p), []).filter(\r\n      (d) => (this._defaults.getDiagnosticsOptions().diagnosticCodesToIgnore || []).indexOf(d.code) === -1\r\n    );\r\n    const relatedUris = diagnostics.map((d) => d.relatedInformation || []).reduce((p, c) => c.concat(p), []).map(\r\n      (relatedInformation) => relatedInformation.file ? monaco_editor_core_exports.Uri.parse(relatedInformation.file.fileName) : null\r\n    );\r\n    await this._libFiles.fetchLibFilesIfNecessary(relatedUris);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    monaco_editor_core_exports.editor.setModelMarkers(\r\n      model,\r\n      this._selector,\r\n      diagnostics.map((d) => this._convertDiagnostics(model, d))\r\n    );\r\n  }\r\n  _convertDiagnostics(model, diag) {\r\n    const diagStart = diag.start || 0;\r\n    const diagLength = diag.length || 1;\r\n    const { lineNumber: startLineNumber, column: startColumn } = model.getPositionAt(diagStart);\r\n    const { lineNumber: endLineNumber, column: endColumn } = model.getPositionAt(\r\n      diagStart + diagLength\r\n    );\r\n    const tags = [];\r\n    if (diag.reportsUnnecessary) {\r\n      tags.push(monaco_editor_core_exports.MarkerTag.Unnecessary);\r\n    }\r\n    if (diag.reportsDeprecated) {\r\n      tags.push(monaco_editor_core_exports.MarkerTag.Deprecated);\r\n    }\r\n    return {\r\n      severity: this._tsDiagnosticCategoryToMarkerSeverity(diag.category),\r\n      startLineNumber,\r\n      startColumn,\r\n      endLineNumber,\r\n      endColumn,\r\n      message: flattenDiagnosticMessageText(diag.messageText, \"\\n\"),\r\n      code: diag.code.toString(),\r\n      tags,\r\n      relatedInformation: this._convertRelatedInformation(model, diag.relatedInformation)\r\n    };\r\n  }\r\n  _convertRelatedInformation(model, relatedInformation) {\r\n    if (!relatedInformation) {\r\n      return [];\r\n    }\r\n    const result = [];\r\n    relatedInformation.forEach((info) => {\r\n      let relatedResource = model;\r\n      if (info.file) {\r\n        relatedResource = this._libFiles.getOrCreateModel(info.file.fileName);\r\n      }\r\n      if (!relatedResource) {\r\n        return;\r\n      }\r\n      const infoStart = info.start || 0;\r\n      const infoLength = info.length || 1;\r\n      const { lineNumber: startLineNumber, column: startColumn } = relatedResource.getPositionAt(infoStart);\r\n      const { lineNumber: endLineNumber, column: endColumn } = relatedResource.getPositionAt(\r\n        infoStart + infoLength\r\n      );\r\n      result.push({\r\n        resource: relatedResource.uri,\r\n        startLineNumber,\r\n        startColumn,\r\n        endLineNumber,\r\n        endColumn,\r\n        message: flattenDiagnosticMessageText(info.messageText, \"\\n\")\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n  _tsDiagnosticCategoryToMarkerSeverity(category) {\r\n    switch (category) {\r\n      case 1 /* Error */:\r\n        return monaco_editor_core_exports.MarkerSeverity.Error;\r\n      case 3 /* Message */:\r\n        return monaco_editor_core_exports.MarkerSeverity.Info;\r\n      case 0 /* Warning */:\r\n        return monaco_editor_core_exports.MarkerSeverity.Warning;\r\n      case 2 /* Suggestion */:\r\n        return monaco_editor_core_exports.MarkerSeverity.Hint;\r\n    }\r\n    return monaco_editor_core_exports.MarkerSeverity.Info;\r\n  }\r\n};\r\nvar SuggestAdapter = class _SuggestAdapter extends Adapter {\r\n  get triggerCharacters() {\r\n    return [\".\"];\r\n  }\r\n  async provideCompletionItems(model, position, _context, token) {\r\n    const wordInfo = model.getWordUntilPosition(position);\r\n    const wordRange = new monaco_editor_core_exports.Range(\r\n      position.lineNumber,\r\n      wordInfo.startColumn,\r\n      position.lineNumber,\r\n      wordInfo.endColumn\r\n    );\r\n    const resource = model.uri;\r\n    const offset = model.getOffsetAt(position);\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const info = await worker.getCompletionsAtPosition(resource.toString(), offset);\r\n    if (!info || model.isDisposed()) {\r\n      return;\r\n    }\r\n    const suggestions = info.entries.map((entry) => {\r\n      let range = wordRange;\r\n      if (entry.replacementSpan) {\r\n        const p1 = model.getPositionAt(entry.replacementSpan.start);\r\n        const p2 = model.getPositionAt(entry.replacementSpan.start + entry.replacementSpan.length);\r\n        range = new monaco_editor_core_exports.Range(p1.lineNumber, p1.column, p2.lineNumber, p2.column);\r\n      }\r\n      const tags = [];\r\n      if (entry.kindModifiers !== void 0 && entry.kindModifiers.indexOf(\"deprecated\") !== -1) {\r\n        tags.push(monaco_editor_core_exports.languages.CompletionItemTag.Deprecated);\r\n      }\r\n      return {\r\n        uri: resource,\r\n        position,\r\n        offset,\r\n        range,\r\n        label: entry.name,\r\n        insertText: entry.name,\r\n        sortText: entry.sortText,\r\n        kind: _SuggestAdapter.convertKind(entry.kind),\r\n        tags\r\n      };\r\n    });\r\n    return {\r\n      suggestions\r\n    };\r\n  }\r\n  async resolveCompletionItem(item, token) {\r\n    const myItem = item;\r\n    const resource = myItem.uri;\r\n    const position = myItem.position;\r\n    const offset = myItem.offset;\r\n    const worker = await this._worker(resource);\r\n    const details = await worker.getCompletionEntryDetails(\r\n      resource.toString(),\r\n      offset,\r\n      myItem.label\r\n    );\r\n    if (!details) {\r\n      return myItem;\r\n    }\r\n    return {\r\n      uri: resource,\r\n      position,\r\n      label: details.name,\r\n      kind: _SuggestAdapter.convertKind(details.kind),\r\n      detail: displayPartsToString(details.displayParts),\r\n      documentation: {\r\n        value: _SuggestAdapter.createDocumentationString(details)\r\n      }\r\n    };\r\n  }\r\n  static convertKind(kind) {\r\n    switch (kind) {\r\n      case Kind.primitiveType:\r\n      case Kind.keyword:\r\n        return monaco_editor_core_exports.languages.CompletionItemKind.Keyword;\r\n      case Kind.variable:\r\n      case Kind.localVariable:\r\n        return monaco_editor_core_exports.languages.CompletionItemKind.Variable;\r\n      case Kind.memberVariable:\r\n      case Kind.memberGetAccessor:\r\n      case Kind.memberSetAccessor:\r\n        return monaco_editor_core_exports.languages.CompletionItemKind.Field;\r\n      case Kind.function:\r\n      case Kind.memberFunction:\r\n      case Kind.constructSignature:\r\n      case Kind.callSignature:\r\n      case Kind.indexSignature:\r\n        return monaco_editor_core_exports.languages.CompletionItemKind.Function;\r\n      case Kind.enum:\r\n        return monaco_editor_core_exports.languages.CompletionItemKind.Enum;\r\n      case Kind.module:\r\n        return monaco_editor_core_exports.languages.CompletionItemKind.Module;\r\n      case Kind.class:\r\n        return monaco_editor_core_exports.languages.CompletionItemKind.Class;\r\n      case Kind.interface:\r\n        return monaco_editor_core_exports.languages.CompletionItemKind.Interface;\r\n      case Kind.warning:\r\n        return monaco_editor_core_exports.languages.CompletionItemKind.File;\r\n    }\r\n    return monaco_editor_core_exports.languages.CompletionItemKind.Property;\r\n  }\r\n  static createDocumentationString(details) {\r\n    let documentationString = displayPartsToString(details.documentation);\r\n    if (details.tags) {\r\n      for (const tag of details.tags) {\r\n        documentationString += `\r\n\r\n${tagToString(tag)}`;\r\n      }\r\n    }\r\n    return documentationString;\r\n  }\r\n};\r\nfunction tagToString(tag) {\r\n  let tagLabel = `*@${tag.name}*`;\r\n  if (tag.name === \"param\" && tag.text) {\r\n    const [paramName, ...rest] = tag.text;\r\n    tagLabel += `\\`${paramName.text}\\``;\r\n    if (rest.length > 0)\r\n      tagLabel += ` \\u2014 ${rest.map((r) => r.text).join(\" \")}`;\r\n  } else if (Array.isArray(tag.text)) {\r\n    tagLabel += ` \\u2014 ${tag.text.map((r) => r.text).join(\" \")}`;\r\n  } else if (tag.text) {\r\n    tagLabel += ` \\u2014 ${tag.text}`;\r\n  }\r\n  return tagLabel;\r\n}\r\nvar SignatureHelpAdapter = class _SignatureHelpAdapter extends Adapter {\r\n  constructor() {\r\n    super(...arguments);\r\n    this.signatureHelpTriggerCharacters = [\"(\", \",\"];\r\n  }\r\n  static _toSignatureHelpTriggerReason(context) {\r\n    switch (context.triggerKind) {\r\n      case monaco_editor_core_exports.languages.SignatureHelpTriggerKind.TriggerCharacter:\r\n        if (context.triggerCharacter) {\r\n          if (context.isRetrigger) {\r\n            return { kind: \"retrigger\", triggerCharacter: context.triggerCharacter };\r\n          } else {\r\n            return { kind: \"characterTyped\", triggerCharacter: context.triggerCharacter };\r\n          }\r\n        } else {\r\n          return { kind: \"invoked\" };\r\n        }\r\n      case monaco_editor_core_exports.languages.SignatureHelpTriggerKind.ContentChange:\r\n        return context.isRetrigger ? { kind: \"retrigger\" } : { kind: \"invoked\" };\r\n      case monaco_editor_core_exports.languages.SignatureHelpTriggerKind.Invoke:\r\n      default:\r\n        return { kind: \"invoked\" };\r\n    }\r\n  }\r\n  async provideSignatureHelp(model, position, token, context) {\r\n    const resource = model.uri;\r\n    const offset = model.getOffsetAt(position);\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const info = await worker.getSignatureHelpItems(resource.toString(), offset, {\r\n      triggerReason: _SignatureHelpAdapter._toSignatureHelpTriggerReason(context)\r\n    });\r\n    if (!info || model.isDisposed()) {\r\n      return;\r\n    }\r\n    const ret = {\r\n      activeSignature: info.selectedItemIndex,\r\n      activeParameter: info.argumentIndex,\r\n      signatures: []\r\n    };\r\n    info.items.forEach((item) => {\r\n      const signature = {\r\n        label: \"\",\r\n        parameters: []\r\n      };\r\n      signature.documentation = {\r\n        value: displayPartsToString(item.documentation)\r\n      };\r\n      signature.label += displayPartsToString(item.prefixDisplayParts);\r\n      item.parameters.forEach((p, i, a) => {\r\n        const label = displayPartsToString(p.displayParts);\r\n        const parameter = {\r\n          label,\r\n          documentation: {\r\n            value: displayPartsToString(p.documentation)\r\n          }\r\n        };\r\n        signature.label += label;\r\n        signature.parameters.push(parameter);\r\n        if (i < a.length - 1) {\r\n          signature.label += displayPartsToString(item.separatorDisplayParts);\r\n        }\r\n      });\r\n      signature.label += displayPartsToString(item.suffixDisplayParts);\r\n      ret.signatures.push(signature);\r\n    });\r\n    return {\r\n      value: ret,\r\n      dispose() {\r\n      }\r\n    };\r\n  }\r\n};\r\nvar QuickInfoAdapter = class extends Adapter {\r\n  async provideHover(model, position, token) {\r\n    const resource = model.uri;\r\n    const offset = model.getOffsetAt(position);\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const info = await worker.getQuickInfoAtPosition(resource.toString(), offset);\r\n    if (!info || model.isDisposed()) {\r\n      return;\r\n    }\r\n    const documentation = displayPartsToString(info.documentation);\r\n    const tags = info.tags ? info.tags.map((tag) => tagToString(tag)).join(\"  \\n\\n\") : \"\";\r\n    const contents = displayPartsToString(info.displayParts);\r\n    return {\r\n      range: this._textSpanToRange(model, info.textSpan),\r\n      contents: [\r\n        {\r\n          value: \"```typescript\\n\" + contents + \"\\n```\\n\"\r\n        },\r\n        {\r\n          value: documentation + (tags ? \"\\n\\n\" + tags : \"\")\r\n        }\r\n      ]\r\n    };\r\n  }\r\n};\r\nvar DocumentHighlightAdapter = class extends Adapter {\r\n  async provideDocumentHighlights(model, position, token) {\r\n    const resource = model.uri;\r\n    const offset = model.getOffsetAt(position);\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const entries = await worker.getDocumentHighlights(resource.toString(), offset, [\r\n      resource.toString()\r\n    ]);\r\n    if (!entries || model.isDisposed()) {\r\n      return;\r\n    }\r\n    return entries.flatMap((entry) => {\r\n      return entry.highlightSpans.map((highlightSpans) => {\r\n        return {\r\n          range: this._textSpanToRange(model, highlightSpans.textSpan),\r\n          kind: highlightSpans.kind === \"writtenReference\" ? monaco_editor_core_exports.languages.DocumentHighlightKind.Write : monaco_editor_core_exports.languages.DocumentHighlightKind.Text\r\n        };\r\n      });\r\n    });\r\n  }\r\n};\r\nvar DefinitionAdapter = class extends Adapter {\r\n  constructor(_libFiles, worker) {\r\n    super(worker);\r\n    this._libFiles = _libFiles;\r\n  }\r\n  async provideDefinition(model, position, token) {\r\n    const resource = model.uri;\r\n    const offset = model.getOffsetAt(position);\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const entries = await worker.getDefinitionAtPosition(resource.toString(), offset);\r\n    if (!entries || model.isDisposed()) {\r\n      return;\r\n    }\r\n    await this._libFiles.fetchLibFilesIfNecessary(\r\n      entries.map((entry) => monaco_editor_core_exports.Uri.parse(entry.fileName))\r\n    );\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const result = [];\r\n    for (let entry of entries) {\r\n      const refModel = this._libFiles.getOrCreateModel(entry.fileName);\r\n      if (refModel) {\r\n        result.push({\r\n          uri: refModel.uri,\r\n          range: this._textSpanToRange(refModel, entry.textSpan)\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n};\r\nvar ReferenceAdapter = class extends Adapter {\r\n  constructor(_libFiles, worker) {\r\n    super(worker);\r\n    this._libFiles = _libFiles;\r\n  }\r\n  async provideReferences(model, position, context, token) {\r\n    const resource = model.uri;\r\n    const offset = model.getOffsetAt(position);\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const entries = await worker.getReferencesAtPosition(resource.toString(), offset);\r\n    if (!entries || model.isDisposed()) {\r\n      return;\r\n    }\r\n    await this._libFiles.fetchLibFilesIfNecessary(\r\n      entries.map((entry) => monaco_editor_core_exports.Uri.parse(entry.fileName))\r\n    );\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const result = [];\r\n    for (let entry of entries) {\r\n      const refModel = this._libFiles.getOrCreateModel(entry.fileName);\r\n      if (refModel) {\r\n        result.push({\r\n          uri: refModel.uri,\r\n          range: this._textSpanToRange(refModel, entry.textSpan)\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n};\r\nvar OutlineAdapter = class extends Adapter {\r\n  async provideDocumentSymbols(model, token) {\r\n    const resource = model.uri;\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const root = await worker.getNavigationTree(resource.toString());\r\n    if (!root || model.isDisposed()) {\r\n      return;\r\n    }\r\n    const convert = (item, containerLabel) => {\r\n      const result2 = {\r\n        name: item.text,\r\n        detail: \"\",\r\n        kind: outlineTypeTable[item.kind] || monaco_editor_core_exports.languages.SymbolKind.Variable,\r\n        range: this._textSpanToRange(model, item.spans[0]),\r\n        selectionRange: this._textSpanToRange(model, item.spans[0]),\r\n        tags: [],\r\n        children: item.childItems?.map((child) => convert(child, item.text)),\r\n        containerName: containerLabel\r\n      };\r\n      return result2;\r\n    };\r\n    const result = root.childItems ? root.childItems.map((item) => convert(item)) : [];\r\n    return result;\r\n  }\r\n};\r\nvar Kind = class {\r\n  static {\r\n    this.unknown = \"\";\r\n  }\r\n  static {\r\n    this.keyword = \"keyword\";\r\n  }\r\n  static {\r\n    this.script = \"script\";\r\n  }\r\n  static {\r\n    this.module = \"module\";\r\n  }\r\n  static {\r\n    this.class = \"class\";\r\n  }\r\n  static {\r\n    this.interface = \"interface\";\r\n  }\r\n  static {\r\n    this.type = \"type\";\r\n  }\r\n  static {\r\n    this.enum = \"enum\";\r\n  }\r\n  static {\r\n    this.variable = \"var\";\r\n  }\r\n  static {\r\n    this.localVariable = \"local var\";\r\n  }\r\n  static {\r\n    this.function = \"function\";\r\n  }\r\n  static {\r\n    this.localFunction = \"local function\";\r\n  }\r\n  static {\r\n    this.memberFunction = \"method\";\r\n  }\r\n  static {\r\n    this.memberGetAccessor = \"getter\";\r\n  }\r\n  static {\r\n    this.memberSetAccessor = \"setter\";\r\n  }\r\n  static {\r\n    this.memberVariable = \"property\";\r\n  }\r\n  static {\r\n    this.constructorImplementation = \"constructor\";\r\n  }\r\n  static {\r\n    this.callSignature = \"call\";\r\n  }\r\n  static {\r\n    this.indexSignature = \"index\";\r\n  }\r\n  static {\r\n    this.constructSignature = \"construct\";\r\n  }\r\n  static {\r\n    this.parameter = \"parameter\";\r\n  }\r\n  static {\r\n    this.typeParameter = \"type parameter\";\r\n  }\r\n  static {\r\n    this.primitiveType = \"primitive type\";\r\n  }\r\n  static {\r\n    this.label = \"label\";\r\n  }\r\n  static {\r\n    this.alias = \"alias\";\r\n  }\r\n  static {\r\n    this.const = \"const\";\r\n  }\r\n  static {\r\n    this.let = \"let\";\r\n  }\r\n  static {\r\n    this.warning = \"warning\";\r\n  }\r\n};\r\nvar outlineTypeTable = /* @__PURE__ */ Object.create(null);\r\noutlineTypeTable[Kind.module] = monaco_editor_core_exports.languages.SymbolKind.Module;\r\noutlineTypeTable[Kind.class] = monaco_editor_core_exports.languages.SymbolKind.Class;\r\noutlineTypeTable[Kind.enum] = monaco_editor_core_exports.languages.SymbolKind.Enum;\r\noutlineTypeTable[Kind.interface] = monaco_editor_core_exports.languages.SymbolKind.Interface;\r\noutlineTypeTable[Kind.memberFunction] = monaco_editor_core_exports.languages.SymbolKind.Method;\r\noutlineTypeTable[Kind.memberVariable] = monaco_editor_core_exports.languages.SymbolKind.Property;\r\noutlineTypeTable[Kind.memberGetAccessor] = monaco_editor_core_exports.languages.SymbolKind.Property;\r\noutlineTypeTable[Kind.memberSetAccessor] = monaco_editor_core_exports.languages.SymbolKind.Property;\r\noutlineTypeTable[Kind.variable] = monaco_editor_core_exports.languages.SymbolKind.Variable;\r\noutlineTypeTable[Kind.const] = monaco_editor_core_exports.languages.SymbolKind.Variable;\r\noutlineTypeTable[Kind.localVariable] = monaco_editor_core_exports.languages.SymbolKind.Variable;\r\noutlineTypeTable[Kind.variable] = monaco_editor_core_exports.languages.SymbolKind.Variable;\r\noutlineTypeTable[Kind.function] = monaco_editor_core_exports.languages.SymbolKind.Function;\r\noutlineTypeTable[Kind.localFunction] = monaco_editor_core_exports.languages.SymbolKind.Function;\r\nvar FormatHelper = class extends Adapter {\r\n  static _convertOptions(options) {\r\n    return {\r\n      ConvertTabsToSpaces: options.insertSpaces,\r\n      TabSize: options.tabSize,\r\n      IndentSize: options.tabSize,\r\n      IndentStyle: 2 /* Smart */,\r\n      NewLineCharacter: \"\\n\",\r\n      InsertSpaceAfterCommaDelimiter: true,\r\n      InsertSpaceAfterSemicolonInForStatements: true,\r\n      InsertSpaceBeforeAndAfterBinaryOperators: true,\r\n      InsertSpaceAfterKeywordsInControlFlowStatements: true,\r\n      InsertSpaceAfterFunctionKeywordForAnonymousFunctions: true,\r\n      InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\r\n      InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\r\n      InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,\r\n      PlaceOpenBraceOnNewLineForControlBlocks: false,\r\n      PlaceOpenBraceOnNewLineForFunctions: false\r\n    };\r\n  }\r\n  _convertTextChanges(model, change) {\r\n    return {\r\n      text: change.newText,\r\n      range: this._textSpanToRange(model, change.span)\r\n    };\r\n  }\r\n};\r\nvar FormatAdapter = class extends FormatHelper {\r\n  constructor() {\r\n    super(...arguments);\r\n    this.canFormatMultipleRanges = false;\r\n  }\r\n  async provideDocumentRangeFormattingEdits(model, range, options, token) {\r\n    const resource = model.uri;\r\n    const startOffset = model.getOffsetAt({\r\n      lineNumber: range.startLineNumber,\r\n      column: range.startColumn\r\n    });\r\n    const endOffset = model.getOffsetAt({\r\n      lineNumber: range.endLineNumber,\r\n      column: range.endColumn\r\n    });\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const edits = await worker.getFormattingEditsForRange(\r\n      resource.toString(),\r\n      startOffset,\r\n      endOffset,\r\n      FormatHelper._convertOptions(options)\r\n    );\r\n    if (!edits || model.isDisposed()) {\r\n      return;\r\n    }\r\n    return edits.map((edit) => this._convertTextChanges(model, edit));\r\n  }\r\n};\r\nvar FormatOnTypeAdapter = class extends FormatHelper {\r\n  get autoFormatTriggerCharacters() {\r\n    return [\";\", \"}\", \"\\n\"];\r\n  }\r\n  async provideOnTypeFormattingEdits(model, position, ch, options, token) {\r\n    const resource = model.uri;\r\n    const offset = model.getOffsetAt(position);\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const edits = await worker.getFormattingEditsAfterKeystroke(\r\n      resource.toString(),\r\n      offset,\r\n      ch,\r\n      FormatHelper._convertOptions(options)\r\n    );\r\n    if (!edits || model.isDisposed()) {\r\n      return;\r\n    }\r\n    return edits.map((edit) => this._convertTextChanges(model, edit));\r\n  }\r\n};\r\nvar CodeActionAdaptor = class extends FormatHelper {\r\n  async provideCodeActions(model, range, context, token) {\r\n    const resource = model.uri;\r\n    const start = model.getOffsetAt({\r\n      lineNumber: range.startLineNumber,\r\n      column: range.startColumn\r\n    });\r\n    const end = model.getOffsetAt({\r\n      lineNumber: range.endLineNumber,\r\n      column: range.endColumn\r\n    });\r\n    const formatOptions = FormatHelper._convertOptions(model.getOptions());\r\n    const errorCodes = context.markers.filter((m) => m.code).map((m) => m.code).map(Number);\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const codeFixes = await worker.getCodeFixesAtPosition(\r\n      resource.toString(),\r\n      start,\r\n      end,\r\n      errorCodes,\r\n      formatOptions\r\n    );\r\n    if (!codeFixes || model.isDisposed()) {\r\n      return { actions: [], dispose: () => {\r\n      } };\r\n    }\r\n    const actions = codeFixes.filter((fix) => {\r\n      return fix.changes.filter((change) => change.isNewFile).length === 0;\r\n    }).map((fix) => {\r\n      return this._tsCodeFixActionToMonacoCodeAction(model, context, fix);\r\n    });\r\n    return {\r\n      actions,\r\n      dispose: () => {\r\n      }\r\n    };\r\n  }\r\n  _tsCodeFixActionToMonacoCodeAction(model, context, codeFix) {\r\n    const edits = [];\r\n    for (const change of codeFix.changes) {\r\n      for (const textChange of change.textChanges) {\r\n        edits.push({\r\n          resource: model.uri,\r\n          versionId: void 0,\r\n          textEdit: {\r\n            range: this._textSpanToRange(model, textChange.span),\r\n            text: textChange.newText\r\n          }\r\n        });\r\n      }\r\n    }\r\n    const action = {\r\n      title: codeFix.description,\r\n      edit: { edits },\r\n      diagnostics: context.markers,\r\n      kind: \"quickfix\"\r\n    };\r\n    return action;\r\n  }\r\n};\r\nvar RenameAdapter = class extends Adapter {\r\n  constructor(_libFiles, worker) {\r\n    super(worker);\r\n    this._libFiles = _libFiles;\r\n  }\r\n  async provideRenameEdits(model, position, newName, token) {\r\n    const resource = model.uri;\r\n    const fileName = resource.toString();\r\n    const offset = model.getOffsetAt(position);\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return;\r\n    }\r\n    const renameInfo = await worker.getRenameInfo(fileName, offset, {\r\n      allowRenameOfImportPath: false\r\n    });\r\n    if (renameInfo.canRename === false) {\r\n      return {\r\n        edits: [],\r\n        rejectReason: renameInfo.localizedErrorMessage\r\n      };\r\n    }\r\n    if (renameInfo.fileToRename !== void 0) {\r\n      throw new Error(\"Renaming files is not supported.\");\r\n    }\r\n    const renameLocations = await worker.findRenameLocations(\r\n      fileName,\r\n      offset,\r\n      /*strings*/\r\n      false,\r\n      /*comments*/\r\n      false,\r\n      /*prefixAndSuffix*/\r\n      false\r\n    );\r\n    if (!renameLocations || model.isDisposed()) {\r\n      return;\r\n    }\r\n    const edits = [];\r\n    for (const renameLocation of renameLocations) {\r\n      const model2 = this._libFiles.getOrCreateModel(renameLocation.fileName);\r\n      if (model2) {\r\n        edits.push({\r\n          resource: model2.uri,\r\n          versionId: void 0,\r\n          textEdit: {\r\n            range: this._textSpanToRange(model2, renameLocation.textSpan),\r\n            text: newName\r\n          }\r\n        });\r\n      } else {\r\n        throw new Error(`Unknown file ${renameLocation.fileName}.`);\r\n      }\r\n    }\r\n    return { edits };\r\n  }\r\n};\r\nvar InlayHintsAdapter = class extends Adapter {\r\n  async provideInlayHints(model, range, token) {\r\n    const resource = model.uri;\r\n    const fileName = resource.toString();\r\n    const start = model.getOffsetAt({\r\n      lineNumber: range.startLineNumber,\r\n      column: range.startColumn\r\n    });\r\n    const end = model.getOffsetAt({\r\n      lineNumber: range.endLineNumber,\r\n      column: range.endColumn\r\n    });\r\n    const worker = await this._worker(resource);\r\n    if (model.isDisposed()) {\r\n      return null;\r\n    }\r\n    const tsHints = await worker.provideInlayHints(fileName, start, end);\r\n    const hints = tsHints.map((hint) => {\r\n      return {\r\n        ...hint,\r\n        label: hint.text,\r\n        position: model.getPositionAt(hint.position),\r\n        kind: this._convertHintKind(hint.kind)\r\n      };\r\n    });\r\n    return { hints, dispose: () => {\r\n    } };\r\n  }\r\n  _convertHintKind(kind) {\r\n    switch (kind) {\r\n      case \"Parameter\":\r\n        return monaco_editor_core_exports.languages.InlayHintKind.Parameter;\r\n      case \"Type\":\r\n        return monaco_editor_core_exports.languages.InlayHintKind.Type;\r\n      default:\r\n        return monaco_editor_core_exports.languages.InlayHintKind.Type;\r\n    }\r\n  }\r\n};\r\n\r\n// src/language/typescript/tsMode.ts\r\nvar javaScriptWorker;\r\nvar typeScriptWorker;\r\nfunction setupTypeScript(defaults) {\r\n  typeScriptWorker = setupMode(defaults, \"typescript\");\r\n}\r\nfunction setupJavaScript(defaults) {\r\n  javaScriptWorker = setupMode(defaults, \"javascript\");\r\n}\r\nfunction getJavaScriptWorker() {\r\n  return new Promise((resolve, reject) => {\r\n    if (!javaScriptWorker) {\r\n      return reject(\"JavaScript not registered!\");\r\n    }\r\n    resolve(javaScriptWorker);\r\n  });\r\n}\r\nfunction getTypeScriptWorker() {\r\n  return new Promise((resolve, reject) => {\r\n    if (!typeScriptWorker) {\r\n      return reject(\"TypeScript not registered!\");\r\n    }\r\n    resolve(typeScriptWorker);\r\n  });\r\n}\r\nfunction setupMode(defaults, modeId) {\r\n  const disposables = [];\r\n  const providers = [];\r\n  const client = new WorkerManager(modeId, defaults);\r\n  disposables.push(client);\r\n  const worker = (...uris) => {\r\n    return client.getLanguageServiceWorker(...uris);\r\n  };\r\n  const libFiles = new LibFiles(worker);\r\n  function registerProviders() {\r\n    const { modeConfiguration } = defaults;\r\n    disposeAll(providers);\r\n    if (modeConfiguration.completionItems) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerCompletionItemProvider(\r\n          modeId,\r\n          new SuggestAdapter(worker)\r\n        )\r\n      );\r\n    }\r\n    if (modeConfiguration.signatureHelp) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerSignatureHelpProvider(\r\n          modeId,\r\n          new SignatureHelpAdapter(worker)\r\n        )\r\n      );\r\n    }\r\n    if (modeConfiguration.hovers) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerHoverProvider(modeId, new QuickInfoAdapter(worker))\r\n      );\r\n    }\r\n    if (modeConfiguration.documentHighlights) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerDocumentHighlightProvider(\r\n          modeId,\r\n          new DocumentHighlightAdapter(worker)\r\n        )\r\n      );\r\n    }\r\n    if (modeConfiguration.definitions) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerDefinitionProvider(\r\n          modeId,\r\n          new DefinitionAdapter(libFiles, worker)\r\n        )\r\n      );\r\n    }\r\n    if (modeConfiguration.references) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerReferenceProvider(\r\n          modeId,\r\n          new ReferenceAdapter(libFiles, worker)\r\n        )\r\n      );\r\n    }\r\n    if (modeConfiguration.documentSymbols) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerDocumentSymbolProvider(\r\n          modeId,\r\n          new OutlineAdapter(worker)\r\n        )\r\n      );\r\n    }\r\n    if (modeConfiguration.rename) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerRenameProvider(\r\n          modeId,\r\n          new RenameAdapter(libFiles, worker)\r\n        )\r\n      );\r\n    }\r\n    if (modeConfiguration.documentRangeFormattingEdits) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerDocumentRangeFormattingEditProvider(\r\n          modeId,\r\n          new FormatAdapter(worker)\r\n        )\r\n      );\r\n    }\r\n    if (modeConfiguration.onTypeFormattingEdits) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerOnTypeFormattingEditProvider(\r\n          modeId,\r\n          new FormatOnTypeAdapter(worker)\r\n        )\r\n      );\r\n    }\r\n    if (modeConfiguration.codeActions) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerCodeActionProvider(modeId, new CodeActionAdaptor(worker))\r\n      );\r\n    }\r\n    if (modeConfiguration.inlayHints) {\r\n      providers.push(\r\n        monaco_editor_core_exports.languages.registerInlayHintsProvider(modeId, new InlayHintsAdapter(worker))\r\n      );\r\n    }\r\n    if (modeConfiguration.diagnostics) {\r\n      providers.push(new DiagnosticsAdapter(libFiles, defaults, modeId, worker));\r\n    }\r\n  }\r\n  registerProviders();\r\n  disposables.push(asDisposable(providers));\r\n  return worker;\r\n}\r\nfunction asDisposable(disposables) {\r\n  return { dispose: () => disposeAll(disposables) };\r\n}\r\nfunction disposeAll(disposables) {\r\n  while (disposables.length) {\r\n    disposables.pop().dispose();\r\n  }\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/language/typescript/tsMode.js\n");

/***/ })

}]);