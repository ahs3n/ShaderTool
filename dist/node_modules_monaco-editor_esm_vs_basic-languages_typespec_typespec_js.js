"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_typespec_typespec_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/typespec/typespec.js":
/*!********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/typespec/typespec.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conf: () => (/* binding */ conf),\n/* harmony export */   language: () => (/* binding */ language)\n/* harmony export */ });\n/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/basic-languages/typespec/typespec.ts\r\nvar bounded = (text) => `\\\\b${text}\\\\b`;\r\nvar notBefore = (regex) => `(?!${regex})`;\r\nvar identifierStart = \"[_a-zA-Z]\";\r\nvar identifierContinue = \"[_a-zA-Z0-9]\";\r\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\r\nvar directive = bounded(`[_a-zA-Z-0-9]+`);\r\nvar keywords = [\r\n  \"import\",\r\n  \"model\",\r\n  \"scalar\",\r\n  \"namespace\",\r\n  \"op\",\r\n  \"interface\",\r\n  \"union\",\r\n  \"using\",\r\n  \"is\",\r\n  \"extends\",\r\n  \"enum\",\r\n  \"alias\",\r\n  \"return\",\r\n  \"void\",\r\n  \"if\",\r\n  \"else\",\r\n  \"projection\",\r\n  \"dec\",\r\n  \"extern\",\r\n  \"fn\"\r\n];\r\nvar namedLiterals = [\"true\", \"false\", \"null\", \"unknown\", \"never\"];\r\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\r\nvar numericLiteral = `[0-9]+`;\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"/**\", close: \" */\", notIn: [\"string\"] }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' }\r\n  ],\r\n  indentationRules: {\r\n    decreaseIndentPattern: new RegExp(\"^((?!.*?/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\"),\r\n    increaseIndentPattern: new RegExp(\r\n      \"^((?!//).)*(\\\\{([^}\\\"'`/]*|(\\\\t|[ ])*//.*)|\\\\([^)\\\"'`/]*|\\\\[[^\\\\]\\\"'`/]*)$\"\r\n    ),\r\n    // e.g.  * ...| or */| or *-----*/|\r\n    unIndentedLinePattern: new RegExp(\r\n      \"^(\\\\t|[ ])*[ ]\\\\*[^/]*\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*/\\\\s*$|^(\\\\t|[ ])*[ ]\\\\*([ ]([^\\\\*]|\\\\*(?!/))*)?$\"\r\n    )\r\n  }\r\n};\r\nvar language = {\r\n  defaultToken: \"\",\r\n  tokenPostfix: \".tsp\",\r\n  brackets: [\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\r\n  ],\r\n  symbols: /[=:;<>]+/,\r\n  keywords,\r\n  namedLiterals,\r\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|\"|\\\\\\${)`,\r\n  tokenizer: {\r\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\r\n    stringVerbatim: [\r\n      { regex: `(|\"|\"\")[^\"]`, action: { token: \"string\" } },\r\n      { regex: `\"\"\"${notBefore(`\"`)}`, action: { token: \"string\", next: \"@pop\" } }\r\n    ],\r\n    stringLiteral: [\r\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\r\n      { regex: `[^\\\\\\\\\"$]+`, action: { token: \"string\" } },\r\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\r\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\r\n      { regex: `\"`, action: { token: \"string\", next: \"@pop\" } }\r\n    ],\r\n    bracketCounting: [\r\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\r\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\r\n      { include: \"@expression\" }\r\n    ],\r\n    comment: [\r\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\r\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\r\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\r\n    ],\r\n    whitespace: [\r\n      { regex: nonCommentWs },\r\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\r\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\r\n    ],\r\n    expression: [\r\n      { regex: `\"\"\"`, action: { token: \"string\", next: \"@stringVerbatim\" } },\r\n      { regex: `\"${notBefore(`\"\"`)}`, action: { token: \"string\", next: \"@stringLiteral\" } },\r\n      { regex: numericLiteral, action: { token: \"number\" } },\r\n      {\r\n        regex: identifier,\r\n        action: {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword\" },\r\n            \"@namedLiterals\": { token: \"keyword\" },\r\n            \"@default\": { token: \"identifier\" }\r\n          }\r\n        }\r\n      },\r\n      { regex: `@${identifier}`, action: { token: \"tag\" } },\r\n      { regex: `#${directive}`, action: { token: \"directive\" } }\r\n    ]\r\n  }\r\n};\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/typespec/typespec.js\n");

/***/ })

}]);