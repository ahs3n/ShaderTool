"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_basic-languages_scala_scala_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/scala/scala.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/scala/scala.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conf: () => (/* binding */ conf),\n/* harmony export */   language: () => (/* binding */ language)\n/* harmony export */ });\n/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/basic-languages/scala/scala.ts\r\nvar conf = {\r\n  /*\r\n   * `...` is allowed as an identifier.\r\n   * $ is allowed in identifiers.\r\n   * unary_<op> is allowed as an identifier.\r\n   * <name>_= is allowed as an identifier.\r\n   */\r\n  wordPattern: /(unary_[@~!#%^&*()\\-=+\\\\|:<>\\/?]+)|([a-zA-Z_$][\\w$]*?_=)|(`[^`]+`)|([a-zA-Z_$][\\w$]*)/g,\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" },\r\n    { open: '\"', close: '\"' },\r\n    { open: \"'\", close: \"'\" }\r\n  ],\r\n  folding: {\r\n    markers: {\r\n      start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\r\n      end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\r\n    }\r\n  }\r\n};\r\nvar language = {\r\n  tokenPostfix: \".scala\",\r\n  // We can't easily add everything from Dotty, but we can at least add some of its keywords\r\n  keywords: [\r\n    \"asInstanceOf\",\r\n    \"catch\",\r\n    \"class\",\r\n    \"classOf\",\r\n    \"def\",\r\n    \"do\",\r\n    \"else\",\r\n    \"extends\",\r\n    \"finally\",\r\n    \"for\",\r\n    \"foreach\",\r\n    \"forSome\",\r\n    \"if\",\r\n    \"import\",\r\n    \"isInstanceOf\",\r\n    \"macro\",\r\n    \"match\",\r\n    \"new\",\r\n    \"object\",\r\n    \"package\",\r\n    \"return\",\r\n    \"throw\",\r\n    \"trait\",\r\n    \"try\",\r\n    \"type\",\r\n    \"until\",\r\n    \"val\",\r\n    \"var\",\r\n    \"while\",\r\n    \"with\",\r\n    \"yield\",\r\n    // Dotty-specific:\r\n    \"given\",\r\n    \"enum\",\r\n    \"then\"\r\n  ],\r\n  // Dotty-specific:\r\n  softKeywords: [\"as\", \"export\", \"extension\", \"end\", \"derives\", \"on\"],\r\n  constants: [\"true\", \"false\", \"null\", \"this\", \"super\"],\r\n  modifiers: [\r\n    \"abstract\",\r\n    \"final\",\r\n    \"implicit\",\r\n    \"lazy\",\r\n    \"override\",\r\n    \"private\",\r\n    \"protected\",\r\n    \"sealed\"\r\n  ],\r\n  // Dotty-specific:\r\n  softModifiers: [\"inline\", \"opaque\", \"open\", \"transparent\", \"using\"],\r\n  name: /(?:[a-z_$][\\w$]*|`[^`]+`)/,\r\n  type: /(?:[A-Z][\\w$]*)/,\r\n  // we include these common regular expressions\r\n  symbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/,\r\n  digits: /\\d+(_+\\d+)*/,\r\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n  // C# style strings\r\n  escapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n  fstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/,\r\n  // The main tokenizer for our languages\r\n  tokenizer: {\r\n    root: [\r\n      // strings\r\n      [/\\braw\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@rawstringt\" }],\r\n      [/\\braw\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@rawstring\" }],\r\n      [/\\bs\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@sstringt\" }],\r\n      [/\\bs\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@sstring\" }],\r\n      [/\\bf\"\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@fstringt\" }],\r\n      [/\\bf\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@fstring\" }],\r\n      [/\"\"\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@stringt\" }],\r\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\r\n      // numbers\r\n      [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, \"number.float\", \"@allowMethod\"],\r\n      [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, \"number.float\", \"@allowMethod\"],\r\n      [/0[xX](@hexdigits)[Ll]?/, \"number.hex\", \"@allowMethod\"],\r\n      [/(@digits)[fFdD]/, \"number.float\", \"@allowMethod\"],\r\n      [/(@digits)[lL]?/, \"number\", \"@allowMethod\"],\r\n      [/\\b_\\*/, \"key\"],\r\n      [/\\b(_)\\b/, \"keyword\", \"@allowMethod\"],\r\n      // identifiers and keywords\r\n      [/\\bimport\\b/, \"keyword\", \"@import\"],\r\n      [/\\b(case)([ \\t]+)(class)\\b/, [\"keyword.modifier\", \"white\", \"keyword\"]],\r\n      [/\\bcase\\b/, \"keyword\", \"@case\"],\r\n      [/\\bva[lr]\\b/, \"keyword\", \"@vardef\"],\r\n      [\r\n        /\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/,\r\n        [\"keyword\", \"white\", \"identifier\"]\r\n      ],\r\n      [/@name(?=[ \\t]*:(?!:))/, \"variable\"],\r\n      [/(\\.)(@name|@symbols)/, [\"operator\", { token: \"@rematch\", next: \"@allowMethod\" }]],\r\n      [/([{(])(\\s*)(@name(?=\\s*=>))/, [\"@brackets\", \"white\", \"variable\"]],\r\n      [\r\n        /@name/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": \"keyword\",\r\n            \"@softKeywords\": \"keyword\",\r\n            \"@modifiers\": \"keyword.modifier\",\r\n            \"@softModifiers\": \"keyword.modifier\",\r\n            \"@constants\": {\r\n              token: \"constant\",\r\n              next: \"@allowMethod\"\r\n            },\r\n            \"@default\": {\r\n              token: \"identifier\",\r\n              next: \"@allowMethod\"\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      [/@type/, \"type\", \"@allowMethod\"],\r\n      // whitespace\r\n      { include: \"@whitespace\" },\r\n      // @ annotations.\r\n      [/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, \"annotation\"],\r\n      // delimiters and operators\r\n      [/[{(]/, \"@brackets\"],\r\n      [/[})]/, \"@brackets\", \"@allowMethod\"],\r\n      [/\\[/, \"operator.square\"],\r\n      [/](?!\\s*(?:va[rl]|def|type)\\b)/, \"operator.square\", \"@allowMethod\"],\r\n      [/]/, \"operator.square\"],\r\n      [/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, \"keyword\"],\r\n      [/@symbols/, \"operator\"],\r\n      // delimiter: after number because of .\\d floats\r\n      [/[;,\\.]/, \"delimiter\"],\r\n      // symbols\r\n      [/'[a-zA-Z$][\\w$]*(?!')/, \"attribute.name\"],\r\n      // characters\r\n      [/'[^\\\\']'/, \"string\", \"@allowMethod\"],\r\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", { token: \"string\", next: \"@allowMethod\" }]],\r\n      [/'/, \"string.invalid\"]\r\n    ],\r\n    import: [\r\n      [/;/, \"delimiter\", \"@pop\"],\r\n      [/^|$/, \"\", \"@pop\"],\r\n      [/[ \\t]+/, \"white\"],\r\n      [/[\\n\\r]+/, \"white\", \"@pop\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/@name|@type/, \"type\"],\r\n      [/[(){}]/, \"@brackets\"],\r\n      [/[[\\]]/, \"operator.square\"],\r\n      [/[\\.,]/, \"delimiter\"]\r\n    ],\r\n    allowMethod: [\r\n      [/^|$/, \"\", \"@pop\"],\r\n      [/[ \\t]+/, \"white\"],\r\n      [/[\\n\\r]+/, \"white\", \"@pop\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/(?==>[\\s\\w([{])/, \"keyword\", \"@pop\"],\r\n      [\r\n        /(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/,\r\n        {\r\n          cases: {\r\n            \"@keywords\": { token: \"keyword\", next: \"@pop\" },\r\n            \"->|<-|>:|<:|<%\": { token: \"keyword\", next: \"@pop\" },\r\n            \"@default\": { token: \"@rematch\", next: \"@pop\" }\r\n          }\r\n        }\r\n      ],\r\n      [\"\", \"\", \"@pop\"]\r\n    ],\r\n    comment: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      [/\\/\\*/, \"comment\", \"@push\"],\r\n      // nested comment\r\n      [/\\*\\//, \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    case: [\r\n      [/\\b_\\*/, \"key\"],\r\n      [/\\b(_|true|false|null|this|super)\\b/, \"keyword\", \"@allowMethod\"],\r\n      [/\\bif\\b|=>/, \"keyword\", \"@pop\"],\r\n      [/`[^`]+`/, \"identifier\", \"@allowMethod\"],\r\n      [/@name/, \"variable\", \"@allowMethod\"],\r\n      [/:::?|\\||@(?![a-z_$])/, \"keyword\"],\r\n      { include: \"@root\" }\r\n    ],\r\n    vardef: [\r\n      [/\\b_\\*/, \"key\"],\r\n      [/\\b(_|true|false|null|this|super)\\b/, \"keyword\"],\r\n      [/@name/, \"variable\"],\r\n      [/:::?|\\||@(?![a-z_$])/, \"keyword\"],\r\n      [/=|:(?!:)/, \"operator\", \"@pop\"],\r\n      [/$/, \"white\", \"@pop\"],\r\n      { include: \"@root\" }\r\n    ],\r\n    string: [\r\n      [/[^\\\\\"\\n\\r]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [\r\n        /\"/,\r\n        {\r\n          token: \"string.quote\",\r\n          bracket: \"@close\",\r\n          switchTo: \"@allowMethod\"\r\n        }\r\n      ]\r\n    ],\r\n    stringt: [\r\n      [/[^\\\\\"\\n\\r]+/, \"string\"],\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\\\\./, \"string.escape.invalid\"],\r\n      [/\"(?=\"\"\")/, \"string\"],\r\n      [\r\n        /\"\"\"/,\r\n        {\r\n          token: \"string.quote\",\r\n          bracket: \"@close\",\r\n          switchTo: \"@allowMethod\"\r\n        }\r\n      ],\r\n      [/\"/, \"string\"]\r\n    ],\r\n    fstring: [\r\n      [/@escapes/, \"string.escape\"],\r\n      [\r\n        /\"/,\r\n        {\r\n          token: \"string.quote\",\r\n          bracket: \"@close\",\r\n          switchTo: \"@allowMethod\"\r\n        }\r\n      ],\r\n      [/\\$\\$/, \"string\"],\r\n      [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]],\r\n      [/\\$\\{/, \"operator\", \"@interp\"],\r\n      [/%%/, \"string\"],\r\n      [\r\n        /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\r\n        [\"metatag\", \"keyword.modifier\", \"number\", \"metatag\"]\r\n      ],\r\n      [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"number\", \"metatag\"]],\r\n      [/(%)([\\-#+ 0,(])(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"metatag\"]],\r\n      [/(%)(@fstring_conv)/, [\"metatag\", \"metatag\"]],\r\n      [/./, \"string\"]\r\n    ],\r\n    fstringt: [\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\"(?=\"\"\")/, \"string\"],\r\n      [\r\n        /\"\"\"/,\r\n        {\r\n          token: \"string.quote\",\r\n          bracket: \"@close\",\r\n          switchTo: \"@allowMethod\"\r\n        }\r\n      ],\r\n      [/\\$\\$/, \"string\"],\r\n      [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]],\r\n      [/\\$\\{/, \"operator\", \"@interp\"],\r\n      [/%%/, \"string\"],\r\n      [\r\n        /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\r\n        [\"metatag\", \"keyword.modifier\", \"number\", \"metatag\"]\r\n      ],\r\n      [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, [\"metatag\", \"number\", \"metatag\"]],\r\n      [/(%)([\\-#+ 0,(])(@fstring_conv)/, [\"metatag\", \"keyword.modifier\", \"metatag\"]],\r\n      [/(%)(@fstring_conv)/, [\"metatag\", \"metatag\"]],\r\n      [/./, \"string\"]\r\n    ],\r\n    sstring: [\r\n      [/@escapes/, \"string.escape\"],\r\n      [\r\n        /\"/,\r\n        {\r\n          token: \"string.quote\",\r\n          bracket: \"@close\",\r\n          switchTo: \"@allowMethod\"\r\n        }\r\n      ],\r\n      [/\\$\\$/, \"string\"],\r\n      [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]],\r\n      [/\\$\\{/, \"operator\", \"@interp\"],\r\n      [/./, \"string\"]\r\n    ],\r\n    sstringt: [\r\n      [/@escapes/, \"string.escape\"],\r\n      [/\"(?=\"\"\")/, \"string\"],\r\n      [\r\n        /\"\"\"/,\r\n        {\r\n          token: \"string.quote\",\r\n          bracket: \"@close\",\r\n          switchTo: \"@allowMethod\"\r\n        }\r\n      ],\r\n      [/\\$\\$/, \"string\"],\r\n      [/(\\$)([a-z_]\\w*)/, [\"operator\", \"identifier\"]],\r\n      [/\\$\\{/, \"operator\", \"@interp\"],\r\n      [/./, \"string\"]\r\n    ],\r\n    interp: [[/{/, \"operator\", \"@push\"], [/}/, \"operator\", \"@pop\"], { include: \"@root\" }],\r\n    rawstring: [\r\n      [/[^\"]/, \"string\"],\r\n      [\r\n        /\"/,\r\n        {\r\n          token: \"string.quote\",\r\n          bracket: \"@close\",\r\n          switchTo: \"@allowMethod\"\r\n        }\r\n      ]\r\n    ],\r\n    rawstringt: [\r\n      [/[^\"]/, \"string\"],\r\n      [/\"(?=\"\"\")/, \"string\"],\r\n      [\r\n        /\"\"\"/,\r\n        {\r\n          token: \"string.quote\",\r\n          bracket: \"@close\",\r\n          switchTo: \"@allowMethod\"\r\n        }\r\n      ],\r\n      [/\"/, \"string\"]\r\n    ],\r\n    whitespace: [\r\n      [/[ \\t\\r\\n]+/, \"white\"],\r\n      [/\\/\\*/, \"comment\", \"@comment\"],\r\n      [/\\/\\/.*$/, \"comment\"]\r\n    ]\r\n  }\r\n};\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/scala/scala.js\n");

/***/ })

}]);