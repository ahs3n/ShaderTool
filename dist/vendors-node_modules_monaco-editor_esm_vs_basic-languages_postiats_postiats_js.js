"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_basic-languages_postiats_postiats_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js":
/*!********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conf: () => (/* binding */ conf),\n/* harmony export */   language: () => (/* binding */ language)\n/* harmony export */ });\n/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/basic-languages/postiats/postiats.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"(*\", \"*)\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"],\r\n    [\"<\", \">\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\r\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\r\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] }\r\n  ]\r\n};\r\nvar language = {\r\n  tokenPostfix: \".pats\",\r\n  // TODO: staload and dynload are followed by a special kind of string literals\r\n  // with {$IDENTIFER} variables, and it also may make sense to highlight\r\n  // the punctuation (. and / and \\) differently.\r\n  // Set defaultToken to invalid to see what you do not tokenize yet\r\n  defaultToken: \"invalid\",\r\n  // keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats\r\n  keywords: [\r\n    //\r\n    \"abstype\",\r\n    // ABSTYPE\r\n    \"abst0ype\",\r\n    // ABST0YPE\r\n    \"absprop\",\r\n    // ABSPROP\r\n    \"absview\",\r\n    // ABSVIEW\r\n    \"absvtype\",\r\n    // ABSVIEWTYPE\r\n    \"absviewtype\",\r\n    // ABSVIEWTYPE\r\n    \"absvt0ype\",\r\n    // ABSVIEWT0YPE\r\n    \"absviewt0ype\",\r\n    // ABSVIEWT0YPE\r\n    //\r\n    \"as\",\r\n    // T_AS\r\n    //\r\n    \"and\",\r\n    // T_AND\r\n    //\r\n    \"assume\",\r\n    // T_ASSUME\r\n    //\r\n    \"begin\",\r\n    // T_BEGIN\r\n    //\r\n    /*\r\n    \t\t\"case\", // CASE\r\n    */\r\n    //\r\n    \"classdec\",\r\n    // T_CLASSDEC\r\n    //\r\n    \"datasort\",\r\n    // T_DATASORT\r\n    //\r\n    \"datatype\",\r\n    // DATATYPE\r\n    \"dataprop\",\r\n    // DATAPROP\r\n    \"dataview\",\r\n    // DATAVIEW\r\n    \"datavtype\",\r\n    // DATAVIEWTYPE\r\n    \"dataviewtype\",\r\n    // DATAVIEWTYPE\r\n    //\r\n    \"do\",\r\n    // T_DO\r\n    //\r\n    \"end\",\r\n    // T_END\r\n    //\r\n    \"extern\",\r\n    // T_EXTERN\r\n    \"extype\",\r\n    // T_EXTYPE\r\n    \"extvar\",\r\n    // T_EXTVAR\r\n    //\r\n    \"exception\",\r\n    // T_EXCEPTION\r\n    //\r\n    \"fn\",\r\n    // FN // non-recursive\r\n    \"fnx\",\r\n    // FNX // mutual tail-rec.\r\n    \"fun\",\r\n    // FUN // general-recursive\r\n    //\r\n    \"prfn\",\r\n    // PRFN\r\n    \"prfun\",\r\n    // PRFUN\r\n    //\r\n    \"praxi\",\r\n    // PRAXI\r\n    \"castfn\",\r\n    // CASTFN\r\n    //\r\n    \"if\",\r\n    // T_IF\r\n    \"then\",\r\n    // T_THEN\r\n    \"else\",\r\n    // T_ELSE\r\n    //\r\n    \"ifcase\",\r\n    // T_IFCASE\r\n    //\r\n    \"in\",\r\n    // T_IN\r\n    //\r\n    \"infix\",\r\n    // INFIX\r\n    \"infixl\",\r\n    // INFIXL\r\n    \"infixr\",\r\n    // INFIXR\r\n    \"prefix\",\r\n    // PREFIX\r\n    \"postfix\",\r\n    // POSTFIX\r\n    //\r\n    \"implmnt\",\r\n    // IMPLMNT // 0\r\n    \"implement\",\r\n    // IMPLEMENT // 1\r\n    //\r\n    \"primplmnt\",\r\n    // PRIMPLMNT // ~1\r\n    \"primplement\",\r\n    // PRIMPLMNT // ~1\r\n    //\r\n    \"import\",\r\n    // T_IMPORT // for importing packages\r\n    //\r\n    /*\r\n    \t\t\"lam\", // LAM\r\n    \t\t\"llam\", // LLAM\r\n    \t\t\"fix\", // FIX\r\n    */\r\n    //\r\n    \"let\",\r\n    // T_LET\r\n    //\r\n    \"local\",\r\n    // T_LOCAL\r\n    //\r\n    \"macdef\",\r\n    // MACDEF\r\n    \"macrodef\",\r\n    // MACRODEF\r\n    //\r\n    \"nonfix\",\r\n    // T_NONFIX\r\n    //\r\n    \"symelim\",\r\n    // T_SYMELIM\r\n    \"symintr\",\r\n    // T_SYMINTR\r\n    \"overload\",\r\n    // T_OVERLOAD\r\n    //\r\n    \"of\",\r\n    // T_OF\r\n    \"op\",\r\n    // T_OP\r\n    //\r\n    \"rec\",\r\n    // T_REC\r\n    //\r\n    \"sif\",\r\n    // T_SIF\r\n    \"scase\",\r\n    // T_SCASE\r\n    //\r\n    \"sortdef\",\r\n    // T_SORTDEF\r\n    /*\r\n    // HX: [sta] is now deprecated\r\n    */\r\n    \"sta\",\r\n    // T_STACST\r\n    \"stacst\",\r\n    // T_STACST\r\n    \"stadef\",\r\n    // T_STADEF\r\n    \"static\",\r\n    // T_STATIC\r\n    /*\r\n    \t\t\"stavar\", // T_STAVAR\r\n    */\r\n    //\r\n    \"staload\",\r\n    // T_STALOAD\r\n    \"dynload\",\r\n    // T_DYNLOAD\r\n    //\r\n    \"try\",\r\n    // T_TRY\r\n    //\r\n    \"tkindef\",\r\n    // T_TKINDEF // HX-2012-05-23\r\n    //\r\n    /*\r\n    \t\t\"type\", // TYPE\r\n    */\r\n    \"typedef\",\r\n    // TYPEDEF\r\n    \"propdef\",\r\n    // PROPDEF\r\n    \"viewdef\",\r\n    // VIEWDEF\r\n    \"vtypedef\",\r\n    // VIEWTYPEDEF\r\n    \"viewtypedef\",\r\n    // VIEWTYPEDEF\r\n    //\r\n    /*\r\n    \t\t\"val\", // VAL\r\n    */\r\n    \"prval\",\r\n    // PRVAL\r\n    //\r\n    \"var\",\r\n    // VAR\r\n    \"prvar\",\r\n    // PRVAR\r\n    //\r\n    \"when\",\r\n    // T_WHEN\r\n    \"where\",\r\n    // T_WHERE\r\n    //\r\n    /*\r\n    \t\t\"for\", // T_FOR\r\n    \t\t\"while\", // T_WHILE\r\n    */\r\n    //\r\n    \"with\",\r\n    // T_WITH\r\n    //\r\n    \"withtype\",\r\n    // WITHTYPE\r\n    \"withprop\",\r\n    // WITHPROP\r\n    \"withview\",\r\n    // WITHVIEW\r\n    \"withvtype\",\r\n    // WITHVIEWTYPE\r\n    \"withviewtype\"\r\n    // WITHVIEWTYPE\r\n    //\r\n  ],\r\n  keywords_dlr: [\r\n    \"$delay\",\r\n    // DLRDELAY\r\n    \"$ldelay\",\r\n    // DLRLDELAY\r\n    //\r\n    \"$arrpsz\",\r\n    // T_DLRARRPSZ\r\n    \"$arrptrsize\",\r\n    // T_DLRARRPSZ\r\n    //\r\n    \"$d2ctype\",\r\n    // T_DLRD2CTYPE\r\n    //\r\n    \"$effmask\",\r\n    // DLREFFMASK\r\n    \"$effmask_ntm\",\r\n    // DLREFFMASK_NTM\r\n    \"$effmask_exn\",\r\n    // DLREFFMASK_EXN\r\n    \"$effmask_ref\",\r\n    // DLREFFMASK_REF\r\n    \"$effmask_wrt\",\r\n    // DLREFFMASK_WRT\r\n    \"$effmask_all\",\r\n    // DLREFFMASK_ALL\r\n    //\r\n    \"$extern\",\r\n    // T_DLREXTERN\r\n    \"$extkind\",\r\n    // T_DLREXTKIND\r\n    \"$extype\",\r\n    // T_DLREXTYPE\r\n    \"$extype_struct\",\r\n    // T_DLREXTYPE_STRUCT\r\n    //\r\n    \"$extval\",\r\n    // T_DLREXTVAL\r\n    \"$extfcall\",\r\n    // T_DLREXTFCALL\r\n    \"$extmcall\",\r\n    // T_DLREXTMCALL\r\n    //\r\n    \"$literal\",\r\n    // T_DLRLITERAL\r\n    //\r\n    \"$myfilename\",\r\n    // T_DLRMYFILENAME\r\n    \"$mylocation\",\r\n    // T_DLRMYLOCATION\r\n    \"$myfunction\",\r\n    // T_DLRMYFUNCTION\r\n    //\r\n    \"$lst\",\r\n    // DLRLST\r\n    \"$lst_t\",\r\n    // DLRLST_T\r\n    \"$lst_vt\",\r\n    // DLRLST_VT\r\n    \"$list\",\r\n    // DLRLST\r\n    \"$list_t\",\r\n    // DLRLST_T\r\n    \"$list_vt\",\r\n    // DLRLST_VT\r\n    //\r\n    \"$rec\",\r\n    // DLRREC\r\n    \"$rec_t\",\r\n    // DLRREC_T\r\n    \"$rec_vt\",\r\n    // DLRREC_VT\r\n    \"$record\",\r\n    // DLRREC\r\n    \"$record_t\",\r\n    // DLRREC_T\r\n    \"$record_vt\",\r\n    // DLRREC_VT\r\n    //\r\n    \"$tup\",\r\n    // DLRTUP\r\n    \"$tup_t\",\r\n    // DLRTUP_T\r\n    \"$tup_vt\",\r\n    // DLRTUP_VT\r\n    \"$tuple\",\r\n    // DLRTUP\r\n    \"$tuple_t\",\r\n    // DLRTUP_T\r\n    \"$tuple_vt\",\r\n    // DLRTUP_VT\r\n    //\r\n    \"$break\",\r\n    // T_DLRBREAK\r\n    \"$continue\",\r\n    // T_DLRCONTINUE\r\n    //\r\n    \"$raise\",\r\n    // T_DLRRAISE\r\n    //\r\n    \"$showtype\",\r\n    // T_DLRSHOWTYPE\r\n    //\r\n    \"$vcopyenv_v\",\r\n    // DLRVCOPYENV_V\r\n    \"$vcopyenv_vt\",\r\n    // DLRVCOPYENV_VT\r\n    //\r\n    \"$tempenver\",\r\n    // T_DLRTEMPENVER\r\n    //\r\n    \"$solver_assert\",\r\n    // T_DLRSOLASSERT\r\n    \"$solver_verify\"\r\n    // T_DLRSOLVERIFY\r\n  ],\r\n  keywords_srp: [\r\n    //\r\n    \"#if\",\r\n    // T_SRPIF\r\n    \"#ifdef\",\r\n    // T_SRPIFDEF\r\n    \"#ifndef\",\r\n    // T_SRPIFNDEF\r\n    //\r\n    \"#then\",\r\n    // T_SRPTHEN\r\n    //\r\n    \"#elif\",\r\n    // T_SRPELIF\r\n    \"#elifdef\",\r\n    // T_SRPELIFDEF\r\n    \"#elifndef\",\r\n    // T_SRPELIFNDEF\r\n    //\r\n    \"#else\",\r\n    // T_SRPELSE\r\n    \"#endif\",\r\n    // T_SRPENDIF\r\n    //\r\n    \"#error\",\r\n    // T_SRPERROR\r\n    //\r\n    \"#prerr\",\r\n    // T_SRPPRERR // outpui to stderr\r\n    \"#print\",\r\n    // T_SRPPRINT // output to stdout\r\n    //\r\n    \"#assert\",\r\n    // T_SRPASSERT\r\n    //\r\n    \"#undef\",\r\n    // T_SRPUNDEF\r\n    \"#define\",\r\n    // T_SRPDEFINE\r\n    //\r\n    \"#include\",\r\n    // T_SRPINCLUDE\r\n    \"#require\",\r\n    // T_SRPREQUIRE\r\n    //\r\n    \"#pragma\",\r\n    // T_SRPPRAGMA // HX: general pragma\r\n    \"#codegen2\",\r\n    // T_SRPCODEGEN2 // for level-2 codegen\r\n    \"#codegen3\"\r\n    // T_SRPCODEGEN3 // for level-3 codegen\r\n    //\r\n    // HX: end of special tokens\r\n    //\r\n  ],\r\n  irregular_keyword_list: [\r\n    \"val+\",\r\n    \"val-\",\r\n    \"val\",\r\n    \"case+\",\r\n    \"case-\",\r\n    \"case\",\r\n    \"addr@\",\r\n    \"addr\",\r\n    \"fold@\",\r\n    \"free@\",\r\n    \"fix@\",\r\n    \"fix\",\r\n    \"lam@\",\r\n    \"lam\",\r\n    \"llam@\",\r\n    \"llam\",\r\n    \"viewt@ype+\",\r\n    \"viewt@ype-\",\r\n    \"viewt@ype\",\r\n    \"viewtype+\",\r\n    \"viewtype-\",\r\n    \"viewtype\",\r\n    \"view+\",\r\n    \"view-\",\r\n    \"view@\",\r\n    \"view\",\r\n    \"type+\",\r\n    \"type-\",\r\n    \"type\",\r\n    \"vtype+\",\r\n    \"vtype-\",\r\n    \"vtype\",\r\n    \"vt@ype+\",\r\n    \"vt@ype-\",\r\n    \"vt@ype\",\r\n    \"viewt@ype+\",\r\n    \"viewt@ype-\",\r\n    \"viewt@ype\",\r\n    \"viewtype+\",\r\n    \"viewtype-\",\r\n    \"viewtype\",\r\n    \"prop+\",\r\n    \"prop-\",\r\n    \"prop\",\r\n    \"type+\",\r\n    \"type-\",\r\n    \"type\",\r\n    \"t@ype\",\r\n    \"t@ype+\",\r\n    \"t@ype-\",\r\n    \"abst@ype\",\r\n    \"abstype\",\r\n    \"absviewt@ype\",\r\n    \"absvt@ype\",\r\n    \"for*\",\r\n    \"for\",\r\n    \"while*\",\r\n    \"while\"\r\n  ],\r\n  keywords_types: [\r\n    \"bool\",\r\n    \"double\",\r\n    \"byte\",\r\n    \"int\",\r\n    \"short\",\r\n    \"char\",\r\n    \"void\",\r\n    \"unit\",\r\n    \"long\",\r\n    \"float\",\r\n    \"string\",\r\n    \"strptr\"\r\n  ],\r\n  // TODO: reference for this?\r\n  keywords_effects: [\r\n    \"0\",\r\n    // no effects\r\n    \"fun\",\r\n    \"clo\",\r\n    \"prf\",\r\n    \"funclo\",\r\n    \"cloptr\",\r\n    \"cloref\",\r\n    \"ref\",\r\n    \"ntm\",\r\n    \"1\"\r\n    // all effects\r\n  ],\r\n  operators: [\r\n    \"@\",\r\n    // T_AT\r\n    \"!\",\r\n    // T_BANG\r\n    \"|\",\r\n    // T_BAR\r\n    \"`\",\r\n    // T_BQUOTE\r\n    \":\",\r\n    // T_COLON\r\n    \"$\",\r\n    // T_DOLLAR\r\n    \".\",\r\n    // T_DOT\r\n    \"=\",\r\n    // T_EQ\r\n    \"#\",\r\n    // T_HASH\r\n    \"~\",\r\n    // T_TILDE\r\n    //\r\n    \"..\",\r\n    // T_DOTDOT\r\n    \"...\",\r\n    // T_DOTDOTDOT\r\n    //\r\n    \"=>\",\r\n    // T_EQGT\r\n    // \"=<\", // T_EQLT\r\n    \"=<>\",\r\n    // T_EQLTGT\r\n    \"=/=>\",\r\n    // T_EQSLASHEQGT\r\n    \"=>>\",\r\n    // T_EQGTGT\r\n    \"=/=>>\",\r\n    // T_EQSLASHEQGTGT\r\n    //\r\n    \"<\",\r\n    // T_LT // opening a tmparg\r\n    \">\",\r\n    // T_GT // closing a tmparg\r\n    //\r\n    \"><\",\r\n    // T_GTLT\r\n    //\r\n    \".<\",\r\n    // T_DOTLT\r\n    \">.\",\r\n    // T_GTDOT\r\n    //\r\n    \".<>.\",\r\n    // T_DOTLTGTDOT\r\n    //\r\n    \"->\",\r\n    // T_MINUSGT\r\n    //\"-<\", // T_MINUSLT\r\n    \"-<>\"\r\n    // T_MINUSLTGT\r\n    //\r\n    /*\r\n    \t\t\":<\", // T_COLONLT\r\n    */\r\n  ],\r\n  brackets: [\r\n    { open: \",(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    // meta-programming syntax\r\n    { open: \"`(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"%(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"'(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"'{\", close: \"}\", token: \"delimiter.parenthesis\" },\r\n    { open: \"@(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"@{\", close: \"}\", token: \"delimiter.brace\" },\r\n    { open: \"@[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"#[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n  ],\r\n  // we include these common regular expressions\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  IDENTFST: /[a-zA-Z_]/,\r\n  IDENTRST: /[a-zA-Z0-9_'$]/,\r\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\r\n  digit: /[0-9]/,\r\n  digitseq0: /@digit*/,\r\n  xdigit: /[0-9A-Za-z]/,\r\n  xdigitseq0: /@xdigit*/,\r\n  INTSP: /[lLuU]/,\r\n  FLOATSP: /[fFlL]/,\r\n  fexponent: /[eE][+-]?[0-9]+/,\r\n  fexponent_bin: /[pP][+-]?[0-9]+/,\r\n  deciexp: /\\.[0-9]*@fexponent?/,\r\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\r\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\r\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\r\n  start: \"root\",\r\n  // The main tokenizer for ATS/Postiats\r\n  // reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats\r\n  tokenizer: {\r\n    root: [\r\n      // lexing_blankseq0\r\n      { regex: /[ \\t\\r\\n]+/, action: { token: \"\" } },\r\n      // NOTE: (*) is an invalid ML-like comment!\r\n      { regex: /\\(\\*\\)/, action: { token: \"invalid\" } },\r\n      {\r\n        regex: /\\(\\*/,\r\n        action: { token: \"comment\", next: \"lexing_COMMENT_block_ml\" }\r\n      },\r\n      {\r\n        regex: /\\(/,\r\n        action: \"@brackets\"\r\n        /*{ token: 'delimiter.parenthesis' }*/\r\n      },\r\n      {\r\n        regex: /\\)/,\r\n        action: \"@brackets\"\r\n        /*{ token: 'delimiter.parenthesis' }*/\r\n      },\r\n      {\r\n        regex: /\\[/,\r\n        action: \"@brackets\"\r\n        /*{ token: 'delimiter.bracket' }*/\r\n      },\r\n      {\r\n        regex: /\\]/,\r\n        action: \"@brackets\"\r\n        /*{ token: 'delimiter.bracket' }*/\r\n      },\r\n      {\r\n        regex: /\\{/,\r\n        action: \"@brackets\"\r\n        /*{ token: 'delimiter.brace' }*/\r\n      },\r\n      {\r\n        regex: /\\}/,\r\n        action: \"@brackets\"\r\n        /*{ token: 'delimiter.brace' }*/\r\n      },\r\n      // lexing_COMMA\r\n      {\r\n        regex: /,\\(/,\r\n        action: \"@brackets\"\r\n        /*{ token: 'delimiter.parenthesis' }*/\r\n      },\r\n      // meta-programming syntax\r\n      { regex: /,/, action: { token: \"delimiter.comma\" } },\r\n      { regex: /;/, action: { token: \"delimiter.semicolon\" } },\r\n      // lexing_AT\r\n      {\r\n        regex: /@\\(/,\r\n        action: \"@brackets\"\r\n        /* { token: 'delimiter.parenthesis' }*/\r\n      },\r\n      {\r\n        regex: /@\\[/,\r\n        action: \"@brackets\"\r\n        /* { token: 'delimiter.bracket' }*/\r\n      },\r\n      {\r\n        regex: /@\\{/,\r\n        action: \"@brackets\"\r\n        /*{ token: 'delimiter.brace' }*/\r\n      },\r\n      // lexing_COLON\r\n      {\r\n        regex: /:</,\r\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\r\n      },\r\n      // T_COLONLT\r\n      /*\r\n      \t\t\tlexing_DOT:\r\n      \r\n      \t\t\t. // SYMBOLIC => lexing_IDENT_sym\r\n      \t\t\t. FLOATDOT => lexing_FLOAT_deciexp\r\n      \t\t\t. DIGIT => T_DOTINT\r\n      \t\t\t*/\r\n      { regex: /\\.@symbolic+/, action: { token: \"identifier.sym\" } },\r\n      // FLOATDOT case\r\n      {\r\n        regex: /\\.@digit*@fexponent@FLOATSP*/,\r\n        action: { token: \"number.float\" }\r\n      },\r\n      { regex: /\\.@digit+/, action: { token: \"number.float\" } },\r\n      // T_DOTINT\r\n      // lexing_DOLLAR:\r\n      // '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym\r\n      {\r\n        regex: /\\$@IDENTFST@IDENTRST*/,\r\n        action: {\r\n          cases: {\r\n            \"@keywords_dlr\": { token: \"keyword.dlr\" },\r\n            \"@default\": { token: \"namespace\" }\r\n            // most likely a module qualifier\r\n          }\r\n        }\r\n      },\r\n      // lexing_SHARP:\r\n      // '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym\r\n      {\r\n        regex: /\\#@IDENTFST@IDENTRST*/,\r\n        action: {\r\n          cases: {\r\n            \"@keywords_srp\": { token: \"keyword.srp\" },\r\n            \"@default\": { token: \"identifier\" }\r\n          }\r\n        }\r\n      },\r\n      // lexing_PERCENT:\r\n      { regex: /%\\(/, action: { token: \"delimiter.parenthesis\" } },\r\n      {\r\n        regex: /^%{(#|\\^|\\$)?/,\r\n        action: {\r\n          token: \"keyword\",\r\n          next: \"@lexing_EXTCODE\",\r\n          nextEmbedded: \"text/javascript\"\r\n        }\r\n      },\r\n      { regex: /^%}/, action: { token: \"keyword\" } },\r\n      // lexing_QUOTE\r\n      { regex: /'\\(/, action: { token: \"delimiter.parenthesis\" } },\r\n      { regex: /'\\[/, action: { token: \"delimiter.bracket\" } },\r\n      { regex: /'\\{/, action: { token: \"delimiter.brace\" } },\r\n      [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]],\r\n      [/'[^\\\\']'/, \"string\"],\r\n      // lexing_DQUOTE\r\n      [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\r\n      // lexing_BQUOTE\r\n      {\r\n        regex: /`\\(/,\r\n        action: \"@brackets\"\r\n        /* { token: 'delimiter.parenthesis' }*/\r\n      },\r\n      // TODO: otherwise, try lexing_IDENT_sym\r\n      { regex: /\\\\/, action: { token: \"punctuation\" } },\r\n      // just T_BACKSLASH\r\n      // lexing_IDENT_alp:\r\n      // NOTE: (?!regex) is syntax for \"not-followed-by\" regex\r\n      // to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!\r\n      {\r\n        regex: /@irregular_keywords(?!@IDENTRST)/,\r\n        action: { token: \"keyword\" }\r\n      },\r\n      {\r\n        regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\r\n        action: {\r\n          cases: {\r\n            // TODO: dynload and staload should be specially parsed\r\n            // dynload whitespace+ \"special_string\"\r\n            // this special string is really:\r\n            //  '/' '\\\\' '.' => punctuation\r\n            // ({\\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation\r\n            // [^\"] => identifier/literal\r\n            \"@keywords\": { token: \"keyword\" },\r\n            \"@keywords_types\": { token: \"type\" },\r\n            \"@default\": { token: \"identifier\" }\r\n          }\r\n        }\r\n      },\r\n      // lexing_IDENT_sym:\r\n      {\r\n        regex: /\\/\\/\\/\\//,\r\n        action: { token: \"comment\", next: \"@lexing_COMMENT_rest\" }\r\n      },\r\n      { regex: /\\/\\/.*$/, action: { token: \"comment\" } },\r\n      {\r\n        regex: /\\/\\*/,\r\n        action: { token: \"comment\", next: \"@lexing_COMMENT_block_c\" }\r\n      },\r\n      // AS-20160627: specifically for effect annotations\r\n      {\r\n        regex: /-<|=</,\r\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\r\n      },\r\n      {\r\n        regex: /@symbolic+/,\r\n        action: {\r\n          cases: {\r\n            \"@operators\": \"keyword\",\r\n            \"@default\": \"operator\"\r\n          }\r\n        }\r\n      },\r\n      // lexing_ZERO:\r\n      // FIXME: this one is quite messy/unfinished yet\r\n      // TODO: lexing_INT_hex\r\n      // - testing_hexiexp => lexing_FLOAT_hexiexp\r\n      // - testing_fexponent_bin => lexing_FLOAT_hexiexp\r\n      // - testing_intspseq0 => T_INT_hex\r\n      // lexing_INT_hex:\r\n      {\r\n        regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\r\n        action: { token: \"number.float\" }\r\n      },\r\n      { regex: /0[xX]@xdigit+@INTSP*/, action: { token: \"number.hex\" } },\r\n      {\r\n        regex: /0[0-7]+(?![0-9])@INTSP*/,\r\n        action: { token: \"number.octal\" }\r\n      },\r\n      // lexing_INT_oct\r\n      //{regex: /0/, action: { token: 'number' } }, // INTZERO\r\n      // lexing_INT_dec:\r\n      // - testing_deciexp => lexing_FLOAT_deciexp\r\n      // - testing_fexponent => lexing_FLOAT_deciexp\r\n      // - otherwise => intspseq0 ([0-9]*[lLuU]?)\r\n      {\r\n        regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\r\n        action: { token: \"number.float\" }\r\n      },\r\n      {\r\n        regex: /@digit@digitseq0@INTSP*/,\r\n        action: { token: \"number.decimal\" }\r\n      },\r\n      // DIGIT, if followed by digitseq0, is lexing_INT_dec\r\n      { regex: /@digit+@INTSP*/, action: { token: \"number\" } }\r\n    ],\r\n    lexing_COMMENT_block_ml: [\r\n      [/[^\\(\\*]+/, \"comment\"],\r\n      [/\\(\\*/, \"comment\", \"@push\"],\r\n      [/\\(\\*/, \"comment.invalid\"],\r\n      [/\\*\\)/, \"comment\", \"@pop\"],\r\n      [/\\*/, \"comment\"]\r\n    ],\r\n    lexing_COMMENT_block_c: [\r\n      [/[^\\/*]+/, \"comment\"],\r\n      // [/\\/\\*/, 'comment', '@push' ],    // nested C-style block comments not allowed\r\n      // [/\\/\\*/,    'comment.invalid' ],\t// NOTE: this breaks block comments in the shape of /* //*/\r\n      [/\\*\\//, \"comment\", \"@pop\"],\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    lexing_COMMENT_rest: [\r\n      [/$/, \"comment\", \"@pop\"],\r\n      // FIXME: does it match? docs say 'no'\r\n      [/.*/, \"comment\"]\r\n    ],\r\n    // NOTE: added by AS, specifically for highlighting\r\n    lexing_EFFECT_commaseq0: [\r\n      {\r\n        regex: /@IDENTFST@IDENTRST+|@digit+/,\r\n        action: {\r\n          cases: {\r\n            \"@keywords_effects\": { token: \"type.effect\" },\r\n            \"@default\": { token: \"identifier\" }\r\n          }\r\n        }\r\n      },\r\n      { regex: /,/, action: { token: \"punctuation\" } },\r\n      { regex: />/, action: { token: \"@rematch\", next: \"@pop\" } }\r\n    ],\r\n    lexing_EXTCODE: [\r\n      {\r\n        regex: /^%}/,\r\n        action: {\r\n          token: \"@rematch\",\r\n          next: \"@pop\",\r\n          nextEmbedded: \"@pop\"\r\n        }\r\n      },\r\n      { regex: /[^%]+/, action: \"\" }\r\n    ],\r\n    lexing_DQUOTE: [\r\n      { regex: /\"/, action: { token: \"string.quote\", next: \"@pop\" } },\r\n      // AS-20160628: additional hi-lighting for variables in staload/dynload strings\r\n      {\r\n        regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\r\n        action: [{ token: \"string.escape\" }, { token: \"identifier\" }, { token: \"string.escape\" }]\r\n      },\r\n      { regex: /\\\\$/, action: { token: \"string.escape\" } },\r\n      {\r\n        regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\r\n        action: { token: \"string.escape\" }\r\n      },\r\n      { regex: /[^\\\\\"]+/, action: { token: \"string\" } }\r\n    ]\r\n  }\r\n};\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js\n");

/***/ })

}]);