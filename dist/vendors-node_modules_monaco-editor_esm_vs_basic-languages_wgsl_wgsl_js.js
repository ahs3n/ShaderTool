"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_basic-languages_wgsl_wgsl_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/wgsl/wgsl.js":
/*!************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/wgsl/wgsl.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conf: () => (/* binding */ conf),\n/* harmony export */   language: () => (/* binding */ language)\n/* harmony export */ });\n/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/basic-languages/wgsl/wgsl.ts\r\nvar conf = {\r\n  comments: {\r\n    lineComment: \"//\",\r\n    blockComment: [\"/*\", \"*/\"]\r\n  },\r\n  brackets: [\r\n    [\"{\", \"}\"],\r\n    [\"[\", \"]\"],\r\n    [\"(\", \")\"]\r\n  ],\r\n  autoClosingPairs: [\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"(\", close: \")\" }\r\n  ],\r\n  surroundingPairs: [\r\n    { open: \"{\", close: \"}\" },\r\n    { open: \"[\", close: \"]\" },\r\n    { open: \"(\", close: \")\" }\r\n  ]\r\n};\r\nfunction qw(str) {\r\n  let result = [];\r\n  const words = str.split(/\\t+|\\r+|\\n+| +/);\r\n  for (let i = 0; i < words.length; ++i) {\r\n    if (words[i].length > 0) {\r\n      result.push(words[i]);\r\n    }\r\n  }\r\n  return result;\r\n}\r\nvar atoms = qw(\"true false\");\r\nvar keywords = qw(`\r\n\t\t\t  alias\r\n\t\t\t  break\r\n\t\t\t  case\r\n\t\t\t  const\r\n\t\t\t  const_assert\r\n\t\t\t  continue\r\n\t\t\t  continuing\r\n\t\t\t  default\r\n\t\t\t  diagnostic\r\n\t\t\t  discard\r\n\t\t\t  else\r\n\t\t\t  enable\r\n\t\t\t  fn\r\n\t\t\t  for\r\n\t\t\t  if\r\n\t\t\t  let\r\n\t\t\t  loop\r\n\t\t\t  override\r\n\t\t\t  requires\r\n\t\t\t  return\r\n\t\t\t  struct\r\n\t\t\t  switch\r\n\t\t\t  var\r\n\t\t\t  while\r\n\t\t\t  `);\r\nvar reserved = qw(`\r\n\t\t\t  NULL\r\n\t\t\t  Self\r\n\t\t\t  abstract\r\n\t\t\t  active\r\n\t\t\t  alignas\r\n\t\t\t  alignof\r\n\t\t\t  as\r\n\t\t\t  asm\r\n\t\t\t  asm_fragment\r\n\t\t\t  async\r\n\t\t\t  attribute\r\n\t\t\t  auto\r\n\t\t\t  await\r\n\t\t\t  become\r\n\t\t\t  binding_array\r\n\t\t\t  cast\r\n\t\t\t  catch\r\n\t\t\t  class\r\n\t\t\t  co_await\r\n\t\t\t  co_return\r\n\t\t\t  co_yield\r\n\t\t\t  coherent\r\n\t\t\t  column_major\r\n\t\t\t  common\r\n\t\t\t  compile\r\n\t\t\t  compile_fragment\r\n\t\t\t  concept\r\n\t\t\t  const_cast\r\n\t\t\t  consteval\r\n\t\t\t  constexpr\r\n\t\t\t  constinit\r\n\t\t\t  crate\r\n\t\t\t  debugger\r\n\t\t\t  decltype\r\n\t\t\t  delete\r\n\t\t\t  demote\r\n\t\t\t  demote_to_helper\r\n\t\t\t  do\r\n\t\t\t  dynamic_cast\r\n\t\t\t  enum\r\n\t\t\t  explicit\r\n\t\t\t  export\r\n\t\t\t  extends\r\n\t\t\t  extern\r\n\t\t\t  external\r\n\t\t\t  fallthrough\r\n\t\t\t  filter\r\n\t\t\t  final\r\n\t\t\t  finally\r\n\t\t\t  friend\r\n\t\t\t  from\r\n\t\t\t  fxgroup\r\n\t\t\t  get\r\n\t\t\t  goto\r\n\t\t\t  groupshared\r\n\t\t\t  highp\r\n\t\t\t  impl\r\n\t\t\t  implements\r\n\t\t\t  import\r\n\t\t\t  inline\r\n\t\t\t  instanceof\r\n\t\t\t  interface\r\n\t\t\t  layout\r\n\t\t\t  lowp\r\n\t\t\t  macro\r\n\t\t\t  macro_rules\r\n\t\t\t  match\r\n\t\t\t  mediump\r\n\t\t\t  meta\r\n\t\t\t  mod\r\n\t\t\t  module\r\n\t\t\t  move\r\n\t\t\t  mut\r\n\t\t\t  mutable\r\n\t\t\t  namespace\r\n\t\t\t  new\r\n\t\t\t  nil\r\n\t\t\t  noexcept\r\n\t\t\t  noinline\r\n\t\t\t  nointerpolation\r\n\t\t\t  noperspective\r\n\t\t\t  null\r\n\t\t\t  nullptr\r\n\t\t\t  of\r\n\t\t\t  operator\r\n\t\t\t  package\r\n\t\t\t  packoffset\r\n\t\t\t  partition\r\n\t\t\t  pass\r\n\t\t\t  patch\r\n\t\t\t  pixelfragment\r\n\t\t\t  precise\r\n\t\t\t  precision\r\n\t\t\t  premerge\r\n\t\t\t  priv\r\n\t\t\t  protected\r\n\t\t\t  pub\r\n\t\t\t  public\r\n\t\t\t  readonly\r\n\t\t\t  ref\r\n\t\t\t  regardless\r\n\t\t\t  register\r\n\t\t\t  reinterpret_cast\r\n\t\t\t  require\r\n\t\t\t  resource\r\n\t\t\t  restrict\r\n\t\t\t  self\r\n\t\t\t  set\r\n\t\t\t  shared\r\n\t\t\t  sizeof\r\n\t\t\t  smooth\r\n\t\t\t  snorm\r\n\t\t\t  static\r\n\t\t\t  static_assert\r\n\t\t\t  static_cast\r\n\t\t\t  std\r\n\t\t\t  subroutine\r\n\t\t\t  super\r\n\t\t\t  target\r\n\t\t\t  template\r\n\t\t\t  this\r\n\t\t\t  thread_local\r\n\t\t\t  throw\r\n\t\t\t  trait\r\n\t\t\t  try\r\n\t\t\t  type\r\n\t\t\t  typedef\r\n\t\t\t  typeid\r\n\t\t\t  typename\r\n\t\t\t  typeof\r\n\t\t\t  union\r\n\t\t\t  unless\r\n\t\t\t  unorm\r\n\t\t\t  unsafe\r\n\t\t\t  unsized\r\n\t\t\t  use\r\n\t\t\t  using\r\n\t\t\t  varying\r\n\t\t\t  virtual\r\n\t\t\t  volatile\r\n\t\t\t  wgsl\r\n\t\t\t  where\r\n\t\t\t  with\r\n\t\t\t  writeonly\r\n\t\t\t  yield\r\n\t\t\t  `);\r\nvar predeclared_enums = qw(`\r\n\t\tread write read_write\r\n\t\tfunction private workgroup uniform storage\r\n\t\tperspective linear flat\r\n\t\tcenter centroid sample\r\n\t\tvertex_index instance_index position front_facing frag_depth\r\n\t\t\tlocal_invocation_id local_invocation_index\r\n\t\t\tglobal_invocation_id workgroup_id num_workgroups\r\n\t\t\tsample_index sample_mask\r\n\t\trgba8unorm\r\n\t\trgba8snorm\r\n\t\trgba8uint\r\n\t\trgba8sint\r\n\t\trgba16uint\r\n\t\trgba16sint\r\n\t\trgba16float\r\n\t\tr32uint\r\n\t\tr32sint\r\n\t\tr32float\r\n\t\trg32uint\r\n\t\trg32sint\r\n\t\trg32float\r\n\t\trgba32uint\r\n\t\trgba32sint\r\n\t\trgba32float\r\n\t\tbgra8unorm\r\n`);\r\nvar predeclared_types = qw(`\r\n\t\tbool\r\n\t\tf16\r\n\t\tf32\r\n\t\ti32\r\n\t\tsampler sampler_comparison\r\n\t\ttexture_depth_2d\r\n\t\ttexture_depth_2d_array\r\n\t\ttexture_depth_cube\r\n\t\ttexture_depth_cube_array\r\n\t\ttexture_depth_multisampled_2d\r\n\t\ttexture_external\r\n\t\ttexture_external\r\n\t\tu32\r\n\t\t`);\r\nvar predeclared_type_generators = qw(`\r\n\t\tarray\r\n\t\tatomic\r\n\t\tmat2x2\r\n\t\tmat2x3\r\n\t\tmat2x4\r\n\t\tmat3x2\r\n\t\tmat3x3\r\n\t\tmat3x4\r\n\t\tmat4x2\r\n\t\tmat4x3\r\n\t\tmat4x4\r\n\t\tptr\r\n\t\ttexture_1d\r\n\t\ttexture_2d\r\n\t\ttexture_2d_array\r\n\t\ttexture_3d\r\n\t\ttexture_cube\r\n\t\ttexture_cube_array\r\n\t\ttexture_multisampled_2d\r\n\t\ttexture_storage_1d\r\n\t\ttexture_storage_2d\r\n\t\ttexture_storage_2d_array\r\n\t\ttexture_storage_3d\r\n\t\tvec2\r\n\t\tvec3\r\n\t\tvec4\r\n\t\t`);\r\nvar predeclared_type_aliases = qw(`\r\n\t\tvec2i vec3i vec4i\r\n\t\tvec2u vec3u vec4u\r\n\t\tvec2f vec3f vec4f\r\n\t\tvec2h vec3h vec4h\r\n\t\tmat2x2f mat2x3f mat2x4f\r\n\t\tmat3x2f mat3x3f mat3x4f\r\n\t\tmat4x2f mat4x3f mat4x4f\r\n\t\tmat2x2h mat2x3h mat2x4h\r\n\t\tmat3x2h mat3x3h mat3x4h\r\n\t\tmat4x2h mat4x3h mat4x4h\r\n\t\t`);\r\nvar predeclared_intrinsics = qw(`\r\n  bitcast all any select arrayLength abs acos acosh asin asinh atan atanh atan2\r\n  ceil clamp cos cosh countLeadingZeros countOneBits countTrailingZeros cross\r\n  degrees determinant distance dot exp exp2 extractBits faceForward firstLeadingBit\r\n  firstTrailingBit floor fma fract frexp inverseBits inverseSqrt ldexp length\r\n  log log2 max min mix modf normalize pow quantizeToF16 radians reflect refract\r\n  reverseBits round saturate sign sin sinh smoothstep sqrt step tan tanh transpose\r\n  trunc dpdx dpdxCoarse dpdxFine dpdy dpdyCoarse dpdyFine fwidth fwidthCoarse fwidthFine\r\n  textureDimensions textureGather textureGatherCompare textureLoad textureNumLayers\r\n  textureNumLevels textureNumSamples textureSample textureSampleBias textureSampleCompare\r\n  textureSampleCompareLevel textureSampleGrad textureSampleLevel textureSampleBaseClampToEdge\r\n  textureStore atomicLoad atomicStore atomicAdd atomicSub atomicMax atomicMin\r\n  atomicAnd atomicOr atomicXor atomicExchange atomicCompareExchangeWeak pack4x8snorm\r\n  pack4x8unorm pack2x16snorm pack2x16unorm pack2x16float unpack4x8snorm unpack4x8unorm\r\n  unpack2x16snorm unpack2x16unorm unpack2x16float storageBarrier workgroupBarrier\r\n  workgroupUniformLoad\r\n`);\r\nvar operators = qw(`\r\n\t\t\t\t\t &\r\n\t\t\t\t\t &&\r\n\t\t\t\t\t ->\r\n\t\t\t\t\t /\r\n\t\t\t\t\t =\r\n\t\t\t\t\t ==\r\n\t\t\t\t\t !=\r\n\t\t\t\t\t >\r\n\t\t\t\t\t >=\r\n\t\t\t\t\t <\r\n\t\t\t\t\t <=\r\n\t\t\t\t\t %\r\n\t\t\t\t\t -\r\n\t\t\t\t\t --\r\n\t\t\t\t\t +\r\n\t\t\t\t\t ++\r\n\t\t\t\t\t |\r\n\t\t\t\t\t ||\r\n\t\t\t\t\t *\r\n\t\t\t\t\t <<\r\n\t\t\t\t\t >>\r\n\t\t\t\t\t +=\r\n\t\t\t\t\t -=\r\n\t\t\t\t\t *=\r\n\t\t\t\t\t /=\r\n\t\t\t\t\t %=\r\n\t\t\t\t\t &=\r\n\t\t\t\t\t |=\r\n\t\t\t\t\t ^=\r\n\t\t\t\t\t >>=\r\n\t\t\t\t\t <<=\r\n\t\t\t\t\t `);\r\nvar directive_re = /enable|requires|diagnostic/;\r\nvar ident_re = /[_\\p{XID_Start}]\\p{XID_Continue}*/u;\r\nvar predefined_token = \"variable.predefined\";\r\nvar language = {\r\n  tokenPostfix: \".wgsl\",\r\n  defaultToken: \"invalid\",\r\n  unicode: true,\r\n  atoms,\r\n  keywords,\r\n  reserved,\r\n  predeclared_enums,\r\n  predeclared_types,\r\n  predeclared_type_generators,\r\n  predeclared_type_aliases,\r\n  predeclared_intrinsics,\r\n  operators,\r\n  symbols: /[!%&*+\\-\\.\\/:;<=>^|_~,]+/,\r\n  tokenizer: {\r\n    root: [\r\n      [directive_re, \"keyword\", \"@directive\"],\r\n      [\r\n        // Identifier-like things, but also include '_'\r\n        ident_re,\r\n        {\r\n          cases: {\r\n            \"@atoms\": predefined_token,\r\n            \"@keywords\": \"keyword\",\r\n            \"@reserved\": \"invalid\",\r\n            \"@predeclared_enums\": predefined_token,\r\n            \"@predeclared_types\": predefined_token,\r\n            \"@predeclared_type_generators\": predefined_token,\r\n            \"@predeclared_type_aliases\": predefined_token,\r\n            \"@predeclared_intrinsics\": predefined_token,\r\n            \"@default\": \"identifier\"\r\n          }\r\n        }\r\n      ],\r\n      { include: \"@commentOrSpace\" },\r\n      { include: \"@numbers\" },\r\n      [/[{}()\\[\\]]/, \"@brackets\"],\r\n      [\"@\", \"annotation\", \"@attribute\"],\r\n      [\r\n        /@symbols/,\r\n        {\r\n          cases: {\r\n            \"@operators\": \"operator\",\r\n            \"@default\": \"delimiter\"\r\n          }\r\n        }\r\n      ],\r\n      [/./, \"invalid\"]\r\n    ],\r\n    commentOrSpace: [\r\n      [/\\s+/, \"white\"],\r\n      [/\\/\\*/, \"comment\", \"@blockComment\"],\r\n      [/\\/\\/.*$/, \"comment\"]\r\n    ],\r\n    blockComment: [\r\n      // Soak up uninteresting text: anything except * or /\r\n      [/[^\\/*]+/, \"comment\"],\r\n      // Recognize the start of a nested block comment.\r\n      [/\\/\\*/, \"comment\", \"@push\"],\r\n      // Recognize the end of a nested block comment.\r\n      [/\\*\\//, \"comment\", \"@pop\"],\r\n      // Recognize insignificant * and /\r\n      [/[\\/*]/, \"comment\"]\r\n    ],\r\n    attribute: [\r\n      // For things like '@fragment' both '@' and 'fragment'\r\n      // are marked as annotations.  This should work even if\r\n      // there are spaces or comments between the two tokens.\r\n      { include: \"@commentOrSpace\" },\r\n      [/\\w+/, \"annotation\", \"@pop\"]\r\n    ],\r\n    directive: [\r\n      // For things like 'enable f16;', 'enable' maps to 'meta'\r\n      // and 'f16' maps to 'meta.tag'.\r\n      { include: \"@commentOrSpace\" },\r\n      [/[()]/, \"@brackets\"],\r\n      [/,/, \"delimiter\"],\r\n      [ident_re, \"meta.content\"],\r\n      [/;/, \"delimiter\", \"@pop\"]\r\n    ],\r\n    numbers: [\r\n      // Decimal float literals\r\n      // https://www.w3.org/TR/WGSL/#syntax-decimal_float_literal\r\n      // 0, with type-specifying suffix.\r\n      [/0[fh]/, \"number.float\"],\r\n      // Other decimal integer, with type-specifying suffix.\r\n      [/[1-9][0-9]*[fh]/, \"number.float\"],\r\n      // Has decimal point, at least one digit after decimal.\r\n      [/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/, \"number.float\"],\r\n      // Has decimal point, at least one digit before decimal.\r\n      [/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/, \"number.float\"],\r\n      // Has at least one digit, and has an exponent.\r\n      [/[0-9]+[eE][+-]?[0-9]+[fh]?/, \"number.float\"],\r\n      // Hex float literals\r\n      // https://www.w3.org/TR/WGSL/#syntax-hex_float_literal\r\n      [/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+(?:[pP][+-]?[0-9]+[fh]?)?/, \"number.hex\"],\r\n      [/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*(?:[pP][+-]?[0-9]+[fh]?)?/, \"number.hex\"],\r\n      [/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/, \"number.hex\"],\r\n      // Hexadecimal integer literals\r\n      // https://www.w3.org/TR/WGSL/#syntax-hex_int_literal\r\n      [/0[xX][0-9a-fA-F]+[iu]?/, \"number.hex\"],\r\n      // Decimal integer literals\r\n      // https://www.w3.org/TR/WGSL/#syntax-decimal_int_literal\r\n      // We need two rules here because 01 is not valid.\r\n      [/[1-9][0-9]*[iu]?/, \"number\"],\r\n      [/0[iu]?/, \"number\"]\r\n      // Must match last\r\n    ]\r\n  }\r\n};\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/wgsl/wgsl.js\n");

/***/ })

}]);