"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_monaco-editor_esm_vs_basic-languages_freemarker2_freemarker2_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/freemarker2/freemarker2.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/freemarker2/freemarker2.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TagAngleInterpolationBracket: () => (/* binding */ TagAngleInterpolationBracket),\n/* harmony export */   TagAngleInterpolationDollar: () => (/* binding */ TagAngleInterpolationDollar),\n/* harmony export */   TagAutoInterpolationBracket: () => (/* binding */ TagAutoInterpolationBracket),\n/* harmony export */   TagAutoInterpolationDollar: () => (/* binding */ TagAutoInterpolationDollar),\n/* harmony export */   TagBracketInterpolationBracket: () => (/* binding */ TagBracketInterpolationBracket),\n/* harmony export */   TagBracketInterpolationDollar: () => (/* binding */ TagBracketInterpolationDollar)\n/* harmony export */ });\n/* harmony import */ var _editor_editor_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../editor/editor.api.js */ \"./node_modules/monaco-editor/esm/vs/editor/editor.api.js\");\n/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\nvar __defProp = Object.defineProperty;\r\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\r\nvar __getOwnPropNames = Object.getOwnPropertyNames;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __copyProps = (to, from, except, desc) => {\r\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\r\n    for (let key of __getOwnPropNames(from))\r\n      if (!__hasOwnProp.call(to, key) && key !== except)\r\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\r\n  }\r\n  return to;\r\n};\r\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\r\n\r\n// src/fillers/monaco-editor-core.ts\r\nvar monaco_editor_core_exports = {};\r\n__reExport(monaco_editor_core_exports, _editor_editor_api_js__WEBPACK_IMPORTED_MODULE_0__);\r\n\r\n\r\n// src/basic-languages/freemarker2/freemarker2.ts\r\nvar EMPTY_ELEMENTS = [\r\n  \"assign\",\r\n  \"flush\",\r\n  \"ftl\",\r\n  \"return\",\r\n  \"global\",\r\n  \"import\",\r\n  \"include\",\r\n  \"break\",\r\n  \"continue\",\r\n  \"local\",\r\n  \"nested\",\r\n  \"nt\",\r\n  \"setting\",\r\n  \"stop\",\r\n  \"t\",\r\n  \"lt\",\r\n  \"rt\",\r\n  \"fallback\"\r\n];\r\nvar BLOCK_ELEMENTS = [\r\n  \"attempt\",\r\n  \"autoesc\",\r\n  \"autoEsc\",\r\n  \"compress\",\r\n  \"comment\",\r\n  \"escape\",\r\n  \"noescape\",\r\n  \"function\",\r\n  \"if\",\r\n  \"list\",\r\n  \"items\",\r\n  \"sep\",\r\n  \"macro\",\r\n  \"noparse\",\r\n  \"noParse\",\r\n  \"noautoesc\",\r\n  \"noAutoEsc\",\r\n  \"outputformat\",\r\n  \"switch\",\r\n  \"visit\",\r\n  \"recurse\"\r\n];\r\nvar TagSyntaxAngle = {\r\n  close: \">\",\r\n  id: \"angle\",\r\n  open: \"<\"\r\n};\r\nvar TagSyntaxBracket = {\r\n  close: \"\\\\]\",\r\n  id: \"bracket\",\r\n  open: \"\\\\[\"\r\n};\r\nvar TagSyntaxAuto = {\r\n  close: \"[>\\\\]]\",\r\n  id: \"auto\",\r\n  open: \"[<\\\\[]\"\r\n};\r\nvar InterpolationSyntaxDollar = {\r\n  close: \"\\\\}\",\r\n  id: \"dollar\",\r\n  open1: \"\\\\$\",\r\n  open2: \"\\\\{\"\r\n};\r\nvar InterpolationSyntaxBracket = {\r\n  close: \"\\\\]\",\r\n  id: \"bracket\",\r\n  open1: \"\\\\[\",\r\n  open2: \"=\"\r\n};\r\nfunction createLangConfiguration(ts) {\r\n  return {\r\n    brackets: [\r\n      [\"<\", \">\"],\r\n      [\"[\", \"]\"],\r\n      [\"(\", \")\"],\r\n      [\"{\", \"}\"]\r\n    ],\r\n    comments: {\r\n      blockComment: [`${ts.open}--`, `--${ts.close}`]\r\n    },\r\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\r\n    autoClosingPairs: [\r\n      { open: \"{\", close: \"}\" },\r\n      { open: \"[\", close: \"]\" },\r\n      { open: \"(\", close: \")\" },\r\n      { open: '\"', close: '\"', notIn: [\"string\"] },\r\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\r\n    ],\r\n    surroundingPairs: [\r\n      { open: '\"', close: '\"' },\r\n      { open: \"'\", close: \"'\" },\r\n      { open: \"{\", close: \"}\" },\r\n      { open: \"[\", close: \"]\" },\r\n      { open: \"(\", close: \")\" },\r\n      { open: \"<\", close: \">\" }\r\n    ],\r\n    folding: {\r\n      markers: {\r\n        start: new RegExp(\r\n          `${ts.open}#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`\r\n        ),\r\n        end: new RegExp(`${ts.open}/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\r\n      }\r\n    },\r\n    onEnterRules: [\r\n      {\r\n        beforeText: new RegExp(\r\n          `${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`\r\n        ),\r\n        afterText: new RegExp(`^${ts.open}/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*${ts.close}$`),\r\n        action: {\r\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\r\n        }\r\n      },\r\n      {\r\n        beforeText: new RegExp(\r\n          `${ts.open}#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/${ts.close}]*(?!/)${ts.close})[^${ts.open}]*$`\r\n        ),\r\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\r\n      }\r\n    ]\r\n  };\r\n}\r\nfunction createLangConfigurationAuto() {\r\n  return {\r\n    // Cannot set block comment delimiter in auto mode...\r\n    // It depends on the content and the cursor position of the file...\r\n    brackets: [\r\n      [\"<\", \">\"],\r\n      [\"[\", \"]\"],\r\n      [\"(\", \")\"],\r\n      [\"{\", \"}\"]\r\n    ],\r\n    autoCloseBefore: \"\\n\\r\t }]),.:;=\",\r\n    autoClosingPairs: [\r\n      { open: \"{\", close: \"}\" },\r\n      { open: \"[\", close: \"]\" },\r\n      { open: \"(\", close: \")\" },\r\n      { open: '\"', close: '\"', notIn: [\"string\"] },\r\n      { open: \"'\", close: \"'\", notIn: [\"string\"] }\r\n    ],\r\n    surroundingPairs: [\r\n      { open: '\"', close: '\"' },\r\n      { open: \"'\", close: \"'\" },\r\n      { open: \"{\", close: \"}\" },\r\n      { open: \"[\", close: \"]\" },\r\n      { open: \"(\", close: \")\" },\r\n      { open: \"<\", close: \">\" }\r\n    ],\r\n    folding: {\r\n      markers: {\r\n        start: new RegExp(`[<\\\\[]#(?:${BLOCK_ELEMENTS.join(\"|\")})([^/>\\\\]]*(?!/)[>\\\\]])[^<\\\\[]*$`),\r\n        end: new RegExp(`[<\\\\[]/#(?:${BLOCK_ELEMENTS.join(\"|\")})[\\\\r\\\\n\\\\t ]*>`)\r\n      }\r\n    },\r\n    onEnterRules: [\r\n      {\r\n        beforeText: new RegExp(\r\n          `[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`\r\n        ),\r\n        afterText: new RegExp(`^[<\\\\[]/#([a-zA-Z_]+)[\\\\r\\\\n\\\\t ]*[>\\\\]]$`),\r\n        action: {\r\n          indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\r\n        }\r\n      },\r\n      {\r\n        beforeText: new RegExp(\r\n          `[<\\\\[]#(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))([a-zA-Z_]+)([^/>\\\\]]*(?!/)[>\\\\]])[^[<\\\\[]]*$`\r\n        ),\r\n        action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\r\n      }\r\n    ]\r\n  };\r\n}\r\nfunction createMonarchLanguage(ts, is) {\r\n  const id = `_${ts.id}_${is.id}`;\r\n  const s = (name) => name.replace(/__id__/g, id);\r\n  const r = (regexp) => {\r\n    const source = regexp.source.replace(/__id__/g, id);\r\n    return new RegExp(source, regexp.flags);\r\n  };\r\n  return {\r\n    // Settings\r\n    unicode: true,\r\n    includeLF: false,\r\n    start: s(\"default__id__\"),\r\n    ignoreCase: false,\r\n    defaultToken: \"invalid\",\r\n    tokenPostfix: `.freemarker2`,\r\n    brackets: [\r\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n    ],\r\n    // Dynamic RegExp\r\n    [s(\"open__id__\")]: new RegExp(ts.open),\r\n    [s(\"close__id__\")]: new RegExp(ts.close),\r\n    [s(\"iOpen1__id__\")]: new RegExp(is.open1),\r\n    [s(\"iOpen2__id__\")]: new RegExp(is.open2),\r\n    [s(\"iClose__id__\")]: new RegExp(is.close),\r\n    // <#START_TAG : \"<\" | \"<#\" | \"[#\">\r\n    // <#END_TAG : \"</\" | \"</#\" | \"[/#\">\r\n    [s(\"startTag__id__\")]: r(/(@open__id__)(#)/),\r\n    [s(\"endTag__id__\")]: r(/(@open__id__)(\\/#)/),\r\n    [s(\"startOrEndTag__id__\")]: r(/(@open__id__)(\\/?#)/),\r\n    // <#CLOSE_TAG1 : (<BLANK>)* (\">\" | \"]\")>\r\n    [s(\"closeTag1__id__\")]: r(/((?:@blank)*)(@close__id__)/),\r\n    // <#CLOSE_TAG2 : (<BLANK>)* (\"/\")? (\">\" | \"]\")>\r\n    [s(\"closeTag2__id__\")]: r(/((?:@blank)*\\/?)(@close__id__)/),\r\n    // Static RegExp\r\n    // <#BLANK : \" \" | \"\\t\" | \"\\n\" | \"\\r\">\r\n    blank: /[ \\t\\n\\r]/,\r\n    // <FALSE : \"false\">\r\n    // <TRUE : \"true\">\r\n    // <IN : \"in\">\r\n    // <AS : \"as\">\r\n    // <USING : \"using\">\r\n    keywords: [\"false\", \"true\", \"in\", \"as\", \"using\"],\r\n    // Directive names that cannot have an expression parameters and cannot be self-closing\r\n    // E.g. <#if id==2> ... </#if>\r\n    directiveStartCloseTag1: /attempt|recover|sep|auto[eE]sc|no(?:autoe|AutoE)sc|compress|default|no[eE]scape|comment|no[pP]arse/,\r\n    // Directive names that cannot have an expression parameter and can be self-closing\r\n    // E.g. <#if> ... <#else>  ... </#if>\r\n    // E.g. <#if> ... <#else /></#if>\r\n    directiveStartCloseTag2: /else|break|continue|return|stop|flush|t|lt|rt|nt|nested|recurse|fallback|ftl/,\r\n    // Directive names that can have an expression parameter and cannot be self-closing\r\n    // E.g. <#if id==2> ... </#if>\r\n    directiveStartBlank: /if|else[iI]f|list|for[eE]ach|switch|case|assign|global|local|include|import|function|macro|transform|visit|stop|return|call|setting|output[fF]ormat|nested|recurse|escape|ftl|items/,\r\n    // Directive names that can have an end tag\r\n    // E.g. </#if>\r\n    directiveEndCloseTag1: /if|list|items|sep|recover|attempt|for[eE]ach|local|global|assign|function|macro|output[fF]ormat|auto[eE]sc|no(?:autoe|AutoE)sc|compress|transform|switch|escape|no[eE]scape/,\r\n    // <#ESCAPED_CHAR :\r\n    //     \"\\\\\"\r\n    //     (\r\n    //         (\"n\" | \"t\" | \"r\" | \"f\" | \"b\" | \"g\" | \"l\" | \"a\" | \"\\\\\" | \"'\" | \"\\\"\" | \"{\" | \"=\")\r\n    //         |\r\n    //         (\"x\" [\"0\"-\"9\", \"A\"-\"F\", \"a\"-\"f\"])\r\n    //     )\r\n    // >\r\n    // Note: While the JavaCC tokenizer rule only specifies one hex digit,\r\n    // FreeMarker actually interprets up to 4 hex digits.\r\n    escapedChar: /\\\\(?:[ntrfbgla\\\\'\"\\{=]|(?:x[0-9A-Fa-f]{1,4}))/,\r\n    // <#ASCII_DIGIT: [\"0\" - \"9\"]>\r\n    asciiDigit: /[0-9]/,\r\n    // <INTEGER : ([\"0\"-\"9\"])+>\r\n    integer: /[0-9]+/,\r\n    // <#NON_ESCAPED_ID_START_CHAR:\r\n    // [\r\n    // \t  // This was generated on JDK 1.8.0_20 Win64 with src/main/misc/identifierChars/IdentifierCharGenerator.java\r\n    //    ...\r\n    // ]\r\n    nonEscapedIdStartChar: /[\\$@-Z_a-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u1FFF\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183-\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3006\\u3031-\\u3035\\u303B-\\u303C\\u3040-\\u318F\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3300-\\u337F\\u3400-\\u4DB5\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,\r\n    // <#ESCAPED_ID_CHAR: \"\\\\\" (\"-\" | \".\" | \":\" | \"#\")>\r\n    escapedIdChar: /\\\\[\\-\\.:#]/,\r\n    // <#ID_START_CHAR: <NON_ESCAPED_ID_START_CHAR>|<ESCAPED_ID_CHAR>>\r\n    idStartChar: /(?:@nonEscapedIdStartChar)|(?:@escapedIdChar)/,\r\n    // <ID: <ID_START_CHAR> (<ID_START_CHAR>|<ASCII_DIGIT>)*>\r\n    id: /(?:@idStartChar)(?:(?:@idStartChar)|(?:@asciiDigit))*/,\r\n    // Certain keywords / operators are allowed to index hashes\r\n    //\r\n    // Expression DotVariable(Expression exp) :\r\n    // {\r\n    // \tToken t;\r\n    // }\r\n    // {\r\n    // \t\t<DOT>\r\n    // \t\t(\r\n    // \t\t\tt = <ID> | t = <TIMES> | t = <DOUBLE_STAR>\r\n    // \t\t\t|\r\n    // \t\t\t(\r\n    // \t\t\t\tt = <LESS_THAN>\r\n    // \t\t\t\t|\r\n    // \t\t\t\tt = <LESS_THAN_EQUALS>\r\n    // \t\t\t\t|\r\n    // \t\t\t\tt = <ESCAPED_GT>\r\n    // \t\t\t\t|\r\n    // \t\t\t\tt = <ESCAPED_GTE>\r\n    // \t\t\t\t|\r\n    // \t\t\t\tt = <FALSE>\r\n    // \t\t\t\t|\r\n    // \t\t\t\tt = <TRUE>\r\n    // \t\t\t\t|\r\n    // \t\t\t\tt = <IN>\r\n    // \t\t\t\t|\r\n    // \t\t\t\tt = <AS>\r\n    // \t\t\t\t|\r\n    // \t\t\t\tt = <USING>\r\n    // \t\t\t)\r\n    // \t\t\t{\r\n    // \t\t\t\tif (!Character.isLetter(t.image.charAt(0))) {\r\n    // \t\t\t\t\tthrow new ParseException(t.image + \" is not a valid identifier.\", template, t);\r\n    // \t\t\t\t}\r\n    // \t\t\t}\r\n    // \t\t)\r\n    // \t\t{\r\n    // \t\t\tnotListLiteral(exp, \"hash\");\r\n    // \t\t\tnotStringLiteral(exp, \"hash\");\r\n    // \t\t\tnotBooleanLiteral(exp, \"hash\");\r\n    // \t\t\tDot dot = new Dot(exp, t.image);\r\n    // \t\t\tdot.setLocation(template, exp, t);\r\n    // \t\t\treturn dot;\r\n    // \t\t}\r\n    // }\r\n    specialHashKeys: /\\*\\*|\\*|false|true|in|as|using/,\r\n    // <DOUBLE_EQUALS : \"==\">\r\n    // <EQUALS : \"=\">\r\n    // <NOT_EQUALS : \"!=\">\r\n    // <PLUS_EQUALS : \"+=\">\r\n    // <MINUS_EQUALS : \"-=\">\r\n    // <TIMES_EQUALS : \"*=\">\r\n    // <DIV_EQUALS : \"/=\">\r\n    // <MOD_EQUALS : \"%=\">\r\n    // <PLUS_PLUS : \"++\">\r\n    // <MINUS_MINUS : \"--\">\r\n    // <LESS_THAN_EQUALS : \"lte\" | \"\\\\lte\" | \"<=\" | \"&lt;=\">\r\n    // <LESS_THAN : \"lt\" | \"\\\\lt\" | \"<\" | \"&lt;\">\r\n    // <ESCAPED_GTE : \"gte\" | \"\\\\gte\" | \"&gt;=\">\r\n    // <ESCAPED_GT: \"gt\" | \"\\\\gt\" |  \"&gt;\">\r\n    // <DOUBLE_STAR : \"**\">\r\n    // <PLUS : \"+\">\r\n    // <MINUS : \"-\">\r\n    // <TIMES : \"*\">\r\n    // <PERCENT : \"%\">\r\n    // <AND : \"&\" | \"&&\" | \"&amp;&amp;\" | \"\\\\and\" >\r\n    // <OR : \"|\" | \"||\">\r\n    // <EXCLAM : \"!\">\r\n    // <COMMA : \",\">\r\n    // <SEMICOLON : \";\">\r\n    // <COLON : \":\">\r\n    // <ELLIPSIS : \"...\">\r\n    // <DOT_DOT_ASTERISK : \"..*\" >\r\n    // <DOT_DOT_LESS : \"..<\" | \"..!\" >\r\n    // <DOT_DOT : \"..\">\r\n    // <EXISTS : \"??\">\r\n    // <BUILT_IN : \"?\">\r\n    // <LAMBDA_ARROW : \"->\" | \"-&gt;\">\r\n    namedSymbols: /&lt;=|&gt;=|\\\\lte|\\\\lt|&lt;|\\\\gte|\\\\gt|&gt;|&amp;&amp;|\\\\and|-&gt;|->|==|!=|\\+=|-=|\\*=|\\/=|%=|\\+\\+|--|<=|&&|\\|\\||:|\\.\\.\\.|\\.\\.\\*|\\.\\.<|\\.\\.!|\\?\\?|=|<|\\+|-|\\*|\\/|%|\\||\\.\\.|\\?|!|&|\\.|,|;/,\r\n    arrows: [\"->\", \"-&gt;\"],\r\n    delimiters: [\";\", \":\", \",\", \".\"],\r\n    stringOperators: [\"lte\", \"lt\", \"gte\", \"gt\"],\r\n    noParseTags: [\"noparse\", \"noParse\", \"comment\"],\r\n    tokenizer: {\r\n      // Parser states\r\n      // Plain text\r\n      [s(\"default__id__\")]: [\r\n        { include: s(\"@directive_token__id__\") },\r\n        { include: s(\"@interpolation_and_text_token__id__\") }\r\n      ],\r\n      // A FreeMarker expression inside a directive, e.g. <#if 2<3>\r\n      [s(\"fmExpression__id__.directive\")]: [\r\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\r\n        { include: s(\"@directive_end_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") }\r\n      ],\r\n      // A FreeMarker expression inside an interpolation, e.g. ${2+3}\r\n      [s(\"fmExpression__id__.interpolation\")]: [\r\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") },\r\n        { include: s(\"@greater_operators_token__id__\") }\r\n      ],\r\n      // In an expression and inside a not-yet closed parenthesis / bracket\r\n      [s(\"inParen__id__.plain\")]: [\r\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\r\n        { include: s(\"@directive_end_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") }\r\n      ],\r\n      [s(\"inParen__id__.gt\")]: [\r\n        { include: s(\"@blank_and_expression_comment_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") },\r\n        { include: s(\"@greater_operators_token__id__\") }\r\n      ],\r\n      // Expression for the unified call, e.g. <@createMacro() ... >\r\n      [s(\"noSpaceExpression__id__\")]: [\r\n        { include: s(\"@no_space_expression_end_token__id__\") },\r\n        { include: s(\"@directive_end_token__id__\") },\r\n        { include: s(\"@expression_token__id__\") }\r\n      ],\r\n      // For the function of a unified call. Special case for when the\r\n      // expression is a simple identifier.\r\n      // <@join [1,2] \",\">\r\n      // <@null!join [1,2] \",\">\r\n      [s(\"unifiedCall__id__\")]: [{ include: s(\"@unified_call_token__id__\") }],\r\n      // For singly and doubly quoted string (that may contain interpolations)\r\n      [s(\"singleString__id__\")]: [{ include: s(\"@string_single_token__id__\") }],\r\n      [s(\"doubleString__id__\")]: [{ include: s(\"@string_double_token__id__\") }],\r\n      // For singly and doubly quoted string (that may not contain interpolations)\r\n      [s(\"rawSingleString__id__\")]: [{ include: s(\"@string_single_raw_token__id__\") }],\r\n      [s(\"rawDoubleString__id__\")]: [{ include: s(\"@string_double_raw_token__id__\") }],\r\n      // For a comment in an expression\r\n      // ${ 1 + <#-- comment --> 2}\r\n      [s(\"expressionComment__id__\")]: [{ include: s(\"@expression_comment_token__id__\") }],\r\n      // For <#noparse> ... </#noparse>\r\n      // For <#noParse> ... </#noParse>\r\n      // For <#comment> ... </#comment>\r\n      [s(\"noParse__id__\")]: [{ include: s(\"@no_parse_token__id__\") }],\r\n      // For <#-- ... -->\r\n      [s(\"terseComment__id__\")]: [{ include: s(\"@terse_comment_token__id__\") }],\r\n      // Common rules\r\n      [s(\"directive_token__id__\")]: [\r\n        // <ATTEMPT : <START_TAG> \"attempt\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <RECOVER : <START_TAG> \"recover\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <SEP : <START_TAG> \"sep\" <CLOSE_TAG1>>\r\n        // <AUTOESC : <START_TAG> \"auto\" (\"e\"|\"E\") \"sc\" <CLOSE_TAG1>> {\r\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 4), DEFAULT);\r\n        // }\r\n        // <NOAUTOESC : <START_TAG> \"no\" (\"autoe\"|\"AutoE\") \"sc\" <CLOSE_TAG1>> {\r\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\r\n        // }\r\n        // <COMPRESS : <START_TAG> \"compress\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <DEFAUL : <START_TAG> \"default\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <NOESCAPE : <START_TAG> \"no\" (\"e\" | \"E\") \"scape\" <CLOSE_TAG1>> {\r\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\r\n        // }\r\n        //\r\n        // <COMMENT : <START_TAG> \"comment\" <CLOSE_TAG1>> {\r\n        //     handleTagSyntaxAndSwitch(matchedToken, NO_PARSE); noparseTag = \"comment\";\r\n        // }\r\n        // <NOPARSE: <START_TAG> \"no\" (\"p\" | \"P\") \"arse\" <CLOSE_TAG1>> {\r\n        //     int tagNamingConvention = getTagNamingConvention(matchedToken, 2);\r\n        //     handleTagSyntaxAndSwitch(matchedToken, tagNamingConvention, NO_PARSE);\r\n        //     noparseTag = tagNamingConvention == Configuration.CAMEL_CASE_NAMING_CONVENTION ? \"noParse\" : \"noparse\";\r\n        // }\r\n        [\r\n          r(/(?:@startTag__id__)(@directiveStartCloseTag1)(?:@closeTag1__id__)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            {\r\n              cases: {\r\n                \"@noParseTags\": { token: \"tag\", next: s(\"@noParse__id__.$3\") },\r\n                \"@default\": { token: \"tag\" }\r\n              }\r\n            },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\" }\r\n          ]\r\n        ],\r\n        // <ELSE : <START_TAG> \"else\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <BREAK : <START_TAG> \"break\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <CONTINUE : <START_TAG> \"continue\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <SIMPLE_RETURN : <START_TAG> \"return\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <HALT : <START_TAG> \"stop\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <FLUSH : <START_TAG> \"flush\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <TRIM : <START_TAG> \"t\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <LTRIM : <START_TAG> \"lt\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <RTRIM : <START_TAG> \"rt\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <NOTRIM : <START_TAG> \"nt\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <SIMPLE_NESTED : <START_TAG> \"nested\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <SIMPLE_RECURSE : <START_TAG> \"recurse\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <FALLBACK : <START_TAG> \"fallback\" <CLOSE_TAG2>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <TRIVIAL_FTL_HEADER : (\"<#ftl\" | \"[#ftl\") (\"/\")? (\">\" | \"]\")> { ftlHeader(matchedToken); }\r\n        [\r\n          r(/(?:@startTag__id__)(@directiveStartCloseTag2)(?:@closeTag2__id__)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\" }\r\n          ]\r\n        ],\r\n        // <IF : <START_TAG> \"if\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <ELSE_IF : <START_TAG> \"else\" (\"i\" | \"I\") \"f\" <BLANK>> {\r\n        // \thandleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 4), FM_EXPRESSION);\r\n        // }\r\n        // <LIST : <START_TAG> \"list\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <FOREACH : <START_TAG> \"for\" (\"e\" | \"E\") \"ach\" <BLANK>> {\r\n        //    handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 3), FM_EXPRESSION);\r\n        // }\r\n        // <SWITCH : <START_TAG> \"switch\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <CASE : <START_TAG> \"case\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <ASSIGN : <START_TAG> \"assign\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <GLOBALASSIGN : <START_TAG> \"global\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <LOCALASSIGN : <START_TAG> \"local\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <_INCLUDE : <START_TAG> \"include\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <IMPORT : <START_TAG> \"import\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <FUNCTION : <START_TAG> \"function\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <MACRO : <START_TAG> \"macro\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <TRANSFORM : <START_TAG> \"transform\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <VISIT : <START_TAG> \"visit\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <STOP : <START_TAG> \"stop\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <RETURN : <START_TAG> \"return\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <CALL : <START_TAG> \"call\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <SETTING : <START_TAG> \"setting\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <OUTPUTFORMAT : <START_TAG> \"output\" (\"f\"|\"F\") \"ormat\" <BLANK>> {\r\n        //    handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 6), FM_EXPRESSION);\r\n        // }\r\n        // <NESTED : <START_TAG> \"nested\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <RECURSE : <START_TAG> \"recurse\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        // <ESCAPE : <START_TAG> \"escape\" <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        //\r\n        // Note: FreeMarker grammar appears to treat the FTL header as a special case,\r\n        // in order to remove new lines after the header (?), but since we only need\r\n        // to tokenize for highlighting, we can include this directive here.\r\n        // <FTL_HEADER : (\"<#ftl\" | \"[#ftl\") <BLANK>> { ftlHeader(matchedToken); }\r\n        //\r\n        // Note: FreeMarker grammar appears to treat the items directive as a special case for\r\n        // the AST parsing process, but since we only need to tokenize, we can include this\r\n        // directive here.\r\n        // <ITEMS : <START_TAG> \"items\" (<BLANK>)+ <AS> <BLANK>> { handleTagSyntaxAndSwitch(matchedToken, FM_EXPRESSION); }\r\n        [\r\n          r(/(?:@startTag__id__)(@directiveStartBlank)(@blank)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag\" },\r\n            { token: \"\", next: s(\"@fmExpression__id__.directive\") }\r\n          ]\r\n        ],\r\n        // <END_IF : <END_TAG> \"if\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_LIST : <END_TAG> \"list\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_SEP : <END_TAG> \"sep\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_RECOVER : <END_TAG> \"recover\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_ATTEMPT : <END_TAG> \"attempt\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_FOREACH : <END_TAG> \"for\" (\"e\" | \"E\") \"ach\" <CLOSE_TAG1>> {\r\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 3), DEFAULT);\r\n        // }\r\n        // <END_LOCAL : <END_TAG> \"local\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_GLOBAL : <END_TAG> \"global\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_ASSIGN : <END_TAG> \"assign\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_FUNCTION : <END_TAG> \"function\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_MACRO : <END_TAG> \"macro\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_OUTPUTFORMAT : <END_TAG> \"output\" (\"f\" | \"F\") \"ormat\" <CLOSE_TAG1>> {\r\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 6), DEFAULT);\r\n        // }\r\n        // <END_AUTOESC : <END_TAG> \"auto\" (\"e\" | \"E\") \"sc\" <CLOSE_TAG1>> {\r\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 4), DEFAULT);\r\n        // }\r\n        // <END_NOAUTOESC : <END_TAG> \"no\" (\"autoe\"|\"AutoE\") \"sc\" <CLOSE_TAG1>> {\r\n        //   handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\r\n        // }\r\n        // <END_COMPRESS : <END_TAG> \"compress\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_TRANSFORM : <END_TAG> \"transform\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_SWITCH : <END_TAG> \"switch\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_ESCAPE : <END_TAG> \"escape\" <CLOSE_TAG1>> { handleTagSyntaxAndSwitch(matchedToken, DEFAULT); }\r\n        // <END_NOESCAPE : <END_TAG> \"no\" (\"e\" | \"E\") \"scape\" <CLOSE_TAG1>> {\r\n        //     handleTagSyntaxAndSwitch(matchedToken, getTagNamingConvention(matchedToken, 2), DEFAULT);\r\n        // }\r\n        [\r\n          r(/(?:@endTag__id__)(@directiveEndCloseTag1)(?:@closeTag1__id__)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\" }\r\n          ]\r\n        ],\r\n        // <UNIFIED_CALL : \"<@\" | \"[@\" > { unifiedCall(matchedToken); }\r\n        [\r\n          r(/(@open__id__)(@)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\", next: s(\"@unifiedCall__id__\") }\r\n          ]\r\n        ],\r\n        // <UNIFIED_CALL_END : (\"<\" | \"[\") \"/@\" ((<ID>) (\".\"<ID>)*)? <CLOSE_TAG1>> { unifiedCallEnd(matchedToken); }\r\n        [\r\n          r(/(@open__id__)(\\/@)((?:(?:@id)(?:\\.(?:@id))*)?)(?:@closeTag1__id__)/),\r\n          [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\" }\r\n          ]\r\n        ],\r\n        // <TERSE_COMMENT : (\"<\" | \"[\") \"#--\" > { noparseTag = \"-->\"; handleTagSyntaxAndSwitch(matchedToken, NO_PARSE); }\r\n        [\r\n          r(/(@open__id__)#--/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : { token: \"comment\", next: s(\"@terseComment__id__\") }\r\n        ],\r\n        // <UNKNOWN_DIRECTIVE : (\"[#\" | \"[/#\" | \"<#\" | \"</#\") ([\"a\"-\"z\", \"A\"-\"Z\", \"_\"])+>\r\n        [\r\n          r(/(?:@startOrEndTag__id__)([a-zA-Z_]+)/),\r\n          ts.id === \"auto\" ? {\r\n            cases: {\r\n              \"$1==<\": { token: \"@rematch\", switchTo: `@default_angle_${is.id}` },\r\n              \"$1==[\": { token: \"@rematch\", switchTo: `@default_bracket_${is.id}` }\r\n            }\r\n          } : [\r\n            { token: \"@brackets.directive\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"tag.invalid\", next: s(\"@fmExpression__id__.directive\") }\r\n          ]\r\n        ]\r\n      ],\r\n      // <DEFAULT, NO_DIRECTIVE> TOKEN :\r\n      [s(\"interpolation_and_text_token__id__\")]: [\r\n        // <DOLLAR_INTERPOLATION_OPENING : \"${\"> { startInterpolation(matchedToken); }\r\n        // <SQUARE_BRACKET_INTERPOLATION_OPENING : \"[=\"> { startInterpolation(matchedToken); }\r\n        [\r\n          r(/(@iOpen1__id__)(@iOpen2__id__)/),\r\n          [\r\n            { token: is.id === \"bracket\" ? \"@brackets.interpolation\" : \"delimiter.interpolation\" },\r\n            {\r\n              token: is.id === \"bracket\" ? \"delimiter.interpolation\" : \"@brackets.interpolation\",\r\n              next: s(\"@fmExpression__id__.interpolation\")\r\n            }\r\n          ]\r\n        ],\r\n        // <STATIC_TEXT_FALSE_ALARM : \"$\" | \"#\" | \"<\" | \"[\" | \"{\"> // to handle a lone dollar sign or \"<\" or \"# or <@ with whitespace after\"\r\n        // <STATIC_TEXT_WS : (\"\\n\" | \"\\r\" | \"\\t\" | \" \")+>\r\n        // <STATIC_TEXT_NON_WS : (~[\"$\", \"<\", \"#\", \"[\", \"{\", \"\\n\", \"\\r\", \"\\t\", \" \"])+>\r\n        [/[\\$#<\\[\\{]|(?:@blank)+|[^\\$<#\\[\\{\\n\\r\\t ]+/, { token: \"source\" }]\r\n      ],\r\n      // <STRING_LITERAL :\r\n      // \t(\r\n      // \t\t\"\\\"\"\r\n      // \t\t((~[\"\\\"\", \"\\\\\"]) | <ESCAPED_CHAR>)*\r\n      // \t\t\"\\\"\"\r\n      // \t)\r\n      // \t|\r\n      // \t(\r\n      // \t\t\"'\"\r\n      // \t\t((~[\"'\", \"\\\\\"]) | <ESCAPED_CHAR>)*\r\n      // \t\t\"'\"\r\n      // \t)\r\n      // >\r\n      [s(\"string_single_token__id__\")]: [\r\n        [/[^'\\\\]/, { token: \"string\" }],\r\n        [/@escapedChar/, { token: \"string.escape\" }],\r\n        [/'/, { token: \"string\", next: \"@pop\" }]\r\n      ],\r\n      [s(\"string_double_token__id__\")]: [\r\n        [/[^\"\\\\]/, { token: \"string\" }],\r\n        [/@escapedChar/, { token: \"string.escape\" }],\r\n        [/\"/, { token: \"string\", next: \"@pop\" }]\r\n      ],\r\n      // <RAW_STRING : \"r\" ((\"\\\"\" (~[\"\\\"\"])* \"\\\"\") | (\"'\" (~[\"'\"])* \"'\"))>\r\n      [s(\"string_single_raw_token__id__\")]: [\r\n        [/[^']+/, { token: \"string.raw\" }],\r\n        [/'/, { token: \"string.raw\", next: \"@pop\" }]\r\n      ],\r\n      [s(\"string_double_raw_token__id__\")]: [\r\n        [/[^\"]+/, { token: \"string.raw\" }],\r\n        [/\"/, { token: \"string.raw\", next: \"@pop\" }]\r\n      ],\r\n      // <FM_EXPRESSION, IN_PAREN, NO_SPACE_EXPRESSION, NAMED_PARAMETER_EXPRESSION> TOKEN :\r\n      [s(\"expression_token__id__\")]: [\r\n        // Strings\r\n        [\r\n          /(r?)(['\"])/,\r\n          {\r\n            cases: {\r\n              \"r'\": [\r\n                { token: \"keyword\" },\r\n                { token: \"string.raw\", next: s(\"@rawSingleString__id__\") }\r\n              ],\r\n              'r\"': [\r\n                { token: \"keyword\" },\r\n                { token: \"string.raw\", next: s(\"@rawDoubleString__id__\") }\r\n              ],\r\n              \"'\": [{ token: \"source\" }, { token: \"string\", next: s(\"@singleString__id__\") }],\r\n              '\"': [{ token: \"source\" }, { token: \"string\", next: s(\"@doubleString__id__\") }]\r\n            }\r\n          }\r\n        ],\r\n        // Numbers\r\n        // <INTEGER : ([\"0\"-\"9\"])+>\r\n        // <DECIMAL : <INTEGER> \".\" <INTEGER>>\r\n        [\r\n          /(?:@integer)(?:\\.(?:@integer))?/,\r\n          {\r\n            cases: {\r\n              \"(?:@integer)\": { token: \"number\" },\r\n              \"@default\": { token: \"number.float\" }\r\n            }\r\n          }\r\n        ],\r\n        // Special hash keys that must not be treated as identifiers\r\n        // after a period, e.g. a.** is accessing the key \"**\" of a\r\n        [\r\n          /(\\.)(@blank*)(@specialHashKeys)/,\r\n          [{ token: \"delimiter\" }, { token: \"\" }, { token: \"identifier\" }]\r\n        ],\r\n        // Symbols / operators\r\n        [\r\n          /(?:@namedSymbols)/,\r\n          {\r\n            cases: {\r\n              \"@arrows\": { token: \"meta.arrow\" },\r\n              \"@delimiters\": { token: \"delimiter\" },\r\n              \"@default\": { token: \"operators\" }\r\n            }\r\n          }\r\n        ],\r\n        // Identifiers\r\n        [\r\n          /@id/,\r\n          {\r\n            cases: {\r\n              \"@keywords\": { token: \"keyword.$0\" },\r\n              \"@stringOperators\": { token: \"operators\" },\r\n              \"@default\": { token: \"identifier\" }\r\n            }\r\n          }\r\n        ],\r\n        // <OPEN_BRACKET : \"[\">\r\n        // <CLOSE_BRACKET : \"]\">\r\n        // <OPEN_PAREN : \"(\">\r\n        // <CLOSE_PAREN : \")\">\r\n        // <OPENING_CURLY_BRACKET : \"{\">\r\n        // <CLOSING_CURLY_BRACKET : \"}\">\r\n        [\r\n          /[\\[\\]\\(\\)\\{\\}]/,\r\n          {\r\n            cases: {\r\n              \"\\\\[\": {\r\n                cases: {\r\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\r\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\r\n                }\r\n              },\r\n              \"\\\\]\": {\r\n                cases: {\r\n                  ...is.id === \"bracket\" ? {\r\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\r\n                  } : {},\r\n                  // This cannot happen while in auto mode, since this applies only to an\r\n                  // fmExpression inside a directive. But once we encounter the start of a\r\n                  // directive, we can establish the tag syntax mode.\r\n                  ...ts.id === \"bracket\" ? {\r\n                    \"$S2==directive\": { token: \"@brackets.directive\", next: \"@popall\" }\r\n                  } : {},\r\n                  // Ignore mismatched paren\r\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\r\n                  \"@default\": { token: \"@brackets\" }\r\n                }\r\n              },\r\n              \"\\\\(\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\r\n              \"\\\\)\": {\r\n                cases: {\r\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\r\n                  \"@default\": { token: \"@brackets\" }\r\n                }\r\n              },\r\n              \"\\\\{\": {\r\n                cases: {\r\n                  \"$S2==gt\": { token: \"@brackets\", next: s(\"@inParen__id__.gt\") },\r\n                  \"@default\": { token: \"@brackets\", next: s(\"@inParen__id__.plain\") }\r\n                }\r\n              },\r\n              \"\\\\}\": {\r\n                cases: {\r\n                  ...is.id === \"bracket\" ? {} : {\r\n                    \"$S2==interpolation\": { token: \"@brackets.interpolation\", next: \"@popall\" }\r\n                  },\r\n                  // Ignore mismatched paren\r\n                  [s(\"$S1==inParen__id__\")]: { token: \"@brackets\", next: \"@pop\" },\r\n                  \"@default\": { token: \"@brackets\" }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        // <OPEN_MISPLACED_INTERPOLATION : \"${\" | \"#{\" | \"[=\">\r\n        [/\\$\\{/, { token: \"delimiter.invalid\" }]\r\n      ],\r\n      // <FM_EXPRESSION, IN_PAREN, NAMED_PARAMETER_EXPRESSION> SKIP :\r\n      [s(\"blank_and_expression_comment_token__id__\")]: [\r\n        // < ( \" \" | \"\\t\" | \"\\n\" | \"\\r\" )+ >\r\n        [/(?:@blank)+/, { token: \"\" }],\r\n        // < (\"<\" | \"[\") (\"#\" | \"!\") \"--\"> : EXPRESSION_COMMENT\r\n        [/[<\\[][#!]--/, { token: \"comment\", next: s(\"@expressionComment__id__\") }]\r\n      ],\r\n      // <FM_EXPRESSION, NO_SPACE_EXPRESSION, NAMED_PARAMETER_EXPRESSION> TOKEN :\r\n      [s(\"directive_end_token__id__\")]: [\r\n        // <DIRECTIVE_END : \">\">\r\n        // {\r\n        //     if (inFTLHeader) {\r\n        //         eatNewline();\r\n        //         inFTLHeader = false;\r\n        //     }\r\n        //     if (squBracTagSyntax || postInterpolationLexState != -1 /* We are in an interpolation */) {\r\n        //         matchedToken.kind = NATURAL_GT;\r\n        //     } else {\r\n        //         SwitchTo(DEFAULT);\r\n        //     }\r\n        // }\r\n        // This cannot happen while in auto mode, since this applies only to an\r\n        // fmExpression inside a directive. But once we encounter the start of a\r\n        // directive, we can establish the tag syntax mode.\r\n        [\r\n          />/,\r\n          ts.id === \"bracket\" ? { token: \"operators\" } : { token: \"@brackets.directive\", next: \"@popall\" }\r\n        ],\r\n        // <EMPTY_DIRECTIVE_END : \"/>\" | \"/]\">\r\n        // It is a syntax error to end a tag with the wrong close token\r\n        // Let's indicate that to the user by not closing the tag\r\n        [\r\n          r(/(\\/)(@close__id__)/),\r\n          [{ token: \"delimiter.directive\" }, { token: \"@brackets.directive\", next: \"@popall\" }]\r\n        ]\r\n      ],\r\n      // <IN_PAREN> TOKEN :\r\n      [s(\"greater_operators_token__id__\")]: [\r\n        // <NATURAL_GT : \">\">\r\n        [/>/, { token: \"operators\" }],\r\n        // <NATURAL_GTE : \">=\">\r\n        [/>=/, { token: \"operators\" }]\r\n      ],\r\n      // <NO_SPACE_EXPRESSION> TOKEN :\r\n      [s(\"no_space_expression_end_token__id__\")]: [\r\n        // <TERMINATING_WHITESPACE :  ([\"\\n\", \"\\r\", \"\\t\", \" \"])+> : FM_EXPRESSION\r\n        [/(?:@blank)+/, { token: \"\", switchTo: s(\"@fmExpression__id__.directive\") }]\r\n      ],\r\n      [s(\"unified_call_token__id__\")]: [\r\n        // Special case for a call where the expression is just an ID\r\n        // <UNIFIED_CALL> <ID> <BLANK>+\r\n        [\r\n          /(@id)((?:@blank)+)/,\r\n          [{ token: \"tag\" }, { token: \"\", next: s(\"@fmExpression__id__.directive\") }]\r\n        ],\r\n        [\r\n          r(/(@id)(\\/?)(@close__id__)/),\r\n          [\r\n            { token: \"tag\" },\r\n            { token: \"delimiter.directive\" },\r\n            { token: \"@brackets.directive\", next: \"@popall\" }\r\n          ]\r\n        ],\r\n        [/./, { token: \"@rematch\", next: s(\"@noSpaceExpression__id__\") }]\r\n      ],\r\n      // <NO_PARSE> TOKEN :\r\n      [s(\"no_parse_token__id__\")]: [\r\n        // <MAYBE_END :\r\n        // \t (\"<\" | \"[\")\r\n        // \t \"/\"\r\n        // \t (\"#\")?\r\n        // \t ([\"a\"-\"z\", \"A\"-\"Z\"])+\r\n        // \t ( \" \" | \"\\t\" | \"\\n\" | \"\\r\" )*\r\n        // \t (\">\" | \"]\")\r\n        // >\r\n        [\r\n          r(/(@open__id__)(\\/#?)([a-zA-Z]+)((?:@blank)*)(@close__id__)/),\r\n          {\r\n            cases: {\r\n              \"$S2==$3\": [\r\n                { token: \"@brackets.directive\" },\r\n                { token: \"delimiter.directive\" },\r\n                { token: \"tag\" },\r\n                { token: \"\" },\r\n                { token: \"@brackets.directive\", next: \"@popall\" }\r\n              ],\r\n              \"$S2==comment\": [\r\n                { token: \"comment\" },\r\n                { token: \"comment\" },\r\n                { token: \"comment\" },\r\n                { token: \"comment\" },\r\n                { token: \"comment\" }\r\n              ],\r\n              \"@default\": [\r\n                { token: \"source\" },\r\n                { token: \"source\" },\r\n                { token: \"source\" },\r\n                { token: \"source\" },\r\n                { token: \"source\" }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        // <KEEP_GOING : (~[\"<\", \"[\", \"-\"])+>\r\n        // <LONE_LESS_THAN_OR_DASH : [\"<\", \"[\", \"-\"]>\r\n        [\r\n          /[^<\\[\\-]+|[<\\[\\-]/,\r\n          {\r\n            cases: {\r\n              \"$S2==comment\": { token: \"comment\" },\r\n              \"@default\": { token: \"source\" }\r\n            }\r\n          }\r\n        ]\r\n      ],\r\n      // <EXPRESSION_COMMENT> SKIP:\r\n      [s(\"expression_comment_token__id__\")]: [\r\n        // < \"-->\" | \"--]\">\r\n        [\r\n          /--[>\\]]/,\r\n          {\r\n            token: \"comment\",\r\n            next: \"@pop\"\r\n          }\r\n        ],\r\n        // < (~[\"-\", \">\", \"]\"])+ >\r\n        // < \">\">\r\n        // < \"]\">\r\n        // < \"-\">\r\n        [/[^\\->\\]]+|[>\\]\\-]/, { token: \"comment\" }]\r\n      ],\r\n      [s(\"terse_comment_token__id__\")]: [\r\n        //  <TERSE_COMMENT_END : \"-->\" | \"--]\">\r\n        [r(/--(?:@close__id__)/), { token: \"comment\", next: \"@popall\" }],\r\n        // <KEEP_GOING : (~[\"<\", \"[\", \"-\"])+>\r\n        // <LONE_LESS_THAN_OR_DASH : [\"<\", \"[\", \"-\"]>\r\n        [/[^<\\[\\-]+|[<\\[\\-]/, { token: \"comment\" }]\r\n      ]\r\n    }\r\n  };\r\n}\r\nfunction createMonarchLanguageAuto(is) {\r\n  const angle = createMonarchLanguage(TagSyntaxAngle, is);\r\n  const bracket = createMonarchLanguage(TagSyntaxBracket, is);\r\n  const auto = createMonarchLanguage(TagSyntaxAuto, is);\r\n  return {\r\n    // Angle and bracket syntax mode\r\n    // We switch to one of these once we have determined the mode\r\n    ...angle,\r\n    ...bracket,\r\n    ...auto,\r\n    // Settings\r\n    unicode: true,\r\n    includeLF: false,\r\n    start: `default_auto_${is.id}`,\r\n    ignoreCase: false,\r\n    defaultToken: \"invalid\",\r\n    tokenPostfix: `.freemarker2`,\r\n    brackets: [\r\n      { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\r\n      { open: \"[\", close: \"]\", token: \"delimiter.square\" },\r\n      { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\r\n      { open: \"<\", close: \">\", token: \"delimiter.angle\" }\r\n    ],\r\n    tokenizer: {\r\n      ...angle.tokenizer,\r\n      ...bracket.tokenizer,\r\n      ...auto.tokenizer\r\n    }\r\n  };\r\n}\r\nvar TagAngleInterpolationDollar = {\r\n  conf: createLangConfiguration(TagSyntaxAngle),\r\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxDollar)\r\n};\r\nvar TagBracketInterpolationDollar = {\r\n  conf: createLangConfiguration(TagSyntaxBracket),\r\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxDollar)\r\n};\r\nvar TagAngleInterpolationBracket = {\r\n  conf: createLangConfiguration(TagSyntaxAngle),\r\n  language: createMonarchLanguage(TagSyntaxAngle, InterpolationSyntaxBracket)\r\n};\r\nvar TagBracketInterpolationBracket = {\r\n  conf: createLangConfiguration(TagSyntaxBracket),\r\n  language: createMonarchLanguage(TagSyntaxBracket, InterpolationSyntaxBracket)\r\n};\r\nvar TagAutoInterpolationDollar = {\r\n  conf: createLangConfigurationAuto(),\r\n  language: createMonarchLanguageAuto(InterpolationSyntaxDollar)\r\n};\r\nvar TagAutoInterpolationBracket = {\r\n  conf: createLangConfigurationAuto(),\r\n  language: createMonarchLanguageAuto(InterpolationSyntaxBracket)\r\n};\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/basic-languages/freemarker2/freemarker2.js\n");

/***/ })

}]);