/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/monaco-editor/esm/vs/base/common/arrays.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/arrays.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayQueue: () => (/* binding */ ArrayQueue),\n/* harmony export */   CallbackIterable: () => (/* binding */ CallbackIterable),\n/* harmony export */   CompareResult: () => (/* binding */ CompareResult),\n/* harmony export */   Permutation: () => (/* binding */ Permutation),\n/* harmony export */   arrayInsert: () => (/* binding */ arrayInsert),\n/* harmony export */   asArray: () => (/* binding */ asArray),\n/* harmony export */   binarySearch: () => (/* binding */ binarySearch),\n/* harmony export */   binarySearch2: () => (/* binding */ binarySearch2),\n/* harmony export */   booleanComparator: () => (/* binding */ booleanComparator),\n/* harmony export */   coalesce: () => (/* binding */ coalesce),\n/* harmony export */   coalesceInPlace: () => (/* binding */ coalesceInPlace),\n/* harmony export */   compareBy: () => (/* binding */ compareBy),\n/* harmony export */   distinct: () => (/* binding */ distinct),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   firstOrDefault: () => (/* binding */ firstOrDefault),\n/* harmony export */   forEachAdjacent: () => (/* binding */ forEachAdjacent),\n/* harmony export */   forEachWithNeighbors: () => (/* binding */ forEachWithNeighbors),\n/* harmony export */   groupAdjacentBy: () => (/* binding */ groupAdjacentBy),\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   insertInto: () => (/* binding */ insertInto),\n/* harmony export */   isFalsyOrEmpty: () => (/* binding */ isFalsyOrEmpty),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray),\n/* harmony export */   numberComparator: () => (/* binding */ numberComparator),\n/* harmony export */   pushMany: () => (/* binding */ pushMany),\n/* harmony export */   pushToEnd: () => (/* binding */ pushToEnd),\n/* harmony export */   pushToStart: () => (/* binding */ pushToStart),\n/* harmony export */   quickSelect: () => (/* binding */ quickSelect),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   removeFastWithoutKeepingOrder: () => (/* binding */ removeFastWithoutKeepingOrder),\n/* harmony export */   reverseOrder: () => (/* binding */ reverseOrder),\n/* harmony export */   splice: () => (/* binding */ splice),\n/* harmony export */   tail: () => (/* binding */ tail),\n/* harmony export */   tail2: () => (/* binding */ tail2),\n/* harmony export */   tieBreakComparators: () => (/* binding */ tieBreakComparators)\n/* harmony export */ });\n/**\r\n * Returns the last element of an array.\r\n * @param array The array.\r\n * @param n Which element from the end (default is zero).\r\n */\r\nfunction tail(array, n = 0) {\r\n    return array[array.length - (1 + n)];\r\n}\r\nfunction tail2(arr) {\r\n    if (arr.length === 0) {\r\n        throw new Error('Invalid tail call');\r\n    }\r\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\r\n}\r\nfunction equals(one, other, itemEquals = (a, b) => a === b) {\r\n    if (one === other) {\r\n        return true;\r\n    }\r\n    if (!one || !other) {\r\n        return false;\r\n    }\r\n    if (one.length !== other.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0, len = one.length; i < len; i++) {\r\n        if (!itemEquals(one[i], other[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Remove the element at `index` by replacing it with the last element. This is faster than `splice`\r\n * but changes the order of the array\r\n */\r\nfunction removeFastWithoutKeepingOrder(array, index) {\r\n    const last = array.length - 1;\r\n    if (index < last) {\r\n        array[index] = array[last];\r\n    }\r\n    array.pop();\r\n}\r\n/**\r\n * Performs a binary search algorithm over a sorted array.\r\n *\r\n * @param array The array being searched.\r\n * @param key The value we search for.\r\n * @param comparator A function that takes two array elements and returns zero\r\n *   if they are equal, a negative number if the first element precedes the\r\n *   second one in the sorting order, or a positive number if the second element\r\n *   precedes the first one.\r\n * @return See {@link binarySearch2}\r\n */\r\nfunction binarySearch(array, key, comparator) {\r\n    return binarySearch2(array.length, i => comparator(array[i], key));\r\n}\r\n/**\r\n * Performs a binary search algorithm over a sorted collection. Useful for cases\r\n * when we need to perform a binary search over something that isn't actually an\r\n * array, and converting data to an array would defeat the use of binary search\r\n * in the first place.\r\n *\r\n * @param length The collection length.\r\n * @param compareToKey A function that takes an index of an element in the\r\n *   collection and returns zero if the value at this index is equal to the\r\n *   search key, a negative number if the value precedes the search key in the\r\n *   sorting order, or a positive number if the search key precedes the value.\r\n * @return A non-negative index of an element, if found. If not found, the\r\n *   result is -(n+1) (or ~n, using bitwise notation), where n is the index\r\n *   where the key should be inserted to maintain the sorting order.\r\n */\r\nfunction binarySearch2(length, compareToKey) {\r\n    let low = 0, high = length - 1;\r\n    while (low <= high) {\r\n        const mid = ((low + high) / 2) | 0;\r\n        const comp = compareToKey(mid);\r\n        if (comp < 0) {\r\n            low = mid + 1;\r\n        }\r\n        else if (comp > 0) {\r\n            high = mid - 1;\r\n        }\r\n        else {\r\n            return mid;\r\n        }\r\n    }\r\n    return -(low + 1);\r\n}\r\nfunction quickSelect(nth, data, compare) {\r\n    nth = nth | 0;\r\n    if (nth >= data.length) {\r\n        throw new TypeError('invalid index');\r\n    }\r\n    const pivotValue = data[Math.floor(data.length * Math.random())];\r\n    const lower = [];\r\n    const higher = [];\r\n    const pivots = [];\r\n    for (const value of data) {\r\n        const val = compare(value, pivotValue);\r\n        if (val < 0) {\r\n            lower.push(value);\r\n        }\r\n        else if (val > 0) {\r\n            higher.push(value);\r\n        }\r\n        else {\r\n            pivots.push(value);\r\n        }\r\n    }\r\n    if (nth < lower.length) {\r\n        return quickSelect(nth, lower, compare);\r\n    }\r\n    else if (nth < lower.length + pivots.length) {\r\n        return pivots[0];\r\n    }\r\n    else {\r\n        return quickSelect(nth - (lower.length + pivots.length), higher, compare);\r\n    }\r\n}\r\nfunction groupBy(data, compare) {\r\n    const result = [];\r\n    let currentGroup = undefined;\r\n    for (const element of data.slice(0).sort(compare)) {\r\n        if (!currentGroup || compare(currentGroup[0], element) !== 0) {\r\n            currentGroup = [element];\r\n            result.push(currentGroup);\r\n        }\r\n        else {\r\n            currentGroup.push(element);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Splits the given items into a list of (non-empty) groups.\r\n * `shouldBeGrouped` is used to decide if two consecutive items should be in the same group.\r\n * The order of the items is preserved.\r\n */\r\nfunction* groupAdjacentBy(items, shouldBeGrouped) {\r\n    let currentGroup;\r\n    let last;\r\n    for (const item of items) {\r\n        if (last !== undefined && shouldBeGrouped(last, item)) {\r\n            currentGroup.push(item);\r\n        }\r\n        else {\r\n            if (currentGroup) {\r\n                yield currentGroup;\r\n            }\r\n            currentGroup = [item];\r\n        }\r\n        last = item;\r\n    }\r\n    if (currentGroup) {\r\n        yield currentGroup;\r\n    }\r\n}\r\nfunction forEachAdjacent(arr, f) {\r\n    for (let i = 0; i <= arr.length; i++) {\r\n        f(i === 0 ? undefined : arr[i - 1], i === arr.length ? undefined : arr[i]);\r\n    }\r\n}\r\nfunction forEachWithNeighbors(arr, f) {\r\n    for (let i = 0; i < arr.length; i++) {\r\n        f(i === 0 ? undefined : arr[i - 1], arr[i], i + 1 === arr.length ? undefined : arr[i + 1]);\r\n    }\r\n}\r\n/**\r\n * @returns New array with all falsy values removed. The original array IS NOT modified.\r\n */\r\nfunction coalesce(array) {\r\n    return array.filter((e) => !!e);\r\n}\r\n/**\r\n * Remove all falsy values from `array`. The original array IS modified.\r\n */\r\nfunction coalesceInPlace(array) {\r\n    let to = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (!!array[i]) {\r\n            array[to] = array[i];\r\n            to += 1;\r\n        }\r\n    }\r\n    array.length = to;\r\n}\r\n/**\r\n * @returns false if the provided object is an array and not empty.\r\n */\r\nfunction isFalsyOrEmpty(obj) {\r\n    return !Array.isArray(obj) || obj.length === 0;\r\n}\r\nfunction isNonEmptyArray(obj) {\r\n    return Array.isArray(obj) && obj.length > 0;\r\n}\r\n/**\r\n * Removes duplicates from the given array. The optional keyFn allows to specify\r\n * how elements are checked for equality by returning an alternate value for each.\r\n */\r\nfunction distinct(array, keyFn = value => value) {\r\n    const seen = new Set();\r\n    return array.filter(element => {\r\n        const key = keyFn(element);\r\n        if (seen.has(key)) {\r\n            return false;\r\n        }\r\n        seen.add(key);\r\n        return true;\r\n    });\r\n}\r\nfunction firstOrDefault(array, notFoundValue) {\r\n    return array.length > 0 ? array[0] : notFoundValue;\r\n}\r\nfunction range(arg, to) {\r\n    let from = typeof to === 'number' ? arg : 0;\r\n    if (typeof to === 'number') {\r\n        from = arg;\r\n    }\r\n    else {\r\n        from = 0;\r\n        to = arg;\r\n    }\r\n    const result = [];\r\n    if (from <= to) {\r\n        for (let i = from; i < to; i++) {\r\n            result.push(i);\r\n        }\r\n    }\r\n    else {\r\n        for (let i = from; i > to; i--) {\r\n            result.push(i);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Insert `insertArr` inside `target` at `insertIndex`.\r\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\r\n */\r\nfunction arrayInsert(target, insertIndex, insertArr) {\r\n    const before = target.slice(0, insertIndex);\r\n    const after = target.slice(insertIndex);\r\n    return before.concat(insertArr, after);\r\n}\r\n/**\r\n * Pushes an element to the start of the array, if found.\r\n */\r\nfunction pushToStart(arr, value) {\r\n    const index = arr.indexOf(value);\r\n    if (index > -1) {\r\n        arr.splice(index, 1);\r\n        arr.unshift(value);\r\n    }\r\n}\r\n/**\r\n * Pushes an element to the end of the array, if found.\r\n */\r\nfunction pushToEnd(arr, value) {\r\n    const index = arr.indexOf(value);\r\n    if (index > -1) {\r\n        arr.splice(index, 1);\r\n        arr.push(value);\r\n    }\r\n}\r\nfunction pushMany(arr, items) {\r\n    for (const item of items) {\r\n        arr.push(item);\r\n    }\r\n}\r\nfunction asArray(x) {\r\n    return Array.isArray(x) ? x : [x];\r\n}\r\n/**\r\n * Insert the new items in the array.\r\n * @param array The original array.\r\n * @param start The zero-based location in the array from which to start inserting elements.\r\n * @param newItems The items to be inserted\r\n */\r\nfunction insertInto(array, start, newItems) {\r\n    const startIdx = getActualStartIndex(array, start);\r\n    const originalLength = array.length;\r\n    const newItemsLength = newItems.length;\r\n    array.length = originalLength + newItemsLength;\r\n    // Move the items after the start index, start from the end so that we don't overwrite any value.\r\n    for (let i = originalLength - 1; i >= startIdx; i--) {\r\n        array[i + newItemsLength] = array[i];\r\n    }\r\n    for (let i = 0; i < newItemsLength; i++) {\r\n        array[i + startIdx] = newItems[i];\r\n    }\r\n}\r\n/**\r\n * Removes elements from an array and inserts new elements in their place, returning the deleted elements. Alternative to the native Array.splice method, it\r\n * can only support limited number of items due to the maximum call stack size limit.\r\n * @param array The original array.\r\n * @param start The zero-based location in the array from which to start removing elements.\r\n * @param deleteCount The number of elements to remove.\r\n * @returns An array containing the elements that were deleted.\r\n */\r\nfunction splice(array, start, deleteCount, newItems) {\r\n    const index = getActualStartIndex(array, start);\r\n    let result = array.splice(index, deleteCount);\r\n    if (result === undefined) {\r\n        // see https://bugs.webkit.org/show_bug.cgi?id=261140\r\n        result = [];\r\n    }\r\n    insertInto(array, index, newItems);\r\n    return result;\r\n}\r\n/**\r\n * Determine the actual start index (same logic as the native splice() or slice())\r\n * If greater than the length of the array, start will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.\r\n * If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.) If array.length + start is less than 0, it will begin from index 0.\r\n * @param array The target array.\r\n * @param start The operation index.\r\n */\r\nfunction getActualStartIndex(array, start) {\r\n    return start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);\r\n}\r\nvar CompareResult;\r\n(function (CompareResult) {\r\n    function isLessThan(result) {\r\n        return result < 0;\r\n    }\r\n    CompareResult.isLessThan = isLessThan;\r\n    function isLessThanOrEqual(result) {\r\n        return result <= 0;\r\n    }\r\n    CompareResult.isLessThanOrEqual = isLessThanOrEqual;\r\n    function isGreaterThan(result) {\r\n        return result > 0;\r\n    }\r\n    CompareResult.isGreaterThan = isGreaterThan;\r\n    function isNeitherLessOrGreaterThan(result) {\r\n        return result === 0;\r\n    }\r\n    CompareResult.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;\r\n    CompareResult.greaterThan = 1;\r\n    CompareResult.lessThan = -1;\r\n    CompareResult.neitherLessOrGreaterThan = 0;\r\n})(CompareResult || (CompareResult = {}));\r\nfunction compareBy(selector, comparator) {\r\n    return (a, b) => comparator(selector(a), selector(b));\r\n}\r\nfunction tieBreakComparators(...comparators) {\r\n    return (item1, item2) => {\r\n        for (const comparator of comparators) {\r\n            const result = comparator(item1, item2);\r\n            if (!CompareResult.isNeitherLessOrGreaterThan(result)) {\r\n                return result;\r\n            }\r\n        }\r\n        return CompareResult.neitherLessOrGreaterThan;\r\n    };\r\n}\r\n/**\r\n * The natural order on numbers.\r\n*/\r\nconst numberComparator = (a, b) => a - b;\r\nconst booleanComparator = (a, b) => numberComparator(a ? 1 : 0, b ? 1 : 0);\r\nfunction reverseOrder(comparator) {\r\n    return (a, b) => -comparator(a, b);\r\n}\r\nclass ArrayQueue {\r\n    /**\r\n     * Constructs a queue that is backed by the given array. Runtime is O(1).\r\n    */\r\n    constructor(items) {\r\n        this.items = items;\r\n        this.firstIdx = 0;\r\n        this.lastIdx = this.items.length - 1;\r\n    }\r\n    get length() {\r\n        return this.lastIdx - this.firstIdx + 1;\r\n    }\r\n    /**\r\n     * Consumes elements from the beginning of the queue as long as the predicate returns true.\r\n     * If no elements were consumed, `null` is returned. Has a runtime of O(result.length).\r\n    */\r\n    takeWhile(predicate) {\r\n        // P(k) := k <= this.lastIdx && predicate(this.items[k])\r\n        // Find s := min { k | k >= this.firstIdx && !P(k) } and return this.data[this.firstIdx...s)\r\n        let startIdx = this.firstIdx;\r\n        while (startIdx < this.items.length && predicate(this.items[startIdx])) {\r\n            startIdx++;\r\n        }\r\n        const result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);\r\n        this.firstIdx = startIdx;\r\n        return result;\r\n    }\r\n    /**\r\n     * Consumes elements from the end of the queue as long as the predicate returns true.\r\n     * If no elements were consumed, `null` is returned.\r\n     * The result has the same order as the underlying array!\r\n    */\r\n    takeFromEndWhile(predicate) {\r\n        // P(k) := this.firstIdx >= k && predicate(this.items[k])\r\n        // Find s := max { k | k <= this.lastIdx && !P(k) } and return this.data(s...this.lastIdx]\r\n        let endIdx = this.lastIdx;\r\n        while (endIdx >= 0 && predicate(this.items[endIdx])) {\r\n            endIdx--;\r\n        }\r\n        const result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);\r\n        this.lastIdx = endIdx;\r\n        return result;\r\n    }\r\n    peek() {\r\n        if (this.length === 0) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.firstIdx];\r\n    }\r\n    dequeue() {\r\n        const result = this.items[this.firstIdx];\r\n        this.firstIdx++;\r\n        return result;\r\n    }\r\n    takeCount(count) {\r\n        const result = this.items.slice(this.firstIdx, this.firstIdx + count);\r\n        this.firstIdx += count;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * This class is faster than an iterator and array for lazy computed data.\r\n*/\r\nclass CallbackIterable {\r\n    constructor(\r\n    /**\r\n     * Calls the callback for every item.\r\n     * Stops when the callback returns false.\r\n    */\r\n    iterate) {\r\n        this.iterate = iterate;\r\n    }\r\n    toArray() {\r\n        const result = [];\r\n        this.iterate(item => { result.push(item); return true; });\r\n        return result;\r\n    }\r\n    filter(predicate) {\r\n        return new CallbackIterable(cb => this.iterate(item => predicate(item) ? cb(item) : true));\r\n    }\r\n    map(mapFn) {\r\n        return new CallbackIterable(cb => this.iterate(item => cb(mapFn(item))));\r\n    }\r\n    findLast(predicate) {\r\n        let result;\r\n        this.iterate(item => {\r\n            if (predicate(item)) {\r\n                result = item;\r\n            }\r\n            return true;\r\n        });\r\n        return result;\r\n    }\r\n    findLastMaxBy(comparator) {\r\n        let result;\r\n        let first = true;\r\n        this.iterate(item => {\r\n            if (first || CompareResult.isGreaterThan(comparator(item, result))) {\r\n                first = false;\r\n                result = item;\r\n            }\r\n            return true;\r\n        });\r\n        return result;\r\n    }\r\n}\r\nCallbackIterable.empty = new CallbackIterable(_callback => { });\r\n/**\r\n * Represents a re-arrangement of items in an array.\r\n */\r\nclass Permutation {\r\n    constructor(_indexMap) {\r\n        this._indexMap = _indexMap;\r\n    }\r\n    /**\r\n     * Returns a permutation that sorts the given array according to the given compare function.\r\n     */\r\n    static createSortPermutation(arr, compareFn) {\r\n        const sortIndices = Array.from(arr.keys()).sort((index1, index2) => compareFn(arr[index1], arr[index2]));\r\n        return new Permutation(sortIndices);\r\n    }\r\n    /**\r\n     * Returns a new array with the elements of the given array re-arranged according to this permutation.\r\n     */\r\n    apply(arr) {\r\n        return arr.map((_, index) => arr[this._indexMap[index]]);\r\n    }\r\n    /**\r\n     * Returns a new permutation that undoes the re-arrangement of this permutation.\r\n    */\r\n    inverse() {\r\n        const inverseIndexMap = this._indexMap.slice();\r\n        for (let i = 0; i < this._indexMap.length; i++) {\r\n            inverseIndexMap[this._indexMap[i]] = i;\r\n        }\r\n        return new Permutation(inverseIndexMap);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/arrays.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MonotonousArray: () => (/* binding */ MonotonousArray),\n/* harmony export */   findFirstIdxMonotonousOrArrLen: () => (/* binding */ findFirstIdxMonotonousOrArrLen),\n/* harmony export */   findFirstMax: () => (/* binding */ findFirstMax),\n/* harmony export */   findFirstMin: () => (/* binding */ findFirstMin),\n/* harmony export */   findFirstMonotonous: () => (/* binding */ findFirstMonotonous),\n/* harmony export */   findLast: () => (/* binding */ findLast),\n/* harmony export */   findLastIdx: () => (/* binding */ findLastIdx),\n/* harmony export */   findLastIdxMonotonous: () => (/* binding */ findLastIdxMonotonous),\n/* harmony export */   findLastMax: () => (/* binding */ findLastMax),\n/* harmony export */   findLastMonotonous: () => (/* binding */ findLastMonotonous),\n/* harmony export */   findMaxIdx: () => (/* binding */ findMaxIdx),\n/* harmony export */   mapFindFirst: () => (/* binding */ mapFindFirst)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nfunction findLast(array, predicate) {\r\n    const idx = findLastIdx(array, predicate);\r\n    if (idx === -1) {\r\n        return undefined;\r\n    }\r\n    return array[idx];\r\n}\r\nfunction findLastIdx(array, predicate, fromIndex = array.length - 1) {\r\n    for (let i = fromIndex; i >= 0; i--) {\r\n        const element = array[i];\r\n        if (predicate(element)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Finds the last item where predicate is true using binary search.\r\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!\r\n *\r\n * @returns `undefined` if no item matches, otherwise the last item that matches the predicate.\r\n */\r\nfunction findLastMonotonous(array, predicate) {\r\n    const idx = findLastIdxMonotonous(array, predicate);\r\n    return idx === -1 ? undefined : array[idx];\r\n}\r\n/**\r\n * Finds the last item where predicate is true using binary search.\r\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!\r\n *\r\n * @returns `startIdx - 1` if predicate is false for all items, otherwise the index of the last item that matches the predicate.\r\n */\r\nfunction findLastIdxMonotonous(array, predicate, startIdx = 0, endIdxEx = array.length) {\r\n    let i = startIdx;\r\n    let j = endIdxEx;\r\n    while (i < j) {\r\n        const k = Math.floor((i + j) / 2);\r\n        if (predicate(array[k])) {\r\n            i = k + 1;\r\n        }\r\n        else {\r\n            j = k;\r\n        }\r\n    }\r\n    return i - 1;\r\n}\r\n/**\r\n * Finds the first item where predicate is true using binary search.\r\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[false, ..., false, true, ..., true]`!\r\n *\r\n * @returns `undefined` if no item matches, otherwise the first item that matches the predicate.\r\n */\r\nfunction findFirstMonotonous(array, predicate) {\r\n    const idx = findFirstIdxMonotonousOrArrLen(array, predicate);\r\n    return idx === array.length ? undefined : array[idx];\r\n}\r\n/**\r\n * Finds the first item where predicate is true using binary search.\r\n * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[false, ..., false, true, ..., true]`!\r\n *\r\n * @returns `endIdxEx` if predicate is false for all items, otherwise the index of the first item that matches the predicate.\r\n */\r\nfunction findFirstIdxMonotonousOrArrLen(array, predicate, startIdx = 0, endIdxEx = array.length) {\r\n    let i = startIdx;\r\n    let j = endIdxEx;\r\n    while (i < j) {\r\n        const k = Math.floor((i + j) / 2);\r\n        if (predicate(array[k])) {\r\n            j = k;\r\n        }\r\n        else {\r\n            i = k + 1;\r\n        }\r\n    }\r\n    return i;\r\n}\r\n/**\r\n * Use this when\r\n * * You have a sorted array\r\n * * You query this array with a monotonous predicate to find the last item that has a certain property.\r\n * * You query this array multiple times with monotonous predicates that get weaker and weaker.\r\n */\r\nclass MonotonousArray {\r\n    constructor(_array) {\r\n        this._array = _array;\r\n        this._findLastMonotonousLastIdx = 0;\r\n    }\r\n    /**\r\n     * The predicate must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!\r\n     * For subsequent calls, current predicate must be weaker than (or equal to) the previous predicate, i.e. more entries must be `true`.\r\n     */\r\n    findLastMonotonous(predicate) {\r\n        if (MonotonousArray.assertInvariants) {\r\n            if (this._prevFindLastPredicate) {\r\n                for (const item of this._array) {\r\n                    if (this._prevFindLastPredicate(item) && !predicate(item)) {\r\n                        throw new Error('MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate.');\r\n                    }\r\n                }\r\n            }\r\n            this._prevFindLastPredicate = predicate;\r\n        }\r\n        const idx = findLastIdxMonotonous(this._array, predicate, this._findLastMonotonousLastIdx);\r\n        this._findLastMonotonousLastIdx = idx + 1;\r\n        return idx === -1 ? undefined : this._array[idx];\r\n    }\r\n}\r\nMonotonousArray.assertInvariants = false;\r\n/**\r\n * Returns the first item that is equal to or greater than every other item.\r\n*/\r\nfunction findFirstMax(array, comparator) {\r\n    if (array.length === 0) {\r\n        return undefined;\r\n    }\r\n    let max = array[0];\r\n    for (let i = 1; i < array.length; i++) {\r\n        const item = array[i];\r\n        if (comparator(item, max) > 0) {\r\n            max = item;\r\n        }\r\n    }\r\n    return max;\r\n}\r\n/**\r\n * Returns the last item that is equal to or greater than every other item.\r\n*/\r\nfunction findLastMax(array, comparator) {\r\n    if (array.length === 0) {\r\n        return undefined;\r\n    }\r\n    let max = array[0];\r\n    for (let i = 1; i < array.length; i++) {\r\n        const item = array[i];\r\n        if (comparator(item, max) >= 0) {\r\n            max = item;\r\n        }\r\n    }\r\n    return max;\r\n}\r\n/**\r\n * Returns the first item that is equal to or less than every other item.\r\n*/\r\nfunction findFirstMin(array, comparator) {\r\n    return findFirstMax(array, (a, b) => -comparator(a, b));\r\n}\r\nfunction findMaxIdx(array, comparator) {\r\n    if (array.length === 0) {\r\n        return -1;\r\n    }\r\n    let maxIdx = 0;\r\n    for (let i = 1; i < array.length; i++) {\r\n        const item = array[i];\r\n        if (comparator(item, array[maxIdx]) > 0) {\r\n            maxIdx = i;\r\n        }\r\n    }\r\n    return maxIdx;\r\n}\r\n/**\r\n * Returns the first mapped value of the array which is not undefined.\r\n */\r\nfunction mapFindFirst(items, mapFn) {\r\n    for (const value of items) {\r\n        const mapped = mapFn(value);\r\n        if (mapped !== undefined) {\r\n            return mapped;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vYXJyYXlzRmluZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vYXJyYXlzRmluZC5qcz8wNjg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5leHBvcnQgZnVuY3Rpb24gZmluZExhc3QoYXJyYXksIHByZWRpY2F0ZSkge1xyXG4gICAgY29uc3QgaWR4ID0gZmluZExhc3RJZHgoYXJyYXksIHByZWRpY2F0ZSk7XHJcbiAgICBpZiAoaWR4ID09PSAtMSkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXlbaWR4XTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZmluZExhc3RJZHgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMSkge1xyXG4gICAgZm9yIChsZXQgaSA9IGZyb21JbmRleDsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaV07XHJcbiAgICAgICAgaWYgKHByZWRpY2F0ZShlbGVtZW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLTE7XHJcbn1cclxuLyoqXHJcbiAqIEZpbmRzIHRoZSBsYXN0IGl0ZW0gd2hlcmUgcHJlZGljYXRlIGlzIHRydWUgdXNpbmcgYmluYXJ5IHNlYXJjaC5cclxuICogYHByZWRpY2F0ZWAgbXVzdCBiZSBtb25vdG9ub3VzLCBpLmUuIGBhcnIubWFwKHByZWRpY2F0ZSlgIG11c3QgYmUgbGlrZSBgW3RydWUsIC4uLiwgdHJ1ZSwgZmFsc2UsIC4uLiwgZmFsc2VdYCFcclxuICpcclxuICogQHJldHVybnMgYHVuZGVmaW5lZGAgaWYgbm8gaXRlbSBtYXRjaGVzLCBvdGhlcndpc2UgdGhlIGxhc3QgaXRlbSB0aGF0IG1hdGNoZXMgdGhlIHByZWRpY2F0ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kTGFzdE1vbm90b25vdXMoYXJyYXksIHByZWRpY2F0ZSkge1xyXG4gICAgY29uc3QgaWR4ID0gZmluZExhc3RJZHhNb25vdG9ub3VzKGFycmF5LCBwcmVkaWNhdGUpO1xyXG4gICAgcmV0dXJuIGlkeCA9PT0gLTEgPyB1bmRlZmluZWQgOiBhcnJheVtpZHhdO1xyXG59XHJcbi8qKlxyXG4gKiBGaW5kcyB0aGUgbGFzdCBpdGVtIHdoZXJlIHByZWRpY2F0ZSBpcyB0cnVlIHVzaW5nIGJpbmFyeSBzZWFyY2guXHJcbiAqIGBwcmVkaWNhdGVgIG11c3QgYmUgbW9ub3Rvbm91cywgaS5lLiBgYXJyLm1hcChwcmVkaWNhdGUpYCBtdXN0IGJlIGxpa2UgYFt0cnVlLCAuLi4sIHRydWUsIGZhbHNlLCAuLi4sIGZhbHNlXWAhXHJcbiAqXHJcbiAqIEByZXR1cm5zIGBzdGFydElkeCAtIDFgIGlmIHByZWRpY2F0ZSBpcyBmYWxzZSBmb3IgYWxsIGl0ZW1zLCBvdGhlcndpc2UgdGhlIGluZGV4IG9mIHRoZSBsYXN0IGl0ZW0gdGhhdCBtYXRjaGVzIHRoZSBwcmVkaWNhdGUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZmluZExhc3RJZHhNb25vdG9ub3VzKGFycmF5LCBwcmVkaWNhdGUsIHN0YXJ0SWR4ID0gMCwgZW5kSWR4RXggPSBhcnJheS5sZW5ndGgpIHtcclxuICAgIGxldCBpID0gc3RhcnRJZHg7XHJcbiAgICBsZXQgaiA9IGVuZElkeEV4O1xyXG4gICAgd2hpbGUgKGkgPCBqKSB7XHJcbiAgICAgICAgY29uc3QgayA9IE1hdGguZmxvb3IoKGkgKyBqKSAvIDIpO1xyXG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba10pKSB7XHJcbiAgICAgICAgICAgIGkgPSBrICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGogPSBrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpIC0gMTtcclxufVxyXG4vKipcclxuICogRmluZHMgdGhlIGZpcnN0IGl0ZW0gd2hlcmUgcHJlZGljYXRlIGlzIHRydWUgdXNpbmcgYmluYXJ5IHNlYXJjaC5cclxuICogYHByZWRpY2F0ZWAgbXVzdCBiZSBtb25vdG9ub3VzLCBpLmUuIGBhcnIubWFwKHByZWRpY2F0ZSlgIG11c3QgYmUgbGlrZSBgW2ZhbHNlLCAuLi4sIGZhbHNlLCB0cnVlLCAuLi4sIHRydWVdYCFcclxuICpcclxuICogQHJldHVybnMgYHVuZGVmaW5lZGAgaWYgbm8gaXRlbSBtYXRjaGVzLCBvdGhlcndpc2UgdGhlIGZpcnN0IGl0ZW0gdGhhdCBtYXRjaGVzIHRoZSBwcmVkaWNhdGUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZmluZEZpcnN0TW9ub3Rvbm91cyhhcnJheSwgcHJlZGljYXRlKSB7XHJcbiAgICBjb25zdCBpZHggPSBmaW5kRmlyc3RJZHhNb25vdG9ub3VzT3JBcnJMZW4oYXJyYXksIHByZWRpY2F0ZSk7XHJcbiAgICByZXR1cm4gaWR4ID09PSBhcnJheS5sZW5ndGggPyB1bmRlZmluZWQgOiBhcnJheVtpZHhdO1xyXG59XHJcbi8qKlxyXG4gKiBGaW5kcyB0aGUgZmlyc3QgaXRlbSB3aGVyZSBwcmVkaWNhdGUgaXMgdHJ1ZSB1c2luZyBiaW5hcnkgc2VhcmNoLlxyXG4gKiBgcHJlZGljYXRlYCBtdXN0IGJlIG1vbm90b25vdXMsIGkuZS4gYGFyci5tYXAocHJlZGljYXRlKWAgbXVzdCBiZSBsaWtlIGBbZmFsc2UsIC4uLiwgZmFsc2UsIHRydWUsIC4uLiwgdHJ1ZV1gIVxyXG4gKlxyXG4gKiBAcmV0dXJucyBgZW5kSWR4RXhgIGlmIHByZWRpY2F0ZSBpcyBmYWxzZSBmb3IgYWxsIGl0ZW1zLCBvdGhlcndpc2UgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBpdGVtIHRoYXQgbWF0Y2hlcyB0aGUgcHJlZGljYXRlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRGaXJzdElkeE1vbm90b25vdXNPckFyckxlbihhcnJheSwgcHJlZGljYXRlLCBzdGFydElkeCA9IDAsIGVuZElkeEV4ID0gYXJyYXkubGVuZ3RoKSB7XHJcbiAgICBsZXQgaSA9IHN0YXJ0SWR4O1xyXG4gICAgbGV0IGogPSBlbmRJZHhFeDtcclxuICAgIHdoaWxlIChpIDwgaikge1xyXG4gICAgICAgIGNvbnN0IGsgPSBNYXRoLmZsb29yKChpICsgaikgLyAyKTtcclxuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2tdKSkge1xyXG4gICAgICAgICAgICBqID0gaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGkgPSBrICsgMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaTtcclxufVxyXG4vKipcclxuICogVXNlIHRoaXMgd2hlblxyXG4gKiAqIFlvdSBoYXZlIGEgc29ydGVkIGFycmF5XHJcbiAqICogWW91IHF1ZXJ5IHRoaXMgYXJyYXkgd2l0aCBhIG1vbm90b25vdXMgcHJlZGljYXRlIHRvIGZpbmQgdGhlIGxhc3QgaXRlbSB0aGF0IGhhcyBhIGNlcnRhaW4gcHJvcGVydHkuXHJcbiAqICogWW91IHF1ZXJ5IHRoaXMgYXJyYXkgbXVsdGlwbGUgdGltZXMgd2l0aCBtb25vdG9ub3VzIHByZWRpY2F0ZXMgdGhhdCBnZXQgd2Vha2VyIGFuZCB3ZWFrZXIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTW9ub3Rvbm91c0FycmF5IHtcclxuICAgIGNvbnN0cnVjdG9yKF9hcnJheSkge1xyXG4gICAgICAgIHRoaXMuX2FycmF5ID0gX2FycmF5O1xyXG4gICAgICAgIHRoaXMuX2ZpbmRMYXN0TW9ub3Rvbm91c0xhc3RJZHggPSAwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcHJlZGljYXRlIG11c3QgYmUgbW9ub3Rvbm91cywgaS5lLiBgYXJyLm1hcChwcmVkaWNhdGUpYCBtdXN0IGJlIGxpa2UgYFt0cnVlLCAuLi4sIHRydWUsIGZhbHNlLCAuLi4sIGZhbHNlXWAhXHJcbiAgICAgKiBGb3Igc3Vic2VxdWVudCBjYWxscywgY3VycmVudCBwcmVkaWNhdGUgbXVzdCBiZSB3ZWFrZXIgdGhhbiAob3IgZXF1YWwgdG8pIHRoZSBwcmV2aW91cyBwcmVkaWNhdGUsIGkuZS4gbW9yZSBlbnRyaWVzIG11c3QgYmUgYHRydWVgLlxyXG4gICAgICovXHJcbiAgICBmaW5kTGFzdE1vbm90b25vdXMocHJlZGljYXRlKSB7XHJcbiAgICAgICAgaWYgKE1vbm90b25vdXNBcnJheS5hc3NlcnRJbnZhcmlhbnRzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2RmluZExhc3RQcmVkaWNhdGUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLl9hcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2RmluZExhc3RQcmVkaWNhdGUoaXRlbSkgJiYgIXByZWRpY2F0ZShpdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vbm90b25vdXNBcnJheTogY3VycmVudCBwcmVkaWNhdGUgbXVzdCBiZSB3ZWFrZXIgdGhhbiAob3IgZXF1YWwgdG8pIHRoZSBwcmV2aW91cyBwcmVkaWNhdGUuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3ByZXZGaW5kTGFzdFByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaWR4ID0gZmluZExhc3RJZHhNb25vdG9ub3VzKHRoaXMuX2FycmF5LCBwcmVkaWNhdGUsIHRoaXMuX2ZpbmRMYXN0TW9ub3Rvbm91c0xhc3RJZHgpO1xyXG4gICAgICAgIHRoaXMuX2ZpbmRMYXN0TW9ub3Rvbm91c0xhc3RJZHggPSBpZHggKyAxO1xyXG4gICAgICAgIHJldHVybiBpZHggPT09IC0xID8gdW5kZWZpbmVkIDogdGhpcy5fYXJyYXlbaWR4XTtcclxuICAgIH1cclxufVxyXG5Nb25vdG9ub3VzQXJyYXkuYXNzZXJ0SW52YXJpYW50cyA9IGZhbHNlO1xyXG4vKipcclxuICogUmV0dXJucyB0aGUgZmlyc3QgaXRlbSB0aGF0IGlzIGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhbiBldmVyeSBvdGhlciBpdGVtLlxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZmluZEZpcnN0TWF4KGFycmF5LCBjb21wYXJhdG9yKSB7XHJcbiAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGxldCBtYXggPSBhcnJheVswXTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gYXJyYXlbaV07XHJcbiAgICAgICAgaWYgKGNvbXBhcmF0b3IoaXRlbSwgbWF4KSA+IDApIHtcclxuICAgICAgICAgICAgbWF4ID0gaXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF4O1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBsYXN0IGl0ZW0gdGhhdCBpcyBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gZXZlcnkgb3RoZXIgaXRlbS5cclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRMYXN0TWF4KGFycmF5LCBjb21wYXJhdG9yKSB7XHJcbiAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGxldCBtYXggPSBhcnJheVswXTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gYXJyYXlbaV07XHJcbiAgICAgICAgaWYgKGNvbXBhcmF0b3IoaXRlbSwgbWF4KSA+PSAwKSB7XHJcbiAgICAgICAgICAgIG1heCA9IGl0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1heDtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgZmlyc3QgaXRlbSB0aGF0IGlzIGVxdWFsIHRvIG9yIGxlc3MgdGhhbiBldmVyeSBvdGhlciBpdGVtLlxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZmluZEZpcnN0TWluKGFycmF5LCBjb21wYXJhdG9yKSB7XHJcbiAgICByZXR1cm4gZmluZEZpcnN0TWF4KGFycmF5LCAoYSwgYikgPT4gLWNvbXBhcmF0b3IoYSwgYikpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kTWF4SWR4KGFycmF5LCBjb21wYXJhdG9yKSB7XHJcbiAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gICAgbGV0IG1heElkeCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGFycmF5W2ldO1xyXG4gICAgICAgIGlmIChjb21wYXJhdG9yKGl0ZW0sIGFycmF5W21heElkeF0pID4gMCkge1xyXG4gICAgICAgICAgICBtYXhJZHggPSBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtYXhJZHg7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGZpcnN0IG1hcHBlZCB2YWx1ZSBvZiB0aGUgYXJyYXkgd2hpY2ggaXMgbm90IHVuZGVmaW5lZC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXBGaW5kRmlyc3QoaXRlbXMsIG1hcEZuKSB7XHJcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGl0ZW1zKSB7XHJcbiAgICAgICAgY29uc3QgbWFwcGVkID0gbWFwRm4odmFsdWUpO1xyXG4gICAgICAgIGlmIChtYXBwZWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWFwcGVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/assert.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/assert.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertFn: () => (/* binding */ assertFn),\n/* harmony export */   assertNever: () => (/* binding */ assertNever),\n/* harmony export */   checkAdjacentItems: () => (/* binding */ checkAdjacentItems),\n/* harmony export */   ok: () => (/* binding */ ok),\n/* harmony export */   softAssert: () => (/* binding */ softAssert)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Throws an error with the provided message if the provided value does not evaluate to a true Javascript value.\r\n *\r\n * @deprecated Use `assert(...)` instead.\r\n * This method is usually used like this:\r\n * ```ts\r\n * import * as assert from 'vs/base/common/assert';\r\n * assert.ok(...);\r\n * ```\r\n *\r\n * However, `assert` in that example is a user chosen name.\r\n * There is no tooling for generating such an import statement.\r\n * Thus, the `assert(...)` function should be used instead.\r\n */\r\nfunction ok(value, message) {\r\n    if (!value) {\r\n        throw new Error(message ? `Assertion failed (${message})` : 'Assertion Failed');\r\n    }\r\n}\r\nfunction assertNever(value, message = 'Unreachable') {\r\n    throw new Error(message);\r\n}\r\n/**\r\n * Like assert, but doesn't throw.\r\n */\r\nfunction softAssert(condition) {\r\n    if (!condition) {\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('Soft Assertion Failed'));\r\n    }\r\n}\r\n/**\r\n * condition must be side-effect free!\r\n */\r\nfunction assertFn(condition) {\r\n    if (!condition()) {\r\n        // eslint-disable-next-line no-debugger\r\n        debugger;\r\n        // Reevaluate `condition` again to make debugging easier\r\n        condition();\r\n        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('Assertion Failed'));\r\n    }\r\n}\r\nfunction checkAdjacentItems(items, predicate) {\r\n    let i = 0;\r\n    while (i < items.length - 1) {\r\n        const a = items[i];\r\n        const b = items[i + 1];\r\n        if (!predicate(a, b)) {\r\n            return false;\r\n        }\r\n        i++;\r\n    }\r\n    return true;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vYXNzZXJ0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ29FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsdURBQXVELFFBQVE7QUFDL0Q7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxRQUFRLDZEQUFpQixLQUFLLDBEQUFrQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSw2REFBaUIsS0FBSywwREFBa0I7QUFDaEQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9hc3NlcnQuanM/MTU2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgQnVnSW5kaWNhdGluZ0Vycm9yLCBvblVuZXhwZWN0ZWRFcnJvciB9IGZyb20gJy4vZXJyb3JzLmpzJztcclxuLyoqXHJcbiAqIFRocm93cyBhbiBlcnJvciB3aXRoIHRoZSBwcm92aWRlZCBtZXNzYWdlIGlmIHRoZSBwcm92aWRlZCB2YWx1ZSBkb2VzIG5vdCBldmFsdWF0ZSB0byBhIHRydWUgSmF2YXNjcmlwdCB2YWx1ZS5cclxuICpcclxuICogQGRlcHJlY2F0ZWQgVXNlIGBhc3NlcnQoLi4uKWAgaW5zdGVhZC5cclxuICogVGhpcyBtZXRob2QgaXMgdXN1YWxseSB1c2VkIGxpa2UgdGhpczpcclxuICogYGBgdHNcclxuICogaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ3ZzL2Jhc2UvY29tbW9uL2Fzc2VydCc7XHJcbiAqIGFzc2VydC5vayguLi4pO1xyXG4gKiBgYGBcclxuICpcclxuICogSG93ZXZlciwgYGFzc2VydGAgaW4gdGhhdCBleGFtcGxlIGlzIGEgdXNlciBjaG9zZW4gbmFtZS5cclxuICogVGhlcmUgaXMgbm8gdG9vbGluZyBmb3IgZ2VuZXJhdGluZyBzdWNoIGFuIGltcG9ydCBzdGF0ZW1lbnQuXHJcbiAqIFRodXMsIHRoZSBgYXNzZXJ0KC4uLilgIGZ1bmN0aW9uIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gb2sodmFsdWUsIG1lc3NhZ2UpIHtcclxuICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSA/IGBBc3NlcnRpb24gZmFpbGVkICgke21lc3NhZ2V9KWAgOiAnQXNzZXJ0aW9uIEZhaWxlZCcpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROZXZlcih2YWx1ZSwgbWVzc2FnZSA9ICdVbnJlYWNoYWJsZScpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcclxufVxyXG4vKipcclxuICogTGlrZSBhc3NlcnQsIGJ1dCBkb2Vzbid0IHRocm93LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNvZnRBc3NlcnQoY29uZGl0aW9uKSB7XHJcbiAgICBpZiAoIWNvbmRpdGlvbikge1xyXG4gICAgICAgIG9uVW5leHBlY3RlZEVycm9yKG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoJ1NvZnQgQXNzZXJ0aW9uIEZhaWxlZCcpKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogY29uZGl0aW9uIG11c3QgYmUgc2lkZS1lZmZlY3QgZnJlZSFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRGbihjb25kaXRpb24pIHtcclxuICAgIGlmICghY29uZGl0aW9uKCkpIHtcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXJcclxuICAgICAgICBkZWJ1Z2dlcjtcclxuICAgICAgICAvLyBSZWV2YWx1YXRlIGBjb25kaXRpb25gIGFnYWluIHRvIG1ha2UgZGVidWdnaW5nIGVhc2llclxyXG4gICAgICAgIGNvbmRpdGlvbigpO1xyXG4gICAgICAgIG9uVW5leHBlY3RlZEVycm9yKG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoJ0Fzc2VydGlvbiBGYWlsZWQnKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQWRqYWNlbnRJdGVtcyhpdGVtcywgcHJlZGljYXRlKSB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICB3aGlsZSAoaSA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICBjb25zdCBhID0gaXRlbXNbaV07XHJcbiAgICAgICAgY29uc3QgYiA9IGl0ZW1zW2kgKyAxXTtcclxuICAgICAgICBpZiAoIXByZWRpY2F0ZShhLCBiKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/assert.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/cache.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cache.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CachedFunction: () => (/* binding */ CachedFunction),\n/* harmony export */   LRUCachedFunction: () => (/* binding */ LRUCachedFunction),\n/* harmony export */   identity: () => (/* binding */ identity)\n/* harmony export */ });\nfunction identity(t) {\r\n    return t;\r\n}\r\n/**\r\n * Uses a LRU cache to make a given parametrized function cached.\r\n * Caches just the last key/value.\r\n*/\r\nclass LRUCachedFunction {\r\n    constructor(arg1, arg2) {\r\n        this.lastCache = undefined;\r\n        this.lastArgKey = undefined;\r\n        if (typeof arg1 === 'function') {\r\n            this._fn = arg1;\r\n            this._computeKey = identity;\r\n        }\r\n        else {\r\n            this._fn = arg2;\r\n            this._computeKey = arg1.getCacheKey;\r\n        }\r\n    }\r\n    get(arg) {\r\n        const key = this._computeKey(arg);\r\n        if (this.lastArgKey !== key) {\r\n            this.lastArgKey = key;\r\n            this.lastCache = this._fn(arg);\r\n        }\r\n        return this.lastCache;\r\n    }\r\n}\r\n/**\r\n * Uses an unbounded cache to memoize the results of the given function.\r\n*/\r\nclass CachedFunction {\r\n    get cachedValues() {\r\n        return this._map;\r\n    }\r\n    constructor(arg1, arg2) {\r\n        this._map = new Map();\r\n        this._map2 = new Map();\r\n        if (typeof arg1 === 'function') {\r\n            this._fn = arg1;\r\n            this._computeKey = identity;\r\n        }\r\n        else {\r\n            this._fn = arg2;\r\n            this._computeKey = arg1.getCacheKey;\r\n        }\r\n    }\r\n    get(arg) {\r\n        const key = this._computeKey(arg);\r\n        if (this._map2.has(key)) {\r\n            return this._map2.get(key);\r\n        }\r\n        const value = this._fn(arg);\r\n        this._map.set(arg, value);\r\n        this._map2.set(key, value);\r\n        return value;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9jYWNoZS5qcz9hYmFkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh0KSB7XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG4vKipcclxuICogVXNlcyBhIExSVSBjYWNoZSB0byBtYWtlIGEgZ2l2ZW4gcGFyYW1ldHJpemVkIGZ1bmN0aW9uIGNhY2hlZC5cclxuICogQ2FjaGVzIGp1c3QgdGhlIGxhc3Qga2V5L3ZhbHVlLlxyXG4qL1xyXG5leHBvcnQgY2xhc3MgTFJVQ2FjaGVkRnVuY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IoYXJnMSwgYXJnMikge1xyXG4gICAgICAgIHRoaXMubGFzdENhY2hlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMubGFzdEFyZ0tleSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5fZm4gPSBhcmcxO1xyXG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlS2V5ID0gaWRlbnRpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9mbiA9IGFyZzI7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVLZXkgPSBhcmcxLmdldENhY2hlS2V5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldChhcmcpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLl9jb21wdXRlS2V5KGFyZyk7XHJcbiAgICAgICAgaWYgKHRoaXMubGFzdEFyZ0tleSAhPT0ga2V5KSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdEFyZ0tleSA9IGtleTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0Q2FjaGUgPSB0aGlzLl9mbihhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5sYXN0Q2FjaGU7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFVzZXMgYW4gdW5ib3VuZGVkIGNhY2hlIHRvIG1lbW9pemUgdGhlIHJlc3VsdHMgb2YgdGhlIGdpdmVuIGZ1bmN0aW9uLlxyXG4qL1xyXG5leHBvcnQgY2xhc3MgQ2FjaGVkRnVuY3Rpb24ge1xyXG4gICAgZ2V0IGNhY2hlZFZhbHVlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWFwO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IoYXJnMSwgYXJnMikge1xyXG4gICAgICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLl9tYXAyID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aGlzLl9mbiA9IGFyZzE7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVLZXkgPSBpZGVudGl0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZuID0gYXJnMjtcclxuICAgICAgICAgICAgdGhpcy5fY29tcHV0ZUtleSA9IGFyZzEuZ2V0Q2FjaGVLZXk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0KGFyZykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuX2NvbXB1dGVLZXkoYXJnKTtcclxuICAgICAgICBpZiAodGhpcy5fbWFwMi5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFwMi5nZXQoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9mbihhcmcpO1xyXG4gICAgICAgIHRoaXMuX21hcC5zZXQoYXJnLCB2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5fbWFwMi5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/cache.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/cancellation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cancellation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancellationToken: () => (/* binding */ CancellationToken),\n/* harmony export */   CancellationTokenSource: () => (/* binding */ CancellationTokenSource),\n/* harmony export */   cancelOnDispose: () => (/* binding */ cancelOnDispose)\n/* harmony export */ });\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nconst shortcutEvent = Object.freeze(function (callback, context) {\r\n    const handle = setTimeout(callback.bind(context), 0);\r\n    return { dispose() { clearTimeout(handle); } };\r\n});\r\nvar CancellationToken;\r\n(function (CancellationToken) {\r\n    function isCancellationToken(thing) {\r\n        if (thing === CancellationToken.None || thing === CancellationToken.Cancelled) {\r\n            return true;\r\n        }\r\n        if (thing instanceof MutableToken) {\r\n            return true;\r\n        }\r\n        if (!thing || typeof thing !== 'object') {\r\n            return false;\r\n        }\r\n        return typeof thing.isCancellationRequested === 'boolean'\r\n            && typeof thing.onCancellationRequested === 'function';\r\n    }\r\n    CancellationToken.isCancellationToken = isCancellationToken;\r\n    CancellationToken.None = Object.freeze({\r\n        isCancellationRequested: false,\r\n        onCancellationRequested: _event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None\r\n    });\r\n    CancellationToken.Cancelled = Object.freeze({\r\n        isCancellationRequested: true,\r\n        onCancellationRequested: shortcutEvent\r\n    });\r\n})(CancellationToken || (CancellationToken = {}));\r\nclass MutableToken {\r\n    constructor() {\r\n        this._isCancelled = false;\r\n        this._emitter = null;\r\n    }\r\n    cancel() {\r\n        if (!this._isCancelled) {\r\n            this._isCancelled = true;\r\n            if (this._emitter) {\r\n                this._emitter.fire(undefined);\r\n                this.dispose();\r\n            }\r\n        }\r\n    }\r\n    get isCancellationRequested() {\r\n        return this._isCancelled;\r\n    }\r\n    get onCancellationRequested() {\r\n        if (this._isCancelled) {\r\n            return shortcutEvent;\r\n        }\r\n        if (!this._emitter) {\r\n            this._emitter = new _event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter();\r\n        }\r\n        return this._emitter.event;\r\n    }\r\n    dispose() {\r\n        if (this._emitter) {\r\n            this._emitter.dispose();\r\n            this._emitter = null;\r\n        }\r\n    }\r\n}\r\nclass CancellationTokenSource {\r\n    constructor(parent) {\r\n        this._token = undefined;\r\n        this._parentListener = undefined;\r\n        this._parentListener = parent && parent.onCancellationRequested(this.cancel, this);\r\n    }\r\n    get token() {\r\n        if (!this._token) {\r\n            // be lazy and create the token only when\r\n            // actually needed\r\n            this._token = new MutableToken();\r\n        }\r\n        return this._token;\r\n    }\r\n    cancel() {\r\n        if (!this._token) {\r\n            // save an object by returning the default\r\n            // cancelled token when cancellation happens\r\n            // before someone asks for the token\r\n            this._token = CancellationToken.Cancelled;\r\n        }\r\n        else if (this._token instanceof MutableToken) {\r\n            // actually cancel\r\n            this._token.cancel();\r\n        }\r\n    }\r\n    dispose(cancel = false) {\r\n        var _a;\r\n        if (cancel) {\r\n            this.cancel();\r\n        }\r\n        (_a = this._parentListener) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        if (!this._token) {\r\n            // ensure to initialize with an empty token if we had none\r\n            this._token = CancellationToken.None;\r\n        }\r\n        else if (this._token instanceof MutableToken) {\r\n            // actually dispose\r\n            this._token.dispose();\r\n        }\r\n    }\r\n}\r\nfunction cancelOnDispose(store) {\r\n    const source = new CancellationTokenSource();\r\n    store.add({ dispose() { source.cancel(); } });\r\n    return source.token;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY2FuY2VsbGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUM0QztBQUM1QztBQUNBO0FBQ0EsYUFBYSxZQUFZO0FBQ3pCLENBQUM7QUFDTTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsNENBQUs7QUFDdEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDLDhDQUE4QztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw4Q0FBTztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxnQkFBZ0IsWUFBWSxvQkFBb0I7QUFDaEQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9jYW5jZWxsYXRpb24uanM/MjUwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgRW1pdHRlciwgRXZlbnQgfSBmcm9tICcuL2V2ZW50LmpzJztcclxuY29uc3Qgc2hvcnRjdXRFdmVudCA9IE9iamVjdC5mcmVlemUoZnVuY3Rpb24gKGNhbGxiYWNrLCBjb250ZXh0KSB7XHJcbiAgICBjb25zdCBoYW5kbGUgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLmJpbmQoY29udGV4dCksIDApO1xyXG4gICAgcmV0dXJuIHsgZGlzcG9zZSgpIHsgY2xlYXJUaW1lb3V0KGhhbmRsZSk7IH0gfTtcclxufSk7XHJcbmV4cG9ydCB2YXIgQ2FuY2VsbGF0aW9uVG9rZW47XHJcbihmdW5jdGlvbiAoQ2FuY2VsbGF0aW9uVG9rZW4pIHtcclxuICAgIGZ1bmN0aW9uIGlzQ2FuY2VsbGF0aW9uVG9rZW4odGhpbmcpIHtcclxuICAgICAgICBpZiAodGhpbmcgPT09IENhbmNlbGxhdGlvblRva2VuLk5vbmUgfHwgdGhpbmcgPT09IENhbmNlbGxhdGlvblRva2VuLkNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaW5nIGluc3RhbmNlb2YgTXV0YWJsZVRva2VuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaW5nIHx8IHR5cGVvZiB0aGluZyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaW5nLmlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkID09PSAnYm9vbGVhbidcclxuICAgICAgICAgICAgJiYgdHlwZW9mIHRoaW5nLm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkID09PSAnZnVuY3Rpb24nO1xyXG4gICAgfVxyXG4gICAgQ2FuY2VsbGF0aW9uVG9rZW4uaXNDYW5jZWxsYXRpb25Ub2tlbiA9IGlzQ2FuY2VsbGF0aW9uVG9rZW47XHJcbiAgICBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IGZhbHNlLFxyXG4gICAgICAgIG9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiBFdmVudC5Ob25lXHJcbiAgICB9KTtcclxuICAgIENhbmNlbGxhdGlvblRva2VuLkNhbmNlbGxlZCA9IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIGlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiB0cnVlLFxyXG4gICAgICAgIG9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiBzaG9ydGN1dEV2ZW50XHJcbiAgICB9KTtcclxufSkoQ2FuY2VsbGF0aW9uVG9rZW4gfHwgKENhbmNlbGxhdGlvblRva2VuID0ge30pKTtcclxuY2xhc3MgTXV0YWJsZVRva2VuIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fZW1pdHRlciA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBjYW5jZWwoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0NhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmZpcmUodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0NhbmNlbGxlZDtcclxuICAgIH1cclxuICAgIGdldCBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNDYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNob3J0Y3V0RXZlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5fZW1pdHRlcikge1xyXG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VtaXR0ZXIuZXZlbnQ7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9lbWl0dGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIENhbmNlbGxhdGlvblRva2VuU291cmNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudCkge1xyXG4gICAgICAgIHRoaXMuX3Rva2VuID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX3BhcmVudExpc3RlbmVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX3BhcmVudExpc3RlbmVyID0gcGFyZW50ICYmIHBhcmVudC5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCh0aGlzLmNhbmNlbCwgdGhpcyk7XHJcbiAgICB9XHJcbiAgICBnZXQgdG9rZW4oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xyXG4gICAgICAgICAgICAvLyBiZSBsYXp5IGFuZCBjcmVhdGUgdGhlIHRva2VuIG9ubHkgd2hlblxyXG4gICAgICAgICAgICAvLyBhY3R1YWxseSBuZWVkZWRcclxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBuZXcgTXV0YWJsZVRva2VuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbjtcclxuICAgIH1cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3Rva2VuKSB7XHJcbiAgICAgICAgICAgIC8vIHNhdmUgYW4gb2JqZWN0IGJ5IHJldHVybmluZyB0aGUgZGVmYXVsdFxyXG4gICAgICAgICAgICAvLyBjYW5jZWxsZWQgdG9rZW4gd2hlbiBjYW5jZWxsYXRpb24gaGFwcGVuc1xyXG4gICAgICAgICAgICAvLyBiZWZvcmUgc29tZW9uZSBhc2tzIGZvciB0aGUgdG9rZW5cclxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5DYW5jZWxsZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3Rva2VuIGluc3RhbmNlb2YgTXV0YWJsZVRva2VuKSB7XHJcbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IGNhbmNlbFxyXG4gICAgICAgICAgICB0aGlzLl90b2tlbi5jYW5jZWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKGNhbmNlbCA9IGZhbHNlKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmIChjYW5jZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKF9hID0gdGhpcy5fcGFyZW50TGlzdGVuZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kaXNwb3NlKCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xyXG4gICAgICAgICAgICAvLyBlbnN1cmUgdG8gaW5pdGlhbGl6ZSB3aXRoIGFuIGVtcHR5IHRva2VuIGlmIHdlIGhhZCBub25lXHJcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdG9rZW4gaW5zdGFuY2VvZiBNdXRhYmxlVG9rZW4pIHtcclxuICAgICAgICAgICAgLy8gYWN0dWFsbHkgZGlzcG9zZVxyXG4gICAgICAgICAgICB0aGlzLl90b2tlbi5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWxPbkRpc3Bvc2Uoc3RvcmUpIHtcclxuICAgIGNvbnN0IHNvdXJjZSA9IG5ldyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSgpO1xyXG4gICAgc3RvcmUuYWRkKHsgZGlzcG9zZSgpIHsgc291cmNlLmNhbmNlbCgpOyB9IH0pO1xyXG4gICAgcmV0dXJuIHNvdXJjZS50b2tlbjtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/cancellation.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codicons.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codicons.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Codicon: () => (/* binding */ Codicon),\n/* harmony export */   codiconsDerived: () => (/* binding */ codiconsDerived)\n/* harmony export */ });\n/* harmony import */ var _codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codiconsUtil.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js\");\n/* harmony import */ var _codiconsLibrary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codiconsLibrary.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js\");\n\r\n\r\n/**\r\n * Derived icons, that could become separate icons.\r\n * These mappings should be moved into the mapping file in the vscode-codicons repo at some point.\r\n */\r\nconst codiconsDerived = {\r\n    dialogError: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-error', 'error'),\r\n    dialogWarning: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-warning', 'warning'),\r\n    dialogInfo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-info', 'info'),\r\n    dialogClose: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dialog-close', 'close'),\r\n    treeItemExpanded: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-item-expanded', 'chevron-down'), // collapsed is done with rotation\r\n    treeFilterOnTypeOn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-filter-on-type-on', 'list-filter'),\r\n    treeFilterOnTypeOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-filter-on-type-off', 'list-selection'),\r\n    treeFilterClear: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-filter-clear', 'close'),\r\n    treeItemLoading: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tree-item-loading', 'loading'),\r\n    menuSelection: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menu-selection', 'check'),\r\n    menuSubmenu: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menu-submenu', 'chevron-right'),\r\n    menuBarMore: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menubar-more', 'more'),\r\n    scrollbarButtonLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-left', 'triangle-left'),\r\n    scrollbarButtonRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-right', 'triangle-right'),\r\n    scrollbarButtonUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-up', 'triangle-up'),\r\n    scrollbarButtonDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('scrollbar-button-down', 'triangle-down'),\r\n    toolBarMore: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('toolbar-more', 'more'),\r\n    quickInputBack: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('quick-input-back', 'arrow-left'),\r\n    dropDownButton: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('drop-down-button', 0xeab4),\r\n    symbolCustomColor: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-customcolor', 0xeb5c),\r\n    exportIcon: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('export', 0xebac),\r\n    workspaceUnspecified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-unspecified', 0xebc3),\r\n    newLine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('newline', 0xebea),\r\n    thumbsDownFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsdown-filled', 0xec13),\r\n    thumbsUpFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsup-filled', 0xec14),\r\n    gitFetch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-fetch', 0xec1d),\r\n    lightbulbSparkleAutofix: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb-sparkle-autofix', 0xec1f),\r\n    debugBreakpointPending: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-pending', 0xebd9),\r\n};\r\n/**\r\n * The Codicon library is a set of default icons that are built-in in VS Code.\r\n *\r\n * In the product (outside of base) Codicons should only be used as defaults. In order to have all icons in VS Code\r\n * themeable, component should define new, UI component specific icons using `iconRegistry.registerIcon`.\r\n * In that call a Codicon can be named as default.\r\n */\r\nconst Codicon = {\r\n    ..._codiconsLibrary_js__WEBPACK_IMPORTED_MODULE_1__.codiconsLibrary,\r\n    ...codiconsDerived\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUNVO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxpQkFBaUIsMERBQVE7QUFDekIsbUJBQW1CLDBEQUFRO0FBQzNCLGdCQUFnQiwwREFBUTtBQUN4QixpQkFBaUIsMERBQVE7QUFDekIsc0JBQXNCLDBEQUFRO0FBQzlCLHdCQUF3QiwwREFBUTtBQUNoQyx5QkFBeUIsMERBQVE7QUFDakMscUJBQXFCLDBEQUFRO0FBQzdCLHFCQUFxQiwwREFBUTtBQUM3QixtQkFBbUIsMERBQVE7QUFDM0IsaUJBQWlCLDBEQUFRO0FBQ3pCLGlCQUFpQiwwREFBUTtBQUN6Qix5QkFBeUIsMERBQVE7QUFDakMsMEJBQTBCLDBEQUFRO0FBQ2xDLHVCQUF1QiwwREFBUTtBQUMvQix5QkFBeUIsMERBQVE7QUFDakMsaUJBQWlCLDBEQUFRO0FBQ3pCLG9CQUFvQiwwREFBUTtBQUM1QixvQkFBb0IsMERBQVE7QUFDNUIsdUJBQXVCLDBEQUFRO0FBQy9CLGdCQUFnQiwwREFBUTtBQUN4QiwwQkFBMEIsMERBQVE7QUFDbEMsYUFBYSwwREFBUTtBQUNyQixzQkFBc0IsMERBQVE7QUFDOUIsb0JBQW9CLDBEQUFRO0FBQzVCLGNBQWMsMERBQVE7QUFDdEIsNkJBQTZCLDBEQUFRO0FBQ3JDLDRCQUE0QiwwREFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxPQUFPLGdFQUFlO0FBQ3RCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnMuanM/NTYxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWdpc3RlciB9IGZyb20gJy4vY29kaWNvbnNVdGlsLmpzJztcclxuaW1wb3J0IHsgY29kaWNvbnNMaWJyYXJ5IH0gZnJvbSAnLi9jb2RpY29uc0xpYnJhcnkuanMnO1xyXG4vKipcclxuICogRGVyaXZlZCBpY29ucywgdGhhdCBjb3VsZCBiZWNvbWUgc2VwYXJhdGUgaWNvbnMuXHJcbiAqIFRoZXNlIG1hcHBpbmdzIHNob3VsZCBiZSBtb3ZlZCBpbnRvIHRoZSBtYXBwaW5nIGZpbGUgaW4gdGhlIHZzY29kZS1jb2RpY29ucyByZXBvIGF0IHNvbWUgcG9pbnQuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29kaWNvbnNEZXJpdmVkID0ge1xyXG4gICAgZGlhbG9nRXJyb3I6IHJlZ2lzdGVyKCdkaWFsb2ctZXJyb3InLCAnZXJyb3InKSxcclxuICAgIGRpYWxvZ1dhcm5pbmc6IHJlZ2lzdGVyKCdkaWFsb2ctd2FybmluZycsICd3YXJuaW5nJyksXHJcbiAgICBkaWFsb2dJbmZvOiByZWdpc3RlcignZGlhbG9nLWluZm8nLCAnaW5mbycpLFxyXG4gICAgZGlhbG9nQ2xvc2U6IHJlZ2lzdGVyKCdkaWFsb2ctY2xvc2UnLCAnY2xvc2UnKSxcclxuICAgIHRyZWVJdGVtRXhwYW5kZWQ6IHJlZ2lzdGVyKCd0cmVlLWl0ZW0tZXhwYW5kZWQnLCAnY2hldnJvbi1kb3duJyksIC8vIGNvbGxhcHNlZCBpcyBkb25lIHdpdGggcm90YXRpb25cclxuICAgIHRyZWVGaWx0ZXJPblR5cGVPbjogcmVnaXN0ZXIoJ3RyZWUtZmlsdGVyLW9uLXR5cGUtb24nLCAnbGlzdC1maWx0ZXInKSxcclxuICAgIHRyZWVGaWx0ZXJPblR5cGVPZmY6IHJlZ2lzdGVyKCd0cmVlLWZpbHRlci1vbi10eXBlLW9mZicsICdsaXN0LXNlbGVjdGlvbicpLFxyXG4gICAgdHJlZUZpbHRlckNsZWFyOiByZWdpc3RlcigndHJlZS1maWx0ZXItY2xlYXInLCAnY2xvc2UnKSxcclxuICAgIHRyZWVJdGVtTG9hZGluZzogcmVnaXN0ZXIoJ3RyZWUtaXRlbS1sb2FkaW5nJywgJ2xvYWRpbmcnKSxcclxuICAgIG1lbnVTZWxlY3Rpb246IHJlZ2lzdGVyKCdtZW51LXNlbGVjdGlvbicsICdjaGVjaycpLFxyXG4gICAgbWVudVN1Ym1lbnU6IHJlZ2lzdGVyKCdtZW51LXN1Ym1lbnUnLCAnY2hldnJvbi1yaWdodCcpLFxyXG4gICAgbWVudUJhck1vcmU6IHJlZ2lzdGVyKCdtZW51YmFyLW1vcmUnLCAnbW9yZScpLFxyXG4gICAgc2Nyb2xsYmFyQnV0dG9uTGVmdDogcmVnaXN0ZXIoJ3Njcm9sbGJhci1idXR0b24tbGVmdCcsICd0cmlhbmdsZS1sZWZ0JyksXHJcbiAgICBzY3JvbGxiYXJCdXR0b25SaWdodDogcmVnaXN0ZXIoJ3Njcm9sbGJhci1idXR0b24tcmlnaHQnLCAndHJpYW5nbGUtcmlnaHQnKSxcclxuICAgIHNjcm9sbGJhckJ1dHRvblVwOiByZWdpc3Rlcignc2Nyb2xsYmFyLWJ1dHRvbi11cCcsICd0cmlhbmdsZS11cCcpLFxyXG4gICAgc2Nyb2xsYmFyQnV0dG9uRG93bjogcmVnaXN0ZXIoJ3Njcm9sbGJhci1idXR0b24tZG93bicsICd0cmlhbmdsZS1kb3duJyksXHJcbiAgICB0b29sQmFyTW9yZTogcmVnaXN0ZXIoJ3Rvb2xiYXItbW9yZScsICdtb3JlJyksXHJcbiAgICBxdWlja0lucHV0QmFjazogcmVnaXN0ZXIoJ3F1aWNrLWlucHV0LWJhY2snLCAnYXJyb3ctbGVmdCcpLFxyXG4gICAgZHJvcERvd25CdXR0b246IHJlZ2lzdGVyKCdkcm9wLWRvd24tYnV0dG9uJywgMHhlYWI0KSxcclxuICAgIHN5bWJvbEN1c3RvbUNvbG9yOiByZWdpc3Rlcignc3ltYm9sLWN1c3RvbWNvbG9yJywgMHhlYjVjKSxcclxuICAgIGV4cG9ydEljb246IHJlZ2lzdGVyKCdleHBvcnQnLCAweGViYWMpLFxyXG4gICAgd29ya3NwYWNlVW5zcGVjaWZpZWQ6IHJlZ2lzdGVyKCd3b3Jrc3BhY2UtdW5zcGVjaWZpZWQnLCAweGViYzMpLFxyXG4gICAgbmV3TGluZTogcmVnaXN0ZXIoJ25ld2xpbmUnLCAweGViZWEpLFxyXG4gICAgdGh1bWJzRG93bkZpbGxlZDogcmVnaXN0ZXIoJ3RodW1ic2Rvd24tZmlsbGVkJywgMHhlYzEzKSxcclxuICAgIHRodW1ic1VwRmlsbGVkOiByZWdpc3RlcigndGh1bWJzdXAtZmlsbGVkJywgMHhlYzE0KSxcclxuICAgIGdpdEZldGNoOiByZWdpc3RlcignZ2l0LWZldGNoJywgMHhlYzFkKSxcclxuICAgIGxpZ2h0YnVsYlNwYXJrbGVBdXRvZml4OiByZWdpc3RlcignbGlnaHRidWxiLXNwYXJrbGUtYXV0b2ZpeCcsIDB4ZWMxZiksXHJcbiAgICBkZWJ1Z0JyZWFrcG9pbnRQZW5kaW5nOiByZWdpc3RlcignZGVidWctYnJlYWtwb2ludC1wZW5kaW5nJywgMHhlYmQ5KSxcclxufTtcclxuLyoqXHJcbiAqIFRoZSBDb2RpY29uIGxpYnJhcnkgaXMgYSBzZXQgb2YgZGVmYXVsdCBpY29ucyB0aGF0IGFyZSBidWlsdC1pbiBpbiBWUyBDb2RlLlxyXG4gKlxyXG4gKiBJbiB0aGUgcHJvZHVjdCAob3V0c2lkZSBvZiBiYXNlKSBDb2RpY29ucyBzaG91bGQgb25seSBiZSB1c2VkIGFzIGRlZmF1bHRzLiBJbiBvcmRlciB0byBoYXZlIGFsbCBpY29ucyBpbiBWUyBDb2RlXHJcbiAqIHRoZW1lYWJsZSwgY29tcG9uZW50IHNob3VsZCBkZWZpbmUgbmV3LCBVSSBjb21wb25lbnQgc3BlY2lmaWMgaWNvbnMgdXNpbmcgYGljb25SZWdpc3RyeS5yZWdpc3Rlckljb25gLlxyXG4gKiBJbiB0aGF0IGNhbGwgYSBDb2RpY29uIGNhbiBiZSBuYW1lZCBhcyBkZWZhdWx0LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IENvZGljb24gPSB7XHJcbiAgICAuLi5jb2RpY29uc0xpYnJhcnksXHJcbiAgICAuLi5jb2RpY29uc0Rlcml2ZWRcclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/codicons.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codiconsLibrary: () => (/* binding */ codiconsLibrary)\n/* harmony export */ });\n/* harmony import */ var _codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codiconsUtil.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n// This file is automatically generated by (microsoft/vscode-codicons)/scripts/export-to-ts.js\r\n// Please don't edit it, as your changes will be overwritten.\r\n// Instead, add mappings to codiconsDerived in codicons.ts.\r\nconst codiconsLibrary = {\r\n    add: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('add', 0xea60),\r\n    plus: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('plus', 0xea60),\r\n    gistNew: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-new', 0xea60),\r\n    repoCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-create', 0xea60),\r\n    lightbulb: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb', 0xea61),\r\n    lightBulb: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('light-bulb', 0xea61),\r\n    repo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo', 0xea62),\r\n    repoDelete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-delete', 0xea62),\r\n    gistFork: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-fork', 0xea63),\r\n    repoForked: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-forked', 0xea63),\r\n    gitPullRequest: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request', 0xea64),\r\n    gitPullRequestAbandoned: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-abandoned', 0xea64),\r\n    recordKeys: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('record-keys', 0xea65),\r\n    keyboard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('keyboard', 0xea65),\r\n    tag: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tag', 0xea66),\r\n    gitPullRequestLabel: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-label', 0xea66),\r\n    tagAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tag-add', 0xea66),\r\n    tagRemove: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tag-remove', 0xea66),\r\n    person: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person', 0xea67),\r\n    personFollow: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-follow', 0xea67),\r\n    personOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-outline', 0xea67),\r\n    personFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-filled', 0xea67),\r\n    gitBranch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-branch', 0xea68),\r\n    gitBranchCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-branch-create', 0xea68),\r\n    gitBranchDelete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-branch-delete', 0xea68),\r\n    sourceControl: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('source-control', 0xea68),\r\n    mirror: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mirror', 0xea69),\r\n    mirrorPublic: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mirror-public', 0xea69),\r\n    star: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star', 0xea6a),\r\n    starAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-add', 0xea6a),\r\n    starDelete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-delete', 0xea6a),\r\n    starEmpty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-empty', 0xea6a),\r\n    comment: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment', 0xea6b),\r\n    commentAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-add', 0xea6b),\r\n    alert: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('alert', 0xea6c),\r\n    warning: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('warning', 0xea6c),\r\n    search: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search', 0xea6d),\r\n    searchSave: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search-save', 0xea6d),\r\n    logOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('log-out', 0xea6e),\r\n    signOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sign-out', 0xea6e),\r\n    logIn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('log-in', 0xea6f),\r\n    signIn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sign-in', 0xea6f),\r\n    eye: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye', 0xea70),\r\n    eyeUnwatch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye-unwatch', 0xea70),\r\n    eyeWatch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye-watch', 0xea70),\r\n    circleFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-filled', 0xea71),\r\n    primitiveDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('primitive-dot', 0xea71),\r\n    closeDirty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('close-dirty', 0xea71),\r\n    debugBreakpoint: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint', 0xea71),\r\n    debugBreakpointDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-disabled', 0xea71),\r\n    debugHint: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-hint', 0xea71),\r\n    terminalDecorationSuccess: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-success', 0xea71),\r\n    primitiveSquare: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('primitive-square', 0xea72),\r\n    edit: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('edit', 0xea73),\r\n    pencil: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pencil', 0xea73),\r\n    info: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('info', 0xea74),\r\n    issueOpened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-opened', 0xea74),\r\n    gistPrivate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-private', 0xea75),\r\n    gitForkPrivate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-fork-private', 0xea75),\r\n    lock: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lock', 0xea75),\r\n    mirrorPrivate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mirror-private', 0xea75),\r\n    close: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('close', 0xea76),\r\n    removeClose: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remove-close', 0xea76),\r\n    x: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('x', 0xea76),\r\n    repoSync: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-sync', 0xea77),\r\n    sync: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sync', 0xea77),\r\n    clone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clone', 0xea78),\r\n    desktopDownload: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('desktop-download', 0xea78),\r\n    beaker: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('beaker', 0xea79),\r\n    microscope: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('microscope', 0xea79),\r\n    vm: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm', 0xea7a),\r\n    deviceDesktop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-desktop', 0xea7a),\r\n    file: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file', 0xea7b),\r\n    fileText: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-text', 0xea7b),\r\n    more: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('more', 0xea7c),\r\n    ellipsis: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('ellipsis', 0xea7c),\r\n    kebabHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('kebab-horizontal', 0xea7c),\r\n    mailReply: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mail-reply', 0xea7d),\r\n    reply: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('reply', 0xea7d),\r\n    organization: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('organization', 0xea7e),\r\n    organizationFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('organization-filled', 0xea7e),\r\n    organizationOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('organization-outline', 0xea7e),\r\n    newFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('new-file', 0xea7f),\r\n    fileAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-add', 0xea7f),\r\n    newFolder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('new-folder', 0xea80),\r\n    fileDirectoryCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-directory-create', 0xea80),\r\n    trash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('trash', 0xea81),\r\n    trashcan: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('trashcan', 0xea81),\r\n    history: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('history', 0xea82),\r\n    clock: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clock', 0xea82),\r\n    folder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder', 0xea83),\r\n    fileDirectory: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-directory', 0xea83),\r\n    symbolFolder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-folder', 0xea83),\r\n    logoGithub: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('logo-github', 0xea84),\r\n    markGithub: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mark-github', 0xea84),\r\n    github: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github', 0xea84),\r\n    terminal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal', 0xea85),\r\n    console: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('console', 0xea85),\r\n    repl: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repl', 0xea85),\r\n    zap: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('zap', 0xea86),\r\n    symbolEvent: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-event', 0xea86),\r\n    error: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('error', 0xea87),\r\n    stop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('stop', 0xea87),\r\n    variable: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('variable', 0xea88),\r\n    symbolVariable: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-variable', 0xea88),\r\n    array: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('array', 0xea8a),\r\n    symbolArray: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-array', 0xea8a),\r\n    symbolModule: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-module', 0xea8b),\r\n    symbolPackage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-package', 0xea8b),\r\n    symbolNamespace: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-namespace', 0xea8b),\r\n    symbolObject: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-object', 0xea8b),\r\n    symbolMethod: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-method', 0xea8c),\r\n    symbolFunction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-function', 0xea8c),\r\n    symbolConstructor: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-constructor', 0xea8c),\r\n    symbolBoolean: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-boolean', 0xea8f),\r\n    symbolNull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-null', 0xea8f),\r\n    symbolNumeric: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-numeric', 0xea90),\r\n    symbolNumber: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-number', 0xea90),\r\n    symbolStructure: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-structure', 0xea91),\r\n    symbolStruct: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-struct', 0xea91),\r\n    symbolParameter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-parameter', 0xea92),\r\n    symbolTypeParameter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-type-parameter', 0xea92),\r\n    symbolKey: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-key', 0xea93),\r\n    symbolText: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-text', 0xea93),\r\n    symbolReference: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-reference', 0xea94),\r\n    goToFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('go-to-file', 0xea94),\r\n    symbolEnum: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-enum', 0xea95),\r\n    symbolValue: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-value', 0xea95),\r\n    symbolRuler: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-ruler', 0xea96),\r\n    symbolUnit: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-unit', 0xea96),\r\n    activateBreakpoints: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('activate-breakpoints', 0xea97),\r\n    archive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('archive', 0xea98),\r\n    arrowBoth: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-both', 0xea99),\r\n    arrowDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-down', 0xea9a),\r\n    arrowLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-left', 0xea9b),\r\n    arrowRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-right', 0xea9c),\r\n    arrowSmallDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-down', 0xea9d),\r\n    arrowSmallLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-left', 0xea9e),\r\n    arrowSmallRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-right', 0xea9f),\r\n    arrowSmallUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-small-up', 0xeaa0),\r\n    arrowUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-up', 0xeaa1),\r\n    bell: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell', 0xeaa2),\r\n    bold: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bold', 0xeaa3),\r\n    book: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('book', 0xeaa4),\r\n    bookmark: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bookmark', 0xeaa5),\r\n    debugBreakpointConditionalUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-conditional-unverified', 0xeaa6),\r\n    debugBreakpointConditional: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-conditional', 0xeaa7),\r\n    debugBreakpointConditionalDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-conditional-disabled', 0xeaa7),\r\n    debugBreakpointDataUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-data-unverified', 0xeaa8),\r\n    debugBreakpointData: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-data', 0xeaa9),\r\n    debugBreakpointDataDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-data-disabled', 0xeaa9),\r\n    debugBreakpointLogUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-log-unverified', 0xeaaa),\r\n    debugBreakpointLog: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-log', 0xeaab),\r\n    debugBreakpointLogDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-log-disabled', 0xeaab),\r\n    briefcase: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('briefcase', 0xeaac),\r\n    broadcast: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('broadcast', 0xeaad),\r\n    browser: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('browser', 0xeaae),\r\n    bug: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bug', 0xeaaf),\r\n    calendar: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('calendar', 0xeab0),\r\n    caseSensitive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('case-sensitive', 0xeab1),\r\n    check: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('check', 0xeab2),\r\n    checklist: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('checklist', 0xeab3),\r\n    chevronDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-down', 0xeab4),\r\n    chevronLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-left', 0xeab5),\r\n    chevronRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-right', 0xeab6),\r\n    chevronUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chevron-up', 0xeab7),\r\n    chromeClose: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-close', 0xeab8),\r\n    chromeMaximize: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-maximize', 0xeab9),\r\n    chromeMinimize: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-minimize', 0xeaba),\r\n    chromeRestore: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chrome-restore', 0xeabb),\r\n    circleOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-outline', 0xeabc),\r\n    circle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle', 0xeabc),\r\n    debugBreakpointUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-unverified', 0xeabc),\r\n    terminalDecorationIncomplete: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-incomplete', 0xeabc),\r\n    circleSlash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-slash', 0xeabd),\r\n    circuitBoard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circuit-board', 0xeabe),\r\n    clearAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clear-all', 0xeabf),\r\n    clippy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('clippy', 0xeac0),\r\n    closeAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('close-all', 0xeac1),\r\n    cloudDownload: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('cloud-download', 0xeac2),\r\n    cloudUpload: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('cloud-upload', 0xeac3),\r\n    code: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('code', 0xeac4),\r\n    collapseAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('collapse-all', 0xeac5),\r\n    colorMode: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('color-mode', 0xeac6),\r\n    commentDiscussion: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-discussion', 0xeac7),\r\n    creditCard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('credit-card', 0xeac9),\r\n    dash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dash', 0xeacc),\r\n    dashboard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('dashboard', 0xeacd),\r\n    database: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('database', 0xeace),\r\n    debugContinue: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-continue', 0xeacf),\r\n    debugDisconnect: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-disconnect', 0xead0),\r\n    debugPause: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-pause', 0xead1),\r\n    debugRestart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-restart', 0xead2),\r\n    debugStart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-start', 0xead3),\r\n    debugStepInto: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-into', 0xead4),\r\n    debugStepOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-out', 0xead5),\r\n    debugStepOver: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-over', 0xead6),\r\n    debugStop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stop', 0xead7),\r\n    debug: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug', 0xead8),\r\n    deviceCameraVideo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-camera-video', 0xead9),\r\n    deviceCamera: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-camera', 0xeada),\r\n    deviceMobile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('device-mobile', 0xeadb),\r\n    diffAdded: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-added', 0xeadc),\r\n    diffIgnored: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-ignored', 0xeadd),\r\n    diffModified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-modified', 0xeade),\r\n    diffRemoved: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-removed', 0xeadf),\r\n    diffRenamed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-renamed', 0xeae0),\r\n    diff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff', 0xeae1),\r\n    diffSidebyside: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-sidebyside', 0xeae1),\r\n    discard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('discard', 0xeae2),\r\n    editorLayout: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('editor-layout', 0xeae3),\r\n    emptyWindow: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('empty-window', 0xeae4),\r\n    exclude: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('exclude', 0xeae5),\r\n    extensions: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('extensions', 0xeae6),\r\n    eyeClosed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('eye-closed', 0xeae7),\r\n    fileBinary: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-binary', 0xeae8),\r\n    fileCode: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-code', 0xeae9),\r\n    fileMedia: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-media', 0xeaea),\r\n    filePdf: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-pdf', 0xeaeb),\r\n    fileSubmodule: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-submodule', 0xeaec),\r\n    fileSymlinkDirectory: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-symlink-directory', 0xeaed),\r\n    fileSymlinkFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-symlink-file', 0xeaee),\r\n    fileZip: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('file-zip', 0xeaef),\r\n    files: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('files', 0xeaf0),\r\n    filter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('filter', 0xeaf1),\r\n    flame: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('flame', 0xeaf2),\r\n    foldDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-down', 0xeaf3),\r\n    foldUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-up', 0xeaf4),\r\n    fold: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold', 0xeaf5),\r\n    folderActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder-active', 0xeaf6),\r\n    folderOpened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder-opened', 0xeaf7),\r\n    gear: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gear', 0xeaf8),\r\n    gift: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gift', 0xeaf9),\r\n    gistSecret: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist-secret', 0xeafa),\r\n    gist: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gist', 0xeafb),\r\n    gitCommit: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-commit', 0xeafc),\r\n    gitCompare: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-compare', 0xeafd),\r\n    compareChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compare-changes', 0xeafd),\r\n    gitMerge: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-merge', 0xeafe),\r\n    githubAction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-action', 0xeaff),\r\n    githubAlt: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-alt', 0xeb00),\r\n    globe: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('globe', 0xeb01),\r\n    grabber: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('grabber', 0xeb02),\r\n    graph: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph', 0xeb03),\r\n    gripper: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gripper', 0xeb04),\r\n    heart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('heart', 0xeb05),\r\n    home: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('home', 0xeb06),\r\n    horizontalRule: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('horizontal-rule', 0xeb07),\r\n    hubot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('hubot', 0xeb08),\r\n    inbox: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('inbox', 0xeb09),\r\n    issueReopened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-reopened', 0xeb0b),\r\n    issues: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issues', 0xeb0c),\r\n    italic: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('italic', 0xeb0d),\r\n    jersey: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('jersey', 0xeb0e),\r\n    json: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('json', 0xeb0f),\r\n    kebabVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('kebab-vertical', 0xeb10),\r\n    key: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('key', 0xeb11),\r\n    law: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('law', 0xeb12),\r\n    lightbulbAutofix: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb-autofix', 0xeb13),\r\n    linkExternal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('link-external', 0xeb14),\r\n    link: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('link', 0xeb15),\r\n    listOrdered: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-ordered', 0xeb16),\r\n    listUnordered: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-unordered', 0xeb17),\r\n    liveShare: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('live-share', 0xeb18),\r\n    loading: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('loading', 0xeb19),\r\n    location: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('location', 0xeb1a),\r\n    mailRead: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mail-read', 0xeb1b),\r\n    mail: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mail', 0xeb1c),\r\n    markdown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('markdown', 0xeb1d),\r\n    megaphone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('megaphone', 0xeb1e),\r\n    mention: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mention', 0xeb1f),\r\n    milestone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('milestone', 0xeb20),\r\n    gitPullRequestMilestone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-milestone', 0xeb20),\r\n    mortarBoard: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mortar-board', 0xeb21),\r\n    move: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('move', 0xeb22),\r\n    multipleWindows: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('multiple-windows', 0xeb23),\r\n    mute: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mute', 0xeb24),\r\n    noNewline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('no-newline', 0xeb25),\r\n    note: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('note', 0xeb26),\r\n    octoface: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('octoface', 0xeb27),\r\n    openPreview: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('open-preview', 0xeb28),\r\n    package: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('package', 0xeb29),\r\n    paintcan: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('paintcan', 0xeb2a),\r\n    pin: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pin', 0xeb2b),\r\n    play: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('play', 0xeb2c),\r\n    run: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run', 0xeb2c),\r\n    plug: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('plug', 0xeb2d),\r\n    preserveCase: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('preserve-case', 0xeb2e),\r\n    preview: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('preview', 0xeb2f),\r\n    project: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('project', 0xeb30),\r\n    pulse: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pulse', 0xeb31),\r\n    question: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('question', 0xeb32),\r\n    quote: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('quote', 0xeb33),\r\n    radioTower: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('radio-tower', 0xeb34),\r\n    reactions: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('reactions', 0xeb35),\r\n    references: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('references', 0xeb36),\r\n    refresh: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('refresh', 0xeb37),\r\n    regex: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('regex', 0xeb38),\r\n    remoteExplorer: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remote-explorer', 0xeb39),\r\n    remote: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remote', 0xeb3a),\r\n    remove: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('remove', 0xeb3b),\r\n    replaceAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('replace-all', 0xeb3c),\r\n    replace: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('replace', 0xeb3d),\r\n    repoClone: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-clone', 0xeb3e),\r\n    repoForcePush: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-force-push', 0xeb3f),\r\n    repoPull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-pull', 0xeb40),\r\n    repoPush: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-push', 0xeb41),\r\n    report: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('report', 0xeb42),\r\n    requestChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('request-changes', 0xeb43),\r\n    rocket: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('rocket', 0xeb44),\r\n    rootFolderOpened: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('root-folder-opened', 0xeb45),\r\n    rootFolder: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('root-folder', 0xeb46),\r\n    rss: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('rss', 0xeb47),\r\n    ruby: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('ruby', 0xeb48),\r\n    saveAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('save-all', 0xeb49),\r\n    saveAs: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('save-as', 0xeb4a),\r\n    save: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('save', 0xeb4b),\r\n    screenFull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('screen-full', 0xeb4c),\r\n    screenNormal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('screen-normal', 0xeb4d),\r\n    searchStop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search-stop', 0xeb4e),\r\n    server: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('server', 0xeb50),\r\n    settingsGear: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('settings-gear', 0xeb51),\r\n    settings: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('settings', 0xeb52),\r\n    shield: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('shield', 0xeb53),\r\n    smiley: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('smiley', 0xeb54),\r\n    sortPrecedence: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sort-precedence', 0xeb55),\r\n    splitHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('split-horizontal', 0xeb56),\r\n    splitVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('split-vertical', 0xeb57),\r\n    squirrel: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('squirrel', 0xeb58),\r\n    starFull: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-full', 0xeb59),\r\n    starHalf: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('star-half', 0xeb5a),\r\n    symbolClass: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-class', 0xeb5b),\r\n    symbolColor: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-color', 0xeb5c),\r\n    symbolConstant: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-constant', 0xeb5d),\r\n    symbolEnumMember: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-enum-member', 0xeb5e),\r\n    symbolField: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-field', 0xeb5f),\r\n    symbolFile: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-file', 0xeb60),\r\n    symbolInterface: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-interface', 0xeb61),\r\n    symbolKeyword: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-keyword', 0xeb62),\r\n    symbolMisc: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-misc', 0xeb63),\r\n    symbolOperator: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-operator', 0xeb64),\r\n    symbolProperty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-property', 0xeb65),\r\n    wrench: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('wrench', 0xeb65),\r\n    wrenchSubaction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('wrench-subaction', 0xeb65),\r\n    symbolSnippet: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-snippet', 0xeb66),\r\n    tasklist: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tasklist', 0xeb67),\r\n    telescope: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('telescope', 0xeb68),\r\n    textSize: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('text-size', 0xeb69),\r\n    threeBars: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('three-bars', 0xeb6a),\r\n    thumbsdown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsdown', 0xeb6b),\r\n    thumbsup: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsup', 0xeb6c),\r\n    tools: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('tools', 0xeb6d),\r\n    triangleDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-down', 0xeb6e),\r\n    triangleLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-left', 0xeb6f),\r\n    triangleRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-right', 0xeb70),\r\n    triangleUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('triangle-up', 0xeb71),\r\n    twitter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('twitter', 0xeb72),\r\n    unfold: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unfold', 0xeb73),\r\n    unlock: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unlock', 0xeb74),\r\n    unmute: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unmute', 0xeb75),\r\n    unverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('unverified', 0xeb76),\r\n    verified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('verified', 0xeb77),\r\n    versions: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('versions', 0xeb78),\r\n    vmActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-active', 0xeb79),\r\n    vmOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-outline', 0xeb7a),\r\n    vmRunning: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-running', 0xeb7b),\r\n    watch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('watch', 0xeb7c),\r\n    whitespace: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('whitespace', 0xeb7d),\r\n    wholeWord: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('whole-word', 0xeb7e),\r\n    window: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('window', 0xeb7f),\r\n    wordWrap: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('word-wrap', 0xeb80),\r\n    zoomIn: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('zoom-in', 0xeb81),\r\n    zoomOut: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('zoom-out', 0xeb82),\r\n    listFilter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-filter', 0xeb83),\r\n    listFlat: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-flat', 0xeb84),\r\n    listSelection: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-selection', 0xeb85),\r\n    selection: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('selection', 0xeb85),\r\n    listTree: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('list-tree', 0xeb86),\r\n    debugBreakpointFunctionUnverified: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-function-unverified', 0xeb87),\r\n    debugBreakpointFunction: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-function', 0xeb88),\r\n    debugBreakpointFunctionDisabled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-function-disabled', 0xeb88),\r\n    debugStackframeActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe-active', 0xeb89),\r\n    circleSmallFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-small-filled', 0xeb8a),\r\n    debugStackframeDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe-dot', 0xeb8a),\r\n    terminalDecorationMark: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-mark', 0xeb8a),\r\n    debugStackframe: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe', 0xeb8b),\r\n    debugStackframeFocused: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-stackframe-focused', 0xeb8b),\r\n    debugBreakpointUnsupported: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-breakpoint-unsupported', 0xeb8c),\r\n    symbolString: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('symbol-string', 0xeb8d),\r\n    debugReverseContinue: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-reverse-continue', 0xeb8e),\r\n    debugStepBack: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-step-back', 0xeb8f),\r\n    debugRestartFrame: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-restart-frame', 0xeb90),\r\n    debugAlt: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-alt', 0xeb91),\r\n    callIncoming: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('call-incoming', 0xeb92),\r\n    callOutgoing: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('call-outgoing', 0xeb93),\r\n    menu: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('menu', 0xeb94),\r\n    expandAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('expand-all', 0xeb95),\r\n    feedback: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('feedback', 0xeb96),\r\n    gitPullRequestReviewer: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-reviewer', 0xeb96),\r\n    groupByRefType: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('group-by-ref-type', 0xeb97),\r\n    ungroupByRefType: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('ungroup-by-ref-type', 0xeb98),\r\n    account: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('account', 0xeb99),\r\n    gitPullRequestAssignee: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-assignee', 0xeb99),\r\n    bellDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell-dot', 0xeb9a),\r\n    debugConsole: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-console', 0xeb9b),\r\n    library: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('library', 0xeb9c),\r\n    output: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('output', 0xeb9d),\r\n    runAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-all', 0xeb9e),\r\n    syncIgnored: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sync-ignored', 0xeb9f),\r\n    pinned: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pinned', 0xeba0),\r\n    githubInverted: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-inverted', 0xeba1),\r\n    serverProcess: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('server-process', 0xeba2),\r\n    serverEnvironment: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('server-environment', 0xeba3),\r\n    pass: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pass', 0xeba4),\r\n    issueClosed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-closed', 0xeba4),\r\n    stopCircle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('stop-circle', 0xeba5),\r\n    playCircle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('play-circle', 0xeba6),\r\n    record: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('record', 0xeba7),\r\n    debugAltSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-alt-small', 0xeba8),\r\n    vmConnect: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vm-connect', 0xeba9),\r\n    cloud: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('cloud', 0xebaa),\r\n    merge: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('merge', 0xebab),\r\n    export: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('export', 0xebac),\r\n    graphLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph-left', 0xebad),\r\n    magnet: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('magnet', 0xebae),\r\n    notebook: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('notebook', 0xebaf),\r\n    redo: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('redo', 0xebb0),\r\n    checkAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('check-all', 0xebb1),\r\n    pinnedDirty: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pinned-dirty', 0xebb2),\r\n    passFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pass-filled', 0xebb3),\r\n    circleLargeFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-large-filled', 0xebb4),\r\n    circleLarge: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-large', 0xebb5),\r\n    circleLargeOutline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-large-outline', 0xebb5),\r\n    combine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('combine', 0xebb6),\r\n    gather: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('gather', 0xebb6),\r\n    table: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('table', 0xebb7),\r\n    variableGroup: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('variable-group', 0xebb8),\r\n    typeHierarchy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('type-hierarchy', 0xebb9),\r\n    typeHierarchySub: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('type-hierarchy-sub', 0xebba),\r\n    typeHierarchySuper: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('type-hierarchy-super', 0xebbb),\r\n    gitPullRequestCreate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-create', 0xebbc),\r\n    runAbove: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-above', 0xebbd),\r\n    runBelow: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-below', 0xebbe),\r\n    notebookTemplate: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('notebook-template', 0xebbf),\r\n    debugRerun: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-rerun', 0xebc0),\r\n    workspaceTrusted: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-trusted', 0xebc1),\r\n    workspaceUntrusted: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-untrusted', 0xebc2),\r\n    workspaceUnknown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('workspace-unknown', 0xebc3),\r\n    terminalCmd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-cmd', 0xebc4),\r\n    terminalDebian: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-debian', 0xebc5),\r\n    terminalLinux: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-linux', 0xebc6),\r\n    terminalPowershell: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-powershell', 0xebc7),\r\n    terminalTmux: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-tmux', 0xebc8),\r\n    terminalUbuntu: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-ubuntu', 0xebc9),\r\n    terminalBash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-bash', 0xebca),\r\n    arrowSwap: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-swap', 0xebcb),\r\n    copy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('copy', 0xebcc),\r\n    personAdd: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('person-add', 0xebcd),\r\n    filterFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('filter-filled', 0xebce),\r\n    wand: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('wand', 0xebcf),\r\n    debugLineByLine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-line-by-line', 0xebd0),\r\n    inspect: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('inspect', 0xebd1),\r\n    layers: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layers', 0xebd2),\r\n    layersDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layers-dot', 0xebd3),\r\n    layersActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layers-active', 0xebd4),\r\n    compass: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compass', 0xebd5),\r\n    compassDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compass-dot', 0xebd6),\r\n    compassActive: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('compass-active', 0xebd7),\r\n    azure: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('azure', 0xebd8),\r\n    issueDraft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('issue-draft', 0xebd9),\r\n    gitPullRequestClosed: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-closed', 0xebda),\r\n    gitPullRequestDraft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-draft', 0xebdb),\r\n    debugAll: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-all', 0xebdc),\r\n    debugCoverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-coverage', 0xebdd),\r\n    runErrors: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-errors', 0xebde),\r\n    folderLibrary: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('folder-library', 0xebdf),\r\n    debugContinueSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('debug-continue-small', 0xebe0),\r\n    beakerStop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('beaker-stop', 0xebe1),\r\n    graphLine: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph-line', 0xebe2),\r\n    graphScatter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('graph-scatter', 0xebe3),\r\n    pieChart: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('pie-chart', 0xebe4),\r\n    bracket: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bracket', 0xeb0f),\r\n    bracketDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bracket-dot', 0xebe5),\r\n    bracketError: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bracket-error', 0xebe6),\r\n    lockSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lock-small', 0xebe7),\r\n    azureDevops: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('azure-devops', 0xebe8),\r\n    verifiedFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('verified-filled', 0xebe9),\r\n    newline: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('newline', 0xebea),\r\n    layout: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout', 0xebeb),\r\n    layoutActivitybarLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-activitybar-left', 0xebec),\r\n    layoutActivitybarRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-activitybar-right', 0xebed),\r\n    layoutPanelLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-left', 0xebee),\r\n    layoutPanelCenter: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-center', 0xebef),\r\n    layoutPanelJustify: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-justify', 0xebf0),\r\n    layoutPanelRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-right', 0xebf1),\r\n    layoutPanel: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel', 0xebf2),\r\n    layoutSidebarLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-left', 0xebf3),\r\n    layoutSidebarRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-right', 0xebf4),\r\n    layoutStatusbar: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-statusbar', 0xebf5),\r\n    layoutMenubar: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-menubar', 0xebf6),\r\n    layoutCentered: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-centered', 0xebf7),\r\n    target: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('target', 0xebf8),\r\n    indent: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('indent', 0xebf9),\r\n    recordSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('record-small', 0xebfa),\r\n    errorSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('error-small', 0xebfb),\r\n    terminalDecorationError: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('terminal-decoration-error', 0xebfb),\r\n    arrowCircleDown: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-down', 0xebfc),\r\n    arrowCircleLeft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-left', 0xebfd),\r\n    arrowCircleRight: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-right', 0xebfe),\r\n    arrowCircleUp: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('arrow-circle-up', 0xebff),\r\n    layoutSidebarRightOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-right-off', 0xec00),\r\n    layoutPanelOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-panel-off', 0xec01),\r\n    layoutSidebarLeftOff: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('layout-sidebar-left-off', 0xec02),\r\n    blank: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('blank', 0xec03),\r\n    heartFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('heart-filled', 0xec04),\r\n    map: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map', 0xec05),\r\n    mapHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-horizontal', 0xec05),\r\n    foldHorizontal: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-horizontal', 0xec05),\r\n    mapFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-filled', 0xec06),\r\n    mapHorizontalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-horizontal-filled', 0xec06),\r\n    foldHorizontalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-horizontal-filled', 0xec06),\r\n    circleSmall: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('circle-small', 0xec07),\r\n    bellSlash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell-slash', 0xec08),\r\n    bellSlashDot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('bell-slash-dot', 0xec09),\r\n    commentUnresolved: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-unresolved', 0xec0a),\r\n    gitPullRequestGoToChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-go-to-changes', 0xec0b),\r\n    gitPullRequestNewChanges: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-pull-request-new-changes', 0xec0c),\r\n    searchFuzzy: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('search-fuzzy', 0xec0d),\r\n    commentDraft: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('comment-draft', 0xec0e),\r\n    send: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('send', 0xec0f),\r\n    sparkle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sparkle', 0xec10),\r\n    insert: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('insert', 0xec11),\r\n    mic: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mic', 0xec12),\r\n    thumbsdownFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsdown-filled', 0xec13),\r\n    thumbsupFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('thumbsup-filled', 0xec14),\r\n    coffee: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('coffee', 0xec15),\r\n    snake: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('snake', 0xec16),\r\n    game: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('game', 0xec17),\r\n    vr: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vr', 0xec18),\r\n    chip: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('chip', 0xec19),\r\n    piano: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('piano', 0xec1a),\r\n    music: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('music', 0xec1b),\r\n    micFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('mic-filled', 0xec1c),\r\n    repoFetch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('repo-fetch', 0xec1d),\r\n    copilot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('copilot', 0xec1e),\r\n    lightbulbSparkle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('lightbulb-sparkle', 0xec1f),\r\n    robot: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('robot', 0xec20),\r\n    sparkleFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sparkle-filled', 0xec21),\r\n    diffSingle: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-single', 0xec22),\r\n    diffMultiple: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('diff-multiple', 0xec23),\r\n    surroundWith: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('surround-with', 0xec24),\r\n    share: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('share', 0xec25),\r\n    gitStash: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-stash', 0xec26),\r\n    gitStashApply: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-stash-apply', 0xec27),\r\n    gitStashPop: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('git-stash-pop', 0xec28),\r\n    vscode: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vscode', 0xec29),\r\n    vscodeInsiders: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('vscode-insiders', 0xec2a),\r\n    codeOss: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('code-oss', 0xec2b),\r\n    runCoverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-coverage', 0xec2c),\r\n    runAllCoverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('run-all-coverage', 0xec2d),\r\n    coverage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('coverage', 0xec2e),\r\n    githubProject: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('github-project', 0xec2f),\r\n    mapVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-vertical', 0xec30),\r\n    foldVertical: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-vertical', 0xec30),\r\n    mapVerticalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('map-vertical-filled', 0xec31),\r\n    foldVerticalFilled: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('fold-vertical-filled', 0xec31),\r\n    goToSearch: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('go-to-search', 0xec32),\r\n    percentage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('percentage', 0xec33),\r\n    sortPercentage: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('sort-percentage', 0xec33),\r\n    attach: (0,_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_0__.register)('attach', 0xec34),\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/codiconsLibrary.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCodiconFontCharacters: () => (/* binding */ getCodiconFontCharacters),\n/* harmony export */   register: () => (/* binding */ register)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"./node_modules/monaco-editor/esm/vs/base/common/types.js\");\n\r\nconst _codiconFontCharacters = Object.create(null);\r\nfunction register(id, fontCharacter) {\r\n    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isString)(fontCharacter)) {\r\n        const val = _codiconFontCharacters[fontCharacter];\r\n        if (val === undefined) {\r\n            throw new Error(`${id} references an unknown codicon: ${fontCharacter}`);\r\n        }\r\n        fontCharacter = val;\r\n    }\r\n    _codiconFontCharacters[id] = fontCharacter;\r\n    return { id };\r\n}\r\n/**\r\n * Only to be used by the iconRegistry.\r\n */\r\nfunction getCodiconFontCharacters() {\r\n    return _codiconFontCharacters;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnNVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUN0QztBQUNPO0FBQ1AsUUFBUSxtREFBUTtBQUNoQjtBQUNBO0FBQ0EsK0JBQStCLElBQUksaUNBQWlDLGNBQWM7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29kaWNvbnNVdGlsLmpzP2Y4MmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuL3R5cGVzLmpzJztcclxuY29uc3QgX2NvZGljb25Gb250Q2hhcmFjdGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcihpZCwgZm9udENoYXJhY3Rlcikge1xyXG4gICAgaWYgKGlzU3RyaW5nKGZvbnRDaGFyYWN0ZXIpKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gX2NvZGljb25Gb250Q2hhcmFjdGVyc1tmb250Q2hhcmFjdGVyXTtcclxuICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2lkfSByZWZlcmVuY2VzIGFuIHVua25vd24gY29kaWNvbjogJHtmb250Q2hhcmFjdGVyfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb250Q2hhcmFjdGVyID0gdmFsO1xyXG4gICAgfVxyXG4gICAgX2NvZGljb25Gb250Q2hhcmFjdGVyc1tpZF0gPSBmb250Q2hhcmFjdGVyO1xyXG4gICAgcmV0dXJuIHsgaWQgfTtcclxufVxyXG4vKipcclxuICogT25seSB0byBiZSB1c2VkIGJ5IHRoZSBpY29uUmVnaXN0cnkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29kaWNvbkZvbnRDaGFyYWN0ZXJzKCkge1xyXG4gICAgcmV0dXJuIF9jb2RpY29uRm9udENoYXJhY3RlcnM7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/codiconsUtil.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/color.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/color.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Color: () => (/* binding */ Color),\n/* harmony export */   HSLA: () => (/* binding */ HSLA),\n/* harmony export */   HSVA: () => (/* binding */ HSVA),\n/* harmony export */   RGBA: () => (/* binding */ RGBA)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nfunction roundFloat(number, decimalPoints) {\r\n    const decimal = Math.pow(10, decimalPoints);\r\n    return Math.round(number * decimal) / decimal;\r\n}\r\nclass RGBA {\r\n    constructor(r, g, b, a = 1) {\r\n        this._rgbaBrand = undefined;\r\n        this.r = Math.min(255, Math.max(0, r)) | 0;\r\n        this.g = Math.min(255, Math.max(0, g)) | 0;\r\n        this.b = Math.min(255, Math.max(0, b)) | 0;\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    static equals(a, b) {\r\n        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\r\n    }\r\n}\r\nclass HSLA {\r\n    constructor(h, s, l, a) {\r\n        this._hslaBrand = undefined;\r\n        this.h = Math.max(Math.min(360, h), 0) | 0;\r\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\r\n        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    static equals(a, b) {\r\n        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\r\n    }\r\n    /**\r\n     * Converts an RGB color value to HSL. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes r, g, and b are contained in the set [0, 255] and\r\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\r\n     */\r\n    static fromRGBA(rgba) {\r\n        const r = rgba.r / 255;\r\n        const g = rgba.g / 255;\r\n        const b = rgba.b / 255;\r\n        const a = rgba.a;\r\n        const max = Math.max(r, g, b);\r\n        const min = Math.min(r, g, b);\r\n        let h = 0;\r\n        let s = 0;\r\n        const l = (min + max) / 2;\r\n        const chroma = max - min;\r\n        if (chroma > 0) {\r\n            s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\r\n            switch (max) {\r\n                case r:\r\n                    h = (g - b) / chroma + (g < b ? 6 : 0);\r\n                    break;\r\n                case g:\r\n                    h = (b - r) / chroma + 2;\r\n                    break;\r\n                case b:\r\n                    h = (r - g) / chroma + 4;\r\n                    break;\r\n            }\r\n            h *= 60;\r\n            h = Math.round(h);\r\n        }\r\n        return new HSLA(h, s, l, a);\r\n    }\r\n    static _hue2rgb(p, q, t) {\r\n        if (t < 0) {\r\n            t += 1;\r\n        }\r\n        if (t > 1) {\r\n            t -= 1;\r\n        }\r\n        if (t < 1 / 6) {\r\n            return p + (q - p) * 6 * t;\r\n        }\r\n        if (t < 1 / 2) {\r\n            return q;\r\n        }\r\n        if (t < 2 / 3) {\r\n            return p + (q - p) * (2 / 3 - t) * 6;\r\n        }\r\n        return p;\r\n    }\r\n    /**\r\n     * Converts an HSL color value to RGB. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\r\n     * returns r, g, and b in the set [0, 255].\r\n     */\r\n    static toRGBA(hsla) {\r\n        const h = hsla.h / 360;\r\n        const { s, l, a } = hsla;\r\n        let r, g, b;\r\n        if (s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            const p = 2 * l - q;\r\n            r = HSLA._hue2rgb(p, q, h + 1 / 3);\r\n            g = HSLA._hue2rgb(p, q, h);\r\n            b = HSLA._hue2rgb(p, q, h - 1 / 3);\r\n        }\r\n        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\r\n    }\r\n}\r\nclass HSVA {\r\n    constructor(h, s, v, a) {\r\n        this._hsvaBrand = undefined;\r\n        this.h = Math.max(Math.min(360, h), 0) | 0;\r\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\r\n        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\r\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\r\n    }\r\n    static equals(a, b) {\r\n        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\r\n    }\r\n    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\r\n    static fromRGBA(rgba) {\r\n        const r = rgba.r / 255;\r\n        const g = rgba.g / 255;\r\n        const b = rgba.b / 255;\r\n        const cmax = Math.max(r, g, b);\r\n        const cmin = Math.min(r, g, b);\r\n        const delta = cmax - cmin;\r\n        const s = cmax === 0 ? 0 : (delta / cmax);\r\n        let m;\r\n        if (delta === 0) {\r\n            m = 0;\r\n        }\r\n        else if (cmax === r) {\r\n            m = ((((g - b) / delta) % 6) + 6) % 6;\r\n        }\r\n        else if (cmax === g) {\r\n            m = ((b - r) / delta) + 2;\r\n        }\r\n        else {\r\n            m = ((r - g) / delta) + 4;\r\n        }\r\n        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\r\n    }\r\n    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\r\n    static toRGBA(hsva) {\r\n        const { h, s, v, a } = hsva;\r\n        const c = v * s;\r\n        const x = c * (1 - Math.abs((h / 60) % 2 - 1));\r\n        const m = v - c;\r\n        let [r, g, b] = [0, 0, 0];\r\n        if (h < 60) {\r\n            r = c;\r\n            g = x;\r\n        }\r\n        else if (h < 120) {\r\n            r = x;\r\n            g = c;\r\n        }\r\n        else if (h < 180) {\r\n            g = c;\r\n            b = x;\r\n        }\r\n        else if (h < 240) {\r\n            g = x;\r\n            b = c;\r\n        }\r\n        else if (h < 300) {\r\n            r = x;\r\n            b = c;\r\n        }\r\n        else if (h <= 360) {\r\n            r = c;\r\n            b = x;\r\n        }\r\n        r = Math.round((r + m) * 255);\r\n        g = Math.round((g + m) * 255);\r\n        b = Math.round((b + m) * 255);\r\n        return new RGBA(r, g, b, a);\r\n    }\r\n}\r\nclass Color {\r\n    static fromHex(hex) {\r\n        return Color.Format.CSS.parseHex(hex) || Color.red;\r\n    }\r\n    static equals(a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        if (!a || !b) {\r\n            return false;\r\n        }\r\n        return a.equals(b);\r\n    }\r\n    get hsla() {\r\n        if (this._hsla) {\r\n            return this._hsla;\r\n        }\r\n        else {\r\n            return HSLA.fromRGBA(this.rgba);\r\n        }\r\n    }\r\n    get hsva() {\r\n        if (this._hsva) {\r\n            return this._hsva;\r\n        }\r\n        return HSVA.fromRGBA(this.rgba);\r\n    }\r\n    constructor(arg) {\r\n        if (!arg) {\r\n            throw new Error('Color needs a value');\r\n        }\r\n        else if (arg instanceof RGBA) {\r\n            this.rgba = arg;\r\n        }\r\n        else if (arg instanceof HSLA) {\r\n            this._hsla = arg;\r\n            this.rgba = HSLA.toRGBA(arg);\r\n        }\r\n        else if (arg instanceof HSVA) {\r\n            this._hsva = arg;\r\n            this.rgba = HSVA.toRGBA(arg);\r\n        }\r\n        else {\r\n            throw new Error('Invalid color ctor argument');\r\n        }\r\n    }\r\n    equals(other) {\r\n        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\r\n    }\r\n    /**\r\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\r\n     */\r\n    getRelativeLuminance() {\r\n        const R = Color._relativeLuminanceForComponent(this.rgba.r);\r\n        const G = Color._relativeLuminanceForComponent(this.rgba.g);\r\n        const B = Color._relativeLuminanceForComponent(this.rgba.b);\r\n        const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\r\n        return roundFloat(luminance, 4);\r\n    }\r\n    static _relativeLuminanceForComponent(color) {\r\n        const c = color / 255;\r\n        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);\r\n    }\r\n    /**\r\n     *\thttp://24ways.org/2010/calculating-color-contrast\r\n     *  Return 'true' if lighter color otherwise 'false'\r\n     */\r\n    isLighter() {\r\n        const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\r\n        return yiq >= 128;\r\n    }\r\n    isLighterThan(another) {\r\n        const lum1 = this.getRelativeLuminance();\r\n        const lum2 = another.getRelativeLuminance();\r\n        return lum1 > lum2;\r\n    }\r\n    isDarkerThan(another) {\r\n        const lum1 = this.getRelativeLuminance();\r\n        const lum2 = another.getRelativeLuminance();\r\n        return lum1 < lum2;\r\n    }\r\n    lighten(factor) {\r\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\r\n    }\r\n    darken(factor) {\r\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\r\n    }\r\n    transparent(factor) {\r\n        const { r, g, b, a } = this.rgba;\r\n        return new Color(new RGBA(r, g, b, a * factor));\r\n    }\r\n    isTransparent() {\r\n        return this.rgba.a === 0;\r\n    }\r\n    isOpaque() {\r\n        return this.rgba.a === 1;\r\n    }\r\n    opposite() {\r\n        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\r\n    }\r\n    makeOpaque(opaqueBackground) {\r\n        if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {\r\n            // only allow to blend onto a non-opaque color onto a opaque color\r\n            return this;\r\n        }\r\n        const { r, g, b, a } = this.rgba;\r\n        // https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity\r\n        return new Color(new RGBA(opaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b), 1));\r\n    }\r\n    toString() {\r\n        if (!this._toString) {\r\n            this._toString = Color.Format.CSS.format(this);\r\n        }\r\n        return this._toString;\r\n    }\r\n    static getLighterColor(of, relative, factor) {\r\n        if (of.isLighterThan(relative)) {\r\n            return of;\r\n        }\r\n        factor = factor ? factor : 0.5;\r\n        const lum1 = of.getRelativeLuminance();\r\n        const lum2 = relative.getRelativeLuminance();\r\n        factor = factor * (lum2 - lum1) / lum2;\r\n        return of.lighten(factor);\r\n    }\r\n    static getDarkerColor(of, relative, factor) {\r\n        if (of.isDarkerThan(relative)) {\r\n            return of;\r\n        }\r\n        factor = factor ? factor : 0.5;\r\n        const lum1 = of.getRelativeLuminance();\r\n        const lum2 = relative.getRelativeLuminance();\r\n        factor = factor * (lum1 - lum2) / lum1;\r\n        return of.darken(factor);\r\n    }\r\n}\r\nColor.white = new Color(new RGBA(255, 255, 255, 1));\r\nColor.black = new Color(new RGBA(0, 0, 0, 1));\r\nColor.red = new Color(new RGBA(255, 0, 0, 1));\r\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\r\nColor.green = new Color(new RGBA(0, 255, 0, 1));\r\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\r\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\r\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\r\n(function (Color) {\r\n    let Format;\r\n    (function (Format) {\r\n        let CSS;\r\n        (function (CSS) {\r\n            function formatRGB(color) {\r\n                if (color.rgba.a === 1) {\r\n                    return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\r\n                }\r\n                return Color.Format.CSS.formatRGBA(color);\r\n            }\r\n            CSS.formatRGB = formatRGB;\r\n            function formatRGBA(color) {\r\n                return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+(color.rgba.a).toFixed(2)})`;\r\n            }\r\n            CSS.formatRGBA = formatRGBA;\r\n            function formatHSL(color) {\r\n                if (color.hsla.a === 1) {\r\n                    return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\r\n                }\r\n                return Color.Format.CSS.formatHSLA(color);\r\n            }\r\n            CSS.formatHSL = formatHSL;\r\n            function formatHSLA(color) {\r\n                return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\r\n            }\r\n            CSS.formatHSLA = formatHSLA;\r\n            function _toTwoDigitHex(n) {\r\n                const r = n.toString(16);\r\n                return r.length !== 2 ? '0' + r : r;\r\n            }\r\n            /**\r\n             * Formats the color as #RRGGBB\r\n             */\r\n            function formatHex(color) {\r\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\r\n            }\r\n            CSS.formatHex = formatHex;\r\n            /**\r\n             * Formats the color as #RRGGBBAA\r\n             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\r\n             */\r\n            function formatHexA(color, compact = false) {\r\n                if (compact && color.rgba.a === 1) {\r\n                    return Color.Format.CSS.formatHex(color);\r\n                }\r\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\r\n            }\r\n            CSS.formatHexA = formatHexA;\r\n            /**\r\n             * The default format will use HEX if opaque and RGBA otherwise.\r\n             */\r\n            function format(color) {\r\n                if (color.isOpaque()) {\r\n                    return Color.Format.CSS.formatHex(color);\r\n                }\r\n                return Color.Format.CSS.formatRGBA(color);\r\n            }\r\n            CSS.format = format;\r\n            /**\r\n             * Converts an Hex color value to a Color.\r\n             * returns r, g, and b are contained in the set [0, 255]\r\n             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\r\n             */\r\n            function parseHex(hex) {\r\n                const length = hex.length;\r\n                if (length === 0) {\r\n                    // Invalid color\r\n                    return null;\r\n                }\r\n                if (hex.charCodeAt(0) !== 35 /* CharCode.Hash */) {\r\n                    // Does not begin with a #\r\n                    return null;\r\n                }\r\n                if (length === 7) {\r\n                    // #RRGGBB format\r\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\r\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\r\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\r\n                    return new Color(new RGBA(r, g, b, 1));\r\n                }\r\n                if (length === 9) {\r\n                    // #RRGGBBAA format\r\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\r\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\r\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\r\n                    const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\r\n                    return new Color(new RGBA(r, g, b, a / 255));\r\n                }\r\n                if (length === 4) {\r\n                    // #RGB format\r\n                    const r = _parseHexDigit(hex.charCodeAt(1));\r\n                    const g = _parseHexDigit(hex.charCodeAt(2));\r\n                    const b = _parseHexDigit(hex.charCodeAt(3));\r\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\r\n                }\r\n                if (length === 5) {\r\n                    // #RGBA format\r\n                    const r = _parseHexDigit(hex.charCodeAt(1));\r\n                    const g = _parseHexDigit(hex.charCodeAt(2));\r\n                    const b = _parseHexDigit(hex.charCodeAt(3));\r\n                    const a = _parseHexDigit(hex.charCodeAt(4));\r\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\r\n                }\r\n                // Invalid color\r\n                return null;\r\n            }\r\n            CSS.parseHex = parseHex;\r\n            function _parseHexDigit(charCode) {\r\n                switch (charCode) {\r\n                    case 48 /* CharCode.Digit0 */: return 0;\r\n                    case 49 /* CharCode.Digit1 */: return 1;\r\n                    case 50 /* CharCode.Digit2 */: return 2;\r\n                    case 51 /* CharCode.Digit3 */: return 3;\r\n                    case 52 /* CharCode.Digit4 */: return 4;\r\n                    case 53 /* CharCode.Digit5 */: return 5;\r\n                    case 54 /* CharCode.Digit6 */: return 6;\r\n                    case 55 /* CharCode.Digit7 */: return 7;\r\n                    case 56 /* CharCode.Digit8 */: return 8;\r\n                    case 57 /* CharCode.Digit9 */: return 9;\r\n                    case 97 /* CharCode.a */: return 10;\r\n                    case 65 /* CharCode.A */: return 10;\r\n                    case 98 /* CharCode.b */: return 11;\r\n                    case 66 /* CharCode.B */: return 11;\r\n                    case 99 /* CharCode.c */: return 12;\r\n                    case 67 /* CharCode.C */: return 12;\r\n                    case 100 /* CharCode.d */: return 13;\r\n                    case 68 /* CharCode.D */: return 13;\r\n                    case 101 /* CharCode.e */: return 14;\r\n                    case 69 /* CharCode.E */: return 14;\r\n                    case 102 /* CharCode.f */: return 15;\r\n                    case 70 /* CharCode.F */: return 15;\r\n                }\r\n                return 0;\r\n            }\r\n        })(CSS = Format.CSS || (Format.CSS = {}));\r\n    })(Format = Color.Format || (Color.Format = {}));\r\n})(Color || (Color = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29sb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYTtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLDJCQUEyQjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxhQUFhLElBQUksZ0NBQWdDLEtBQUssZ0NBQWdDO0FBQ3hIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsYUFBYSxJQUFJLGdDQUFnQyxLQUFLLGdDQUFnQyxLQUFLLHdCQUF3QjtBQUNsSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw2QkFBNkIsRUFBRSw2QkFBNkIsRUFBRSw2QkFBNkI7QUFDdEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNkJBQTZCLEVBQUUsNkJBQTZCLEVBQUUsNkJBQTZCLEVBQUUsK0NBQStDO0FBQ3ZLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxzQ0FBc0M7QUFDL0MsS0FBSyw2Q0FBNkM7QUFDbEQsQ0FBQyxzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vY29sb3IuanM/Y2ViOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuZnVuY3Rpb24gcm91bmRGbG9hdChudW1iZXIsIGRlY2ltYWxQb2ludHMpIHtcclxuICAgIGNvbnN0IGRlY2ltYWwgPSBNYXRoLnBvdygxMCwgZGVjaW1hbFBvaW50cyk7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIgKiBkZWNpbWFsKSAvIGRlY2ltYWw7XHJcbn1cclxuZXhwb3J0IGNsYXNzIFJHQkEge1xyXG4gICAgY29uc3RydWN0b3IociwgZywgYiwgYSA9IDEpIHtcclxuICAgICAgICB0aGlzLl9yZ2JhQnJhbmQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5yID0gTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCByKSkgfCAwO1xyXG4gICAgICAgIHRoaXMuZyA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgZykpIHwgMDtcclxuICAgICAgICB0aGlzLmIgPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIGIpKSB8IDA7XHJcbiAgICAgICAgdGhpcy5hID0gcm91bmRGbG9hdChNYXRoLm1heChNYXRoLm1pbigxLCBhKSwgMCksIDMpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XHJcbiAgICAgICAgcmV0dXJuIGEuciA9PT0gYi5yICYmIGEuZyA9PT0gYi5nICYmIGEuYiA9PT0gYi5iICYmIGEuYSA9PT0gYi5hO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBIU0xBIHtcclxuICAgIGNvbnN0cnVjdG9yKGgsIHMsIGwsIGEpIHtcclxuICAgICAgICB0aGlzLl9oc2xhQnJhbmQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5oID0gTWF0aC5tYXgoTWF0aC5taW4oMzYwLCBoKSwgMCkgfCAwO1xyXG4gICAgICAgIHRoaXMucyA9IHJvdW5kRmxvYXQoTWF0aC5tYXgoTWF0aC5taW4oMSwgcyksIDApLCAzKTtcclxuICAgICAgICB0aGlzLmwgPSByb3VuZEZsb2F0KE1hdGgubWF4KE1hdGgubWluKDEsIGwpLCAwKSwgMyk7XHJcbiAgICAgICAgdGhpcy5hID0gcm91bmRGbG9hdChNYXRoLm1heChNYXRoLm1pbigxLCBhKSwgMCksIDMpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XHJcbiAgICAgICAgcmV0dXJuIGEuaCA9PT0gYi5oICYmIGEucyA9PT0gYi5zICYmIGEubCA9PT0gYi5sICYmIGEuYSA9PT0gYi5hO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyBhbiBSR0IgY29sb3IgdmFsdWUgdG8gSFNMLiBDb252ZXJzaW9uIGZvcm11bGFcclxuICAgICAqIGFkYXB0ZWQgZnJvbSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTTF9jb2xvcl9zcGFjZS5cclxuICAgICAqIEFzc3VtZXMgciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdIGFuZFxyXG4gICAgICogcmV0dXJucyBoIGluIHRoZSBzZXQgWzAsIDM2MF0sIHMsIGFuZCBsIGluIHRoZSBzZXQgWzAsIDFdLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZnJvbVJHQkEocmdiYSkge1xyXG4gICAgICAgIGNvbnN0IHIgPSByZ2JhLnIgLyAyNTU7XHJcbiAgICAgICAgY29uc3QgZyA9IHJnYmEuZyAvIDI1NTtcclxuICAgICAgICBjb25zdCBiID0gcmdiYS5iIC8gMjU1O1xyXG4gICAgICAgIGNvbnN0IGEgPSByZ2JhLmE7XHJcbiAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XHJcbiAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XHJcbiAgICAgICAgbGV0IGggPSAwO1xyXG4gICAgICAgIGxldCBzID0gMDtcclxuICAgICAgICBjb25zdCBsID0gKG1pbiArIG1heCkgLyAyO1xyXG4gICAgICAgIGNvbnN0IGNocm9tYSA9IG1heCAtIG1pbjtcclxuICAgICAgICBpZiAoY2hyb21hID4gMCkge1xyXG4gICAgICAgICAgICBzID0gTWF0aC5taW4oKGwgPD0gMC41ID8gY2hyb21hIC8gKDIgKiBsKSA6IGNocm9tYSAvICgyIC0gKDIgKiBsKSkpLCAxKTtcclxuICAgICAgICAgICAgc3dpdGNoIChtYXgpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgcjpcclxuICAgICAgICAgICAgICAgICAgICBoID0gKGcgLSBiKSAvIGNocm9tYSArIChnIDwgYiA/IDYgOiAwKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgZzpcclxuICAgICAgICAgICAgICAgICAgICBoID0gKGIgLSByKSAvIGNocm9tYSArIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGI6XHJcbiAgICAgICAgICAgICAgICAgICAgaCA9IChyIC0gZykgLyBjaHJvbWEgKyA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGggKj0gNjA7XHJcbiAgICAgICAgICAgIGggPSBNYXRoLnJvdW5kKGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEhTTEEoaCwgcywgbCwgYSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgX2h1ZTJyZ2IocCwgcSwgdCkge1xyXG4gICAgICAgIGlmICh0IDwgMCkge1xyXG4gICAgICAgICAgICB0ICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0ID4gMSkge1xyXG4gICAgICAgICAgICB0IC09IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0IDwgMSAvIDYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0IDwgMSAvIDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0IDwgMiAvIDMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgYW4gSFNMIGNvbG9yIHZhbHVlIHRvIFJHQi4gQ29udmVyc2lvbiBmb3JtdWxhXHJcbiAgICAgKiBhZGFwdGVkIGZyb20gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU0xfY29sb3Jfc3BhY2UuXHJcbiAgICAgKiBBc3N1bWVzIGggaW4gdGhlIHNldCBbMCwgMzYwXSBzLCBhbmQgbCBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDFdIGFuZFxyXG4gICAgICogcmV0dXJucyByLCBnLCBhbmQgYiBpbiB0aGUgc2V0IFswLCAyNTVdLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdG9SR0JBKGhzbGEpIHtcclxuICAgICAgICBjb25zdCBoID0gaHNsYS5oIC8gMzYwO1xyXG4gICAgICAgIGNvbnN0IHsgcywgbCwgYSB9ID0gaHNsYTtcclxuICAgICAgICBsZXQgciwgZywgYjtcclxuICAgICAgICBpZiAocyA9PT0gMCkge1xyXG4gICAgICAgICAgICByID0gZyA9IGIgPSBsOyAvLyBhY2hyb21hdGljXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcclxuICAgICAgICAgICAgY29uc3QgcCA9IDIgKiBsIC0gcTtcclxuICAgICAgICAgICAgciA9IEhTTEEuX2h1ZTJyZ2IocCwgcSwgaCArIDEgLyAzKTtcclxuICAgICAgICAgICAgZyA9IEhTTEEuX2h1ZTJyZ2IocCwgcSwgaCk7XHJcbiAgICAgICAgICAgIGIgPSBIU0xBLl9odWUycmdiKHAsIHEsIGggLSAxIC8gMyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUkdCQShNYXRoLnJvdW5kKHIgKiAyNTUpLCBNYXRoLnJvdW5kKGcgKiAyNTUpLCBNYXRoLnJvdW5kKGIgKiAyNTUpLCBhKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgSFNWQSB7XHJcbiAgICBjb25zdHJ1Y3RvcihoLCBzLCB2LCBhKSB7XHJcbiAgICAgICAgdGhpcy5faHN2YUJyYW5kID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuaCA9IE1hdGgubWF4KE1hdGgubWluKDM2MCwgaCksIDApIHwgMDtcclxuICAgICAgICB0aGlzLnMgPSByb3VuZEZsb2F0KE1hdGgubWF4KE1hdGgubWluKDEsIHMpLCAwKSwgMyk7XHJcbiAgICAgICAgdGhpcy52ID0gcm91bmRGbG9hdChNYXRoLm1heChNYXRoLm1pbigxLCB2KSwgMCksIDMpO1xyXG4gICAgICAgIHRoaXMuYSA9IHJvdW5kRmxvYXQoTWF0aC5tYXgoTWF0aC5taW4oMSwgYSksIDApLCAzKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhLmggPT09IGIuaCAmJiBhLnMgPT09IGIucyAmJiBhLnYgPT09IGIudiAmJiBhLmEgPT09IGIuYTtcclxuICAgIH1cclxuICAgIC8vIGZyb20gaHR0cDovL3d3dy5yYXBpZHRhYmxlcy5jb20vY29udmVydC9jb2xvci9yZ2ItdG8taHN2Lmh0bVxyXG4gICAgc3RhdGljIGZyb21SR0JBKHJnYmEpIHtcclxuICAgICAgICBjb25zdCByID0gcmdiYS5yIC8gMjU1O1xyXG4gICAgICAgIGNvbnN0IGcgPSByZ2JhLmcgLyAyNTU7XHJcbiAgICAgICAgY29uc3QgYiA9IHJnYmEuYiAvIDI1NTtcclxuICAgICAgICBjb25zdCBjbWF4ID0gTWF0aC5tYXgociwgZywgYik7XHJcbiAgICAgICAgY29uc3QgY21pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xyXG4gICAgICAgIGNvbnN0IGRlbHRhID0gY21heCAtIGNtaW47XHJcbiAgICAgICAgY29uc3QgcyA9IGNtYXggPT09IDAgPyAwIDogKGRlbHRhIC8gY21heCk7XHJcbiAgICAgICAgbGV0IG07XHJcbiAgICAgICAgaWYgKGRlbHRhID09PSAwKSB7XHJcbiAgICAgICAgICAgIG0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjbWF4ID09PSByKSB7XHJcbiAgICAgICAgICAgIG0gPSAoKCgoZyAtIGIpIC8gZGVsdGEpICUgNikgKyA2KSAlIDY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNtYXggPT09IGcpIHtcclxuICAgICAgICAgICAgbSA9ICgoYiAtIHIpIC8gZGVsdGEpICsgMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG0gPSAoKHIgLSBnKSAvIGRlbHRhKSArIDQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgSFNWQShNYXRoLnJvdW5kKG0gKiA2MCksIHMsIGNtYXgsIHJnYmEuYSk7XHJcbiAgICB9XHJcbiAgICAvLyBmcm9tIGh0dHA6Ly93d3cucmFwaWR0YWJsZXMuY29tL2NvbnZlcnQvY29sb3IvaHN2LXRvLXJnYi5odG1cclxuICAgIHN0YXRpYyB0b1JHQkEoaHN2YSkge1xyXG4gICAgICAgIGNvbnN0IHsgaCwgcywgdiwgYSB9ID0gaHN2YTtcclxuICAgICAgICBjb25zdCBjID0gdiAqIHM7XHJcbiAgICAgICAgY29uc3QgeCA9IGMgKiAoMSAtIE1hdGguYWJzKChoIC8gNjApICUgMiAtIDEpKTtcclxuICAgICAgICBjb25zdCBtID0gdiAtIGM7XHJcbiAgICAgICAgbGV0IFtyLCBnLCBiXSA9IFswLCAwLCAwXTtcclxuICAgICAgICBpZiAoaCA8IDYwKSB7XHJcbiAgICAgICAgICAgIHIgPSBjO1xyXG4gICAgICAgICAgICBnID0geDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaCA8IDEyMCkge1xyXG4gICAgICAgICAgICByID0geDtcclxuICAgICAgICAgICAgZyA9IGM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGggPCAxODApIHtcclxuICAgICAgICAgICAgZyA9IGM7XHJcbiAgICAgICAgICAgIGIgPSB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoIDwgMjQwKSB7XHJcbiAgICAgICAgICAgIGcgPSB4O1xyXG4gICAgICAgICAgICBiID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaCA8IDMwMCkge1xyXG4gICAgICAgICAgICByID0geDtcclxuICAgICAgICAgICAgYiA9IGM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGggPD0gMzYwKSB7XHJcbiAgICAgICAgICAgIHIgPSBjO1xyXG4gICAgICAgICAgICBiID0geDtcclxuICAgICAgICB9XHJcbiAgICAgICAgciA9IE1hdGgucm91bmQoKHIgKyBtKSAqIDI1NSk7XHJcbiAgICAgICAgZyA9IE1hdGgucm91bmQoKGcgKyBtKSAqIDI1NSk7XHJcbiAgICAgICAgYiA9IE1hdGgucm91bmQoKGIgKyBtKSAqIDI1NSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSR0JBKHIsIGcsIGIsIGEpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBDb2xvciB7XHJcbiAgICBzdGF0aWMgZnJvbUhleChoZXgpIHtcclxuICAgICAgICByZXR1cm4gQ29sb3IuRm9ybWF0LkNTUy5wYXJzZUhleChoZXgpIHx8IENvbG9yLnJlZDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xyXG4gICAgICAgIGlmICghYSAmJiAhYikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFhIHx8ICFiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGEuZXF1YWxzKGIpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGhzbGEoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hzbGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hzbGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gSFNMQS5mcm9tUkdCQSh0aGlzLnJnYmEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBoc3ZhKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9oc3ZhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oc3ZhO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSFNWQS5mcm9tUkdCQSh0aGlzLnJnYmEpO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IoYXJnKSB7XHJcbiAgICAgICAgaWYgKCFhcmcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2xvciBuZWVkcyBhIHZhbHVlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIFJHQkEpIHtcclxuICAgICAgICAgICAgdGhpcy5yZ2JhID0gYXJnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBIU0xBKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hzbGEgPSBhcmc7XHJcbiAgICAgICAgICAgIHRoaXMucmdiYSA9IEhTTEEudG9SR0JBKGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIEhTVkEpIHtcclxuICAgICAgICAgICAgdGhpcy5faHN2YSA9IGFyZztcclxuICAgICAgICAgICAgdGhpcy5yZ2JhID0gSFNWQS50b1JHQkEoYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2xvciBjdG9yIGFyZ3VtZW50Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXF1YWxzKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuICEhb3RoZXIgJiYgUkdCQS5lcXVhbHModGhpcy5yZ2JhLCBvdGhlci5yZ2JhKSAmJiBIU0xBLmVxdWFscyh0aGlzLmhzbGEsIG90aGVyLmhzbGEpICYmIEhTVkEuZXF1YWxzKHRoaXMuaHN2YSwgb3RoZXIuaHN2YSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGh0dHA6Ly93d3cudzMub3JnL1RSL1dDQUcyMC8jcmVsYXRpdmVsdW1pbmFuY2VkZWZcclxuICAgICAqIFJldHVybnMgdGhlIG51bWJlciBpbiB0aGUgc2V0IFswLCAxXS4gTyA9PiBEYXJrZXN0IEJsYWNrLiAxID0+IExpZ2h0ZXN0IHdoaXRlLlxyXG4gICAgICovXHJcbiAgICBnZXRSZWxhdGl2ZUx1bWluYW5jZSgpIHtcclxuICAgICAgICBjb25zdCBSID0gQ29sb3IuX3JlbGF0aXZlTHVtaW5hbmNlRm9yQ29tcG9uZW50KHRoaXMucmdiYS5yKTtcclxuICAgICAgICBjb25zdCBHID0gQ29sb3IuX3JlbGF0aXZlTHVtaW5hbmNlRm9yQ29tcG9uZW50KHRoaXMucmdiYS5nKTtcclxuICAgICAgICBjb25zdCBCID0gQ29sb3IuX3JlbGF0aXZlTHVtaW5hbmNlRm9yQ29tcG9uZW50KHRoaXMucmdiYS5iKTtcclxuICAgICAgICBjb25zdCBsdW1pbmFuY2UgPSAwLjIxMjYgKiBSICsgMC43MTUyICogRyArIDAuMDcyMiAqIEI7XHJcbiAgICAgICAgcmV0dXJuIHJvdW5kRmxvYXQobHVtaW5hbmNlLCA0KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBfcmVsYXRpdmVMdW1pbmFuY2VGb3JDb21wb25lbnQoY29sb3IpIHtcclxuICAgICAgICBjb25zdCBjID0gY29sb3IgLyAyNTU7XHJcbiAgICAgICAgcmV0dXJuIChjIDw9IDAuMDM5MjgpID8gYyAvIDEyLjkyIDogTWF0aC5wb3coKChjICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlx0aHR0cDovLzI0d2F5cy5vcmcvMjAxMC9jYWxjdWxhdGluZy1jb2xvci1jb250cmFzdFxyXG4gICAgICogIFJldHVybiAndHJ1ZScgaWYgbGlnaHRlciBjb2xvciBvdGhlcndpc2UgJ2ZhbHNlJ1xyXG4gICAgICovXHJcbiAgICBpc0xpZ2h0ZXIoKSB7XHJcbiAgICAgICAgY29uc3QgeWlxID0gKHRoaXMucmdiYS5yICogMjk5ICsgdGhpcy5yZ2JhLmcgKiA1ODcgKyB0aGlzLnJnYmEuYiAqIDExNCkgLyAxMDAwO1xyXG4gICAgICAgIHJldHVybiB5aXEgPj0gMTI4O1xyXG4gICAgfVxyXG4gICAgaXNMaWdodGVyVGhhbihhbm90aGVyKSB7XHJcbiAgICAgICAgY29uc3QgbHVtMSA9IHRoaXMuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcclxuICAgICAgICBjb25zdCBsdW0yID0gYW5vdGhlci5nZXRSZWxhdGl2ZUx1bWluYW5jZSgpO1xyXG4gICAgICAgIHJldHVybiBsdW0xID4gbHVtMjtcclxuICAgIH1cclxuICAgIGlzRGFya2VyVGhhbihhbm90aGVyKSB7XHJcbiAgICAgICAgY29uc3QgbHVtMSA9IHRoaXMuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcclxuICAgICAgICBjb25zdCBsdW0yID0gYW5vdGhlci5nZXRSZWxhdGl2ZUx1bWluYW5jZSgpO1xyXG4gICAgICAgIHJldHVybiBsdW0xIDwgbHVtMjtcclxuICAgIH1cclxuICAgIGxpZ2h0ZW4oZmFjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihuZXcgSFNMQSh0aGlzLmhzbGEuaCwgdGhpcy5oc2xhLnMsIHRoaXMuaHNsYS5sICsgdGhpcy5oc2xhLmwgKiBmYWN0b3IsIHRoaXMuaHNsYS5hKSk7XHJcbiAgICB9XHJcbiAgICBkYXJrZW4oZmFjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihuZXcgSFNMQSh0aGlzLmhzbGEuaCwgdGhpcy5oc2xhLnMsIHRoaXMuaHNsYS5sIC0gdGhpcy5oc2xhLmwgKiBmYWN0b3IsIHRoaXMuaHNsYS5hKSk7XHJcbiAgICB9XHJcbiAgICB0cmFuc3BhcmVudChmYWN0b3IpIHtcclxuICAgICAgICBjb25zdCB7IHIsIGcsIGIsIGEgfSA9IHRoaXMucmdiYTtcclxuICAgICAgICByZXR1cm4gbmV3IENvbG9yKG5ldyBSR0JBKHIsIGcsIGIsIGEgKiBmYWN0b3IpKTtcclxuICAgIH1cclxuICAgIGlzVHJhbnNwYXJlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmdiYS5hID09PSAwO1xyXG4gICAgfVxyXG4gICAgaXNPcGFxdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmdiYS5hID09PSAxO1xyXG4gICAgfVxyXG4gICAgb3Bwb3NpdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihuZXcgUkdCQSgyNTUgLSB0aGlzLnJnYmEuciwgMjU1IC0gdGhpcy5yZ2JhLmcsIDI1NSAtIHRoaXMucmdiYS5iLCB0aGlzLnJnYmEuYSkpO1xyXG4gICAgfVxyXG4gICAgbWFrZU9wYXF1ZShvcGFxdWVCYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGFxdWUoKSB8fCBvcGFxdWVCYWNrZ3JvdW5kLnJnYmEuYSAhPT0gMSkge1xyXG4gICAgICAgICAgICAvLyBvbmx5IGFsbG93IHRvIGJsZW5kIG9udG8gYSBub24tb3BhcXVlIGNvbG9yIG9udG8gYSBvcGFxdWUgY29sb3JcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgciwgZywgYiwgYSB9ID0gdGhpcy5yZ2JhO1xyXG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyMjI4NTQ4L2ZpbmRpbmctZXF1aXZhbGVudC1jb2xvci13aXRoLW9wYWNpdHlcclxuICAgICAgICByZXR1cm4gbmV3IENvbG9yKG5ldyBSR0JBKG9wYXF1ZUJhY2tncm91bmQucmdiYS5yIC0gYSAqIChvcGFxdWVCYWNrZ3JvdW5kLnJnYmEuciAtIHIpLCBvcGFxdWVCYWNrZ3JvdW5kLnJnYmEuZyAtIGEgKiAob3BhcXVlQmFja2dyb3VuZC5yZ2JhLmcgLSBnKSwgb3BhcXVlQmFja2dyb3VuZC5yZ2JhLmIgLSBhICogKG9wYXF1ZUJhY2tncm91bmQucmdiYS5iIC0gYiksIDEpKTtcclxuICAgIH1cclxuICAgIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fdG9TdHJpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5fdG9TdHJpbmcgPSBDb2xvci5Gb3JtYXQuQ1NTLmZvcm1hdCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvU3RyaW5nO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldExpZ2h0ZXJDb2xvcihvZiwgcmVsYXRpdmUsIGZhY3Rvcikge1xyXG4gICAgICAgIGlmIChvZi5pc0xpZ2h0ZXJUaGFuKHJlbGF0aXZlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2Y7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZhY3RvciA9IGZhY3RvciA/IGZhY3RvciA6IDAuNTtcclxuICAgICAgICBjb25zdCBsdW0xID0gb2YuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcclxuICAgICAgICBjb25zdCBsdW0yID0gcmVsYXRpdmUuZ2V0UmVsYXRpdmVMdW1pbmFuY2UoKTtcclxuICAgICAgICBmYWN0b3IgPSBmYWN0b3IgKiAobHVtMiAtIGx1bTEpIC8gbHVtMjtcclxuICAgICAgICByZXR1cm4gb2YubGlnaHRlbihmYWN0b3IpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldERhcmtlckNvbG9yKG9mLCByZWxhdGl2ZSwgZmFjdG9yKSB7XHJcbiAgICAgICAgaWYgKG9mLmlzRGFya2VyVGhhbihyZWxhdGl2ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9mO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmYWN0b3IgPSBmYWN0b3IgPyBmYWN0b3IgOiAwLjU7XHJcbiAgICAgICAgY29uc3QgbHVtMSA9IG9mLmdldFJlbGF0aXZlTHVtaW5hbmNlKCk7XHJcbiAgICAgICAgY29uc3QgbHVtMiA9IHJlbGF0aXZlLmdldFJlbGF0aXZlTHVtaW5hbmNlKCk7XHJcbiAgICAgICAgZmFjdG9yID0gZmFjdG9yICogKGx1bTEgLSBsdW0yKSAvIGx1bTE7XHJcbiAgICAgICAgcmV0dXJuIG9mLmRhcmtlbihmYWN0b3IpO1xyXG4gICAgfVxyXG59XHJcbkNvbG9yLndoaXRlID0gbmV3IENvbG9yKG5ldyBSR0JBKDI1NSwgMjU1LCAyNTUsIDEpKTtcclxuQ29sb3IuYmxhY2sgPSBuZXcgQ29sb3IobmV3IFJHQkEoMCwgMCwgMCwgMSkpO1xyXG5Db2xvci5yZWQgPSBuZXcgQ29sb3IobmV3IFJHQkEoMjU1LCAwLCAwLCAxKSk7XHJcbkNvbG9yLmJsdWUgPSBuZXcgQ29sb3IobmV3IFJHQkEoMCwgMCwgMjU1LCAxKSk7XHJcbkNvbG9yLmdyZWVuID0gbmV3IENvbG9yKG5ldyBSR0JBKDAsIDI1NSwgMCwgMSkpO1xyXG5Db2xvci5jeWFuID0gbmV3IENvbG9yKG5ldyBSR0JBKDAsIDI1NSwgMjU1LCAxKSk7XHJcbkNvbG9yLmxpZ2h0Z3JleSA9IG5ldyBDb2xvcihuZXcgUkdCQSgyMTEsIDIxMSwgMjExLCAxKSk7XHJcbkNvbG9yLnRyYW5zcGFyZW50ID0gbmV3IENvbG9yKG5ldyBSR0JBKDAsIDAsIDAsIDApKTtcclxuKGZ1bmN0aW9uIChDb2xvcikge1xyXG4gICAgbGV0IEZvcm1hdDtcclxuICAgIChmdW5jdGlvbiAoRm9ybWF0KSB7XHJcbiAgICAgICAgbGV0IENTUztcclxuICAgICAgICAoZnVuY3Rpb24gKENTUykge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRSR0IoY29sb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb2xvci5yZ2JhLmEgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHJnYigke2NvbG9yLnJnYmEucn0sICR7Y29sb3IucmdiYS5nfSwgJHtjb2xvci5yZ2JhLmJ9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3IuRm9ybWF0LkNTUy5mb3JtYXRSR0JBKGNvbG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDU1MuZm9ybWF0UkdCID0gZm9ybWF0UkdCO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRSR0JBKGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYHJnYmEoJHtjb2xvci5yZ2JhLnJ9LCAke2NvbG9yLnJnYmEuZ30sICR7Y29sb3IucmdiYS5ifSwgJHsrKGNvbG9yLnJnYmEuYSkudG9GaXhlZCgyKX0pYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDU1MuZm9ybWF0UkdCQSA9IGZvcm1hdFJHQkE7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdEhTTChjb2xvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbG9yLmhzbGEuYSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgaHNsKCR7Y29sb3IuaHNsYS5ofSwgJHsoY29sb3IuaHNsYS5zICogMTAwKS50b0ZpeGVkKDIpfSUsICR7KGNvbG9yLmhzbGEubCAqIDEwMCkudG9GaXhlZCgyKX0lKWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3IuRm9ybWF0LkNTUy5mb3JtYXRIU0xBKGNvbG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDU1MuZm9ybWF0SFNMID0gZm9ybWF0SFNMO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRIU0xBKGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYGhzbGEoJHtjb2xvci5oc2xhLmh9LCAkeyhjb2xvci5oc2xhLnMgKiAxMDApLnRvRml4ZWQoMil9JSwgJHsoY29sb3IuaHNsYS5sICogMTAwKS50b0ZpeGVkKDIpfSUsICR7Y29sb3IuaHNsYS5hLnRvRml4ZWQoMil9KWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQ1NTLmZvcm1hdEhTTEEgPSBmb3JtYXRIU0xBO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBfdG9Ud29EaWdpdEhleChuKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbi50b1N0cmluZygxNik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gci5sZW5ndGggIT09IDIgPyAnMCcgKyByIDogcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogRm9ybWF0cyB0aGUgY29sb3IgYXMgI1JSR0dCQlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0SGV4KGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCMke190b1R3b0RpZ2l0SGV4KGNvbG9yLnJnYmEucil9JHtfdG9Ud29EaWdpdEhleChjb2xvci5yZ2JhLmcpfSR7X3RvVHdvRGlnaXRIZXgoY29sb3IucmdiYS5iKX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIENTUy5mb3JtYXRIZXggPSBmb3JtYXRIZXg7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBGb3JtYXRzIHRoZSBjb2xvciBhcyAjUlJHR0JCQUFcclxuICAgICAgICAgICAgICogSWYgJ2NvbXBhY3QnIGlzIHNldCwgY29sb3JzIHdpdGhvdXQgdHJhbnNwYXJhbmN5IHdpbGwgYmUgcHJpbnRlZCBhcyAjUlJHR0JCXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRIZXhBKGNvbG9yLCBjb21wYWN0ID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb21wYWN0ICYmIGNvbG9yLnJnYmEuYSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDb2xvci5Gb3JtYXQuQ1NTLmZvcm1hdEhleChjb2xvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCMke190b1R3b0RpZ2l0SGV4KGNvbG9yLnJnYmEucil9JHtfdG9Ud29EaWdpdEhleChjb2xvci5yZ2JhLmcpfSR7X3RvVHdvRGlnaXRIZXgoY29sb3IucmdiYS5iKX0ke190b1R3b0RpZ2l0SGV4KE1hdGgucm91bmQoY29sb3IucmdiYS5hICogMjU1KSl9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDU1MuZm9ybWF0SGV4QSA9IGZvcm1hdEhleEE7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBUaGUgZGVmYXVsdCBmb3JtYXQgd2lsbCB1c2UgSEVYIGlmIG9wYXF1ZSBhbmQgUkdCQSBvdGhlcndpc2UuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXQoY29sb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb2xvci5pc09wYXF1ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbG9yLkZvcm1hdC5DU1MuZm9ybWF0SGV4KGNvbG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBDb2xvci5Gb3JtYXQuQ1NTLmZvcm1hdFJHQkEoY29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIENTUy5mb3JtYXQgPSBmb3JtYXQ7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyBhbiBIZXggY29sb3IgdmFsdWUgdG8gYSBDb2xvci5cclxuICAgICAgICAgICAgICogcmV0dXJucyByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV1cclxuICAgICAgICAgICAgICogQHBhcmFtIGhleCBzdHJpbmcgKCNSR0IsICNSR0JBLCAjUlJHR0JCIG9yICNSUkdHQkJBQSkuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUhleChoZXgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGhleC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBjb2xvclxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGhleC5jaGFyQ29kZUF0KDApICE9PSAzNSAvKiBDaGFyQ29kZS5IYXNoICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9lcyBub3QgYmVnaW4gd2l0aCBhICNcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAjUlJHR0JCIGZvcm1hdFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSAxNiAqIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDEpKSArIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDIpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBnID0gMTYgKiBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgzKSkgKyBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCg0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IDE2ICogX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoNSkpICsgX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoNikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IobmV3IFJHQkEociwgZywgYiwgMSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA9PT0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICNSUkdHQkJBQSBmb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gMTYgKiBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgxKSkgKyBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZyA9IDE2ICogX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoMykpICsgX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoNCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGIgPSAxNiAqIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDUpKSArIF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDYpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gMTYgKiBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCg3KSkgKyBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCg4KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihuZXcgUkdCQShyLCBnLCBiLCBhIC8gMjU1KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gI1JHQiBmb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGcgPSBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDMpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKG5ldyBSR0JBKDE2ICogciArIHIsIDE2ICogZyArIGcsIDE2ICogYiArIGIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAjUkdCQSBmb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGcgPSBfcGFyc2VIZXhEaWdpdChoZXguY2hhckNvZGVBdCgyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IF9wYXJzZUhleERpZ2l0KGhleC5jaGFyQ29kZUF0KDMpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gX3BhcnNlSGV4RGlnaXQoaGV4LmNoYXJDb2RlQXQoNCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IobmV3IFJHQkEoMTYgKiByICsgciwgMTYgKiBnICsgZywgMTYgKiBiICsgYiwgKDE2ICogYSArIGEpIC8gMjU1KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBJbnZhbGlkIGNvbG9yXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDU1MucGFyc2VIZXggPSBwYXJzZUhleDtcclxuICAgICAgICAgICAgZnVuY3Rpb24gX3BhcnNlSGV4RGlnaXQoY2hhckNvZGUpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhckNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ4IC8qIENoYXJDb2RlLkRpZ2l0MCAqLzogcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OSAvKiBDaGFyQ29kZS5EaWdpdDEgKi86IHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTAgLyogQ2hhckNvZGUuRGlnaXQyICovOiByZXR1cm4gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDUxIC8qIENoYXJDb2RlLkRpZ2l0MyAqLzogcmV0dXJuIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1MiAvKiBDaGFyQ29kZS5EaWdpdDQgKi86IHJldHVybiA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTMgLyogQ2hhckNvZGUuRGlnaXQ1ICovOiByZXR1cm4gNTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU0IC8qIENoYXJDb2RlLkRpZ2l0NiAqLzogcmV0dXJuIDY7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1NSAvKiBDaGFyQ29kZS5EaWdpdDcgKi86IHJldHVybiA3O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTYgLyogQ2hhckNvZGUuRGlnaXQ4ICovOiByZXR1cm4gODtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU3IC8qIENoYXJDb2RlLkRpZ2l0OSAqLzogcmV0dXJuIDk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5NyAvKiBDaGFyQ29kZS5hICovOiByZXR1cm4gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2NSAvKiBDaGFyQ29kZS5BICovOiByZXR1cm4gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OCAvKiBDaGFyQ29kZS5iICovOiByZXR1cm4gMTE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2NiAvKiBDaGFyQ29kZS5CICovOiByZXR1cm4gMTE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OSAvKiBDaGFyQ29kZS5jICovOiByZXR1cm4gMTI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2NyAvKiBDaGFyQ29kZS5DICovOiByZXR1cm4gMTI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDAgLyogQ2hhckNvZGUuZCAqLzogcmV0dXJuIDEzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjggLyogQ2hhckNvZGUuRCAqLzogcmV0dXJuIDEzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTAxIC8qIENoYXJDb2RlLmUgKi86IHJldHVybiAxNDtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY5IC8qIENoYXJDb2RlLkUgKi86IHJldHVybiAxNDtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEwMiAvKiBDaGFyQ29kZS5mICovOiByZXR1cm4gMTU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3MCAvKiBDaGFyQ29kZS5GICovOiByZXR1cm4gMTU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKENTUyA9IEZvcm1hdC5DU1MgfHwgKEZvcm1hdC5DU1MgPSB7fSkpO1xyXG4gICAgfSkoRm9ybWF0ID0gQ29sb3IuRm9ybWF0IHx8IChDb2xvci5Gb3JtYXQgPSB7fSkpO1xyXG59KShDb2xvciB8fCAoQ29sb3IgPSB7fSkpO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/color.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LcsDiff: () => (/* binding */ LcsDiff),\n/* harmony export */   StringDiffSequence: () => (/* binding */ StringDiffSequence),\n/* harmony export */   stringDiff: () => (/* binding */ stringDiff)\n/* harmony export */ });\n/* harmony import */ var _diffChange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./diffChange.js */ \"./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hash.js */ \"./node_modules/monaco-editor/esm/vs/base/common/hash.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\nclass StringDiffSequence {\r\n    constructor(source) {\r\n        this.source = source;\r\n    }\r\n    getElements() {\r\n        const source = this.source;\r\n        const characters = new Int32Array(source.length);\r\n        for (let i = 0, len = source.length; i < len; i++) {\r\n            characters[i] = source.charCodeAt(i);\r\n        }\r\n        return characters;\r\n    }\r\n}\r\nfunction stringDiff(original, modified, pretty) {\r\n    return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;\r\n}\r\n//\r\n// The code below has been ported from a C# implementation in VS\r\n//\r\nclass Debug {\r\n    static Assert(condition, message) {\r\n        if (!condition) {\r\n            throw new Error(message);\r\n        }\r\n    }\r\n}\r\nclass MyArray {\r\n    /**\r\n     * Copies a range of elements from an Array starting at the specified source index and pastes\r\n     * them to another Array starting at the specified destination index. The length and the indexes\r\n     * are specified as 64-bit integers.\r\n     * sourceArray:\r\n     *\t\tThe Array that contains the data to copy.\r\n     * sourceIndex:\r\n     *\t\tA 64-bit integer that represents the index in the sourceArray at which copying begins.\r\n     * destinationArray:\r\n     *\t\tThe Array that receives the data.\r\n     * destinationIndex:\r\n     *\t\tA 64-bit integer that represents the index in the destinationArray at which storing begins.\r\n     * length:\r\n     *\t\tA 64-bit integer that represents the number of elements to copy.\r\n     */\r\n    static Copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\r\n        for (let i = 0; i < length; i++) {\r\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\r\n        }\r\n    }\r\n    static Copy2(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {\r\n        for (let i = 0; i < length; i++) {\r\n            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];\r\n        }\r\n    }\r\n}\r\n/**\r\n * A utility class which helps to create the set of DiffChanges from\r\n * a difference operation. This class accepts original DiffElements and\r\n * modified DiffElements that are involved in a particular change. The\r\n * MarkNextChange() method can be called to mark the separation between\r\n * distinct changes. At the end, the Changes property can be called to retrieve\r\n * the constructed changes.\r\n */\r\nclass DiffChangeHelper {\r\n    /**\r\n     * Constructs a new DiffChangeHelper for the given DiffSequences.\r\n     */\r\n    constructor() {\r\n        this.m_changes = [];\r\n        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\r\n        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\r\n        this.m_originalCount = 0;\r\n        this.m_modifiedCount = 0;\r\n    }\r\n    /**\r\n     * Marks the beginning of the next change in the set of differences.\r\n     */\r\n    MarkNextChange() {\r\n        // Only add to the list if there is something to add\r\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\r\n            // Add the new change to our list\r\n            this.m_changes.push(new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));\r\n        }\r\n        // Reset for the next change\r\n        this.m_originalCount = 0;\r\n        this.m_modifiedCount = 0;\r\n        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\r\n        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\r\n    }\r\n    /**\r\n     * Adds the original element at the given position to the elements\r\n     * affected by the current change. The modified index gives context\r\n     * to the change position with respect to the original sequence.\r\n     * @param originalIndex The index of the original element to add.\r\n     * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.\r\n     */\r\n    AddOriginalElement(originalIndex, modifiedIndex) {\r\n        // The 'true' start index is the smallest of the ones we've seen\r\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\r\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\r\n        this.m_originalCount++;\r\n    }\r\n    /**\r\n     * Adds the modified element at the given position to the elements\r\n     * affected by the current change. The original index gives context\r\n     * to the change position with respect to the modified sequence.\r\n     * @param originalIndex The index of the original element that provides corresponding position in the original sequence.\r\n     * @param modifiedIndex The index of the modified element to add.\r\n     */\r\n    AddModifiedElement(originalIndex, modifiedIndex) {\r\n        // The 'true' start index is the smallest of the ones we've seen\r\n        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);\r\n        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);\r\n        this.m_modifiedCount++;\r\n    }\r\n    /**\r\n     * Retrieves all of the changes marked by the class.\r\n     */\r\n    getChanges() {\r\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\r\n            // Finish up on whatever is left\r\n            this.MarkNextChange();\r\n        }\r\n        return this.m_changes;\r\n    }\r\n    /**\r\n     * Retrieves all of the changes marked by the class in the reverse order\r\n     */\r\n    getReverseChanges() {\r\n        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {\r\n            // Finish up on whatever is left\r\n            this.MarkNextChange();\r\n        }\r\n        this.m_changes.reverse();\r\n        return this.m_changes;\r\n    }\r\n}\r\n/**\r\n * An implementation of the difference algorithm described in\r\n * \"An O(ND) Difference Algorithm and its variations\" by Eugene W. Myers\r\n */\r\nclass LcsDiff {\r\n    /**\r\n     * Constructs the DiffFinder\r\n     */\r\n    constructor(originalSequence, modifiedSequence, continueProcessingPredicate = null) {\r\n        this.ContinueProcessingPredicate = continueProcessingPredicate;\r\n        this._originalSequence = originalSequence;\r\n        this._modifiedSequence = modifiedSequence;\r\n        const [originalStringElements, originalElementsOrHash, originalHasStrings] = LcsDiff._getElements(originalSequence);\r\n        const [modifiedStringElements, modifiedElementsOrHash, modifiedHasStrings] = LcsDiff._getElements(modifiedSequence);\r\n        this._hasStrings = (originalHasStrings && modifiedHasStrings);\r\n        this._originalStringElements = originalStringElements;\r\n        this._originalElementsOrHash = originalElementsOrHash;\r\n        this._modifiedStringElements = modifiedStringElements;\r\n        this._modifiedElementsOrHash = modifiedElementsOrHash;\r\n        this.m_forwardHistory = [];\r\n        this.m_reverseHistory = [];\r\n    }\r\n    static _isStringArray(arr) {\r\n        return (arr.length > 0 && typeof arr[0] === 'string');\r\n    }\r\n    static _getElements(sequence) {\r\n        const elements = sequence.getElements();\r\n        if (LcsDiff._isStringArray(elements)) {\r\n            const hashes = new Int32Array(elements.length);\r\n            for (let i = 0, len = elements.length; i < len; i++) {\r\n                hashes[i] = (0,_hash_js__WEBPACK_IMPORTED_MODULE_1__.stringHash)(elements[i], 0);\r\n            }\r\n            return [elements, hashes, true];\r\n        }\r\n        if (elements instanceof Int32Array) {\r\n            return [[], elements, false];\r\n        }\r\n        return [[], new Int32Array(elements), false];\r\n    }\r\n    ElementsAreEqual(originalIndex, newIndex) {\r\n        if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {\r\n            return false;\r\n        }\r\n        return (this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true);\r\n    }\r\n    ElementsAreStrictEqual(originalIndex, newIndex) {\r\n        if (!this.ElementsAreEqual(originalIndex, newIndex)) {\r\n            return false;\r\n        }\r\n        const originalElement = LcsDiff._getStrictElement(this._originalSequence, originalIndex);\r\n        const modifiedElement = LcsDiff._getStrictElement(this._modifiedSequence, newIndex);\r\n        return (originalElement === modifiedElement);\r\n    }\r\n    static _getStrictElement(sequence, index) {\r\n        if (typeof sequence.getStrictElement === 'function') {\r\n            return sequence.getStrictElement(index);\r\n        }\r\n        return null;\r\n    }\r\n    OriginalElementsAreEqual(index1, index2) {\r\n        if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {\r\n            return false;\r\n        }\r\n        return (this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true);\r\n    }\r\n    ModifiedElementsAreEqual(index1, index2) {\r\n        if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {\r\n            return false;\r\n        }\r\n        return (this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true);\r\n    }\r\n    ComputeDiff(pretty) {\r\n        return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);\r\n    }\r\n    /**\r\n     * Computes the differences between the original and modified input\r\n     * sequences on the bounded range.\r\n     * @returns An array of the differences between the two input sequences.\r\n     */\r\n    _ComputeDiff(originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {\r\n        const quitEarlyArr = [false];\r\n        let changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);\r\n        if (pretty) {\r\n            // We have to clean up the computed diff to be more intuitive\r\n            // but it turns out this cannot be done correctly until the entire set\r\n            // of diffs have been computed\r\n            changes = this.PrettifyChanges(changes);\r\n        }\r\n        return {\r\n            quitEarly: quitEarlyArr[0],\r\n            changes: changes\r\n        };\r\n    }\r\n    /**\r\n     * Private helper method which computes the differences on the bounded range\r\n     * recursively.\r\n     * @returns An array of the differences between the two input sequences.\r\n     */\r\n    ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {\r\n        quitEarlyArr[0] = false;\r\n        // Find the start of the differences\r\n        while (originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)) {\r\n            originalStart++;\r\n            modifiedStart++;\r\n        }\r\n        // Find the end of the differences\r\n        while (originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)) {\r\n            originalEnd--;\r\n            modifiedEnd--;\r\n        }\r\n        // In the special case where we either have all insertions or all deletions or the sequences are identical\r\n        if (originalStart > originalEnd || modifiedStart > modifiedEnd) {\r\n            let changes;\r\n            if (modifiedStart <= modifiedEnd) {\r\n                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\r\n                // All insertions\r\n                changes = [\r\n                    new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)\r\n                ];\r\n            }\r\n            else if (originalStart <= originalEnd) {\r\n                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\r\n                // All deletions\r\n                changes = [\r\n                    new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, 0)\r\n                ];\r\n            }\r\n            else {\r\n                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');\r\n                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');\r\n                // Identical sequences - No differences\r\n                changes = [];\r\n            }\r\n            return changes;\r\n        }\r\n        // This problem can be solved using the Divide-And-Conquer technique.\r\n        const midOriginalArr = [0];\r\n        const midModifiedArr = [0];\r\n        const result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);\r\n        const midOriginal = midOriginalArr[0];\r\n        const midModified = midModifiedArr[0];\r\n        if (result !== null) {\r\n            // Result is not-null when there was enough memory to compute the changes while\r\n            // searching for the recursion point\r\n            return result;\r\n        }\r\n        else if (!quitEarlyArr[0]) {\r\n            // We can break the problem down recursively by finding the changes in the\r\n            // First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)\r\n            // Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)\r\n            // NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point\r\n            const leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);\r\n            let rightChanges = [];\r\n            if (!quitEarlyArr[0]) {\r\n                rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);\r\n            }\r\n            else {\r\n                // We didn't have time to finish the first half, so we don't have time to compute this half.\r\n                // Consider the entire rest of the sequence different.\r\n                rightChanges = [\r\n                    new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)\r\n                ];\r\n            }\r\n            return this.ConcatenateChanges(leftChanges, rightChanges);\r\n        }\r\n        // If we hit here, we quit early, and so can't return anything meaningful\r\n        return [\r\n            new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\r\n        ];\r\n    }\r\n    WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {\r\n        let forwardChanges = null;\r\n        let reverseChanges = null;\r\n        // First, walk backward through the forward diagonals history\r\n        let changeHelper = new DiffChangeHelper();\r\n        let diagonalMin = diagonalForwardStart;\r\n        let diagonalMax = diagonalForwardEnd;\r\n        let diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalForwardOffset;\r\n        let lastOriginalIndex = -1073741824 /* Constants.MIN_SAFE_SMALL_INTEGER */;\r\n        let historyIndex = this.m_forwardHistory.length - 1;\r\n        do {\r\n            // Get the diagonal index from the relative diagonal number\r\n            const diagonal = diagonalRelative + diagonalForwardBase;\r\n            // Figure out where we came from\r\n            if (diagonal === diagonalMin || (diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\r\n                // Vertical line (the element is an insert)\r\n                originalIndex = forwardPoints[diagonal + 1];\r\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\r\n                if (originalIndex < lastOriginalIndex) {\r\n                    changeHelper.MarkNextChange();\r\n                }\r\n                lastOriginalIndex = originalIndex;\r\n                changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);\r\n                diagonalRelative = (diagonal + 1) - diagonalForwardBase; //Setup for the next iteration\r\n            }\r\n            else {\r\n                // Horizontal line (the element is a deletion)\r\n                originalIndex = forwardPoints[diagonal - 1] + 1;\r\n                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;\r\n                if (originalIndex < lastOriginalIndex) {\r\n                    changeHelper.MarkNextChange();\r\n                }\r\n                lastOriginalIndex = originalIndex - 1;\r\n                changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);\r\n                diagonalRelative = (diagonal - 1) - diagonalForwardBase; //Setup for the next iteration\r\n            }\r\n            if (historyIndex >= 0) {\r\n                forwardPoints = this.m_forwardHistory[historyIndex];\r\n                diagonalForwardBase = forwardPoints[0]; //We stored this in the first spot\r\n                diagonalMin = 1;\r\n                diagonalMax = forwardPoints.length - 1;\r\n            }\r\n        } while (--historyIndex >= -1);\r\n        // Ironically, we get the forward changes as the reverse of the\r\n        // order we added them since we technically added them backwards\r\n        forwardChanges = changeHelper.getReverseChanges();\r\n        if (quitEarlyArr[0]) {\r\n            // TODO: Calculate a partial from the reverse diagonals.\r\n            //       For now, just assume everything after the midOriginal/midModified point is a diff\r\n            let originalStartPoint = midOriginalArr[0] + 1;\r\n            let modifiedStartPoint = midModifiedArr[0] + 1;\r\n            if (forwardChanges !== null && forwardChanges.length > 0) {\r\n                const lastForwardChange = forwardChanges[forwardChanges.length - 1];\r\n                originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());\r\n                modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());\r\n            }\r\n            reverseChanges = [\r\n                new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)\r\n            ];\r\n        }\r\n        else {\r\n            // Now walk backward through the reverse diagonals history\r\n            changeHelper = new DiffChangeHelper();\r\n            diagonalMin = diagonalReverseStart;\r\n            diagonalMax = diagonalReverseEnd;\r\n            diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalReverseOffset;\r\n            lastOriginalIndex = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\r\n            historyIndex = (deltaIsEven) ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;\r\n            do {\r\n                // Get the diagonal index from the relative diagonal number\r\n                const diagonal = diagonalRelative + diagonalReverseBase;\r\n                // Figure out where we came from\r\n                if (diagonal === diagonalMin || (diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\r\n                    // Horizontal line (the element is a deletion))\r\n                    originalIndex = reversePoints[diagonal + 1] - 1;\r\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\r\n                    if (originalIndex > lastOriginalIndex) {\r\n                        changeHelper.MarkNextChange();\r\n                    }\r\n                    lastOriginalIndex = originalIndex + 1;\r\n                    changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);\r\n                    diagonalRelative = (diagonal + 1) - diagonalReverseBase; //Setup for the next iteration\r\n                }\r\n                else {\r\n                    // Vertical line (the element is an insertion)\r\n                    originalIndex = reversePoints[diagonal - 1];\r\n                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;\r\n                    if (originalIndex > lastOriginalIndex) {\r\n                        changeHelper.MarkNextChange();\r\n                    }\r\n                    lastOriginalIndex = originalIndex;\r\n                    changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);\r\n                    diagonalRelative = (diagonal - 1) - diagonalReverseBase; //Setup for the next iteration\r\n                }\r\n                if (historyIndex >= 0) {\r\n                    reversePoints = this.m_reverseHistory[historyIndex];\r\n                    diagonalReverseBase = reversePoints[0]; //We stored this in the first spot\r\n                    diagonalMin = 1;\r\n                    diagonalMax = reversePoints.length - 1;\r\n                }\r\n            } while (--historyIndex >= -1);\r\n            // There are cases where the reverse history will find diffs that\r\n            // are correct, but not intuitive, so we need shift them.\r\n            reverseChanges = changeHelper.getChanges();\r\n        }\r\n        return this.ConcatenateChanges(forwardChanges, reverseChanges);\r\n    }\r\n    /**\r\n     * Given the range to compute the diff on, this method finds the point:\r\n     * (midOriginal, midModified)\r\n     * that exists in the middle of the LCS of the two sequences and\r\n     * is the point at which the LCS problem may be broken down recursively.\r\n     * This method will try to keep the LCS trace in memory. If the LCS recursion\r\n     * point is calculated and the full trace is available in memory, then this method\r\n     * will return the change list.\r\n     * @param originalStart The start bound of the original sequence range\r\n     * @param originalEnd The end bound of the original sequence range\r\n     * @param modifiedStart The start bound of the modified sequence range\r\n     * @param modifiedEnd The end bound of the modified sequence range\r\n     * @param midOriginal The middle point of the original sequence range\r\n     * @param midModified The middle point of the modified sequence range\r\n     * @returns The diff changes, if available, otherwise null\r\n     */\r\n    ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {\r\n        let originalIndex = 0, modifiedIndex = 0;\r\n        let diagonalForwardStart = 0, diagonalForwardEnd = 0;\r\n        let diagonalReverseStart = 0, diagonalReverseEnd = 0;\r\n        // To traverse the edit graph and produce the proper LCS, our actual\r\n        // start position is just outside the given boundary\r\n        originalStart--;\r\n        modifiedStart--;\r\n        // We set these up to make the compiler happy, but they will\r\n        // be replaced before we return with the actual recursion point\r\n        midOriginalArr[0] = 0;\r\n        midModifiedArr[0] = 0;\r\n        // Clear out the history\r\n        this.m_forwardHistory = [];\r\n        this.m_reverseHistory = [];\r\n        // Each cell in the two arrays corresponds to a diagonal in the edit graph.\r\n        // The integer value in the cell represents the originalIndex of the furthest\r\n        // reaching point found so far that ends in that diagonal.\r\n        // The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.\r\n        const maxDifferences = (originalEnd - originalStart) + (modifiedEnd - modifiedStart);\r\n        const numDiagonals = maxDifferences + 1;\r\n        const forwardPoints = new Int32Array(numDiagonals);\r\n        const reversePoints = new Int32Array(numDiagonals);\r\n        // diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)\r\n        // diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)\r\n        const diagonalForwardBase = (modifiedEnd - modifiedStart);\r\n        const diagonalReverseBase = (originalEnd - originalStart);\r\n        // diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\r\n        //    diagonal number (relative to diagonalForwardBase)\r\n        // diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the\r\n        //    diagonal number (relative to diagonalReverseBase)\r\n        const diagonalForwardOffset = (originalStart - modifiedStart);\r\n        const diagonalReverseOffset = (originalEnd - modifiedEnd);\r\n        // delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers\r\n        //   relative to the start diagonal with diagonal numbers relative to the end diagonal.\r\n        // The Even/Oddn-ness of this delta is important for determining when we should check for overlap\r\n        const delta = diagonalReverseBase - diagonalForwardBase;\r\n        const deltaIsEven = (delta % 2 === 0);\r\n        // Here we set up the start and end points as the furthest points found so far\r\n        // in both the forward and reverse directions, respectively\r\n        forwardPoints[diagonalForwardBase] = originalStart;\r\n        reversePoints[diagonalReverseBase] = originalEnd;\r\n        // Remember if we quit early, and thus need to do a best-effort result instead of a real result.\r\n        quitEarlyArr[0] = false;\r\n        // A couple of points:\r\n        // --With this method, we iterate on the number of differences between the two sequences.\r\n        //   The more differences there actually are, the longer this will take.\r\n        // --Also, as the number of differences increases, we have to search on diagonals further\r\n        //   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).\r\n        // --We extend on even diagonals (relative to the reference diagonal) only when numDifferences\r\n        //   is even and odd diagonals only when numDifferences is odd.\r\n        for (let numDifferences = 1; numDifferences <= (maxDifferences / 2) + 1; numDifferences++) {\r\n            let furthestOriginalIndex = 0;\r\n            let furthestModifiedIndex = 0;\r\n            // Run the algorithm in the forward direction\r\n            diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\r\n            diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);\r\n            for (let diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2) {\r\n                // STEP 1: We extend the furthest reaching point in the present diagonal\r\n                // by looking at the diagonals above and below and picking the one whose point\r\n                // is further away from the start point (originalStart, modifiedStart)\r\n                if (diagonal === diagonalForwardStart || (diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {\r\n                    originalIndex = forwardPoints[diagonal + 1];\r\n                }\r\n                else {\r\n                    originalIndex = forwardPoints[diagonal - 1] + 1;\r\n                }\r\n                modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset;\r\n                // Save the current originalIndex so we can test for false overlap in step 3\r\n                const tempOriginalIndex = originalIndex;\r\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\r\n                // so long as the elements are equal.\r\n                while (originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)) {\r\n                    originalIndex++;\r\n                    modifiedIndex++;\r\n                }\r\n                forwardPoints[diagonal] = originalIndex;\r\n                if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {\r\n                    furthestOriginalIndex = originalIndex;\r\n                    furthestModifiedIndex = modifiedIndex;\r\n                }\r\n                // STEP 3: If delta is odd (overlap first happens on forward when delta is odd)\r\n                // and diagonal is in the range of reverse diagonals computed for numDifferences-1\r\n                // (the previous iteration; we haven't computed reverse diagonals for numDifferences yet)\r\n                // then check for overlap.\r\n                if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= (numDifferences - 1)) {\r\n                    if (originalIndex >= reversePoints[diagonal]) {\r\n                        midOriginalArr[0] = originalIndex;\r\n                        midModifiedArr[0] = modifiedIndex;\r\n                        if (tempOriginalIndex <= reversePoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {\r\n                            // BINGO! We overlapped, and we have the full trace in memory!\r\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\r\n                        }\r\n                        else {\r\n                            // Either false overlap, or we didn't have enough memory for the full trace\r\n                            // Just return the recursion point\r\n                            return null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Check to see if we should be quitting early, before moving on to the next iteration.\r\n            const matchLengthOfLongest = ((furthestOriginalIndex - originalStart) + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;\r\n            if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {\r\n                // We can't finish, so skip ahead to generating a result from what we have.\r\n                quitEarlyArr[0] = true;\r\n                // Use the furthest distance we got in the forward direction.\r\n                midOriginalArr[0] = furthestOriginalIndex;\r\n                midModifiedArr[0] = furthestModifiedIndex;\r\n                if (matchLengthOfLongest > 0 && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {\r\n                    // Enough of the history is in memory to walk it backwards\r\n                    return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\r\n                }\r\n                else {\r\n                    // We didn't actually remember enough of the history.\r\n                    //Since we are quitting the diff early, we need to shift back the originalStart and modified start\r\n                    //back into the boundary limits since we decremented their value above beyond the boundary limit.\r\n                    originalStart++;\r\n                    modifiedStart++;\r\n                    return [\r\n                        new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)\r\n                    ];\r\n                }\r\n            }\r\n            // Run the algorithm in the reverse direction\r\n            diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\r\n            diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);\r\n            for (let diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2) {\r\n                // STEP 1: We extend the furthest reaching point in the present diagonal\r\n                // by looking at the diagonals above and below and picking the one whose point\r\n                // is further away from the start point (originalEnd, modifiedEnd)\r\n                if (diagonal === diagonalReverseStart || (diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {\r\n                    originalIndex = reversePoints[diagonal + 1] - 1;\r\n                }\r\n                else {\r\n                    originalIndex = reversePoints[diagonal - 1];\r\n                }\r\n                modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset;\r\n                // Save the current originalIndex so we can test for false overlap\r\n                const tempOriginalIndex = originalIndex;\r\n                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal\r\n                // as long as the elements are equal.\r\n                while (originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)) {\r\n                    originalIndex--;\r\n                    modifiedIndex--;\r\n                }\r\n                reversePoints[diagonal] = originalIndex;\r\n                // STEP 4: If delta is even (overlap first happens on reverse when delta is even)\r\n                // and diagonal is in the range of forward diagonals computed for numDifferences\r\n                // then check for overlap.\r\n                if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {\r\n                    if (originalIndex <= forwardPoints[diagonal]) {\r\n                        midOriginalArr[0] = originalIndex;\r\n                        midModifiedArr[0] = modifiedIndex;\r\n                        if (tempOriginalIndex >= forwardPoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {\r\n                            // BINGO! We overlapped, and we have the full trace in memory!\r\n                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\r\n                        }\r\n                        else {\r\n                            // Either false overlap, or we didn't have enough memory for the full trace\r\n                            // Just return the recursion point\r\n                            return null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Save current vectors to history before the next iteration\r\n            if (numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */) {\r\n                // We are allocating space for one extra int, which we fill with\r\n                // the index of the diagonal base index\r\n                let temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);\r\n                temp[0] = diagonalForwardBase - diagonalForwardStart + 1;\r\n                MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);\r\n                this.m_forwardHistory.push(temp);\r\n                temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);\r\n                temp[0] = diagonalReverseBase - diagonalReverseStart + 1;\r\n                MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);\r\n                this.m_reverseHistory.push(temp);\r\n            }\r\n        }\r\n        // If we got here, then we have the full trace in history. We just have to convert it to a change list\r\n        // NOTE: This part is a bit messy\r\n        return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);\r\n    }\r\n    /**\r\n     * Shifts the given changes to provide a more intuitive diff.\r\n     * While the first element in a diff matches the first element after the diff,\r\n     * we shift the diff down.\r\n     *\r\n     * @param changes The list of changes to shift\r\n     * @returns The shifted changes\r\n     */\r\n    PrettifyChanges(changes) {\r\n        // Shift all the changes down first\r\n        for (let i = 0; i < changes.length; i++) {\r\n            const change = changes[i];\r\n            const originalStop = (i < changes.length - 1) ? changes[i + 1].originalStart : this._originalElementsOrHash.length;\r\n            const modifiedStop = (i < changes.length - 1) ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;\r\n            const checkOriginal = change.originalLength > 0;\r\n            const checkModified = change.modifiedLength > 0;\r\n            while (change.originalStart + change.originalLength < originalStop\r\n                && change.modifiedStart + change.modifiedLength < modifiedStop\r\n                && (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength))\r\n                && (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))) {\r\n                const startStrictEqual = this.ElementsAreStrictEqual(change.originalStart, change.modifiedStart);\r\n                const endStrictEqual = this.ElementsAreStrictEqual(change.originalStart + change.originalLength, change.modifiedStart + change.modifiedLength);\r\n                if (endStrictEqual && !startStrictEqual) {\r\n                    // moving the change down would create an equal change, but the elements are not strict equal\r\n                    break;\r\n                }\r\n                change.originalStart++;\r\n                change.modifiedStart++;\r\n            }\r\n            const mergedChangeArr = [null];\r\n            if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {\r\n                changes[i] = mergedChangeArr[0];\r\n                changes.splice(i + 1, 1);\r\n                i--;\r\n                continue;\r\n            }\r\n        }\r\n        // Shift changes back up until we hit empty or whitespace-only lines\r\n        for (let i = changes.length - 1; i >= 0; i--) {\r\n            const change = changes[i];\r\n            let originalStop = 0;\r\n            let modifiedStop = 0;\r\n            if (i > 0) {\r\n                const prevChange = changes[i - 1];\r\n                originalStop = prevChange.originalStart + prevChange.originalLength;\r\n                modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;\r\n            }\r\n            const checkOriginal = change.originalLength > 0;\r\n            const checkModified = change.modifiedLength > 0;\r\n            let bestDelta = 0;\r\n            let bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);\r\n            for (let delta = 1;; delta++) {\r\n                const originalStart = change.originalStart - delta;\r\n                const modifiedStart = change.modifiedStart - delta;\r\n                if (originalStart < originalStop || modifiedStart < modifiedStop) {\r\n                    break;\r\n                }\r\n                if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {\r\n                    break;\r\n                }\r\n                if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {\r\n                    break;\r\n                }\r\n                const touchingPreviousChange = (originalStart === originalStop && modifiedStart === modifiedStop);\r\n                const score = ((touchingPreviousChange ? 5 : 0)\r\n                    + this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength));\r\n                if (score > bestScore) {\r\n                    bestScore = score;\r\n                    bestDelta = delta;\r\n                }\r\n            }\r\n            change.originalStart -= bestDelta;\r\n            change.modifiedStart -= bestDelta;\r\n            const mergedChangeArr = [null];\r\n            if (i > 0 && this.ChangesOverlap(changes[i - 1], changes[i], mergedChangeArr)) {\r\n                changes[i - 1] = mergedChangeArr[0];\r\n                changes.splice(i, 1);\r\n                i++;\r\n                continue;\r\n            }\r\n        }\r\n        // There could be multiple longest common substrings.\r\n        // Give preference to the ones containing longer lines\r\n        if (this._hasStrings) {\r\n            for (let i = 1, len = changes.length; i < len; i++) {\r\n                const aChange = changes[i - 1];\r\n                const bChange = changes[i];\r\n                const matchedLength = bChange.originalStart - aChange.originalStart - aChange.originalLength;\r\n                const aOriginalStart = aChange.originalStart;\r\n                const bOriginalEnd = bChange.originalStart + bChange.originalLength;\r\n                const abOriginalLength = bOriginalEnd - aOriginalStart;\r\n                const aModifiedStart = aChange.modifiedStart;\r\n                const bModifiedEnd = bChange.modifiedStart + bChange.modifiedLength;\r\n                const abModifiedLength = bModifiedEnd - aModifiedStart;\r\n                // Avoid wasting a lot of time with these searches\r\n                if (matchedLength < 5 && abOriginalLength < 20 && abModifiedLength < 20) {\r\n                    const t = this._findBetterContiguousSequence(aOriginalStart, abOriginalLength, aModifiedStart, abModifiedLength, matchedLength);\r\n                    if (t) {\r\n                        const [originalMatchStart, modifiedMatchStart] = t;\r\n                        if (originalMatchStart !== aChange.originalStart + aChange.originalLength || modifiedMatchStart !== aChange.modifiedStart + aChange.modifiedLength) {\r\n                            // switch to another sequence that has a better score\r\n                            aChange.originalLength = originalMatchStart - aChange.originalStart;\r\n                            aChange.modifiedLength = modifiedMatchStart - aChange.modifiedStart;\r\n                            bChange.originalStart = originalMatchStart + matchedLength;\r\n                            bChange.modifiedStart = modifiedMatchStart + matchedLength;\r\n                            bChange.originalLength = bOriginalEnd - bChange.originalStart;\r\n                            bChange.modifiedLength = bModifiedEnd - bChange.modifiedStart;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n    _findBetterContiguousSequence(originalStart, originalLength, modifiedStart, modifiedLength, desiredLength) {\r\n        if (originalLength < desiredLength || modifiedLength < desiredLength) {\r\n            return null;\r\n        }\r\n        const originalMax = originalStart + originalLength - desiredLength + 1;\r\n        const modifiedMax = modifiedStart + modifiedLength - desiredLength + 1;\r\n        let bestScore = 0;\r\n        let bestOriginalStart = 0;\r\n        let bestModifiedStart = 0;\r\n        for (let i = originalStart; i < originalMax; i++) {\r\n            for (let j = modifiedStart; j < modifiedMax; j++) {\r\n                const score = this._contiguousSequenceScore(i, j, desiredLength);\r\n                if (score > 0 && score > bestScore) {\r\n                    bestScore = score;\r\n                    bestOriginalStart = i;\r\n                    bestModifiedStart = j;\r\n                }\r\n            }\r\n        }\r\n        if (bestScore > 0) {\r\n            return [bestOriginalStart, bestModifiedStart];\r\n        }\r\n        return null;\r\n    }\r\n    _contiguousSequenceScore(originalStart, modifiedStart, length) {\r\n        let score = 0;\r\n        for (let l = 0; l < length; l++) {\r\n            if (!this.ElementsAreEqual(originalStart + l, modifiedStart + l)) {\r\n                return 0;\r\n            }\r\n            score += this._originalStringElements[originalStart + l].length;\r\n        }\r\n        return score;\r\n    }\r\n    _OriginalIsBoundary(index) {\r\n        if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {\r\n            return true;\r\n        }\r\n        return (this._hasStrings && /^\\s*$/.test(this._originalStringElements[index]));\r\n    }\r\n    _OriginalRegionIsBoundary(originalStart, originalLength) {\r\n        if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {\r\n            return true;\r\n        }\r\n        if (originalLength > 0) {\r\n            const originalEnd = originalStart + originalLength;\r\n            if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    _ModifiedIsBoundary(index) {\r\n        if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {\r\n            return true;\r\n        }\r\n        return (this._hasStrings && /^\\s*$/.test(this._modifiedStringElements[index]));\r\n    }\r\n    _ModifiedRegionIsBoundary(modifiedStart, modifiedLength) {\r\n        if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {\r\n            return true;\r\n        }\r\n        if (modifiedLength > 0) {\r\n            const modifiedEnd = modifiedStart + modifiedLength;\r\n            if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    _boundaryScore(originalStart, originalLength, modifiedStart, modifiedLength) {\r\n        const originalScore = (this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0);\r\n        const modifiedScore = (this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0);\r\n        return (originalScore + modifiedScore);\r\n    }\r\n    /**\r\n     * Concatenates the two input DiffChange lists and returns the resulting\r\n     * list.\r\n     * @param The left changes\r\n     * @param The right changes\r\n     * @returns The concatenated list\r\n     */\r\n    ConcatenateChanges(left, right) {\r\n        const mergedChangeArr = [];\r\n        if (left.length === 0 || right.length === 0) {\r\n            return (right.length > 0) ? right : left;\r\n        }\r\n        else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {\r\n            // Since we break the problem down recursively, it is possible that we\r\n            // might recurse in the middle of a change thereby splitting it into\r\n            // two changes. Here in the combining stage, we detect and fuse those\r\n            // changes back together\r\n            const result = new Array(left.length + right.length - 1);\r\n            MyArray.Copy(left, 0, result, 0, left.length - 1);\r\n            result[left.length - 1] = mergedChangeArr[0];\r\n            MyArray.Copy(right, 1, result, left.length, right.length - 1);\r\n            return result;\r\n        }\r\n        else {\r\n            const result = new Array(left.length + right.length);\r\n            MyArray.Copy(left, 0, result, 0, left.length);\r\n            MyArray.Copy(right, 0, result, left.length, right.length);\r\n            return result;\r\n        }\r\n    }\r\n    /**\r\n     * Returns true if the two changes overlap and can be merged into a single\r\n     * change\r\n     * @param left The left change\r\n     * @param right The right change\r\n     * @param mergedChange The merged change if the two overlap, null otherwise\r\n     * @returns True if the two changes overlap\r\n     */\r\n    ChangesOverlap(left, right, mergedChangeArr) {\r\n        Debug.Assert(left.originalStart <= right.originalStart, 'Left change is not less than or equal to right change');\r\n        Debug.Assert(left.modifiedStart <= right.modifiedStart, 'Left change is not less than or equal to right change');\r\n        if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\r\n            const originalStart = left.originalStart;\r\n            let originalLength = left.originalLength;\r\n            const modifiedStart = left.modifiedStart;\r\n            let modifiedLength = left.modifiedLength;\r\n            if (left.originalStart + left.originalLength >= right.originalStart) {\r\n                originalLength = right.originalStart + right.originalLength - left.originalStart;\r\n            }\r\n            if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {\r\n                modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;\r\n            }\r\n            mergedChangeArr[0] = new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalLength, modifiedStart, modifiedLength);\r\n            return true;\r\n        }\r\n        else {\r\n            mergedChangeArr[0] = null;\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Helper method used to clip a diagonal index to the range of valid\r\n     * diagonals. This also decides whether or not the diagonal index,\r\n     * if it exceeds the boundary, should be clipped to the boundary or clipped\r\n     * one inside the boundary depending on the Even/Odd status of the boundary\r\n     * and numDifferences.\r\n     * @param diagonal The index of the diagonal to clip.\r\n     * @param numDifferences The current number of differences being iterated upon.\r\n     * @param diagonalBaseIndex The base reference diagonal.\r\n     * @param numDiagonals The total number of diagonals.\r\n     * @returns The clipped diagonal index.\r\n     */\r\n    ClipDiagonalBound(diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {\r\n        if (diagonal >= 0 && diagonal < numDiagonals) {\r\n            // Nothing to clip, its in range\r\n            return diagonal;\r\n        }\r\n        // diagonalsBelow: The number of diagonals below the reference diagonal\r\n        // diagonalsAbove: The number of diagonals above the reference diagonal\r\n        const diagonalsBelow = diagonalBaseIndex;\r\n        const diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;\r\n        const diffEven = (numDifferences % 2 === 0);\r\n        if (diagonal < 0) {\r\n            const lowerBoundEven = (diagonalsBelow % 2 === 0);\r\n            return (diffEven === lowerBoundEven) ? 0 : 1;\r\n        }\r\n        else {\r\n            const upperBoundEven = (diagonalsAbove % 2 === 0);\r\n            return (diffEven === upperBoundEven) ? numDiagonals - 1 : numDiagonals - 2;\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffChange: () => (/* binding */ DiffChange)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * Represents information about a specific difference between two sequences.\r\n */\r\nclass DiffChange {\r\n    /**\r\n     * Constructs a new DiffChange with the given sequence information\r\n     * and content.\r\n     */\r\n    constructor(originalStart, originalLength, modifiedStart, modifiedLength) {\r\n        //Debug.Assert(originalLength > 0 || modifiedLength > 0, \"originalLength and modifiedLength cannot both be <= 0\");\r\n        this.originalStart = originalStart;\r\n        this.originalLength = originalLength;\r\n        this.modifiedStart = modifiedStart;\r\n        this.modifiedLength = modifiedLength;\r\n    }\r\n    /**\r\n     * The end point (exclusive) of the change in the original sequence.\r\n     */\r\n    getOriginalEnd() {\r\n        return this.originalStart + this.originalLength;\r\n    }\r\n    /**\r\n     * The end point (exclusive) of the change in the modified sequence.\r\n     */\r\n    getModifiedEnd() {\r\n        return this.modifiedStart + this.modifiedLength;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZGlmZi9kaWZmQ2hhbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2RpZmYvZGlmZkNoYW5nZS5qcz8xNWYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4vKipcclxuICogUmVwcmVzZW50cyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gc2VxdWVuY2VzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERpZmZDaGFuZ2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IERpZmZDaGFuZ2Ugd2l0aCB0aGUgZ2l2ZW4gc2VxdWVuY2UgaW5mb3JtYXRpb25cclxuICAgICAqIGFuZCBjb250ZW50LlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcmlnaW5hbFN0YXJ0LCBvcmlnaW5hbExlbmd0aCwgbW9kaWZpZWRTdGFydCwgbW9kaWZpZWRMZW5ndGgpIHtcclxuICAgICAgICAvL0RlYnVnLkFzc2VydChvcmlnaW5hbExlbmd0aCA+IDAgfHwgbW9kaWZpZWRMZW5ndGggPiAwLCBcIm9yaWdpbmFsTGVuZ3RoIGFuZCBtb2RpZmllZExlbmd0aCBjYW5ub3QgYm90aCBiZSA8PSAwXCIpO1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWxTdGFydCA9IG9yaWdpbmFsU3RhcnQ7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbExlbmd0aCA9IG9yaWdpbmFsTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMubW9kaWZpZWRTdGFydCA9IG1vZGlmaWVkU3RhcnQ7XHJcbiAgICAgICAgdGhpcy5tb2RpZmllZExlbmd0aCA9IG1vZGlmaWVkTGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZW5kIHBvaW50IChleGNsdXNpdmUpIG9mIHRoZSBjaGFuZ2UgaW4gdGhlIG9yaWdpbmFsIHNlcXVlbmNlLlxyXG4gICAgICovXHJcbiAgICBnZXRPcmlnaW5hbEVuZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbFN0YXJ0ICsgdGhpcy5vcmlnaW5hbExlbmd0aDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGVuZCBwb2ludCAoZXhjbHVzaXZlKSBvZiB0aGUgY2hhbmdlIGluIHRoZSBtb2RpZmllZCBzZXF1ZW5jZS5cclxuICAgICAqL1xyXG4gICAgZ2V0TW9kaWZpZWRFbmQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kaWZpZWRTdGFydCArIHRoaXMubW9kaWZpZWRMZW5ndGg7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/errors.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BugIndicatingError: () => (/* binding */ BugIndicatingError),\n/* harmony export */   CancellationError: () => (/* binding */ CancellationError),\n/* harmony export */   ErrorHandler: () => (/* binding */ ErrorHandler),\n/* harmony export */   ErrorNoTelemetry: () => (/* binding */ ErrorNoTelemetry),\n/* harmony export */   NotSupportedError: () => (/* binding */ NotSupportedError),\n/* harmony export */   canceled: () => (/* binding */ canceled),\n/* harmony export */   errorHandler: () => (/* binding */ errorHandler),\n/* harmony export */   illegalArgument: () => (/* binding */ illegalArgument),\n/* harmony export */   illegalState: () => (/* binding */ illegalState),\n/* harmony export */   isCancellationError: () => (/* binding */ isCancellationError),\n/* harmony export */   onUnexpectedError: () => (/* binding */ onUnexpectedError),\n/* harmony export */   onUnexpectedExternalError: () => (/* binding */ onUnexpectedExternalError),\n/* harmony export */   transformErrorForSerialization: () => (/* binding */ transformErrorForSerialization)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\r\nclass ErrorHandler {\r\n    constructor() {\r\n        this.listeners = [];\r\n        this.unexpectedErrorHandler = function (e) {\r\n            setTimeout(() => {\r\n                if (e.stack) {\r\n                    if (ErrorNoTelemetry.isErrorNoTelemetry(e)) {\r\n                        throw new ErrorNoTelemetry(e.message + '\\n\\n' + e.stack);\r\n                    }\r\n                    throw new Error(e.message + '\\n\\n' + e.stack);\r\n                }\r\n                throw e;\r\n            }, 0);\r\n        };\r\n    }\r\n    emit(e) {\r\n        this.listeners.forEach((listener) => {\r\n            listener(e);\r\n        });\r\n    }\r\n    onUnexpectedError(e) {\r\n        this.unexpectedErrorHandler(e);\r\n        this.emit(e);\r\n    }\r\n    // For external errors, we don't want the listeners to be called\r\n    onUnexpectedExternalError(e) {\r\n        this.unexpectedErrorHandler(e);\r\n    }\r\n}\r\nconst errorHandler = new ErrorHandler();\r\nfunction onUnexpectedError(e) {\r\n    // ignore errors from cancelled promises\r\n    if (!isCancellationError(e)) {\r\n        errorHandler.onUnexpectedError(e);\r\n    }\r\n    return undefined;\r\n}\r\nfunction onUnexpectedExternalError(e) {\r\n    // ignore errors from cancelled promises\r\n    if (!isCancellationError(e)) {\r\n        errorHandler.onUnexpectedExternalError(e);\r\n    }\r\n    return undefined;\r\n}\r\nfunction transformErrorForSerialization(error) {\r\n    if (error instanceof Error) {\r\n        const { name, message } = error;\r\n        const stack = error.stacktrace || error.stack;\r\n        return {\r\n            $isError: true,\r\n            name,\r\n            message,\r\n            stack,\r\n            noTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)\r\n        };\r\n    }\r\n    // return as is\r\n    return error;\r\n}\r\nconst canceledName = 'Canceled';\r\n/**\r\n * Checks if the given error is a promise in canceled state\r\n */\r\nfunction isCancellationError(error) {\r\n    if (error instanceof CancellationError) {\r\n        return true;\r\n    }\r\n    return error instanceof Error && error.name === canceledName && error.message === canceledName;\r\n}\r\n// !!!IMPORTANT!!!\r\n// Do NOT change this class because it is also used as an API-type.\r\nclass CancellationError extends Error {\r\n    constructor() {\r\n        super(canceledName);\r\n        this.name = this.message;\r\n    }\r\n}\r\n/**\r\n * @deprecated use {@link CancellationError `new CancellationError()`} instead\r\n */\r\nfunction canceled() {\r\n    const error = new Error(canceledName);\r\n    error.name = error.message;\r\n    return error;\r\n}\r\nfunction illegalArgument(name) {\r\n    if (name) {\r\n        return new Error(`Illegal argument: ${name}`);\r\n    }\r\n    else {\r\n        return new Error('Illegal argument');\r\n    }\r\n}\r\nfunction illegalState(name) {\r\n    if (name) {\r\n        return new Error(`Illegal state: ${name}`);\r\n    }\r\n    else {\r\n        return new Error('Illegal state');\r\n    }\r\n}\r\nclass NotSupportedError extends Error {\r\n    constructor(message) {\r\n        super('NotSupported');\r\n        if (message) {\r\n            this.message = message;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Error that when thrown won't be logged in telemetry as an unhandled error.\r\n */\r\nclass ErrorNoTelemetry extends Error {\r\n    constructor(msg) {\r\n        super(msg);\r\n        this.name = 'CodeExpectedError';\r\n    }\r\n    static fromError(err) {\r\n        if (err instanceof ErrorNoTelemetry) {\r\n            return err;\r\n        }\r\n        const result = new ErrorNoTelemetry();\r\n        result.message = err.message;\r\n        result.stack = err.stack;\r\n        return result;\r\n    }\r\n    static isErrorNoTelemetry(err) {\r\n        return err.name === 'CodeExpectedError';\r\n    }\r\n}\r\n/**\r\n * This error indicates a bug.\r\n * Do not throw this for invalid user input.\r\n * Only catch this error to recover gracefully from bugs.\r\n */\r\nclass BugIndicatingError extends Error {\r\n    constructor(message) {\r\n        super(message || 'An unexpected bug occurred.');\r\n        Object.setPrototypeOf(this, BugIndicatingError.prototype);\r\n        // Because we know for sure only buggy code throws this,\r\n        // we definitely want to break here and fix the bug.\r\n        // eslint-disable-next-line no-debugger\r\n        // debugger;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtREFBbUQ7QUFDdkU7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDhDQUE4QyxLQUFLO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsMkNBQTJDLEtBQUs7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZXJyb3JzLmpzP2ZkY2MiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbi8vIEF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgb24gRXZlbnRFbWl0dGVyIGJ5IGltcGxlbWVudGluZyBhIHN1YnNldCBvZiB0aGUgaW50ZXJmYWNlLlxyXG5leHBvcnQgY2xhc3MgRXJyb3JIYW5kbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5zdGFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChFcnJvck5vVGVsZW1ldHJ5LmlzRXJyb3JOb1RlbGVtZXRyeShlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JOb1RlbGVtZXRyeShlLm1lc3NhZ2UgKyAnXFxuXFxuJyArIGUuc3RhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlICsgJ1xcblxcbicgKyBlLnN0YWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbWl0KGUpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcihlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG9uVW5leHBlY3RlZEVycm9yKGUpIHtcclxuICAgICAgICB0aGlzLnVuZXhwZWN0ZWRFcnJvckhhbmRsZXIoZSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KGUpO1xyXG4gICAgfVxyXG4gICAgLy8gRm9yIGV4dGVybmFsIGVycm9ycywgd2UgZG9uJ3Qgd2FudCB0aGUgbGlzdGVuZXJzIHRvIGJlIGNhbGxlZFxyXG4gICAgb25VbmV4cGVjdGVkRXh0ZXJuYWxFcnJvcihlKSB7XHJcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkRXJyb3JIYW5kbGVyKGUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjb25zdCBlcnJvckhhbmRsZXIgPSBuZXcgRXJyb3JIYW5kbGVyKCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBvblVuZXhwZWN0ZWRFcnJvcihlKSB7XHJcbiAgICAvLyBpZ25vcmUgZXJyb3JzIGZyb20gY2FuY2VsbGVkIHByb21pc2VzXHJcbiAgICBpZiAoIWlzQ2FuY2VsbGF0aW9uRXJyb3IoZSkpIHtcclxuICAgICAgICBlcnJvckhhbmRsZXIub25VbmV4cGVjdGVkRXJyb3IoZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBvblVuZXhwZWN0ZWRFeHRlcm5hbEVycm9yKGUpIHtcclxuICAgIC8vIGlnbm9yZSBlcnJvcnMgZnJvbSBjYW5jZWxsZWQgcHJvbWlzZXNcclxuICAgIGlmICghaXNDYW5jZWxsYXRpb25FcnJvcihlKSkge1xyXG4gICAgICAgIGVycm9ySGFuZGxlci5vblVuZXhwZWN0ZWRFeHRlcm5hbEVycm9yKGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtRXJyb3JGb3JTZXJpYWxpemF0aW9uKGVycm9yKSB7XHJcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIGNvbnN0IHsgbmFtZSwgbWVzc2FnZSB9ID0gZXJyb3I7XHJcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBlcnJvci5zdGFja3RyYWNlIHx8IGVycm9yLnN0YWNrO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICRpc0Vycm9yOiB0cnVlLFxyXG4gICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICBzdGFjayxcclxuICAgICAgICAgICAgbm9UZWxlbWV0cnk6IEVycm9yTm9UZWxlbWV0cnkuaXNFcnJvck5vVGVsZW1ldHJ5KGVycm9yKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyByZXR1cm4gYXMgaXNcclxuICAgIHJldHVybiBlcnJvcjtcclxufVxyXG5jb25zdCBjYW5jZWxlZE5hbWUgPSAnQ2FuY2VsZWQnO1xyXG4vKipcclxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhIHByb21pc2UgaW4gY2FuY2VsZWQgc3RhdGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbGxhdGlvbkVycm9yKGVycm9yKSB7XHJcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBDYW5jZWxsYXRpb25FcnJvcikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubmFtZSA9PT0gY2FuY2VsZWROYW1lICYmIGVycm9yLm1lc3NhZ2UgPT09IGNhbmNlbGVkTmFtZTtcclxufVxyXG4vLyAhISFJTVBPUlRBTlQhISFcclxuLy8gRG8gTk9UIGNoYW5nZSB0aGlzIGNsYXNzIGJlY2F1c2UgaXQgaXMgYWxzbyB1c2VkIGFzIGFuIEFQSS10eXBlLlxyXG5leHBvcnQgY2xhc3MgQ2FuY2VsbGF0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcihjYW5jZWxlZE5hbWUpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBDYW5jZWxsYXRpb25FcnJvciBgbmV3IENhbmNlbGxhdGlvbkVycm9yKClgfSBpbnN0ZWFkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsZWQoKSB7XHJcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihjYW5jZWxlZE5hbWUpO1xyXG4gICAgZXJyb3IubmFtZSA9IGVycm9yLm1lc3NhZ2U7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGlsbGVnYWxBcmd1bWVudChuYW1lKSB7XHJcbiAgICBpZiAobmFtZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoYElsbGVnYWwgYXJndW1lbnQ6ICR7bmFtZX1gKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0lsbGVnYWwgYXJndW1lbnQnKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaWxsZWdhbFN0YXRlKG5hbWUpIHtcclxuICAgIGlmIChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihgSWxsZWdhbCBzdGF0ZTogJHtuYW1lfWApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSWxsZWdhbCBzdGF0ZScpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBOb3RTdXBwb3J0ZWRFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcclxuICAgICAgICBzdXBlcignTm90U3VwcG9ydGVkJyk7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEVycm9yIHRoYXQgd2hlbiB0aHJvd24gd29uJ3QgYmUgbG9nZ2VkIGluIHRlbGVtZXRyeSBhcyBhbiB1bmhhbmRsZWQgZXJyb3IuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXJyb3JOb1RlbGVtZXRyeSBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1zZykge1xyXG4gICAgICAgIHN1cGVyKG1zZyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0NvZGVFeHBlY3RlZEVycm9yJztcclxuICAgIH1cclxuICAgIHN0YXRpYyBmcm9tRXJyb3IoZXJyKSB7XHJcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yTm9UZWxlbWV0cnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEVycm9yTm9UZWxlbWV0cnkoKTtcclxuICAgICAgICByZXN1bHQubWVzc2FnZSA9IGVyci5tZXNzYWdlO1xyXG4gICAgICAgIHJlc3VsdC5zdGFjayA9IGVyci5zdGFjaztcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGlzRXJyb3JOb1RlbGVtZXRyeShlcnIpIHtcclxuICAgICAgICByZXR1cm4gZXJyLm5hbWUgPT09ICdDb2RlRXhwZWN0ZWRFcnJvcic7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgZXJyb3IgaW5kaWNhdGVzIGEgYnVnLlxyXG4gKiBEbyBub3QgdGhyb3cgdGhpcyBmb3IgaW52YWxpZCB1c2VyIGlucHV0LlxyXG4gKiBPbmx5IGNhdGNoIHRoaXMgZXJyb3IgdG8gcmVjb3ZlciBncmFjZWZ1bGx5IGZyb20gYnVncy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBCdWdJbmRpY2F0aW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSB8fCAnQW4gdW5leHBlY3RlZCBidWcgb2NjdXJyZWQuJyk7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEJ1Z0luZGljYXRpbmdFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgICAgIC8vIEJlY2F1c2Ugd2Uga25vdyBmb3Igc3VyZSBvbmx5IGJ1Z2d5IGNvZGUgdGhyb3dzIHRoaXMsXHJcbiAgICAgICAgLy8gd2UgZGVmaW5pdGVseSB3YW50IHRvIGJyZWFrIGhlcmUgYW5kIGZpeCB0aGUgYnVnLlxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxyXG4gICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/errors.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/event.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/event.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DebounceEmitter: () => (/* binding */ DebounceEmitter),\n/* harmony export */   Emitter: () => (/* binding */ Emitter),\n/* harmony export */   Event: () => (/* binding */ Event),\n/* harmony export */   EventBufferer: () => (/* binding */ EventBufferer),\n/* harmony export */   EventMultiplexer: () => (/* binding */ EventMultiplexer),\n/* harmony export */   EventProfiling: () => (/* binding */ EventProfiling),\n/* harmony export */   ListenerLeakError: () => (/* binding */ ListenerLeakError),\n/* harmony export */   ListenerRefusalError: () => (/* binding */ ListenerRefusalError),\n/* harmony export */   MicrotaskEmitter: () => (/* binding */ MicrotaskEmitter),\n/* harmony export */   PauseableEmitter: () => (/* binding */ PauseableEmitter),\n/* harmony export */   Relay: () => (/* binding */ Relay),\n/* harmony export */   createEventDeliveryQueue: () => (/* binding */ createEventDeliveryQueue)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _functional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional.js */ \"./node_modules/monaco-editor/esm/vs/base/common/functional.js\");\n/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\");\n/* harmony import */ var _linkedList_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./linkedList.js */ \"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\");\n/* harmony import */ var _stopwatch_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stopwatch.js */ \"./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\");\n\r\n\r\n\r\n\r\n\r\n// -----------------------------------------------------------------------------------------------------------------------\r\n// Uncomment the next line to print warnings whenever a listener is GC'ed without having been disposed. This is a LEAK.\r\n// -----------------------------------------------------------------------------------------------------------------------\r\nconst _enableListenerGCedWarning = false;\r\n// -----------------------------------------------------------------------------------------------------------------------\r\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\r\n// -----------------------------------------------------------------------------------------------------------------------\r\nconst _enableDisposeWithListenerWarning = false;\r\n// -----------------------------------------------------------------------------------------------------------------------\r\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\r\n// See https://github.com/microsoft/vscode/issues/142851\r\n// -----------------------------------------------------------------------------------------------------------------------\r\nconst _enableSnapshotPotentialLeakWarning = false;\r\nvar Event;\r\n(function (Event) {\r\n    Event.None = () => _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\r\n    function _addLeakageTraceLogic(options) {\r\n        if (_enableSnapshotPotentialLeakWarning) {\r\n            const { onDidAddListener: origListenerDidAdd } = options;\r\n            const stack = Stacktrace.create();\r\n            let count = 0;\r\n            options.onDidAddListener = () => {\r\n                if (++count === 2) {\r\n                    console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\r\n                    stack.print();\r\n                }\r\n                origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared\r\n     * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a\r\n     * result of merging events and to try prevent race conditions that could arise when using related deferred and\r\n     * non-deferred events.\r\n     *\r\n     * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work\r\n     * (eg. latency of keypress to text rendered).\r\n     *\r\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\r\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\r\n     * returned event causes this utility to leak a listener on the original event.\r\n     *\r\n     * @param event The event source for the new event.\r\n     * @param disposable A disposable store to add the new EventEmitter to.\r\n     */\r\n    function defer(event, disposable) {\r\n        return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);\r\n    }\r\n    Event.defer = defer;\r\n    /**\r\n     * Given an event, returns another event which only fires once.\r\n     *\r\n     * @param event The event source for the new event.\r\n     */\r\n    function once(event) {\r\n        return (listener, thisArgs = null, disposables) => {\r\n            // we need this, in case the event fires during the listener call\r\n            let didFire = false;\r\n            let result = undefined;\r\n            result = event(e => {\r\n                if (didFire) {\r\n                    return;\r\n                }\r\n                else if (result) {\r\n                    result.dispose();\r\n                }\r\n                else {\r\n                    didFire = true;\r\n                }\r\n                return listener.call(thisArgs, e);\r\n            }, null, disposables);\r\n            if (didFire) {\r\n                result.dispose();\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n    Event.once = once;\r\n    /**\r\n     * Maps an event of one type into an event of another type using a mapping function, similar to how\r\n     * `Array.prototype.map` works.\r\n     *\r\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\r\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\r\n     * returned event causes this utility to leak a listener on the original event.\r\n     *\r\n     * @param event The event source for the new event.\r\n     * @param map The mapping function.\r\n     * @param disposable A disposable store to add the new EventEmitter to.\r\n     */\r\n    function map(event, map, disposable) {\r\n        return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables), disposable);\r\n    }\r\n    Event.map = map;\r\n    /**\r\n     * Wraps an event in another event that performs some function on the event object before firing.\r\n     *\r\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\r\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\r\n     * returned event causes this utility to leak a listener on the original event.\r\n     *\r\n     * @param event The event source for the new event.\r\n     * @param each The function to perform on the event object.\r\n     * @param disposable A disposable store to add the new EventEmitter to.\r\n     */\r\n    function forEach(event, each, disposable) {\r\n        return snapshot((listener, thisArgs = null, disposables) => event(i => { each(i); listener.call(thisArgs, i); }, null, disposables), disposable);\r\n    }\r\n    Event.forEach = forEach;\r\n    function filter(event, filter, disposable) {\r\n        return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables), disposable);\r\n    }\r\n    Event.filter = filter;\r\n    /**\r\n     * Given an event, returns the same event but typed as `Event<void>`.\r\n     */\r\n    function signal(event) {\r\n        return event;\r\n    }\r\n    Event.signal = signal;\r\n    function any(...events) {\r\n        return (listener, thisArgs = null, disposables) => {\r\n            const disposable = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.combinedDisposable)(...events.map(event => event(e => listener.call(thisArgs, e))));\r\n            return addAndReturnDisposable(disposable, disposables);\r\n        };\r\n    }\r\n    Event.any = any;\r\n    /**\r\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\r\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\r\n     * returned event causes this utility to leak a listener on the original event.\r\n     */\r\n    function reduce(event, merge, initial, disposable) {\r\n        let output = initial;\r\n        return map(event, e => {\r\n            output = merge(output, e);\r\n            return output;\r\n        }, disposable);\r\n    }\r\n    Event.reduce = reduce;\r\n    function snapshot(event, disposable) {\r\n        let listener;\r\n        const options = {\r\n            onWillAddFirstListener() {\r\n                listener = event(emitter.fire, emitter);\r\n            },\r\n            onDidRemoveLastListener() {\r\n                listener === null || listener === void 0 ? void 0 : listener.dispose();\r\n            }\r\n        };\r\n        if (!disposable) {\r\n            _addLeakageTraceLogic(options);\r\n        }\r\n        const emitter = new Emitter(options);\r\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\r\n        return emitter.event;\r\n    }\r\n    /**\r\n     * Adds the IDisposable to the store if it's set, and returns it. Useful to\r\n     * Event function implementation.\r\n     */\r\n    function addAndReturnDisposable(d, store) {\r\n        if (store instanceof Array) {\r\n            store.push(d);\r\n        }\r\n        else if (store) {\r\n            store.add(d);\r\n        }\r\n        return d;\r\n    }\r\n    function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {\r\n        let subscription;\r\n        let output = undefined;\r\n        let handle = undefined;\r\n        let numDebouncedCalls = 0;\r\n        let doFire;\r\n        const options = {\r\n            leakWarningThreshold,\r\n            onWillAddFirstListener() {\r\n                subscription = event(cur => {\r\n                    numDebouncedCalls++;\r\n                    output = merge(output, cur);\r\n                    if (leading && !handle) {\r\n                        emitter.fire(output);\r\n                        output = undefined;\r\n                    }\r\n                    doFire = () => {\r\n                        const _output = output;\r\n                        output = undefined;\r\n                        handle = undefined;\r\n                        if (!leading || numDebouncedCalls > 1) {\r\n                            emitter.fire(_output);\r\n                        }\r\n                        numDebouncedCalls = 0;\r\n                    };\r\n                    if (typeof delay === 'number') {\r\n                        clearTimeout(handle);\r\n                        handle = setTimeout(doFire, delay);\r\n                    }\r\n                    else {\r\n                        if (handle === undefined) {\r\n                            handle = 0;\r\n                            queueMicrotask(doFire);\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            onWillRemoveListener() {\r\n                if (flushOnListenerRemove && numDebouncedCalls > 0) {\r\n                    doFire === null || doFire === void 0 ? void 0 : doFire();\r\n                }\r\n            },\r\n            onDidRemoveLastListener() {\r\n                doFire = undefined;\r\n                subscription.dispose();\r\n            }\r\n        };\r\n        if (!disposable) {\r\n            _addLeakageTraceLogic(options);\r\n        }\r\n        const emitter = new Emitter(options);\r\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\r\n        return emitter.event;\r\n    }\r\n    Event.debounce = debounce;\r\n    /**\r\n     * Debounces an event, firing after some delay (default=0) with an array of all event original objects.\r\n     *\r\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\r\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\r\n     * returned event causes this utility to leak a listener on the original event.\r\n     */\r\n    function accumulate(event, delay = 0, disposable) {\r\n        return Event.debounce(event, (last, e) => {\r\n            if (!last) {\r\n                return [e];\r\n            }\r\n            last.push(e);\r\n            return last;\r\n        }, delay, undefined, true, undefined, disposable);\r\n    }\r\n    Event.accumulate = accumulate;\r\n    /**\r\n     * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate\r\n     * event objects from different sources do not fire the same event object.\r\n     *\r\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\r\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\r\n     * returned event causes this utility to leak a listener on the original event.\r\n     *\r\n     * @param event The event source for the new event.\r\n     * @param equals The equality condition.\r\n     * @param disposable A disposable store to add the new EventEmitter to.\r\n     *\r\n     * @example\r\n     * ```\r\n     * // Fire only one time when a single window is opened or focused\r\n     * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))\r\n     * ```\r\n     */\r\n    function latch(event, equals = (a, b) => a === b, disposable) {\r\n        let firstCall = true;\r\n        let cache;\r\n        return filter(event, value => {\r\n            const shouldEmit = firstCall || !equals(value, cache);\r\n            firstCall = false;\r\n            cache = value;\r\n            return shouldEmit;\r\n        }, disposable);\r\n    }\r\n    Event.latch = latch;\r\n    /**\r\n     * Splits an event whose parameter is a union type into 2 separate events for each type in the union.\r\n     *\r\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\r\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\r\n     * returned event causes this utility to leak a listener on the original event.\r\n     *\r\n     * @example\r\n     * ```\r\n     * const event = new EventEmitter<number | undefined>().event;\r\n     * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);\r\n     * ```\r\n     *\r\n     * @param event The event source for the new event.\r\n     * @param isT A function that determines what event is of the first type.\r\n     * @param disposable A disposable store to add the new EventEmitter to.\r\n     */\r\n    function split(event, isT, disposable) {\r\n        return [\r\n            Event.filter(event, isT, disposable),\r\n            Event.filter(event, e => !isT(e), disposable),\r\n        ];\r\n    }\r\n    Event.split = split;\r\n    /**\r\n     * Buffers an event until it has a listener attached.\r\n     *\r\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\r\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\r\n     * returned event causes this utility to leak a listener on the original event.\r\n     *\r\n     * @param event The event source for the new event.\r\n     * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a\r\n     * `setTimeout` when the first event listener is added.\r\n     * @param _buffer Internal: A source event array used for tests.\r\n     *\r\n     * @example\r\n     * ```\r\n     * // Start accumulating events, when the first listener is attached, flush\r\n     * // the event after a timeout such that multiple listeners attached before\r\n     * // the timeout would receive the event\r\n     * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);\r\n     * ```\r\n     */\r\n    function buffer(event, flushAfterTimeout = false, _buffer = [], disposable) {\r\n        let buffer = _buffer.slice();\r\n        let listener = event(e => {\r\n            if (buffer) {\r\n                buffer.push(e);\r\n            }\r\n            else {\r\n                emitter.fire(e);\r\n            }\r\n        });\r\n        if (disposable) {\r\n            disposable.add(listener);\r\n        }\r\n        const flush = () => {\r\n            buffer === null || buffer === void 0 ? void 0 : buffer.forEach(e => emitter.fire(e));\r\n            buffer = null;\r\n        };\r\n        const emitter = new Emitter({\r\n            onWillAddFirstListener() {\r\n                if (!listener) {\r\n                    listener = event(e => emitter.fire(e));\r\n                    if (disposable) {\r\n                        disposable.add(listener);\r\n                    }\r\n                }\r\n            },\r\n            onDidAddFirstListener() {\r\n                if (buffer) {\r\n                    if (flushAfterTimeout) {\r\n                        setTimeout(flush);\r\n                    }\r\n                    else {\r\n                        flush();\r\n                    }\r\n                }\r\n            },\r\n            onDidRemoveLastListener() {\r\n                if (listener) {\r\n                    listener.dispose();\r\n                }\r\n                listener = null;\r\n            }\r\n        });\r\n        if (disposable) {\r\n            disposable.add(emitter);\r\n        }\r\n        return emitter.event;\r\n    }\r\n    Event.buffer = buffer;\r\n    /**\r\n     * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.\r\n     *\r\n     * @example\r\n     * ```\r\n     * // Normal\r\n     * const onEnterPressNormal = Event.filter(\r\n     *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),\r\n     *   e.keyCode === KeyCode.Enter\r\n     * ).event;\r\n     *\r\n     * // Using chain\r\n     * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $\r\n     *   .map(e => new StandardKeyboardEvent(e))\r\n     *   .filter(e => e.keyCode === KeyCode.Enter)\r\n     * );\r\n     * ```\r\n     */\r\n    function chain(event, sythensize) {\r\n        const fn = (listener, thisArgs, disposables) => {\r\n            const cs = sythensize(new ChainableSynthesis());\r\n            return event(function (value) {\r\n                const result = cs.evaluate(value);\r\n                if (result !== HaltChainable) {\r\n                    listener.call(thisArgs, result);\r\n                }\r\n            }, undefined, disposables);\r\n        };\r\n        return fn;\r\n    }\r\n    Event.chain = chain;\r\n    const HaltChainable = Symbol('HaltChainable');\r\n    class ChainableSynthesis {\r\n        constructor() {\r\n            this.steps = [];\r\n        }\r\n        map(fn) {\r\n            this.steps.push(fn);\r\n            return this;\r\n        }\r\n        forEach(fn) {\r\n            this.steps.push(v => {\r\n                fn(v);\r\n                return v;\r\n            });\r\n            return this;\r\n        }\r\n        filter(fn) {\r\n            this.steps.push(v => fn(v) ? v : HaltChainable);\r\n            return this;\r\n        }\r\n        reduce(merge, initial) {\r\n            let last = initial;\r\n            this.steps.push(v => {\r\n                last = merge(last, v);\r\n                return last;\r\n            });\r\n            return this;\r\n        }\r\n        latch(equals = (a, b) => a === b) {\r\n            let firstCall = true;\r\n            let cache;\r\n            this.steps.push(value => {\r\n                const shouldEmit = firstCall || !equals(value, cache);\r\n                firstCall = false;\r\n                cache = value;\r\n                return shouldEmit ? value : HaltChainable;\r\n            });\r\n            return this;\r\n        }\r\n        evaluate(value) {\r\n            for (const step of this.steps) {\r\n                value = step(value);\r\n                if (value === HaltChainable) {\r\n                    break;\r\n                }\r\n            }\r\n            return value;\r\n        }\r\n    }\r\n    /**\r\n     * Creates an {@link Event} from a node event emitter.\r\n     */\r\n    function fromNodeEventEmitter(emitter, eventName, map = id => id) {\r\n        const fn = (...args) => result.fire(map(...args));\r\n        const onFirstListenerAdd = () => emitter.on(eventName, fn);\r\n        const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\r\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\r\n        return result.event;\r\n    }\r\n    Event.fromNodeEventEmitter = fromNodeEventEmitter;\r\n    /**\r\n     * Creates an {@link Event} from a DOM event emitter.\r\n     */\r\n    function fromDOMEventEmitter(emitter, eventName, map = id => id) {\r\n        const fn = (...args) => result.fire(map(...args));\r\n        const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\r\n        const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\r\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\r\n        return result.event;\r\n    }\r\n    Event.fromDOMEventEmitter = fromDOMEventEmitter;\r\n    /**\r\n     * Creates a promise out of an event, using the {@link Event.once} helper.\r\n     */\r\n    function toPromise(event) {\r\n        return new Promise(resolve => once(event)(resolve));\r\n    }\r\n    Event.toPromise = toPromise;\r\n    /**\r\n     * Creates an event out of a promise that fires once when the promise is\r\n     * resolved with the result of the promise or `undefined`.\r\n     */\r\n    function fromPromise(promise) {\r\n        const result = new Emitter();\r\n        promise.then(res => {\r\n            result.fire(res);\r\n        }, () => {\r\n            result.fire(undefined);\r\n        }).finally(() => {\r\n            result.dispose();\r\n        });\r\n        return result.event;\r\n    }\r\n    Event.fromPromise = fromPromise;\r\n    function runAndSubscribe(event, handler, initial) {\r\n        handler(initial);\r\n        return event(e => handler(e));\r\n    }\r\n    Event.runAndSubscribe = runAndSubscribe;\r\n    class EmitterObserver {\r\n        constructor(_observable, store) {\r\n            this._observable = _observable;\r\n            this._counter = 0;\r\n            this._hasChanged = false;\r\n            const options = {\r\n                onWillAddFirstListener: () => {\r\n                    _observable.addObserver(this);\r\n                },\r\n                onDidRemoveLastListener: () => {\r\n                    _observable.removeObserver(this);\r\n                }\r\n            };\r\n            if (!store) {\r\n                _addLeakageTraceLogic(options);\r\n            }\r\n            this.emitter = new Emitter(options);\r\n            if (store) {\r\n                store.add(this.emitter);\r\n            }\r\n        }\r\n        beginUpdate(_observable) {\r\n            // assert(_observable === this.obs);\r\n            this._counter++;\r\n        }\r\n        handlePossibleChange(_observable) {\r\n            // assert(_observable === this.obs);\r\n        }\r\n        handleChange(_observable, _change) {\r\n            // assert(_observable === this.obs);\r\n            this._hasChanged = true;\r\n        }\r\n        endUpdate(_observable) {\r\n            // assert(_observable === this.obs);\r\n            this._counter--;\r\n            if (this._counter === 0) {\r\n                this._observable.reportChanges();\r\n                if (this._hasChanged) {\r\n                    this._hasChanged = false;\r\n                    this.emitter.fire(this._observable.get());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Creates an event emitter that is fired when the observable changes.\r\n     * Each listeners subscribes to the emitter.\r\n     */\r\n    function fromObservable(obs, store) {\r\n        const observer = new EmitterObserver(obs, store);\r\n        return observer.emitter.event;\r\n    }\r\n    Event.fromObservable = fromObservable;\r\n    /**\r\n     * Each listener is attached to the observable directly.\r\n     */\r\n    function fromObservableLight(observable) {\r\n        return (listener, thisArgs, disposables) => {\r\n            let count = 0;\r\n            let didChange = false;\r\n            const observer = {\r\n                beginUpdate() {\r\n                    count++;\r\n                },\r\n                endUpdate() {\r\n                    count--;\r\n                    if (count === 0) {\r\n                        observable.reportChanges();\r\n                        if (didChange) {\r\n                            didChange = false;\r\n                            listener.call(thisArgs);\r\n                        }\r\n                    }\r\n                },\r\n                handlePossibleChange() {\r\n                    // noop\r\n                },\r\n                handleChange() {\r\n                    didChange = true;\r\n                }\r\n            };\r\n            observable.addObserver(observer);\r\n            observable.reportChanges();\r\n            const disposable = {\r\n                dispose() {\r\n                    observable.removeObserver(observer);\r\n                }\r\n            };\r\n            if (disposables instanceof _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore) {\r\n                disposables.add(disposable);\r\n            }\r\n            else if (Array.isArray(disposables)) {\r\n                disposables.push(disposable);\r\n            }\r\n            return disposable;\r\n        };\r\n    }\r\n    Event.fromObservableLight = fromObservableLight;\r\n})(Event || (Event = {}));\r\nclass EventProfiling {\r\n    constructor(name) {\r\n        this.listenerCount = 0;\r\n        this.invocationCount = 0;\r\n        this.elapsedOverall = 0;\r\n        this.durations = [];\r\n        this.name = `${name}_${EventProfiling._idPool++}`;\r\n        EventProfiling.all.add(this);\r\n    }\r\n    start(listenerCount) {\r\n        this._stopWatch = new _stopwatch_js__WEBPACK_IMPORTED_MODULE_4__.StopWatch();\r\n        this.listenerCount = listenerCount;\r\n    }\r\n    stop() {\r\n        if (this._stopWatch) {\r\n            const elapsed = this._stopWatch.elapsed();\r\n            this.durations.push(elapsed);\r\n            this.elapsedOverall += elapsed;\r\n            this.invocationCount += 1;\r\n            this._stopWatch = undefined;\r\n        }\r\n    }\r\n}\r\nEventProfiling.all = new Set();\r\nEventProfiling._idPool = 0;\r\nlet _globalLeakWarningThreshold = -1;\r\nclass LeakageMonitor {\r\n    constructor(_errorHandler, threshold, name = Math.random().toString(18).slice(2, 5)) {\r\n        this._errorHandler = _errorHandler;\r\n        this.threshold = threshold;\r\n        this.name = name;\r\n        this._warnCountdown = 0;\r\n    }\r\n    dispose() {\r\n        var _a;\r\n        (_a = this._stacks) === null || _a === void 0 ? void 0 : _a.clear();\r\n    }\r\n    check(stack, listenerCount) {\r\n        const threshold = this.threshold;\r\n        if (threshold <= 0 || listenerCount < threshold) {\r\n            return undefined;\r\n        }\r\n        if (!this._stacks) {\r\n            this._stacks = new Map();\r\n        }\r\n        const count = (this._stacks.get(stack.value) || 0);\r\n        this._stacks.set(stack.value, count + 1);\r\n        this._warnCountdown -= 1;\r\n        if (this._warnCountdown <= 0) {\r\n            // only warn on first exceed and then every time the limit\r\n            // is exceeded by 50% again\r\n            this._warnCountdown = threshold * 0.5;\r\n            const [topStack, topCount] = this.getMostFrequentStack();\r\n            const message = `[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`;\r\n            console.warn(message);\r\n            console.warn(topStack);\r\n            const error = new ListenerLeakError(message, topStack);\r\n            this._errorHandler(error);\r\n        }\r\n        return () => {\r\n            const count = (this._stacks.get(stack.value) || 0);\r\n            this._stacks.set(stack.value, count - 1);\r\n        };\r\n    }\r\n    getMostFrequentStack() {\r\n        if (!this._stacks) {\r\n            return undefined;\r\n        }\r\n        let topStack;\r\n        let topCount = 0;\r\n        for (const [stack, count] of this._stacks) {\r\n            if (!topStack || topCount < count) {\r\n                topStack = [stack, count];\r\n                topCount = count;\r\n            }\r\n        }\r\n        return topStack;\r\n    }\r\n}\r\nclass Stacktrace {\r\n    static create() {\r\n        var _a;\r\n        const err = new Error();\r\n        return new Stacktrace((_a = err.stack) !== null && _a !== void 0 ? _a : '');\r\n    }\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n    print() {\r\n        console.warn(this.value.split('\\n').slice(2).join('\\n'));\r\n    }\r\n}\r\n// error that is logged when going over the configured listener threshold\r\nclass ListenerLeakError extends Error {\r\n    constructor(message, stack) {\r\n        super(message);\r\n        this.name = 'ListenerLeakError';\r\n        this.stack = stack;\r\n    }\r\n}\r\n// SEVERE error that is logged when having gone way over the configured listener\r\n// threshold so that the emitter refuses to accept more listeners\r\nclass ListenerRefusalError extends Error {\r\n    constructor(message, stack) {\r\n        super(message);\r\n        this.name = 'ListenerRefusalError';\r\n        this.stack = stack;\r\n    }\r\n}\r\nclass UniqueContainer {\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n}\r\nconst compactionThreshold = 2;\r\nconst forEachListener = (listeners, fn) => {\r\n    if (listeners instanceof UniqueContainer) {\r\n        fn(listeners);\r\n    }\r\n    else {\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            const l = listeners[i];\r\n            if (l) {\r\n                fn(l);\r\n            }\r\n        }\r\n    }\r\n};\r\nconst _listenerFinalizers = _enableListenerGCedWarning\r\n    ? new FinalizationRegistry(heldValue => {\r\n        if (typeof heldValue === 'string') {\r\n            console.warn('[LEAKING LISTENER] GC\\'ed a listener that was NOT yet disposed. This is where is was created:');\r\n            console.warn(heldValue);\r\n        }\r\n    })\r\n    : undefined;\r\n/**\r\n * The Emitter can be used to expose an Event to the public\r\n * to fire it from the insides.\r\n * Sample:\r\n    class Document {\r\n\r\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\r\n\r\n        public onDidChange = this._onDidChange.event;\r\n\r\n        // getter-style\r\n        // get onDidChange(): Event<(value:string)=>any> {\r\n        // \treturn this._onDidChange.event;\r\n        // }\r\n\r\n        private _doIt() {\r\n            //...\r\n            this._onDidChange.fire(value);\r\n        }\r\n    }\r\n */\r\nclass Emitter {\r\n    constructor(options) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        this._size = 0;\r\n        this._options = options;\r\n        this._leakageMon = (_globalLeakWarningThreshold > 0 || ((_a = this._options) === null || _a === void 0 ? void 0 : _a.leakWarningThreshold))\r\n            ? new LeakageMonitor((_b = options === null || options === void 0 ? void 0 : options.onListenerError) !== null && _b !== void 0 ? _b : _errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError, (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.leakWarningThreshold) !== null && _d !== void 0 ? _d : _globalLeakWarningThreshold) :\r\n            undefined;\r\n        this._perfMon = ((_e = this._options) === null || _e === void 0 ? void 0 : _e._profName) ? new EventProfiling(this._options._profName) : undefined;\r\n        this._deliveryQueue = (_f = this._options) === null || _f === void 0 ? void 0 : _f.deliveryQueue;\r\n    }\r\n    dispose() {\r\n        var _a, _b, _c, _d;\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\r\n            // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\r\n            // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\r\n            // the following programming pattern is very popular:\r\n            //\r\n            // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\r\n            // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\r\n            // ...later...\r\n            // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\r\n            if (((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) === this) {\r\n                this._deliveryQueue.reset();\r\n            }\r\n            if (this._listeners) {\r\n                if (_enableDisposeWithListenerWarning) {\r\n                    const listeners = this._listeners;\r\n                    queueMicrotask(() => {\r\n                        forEachListener(listeners, l => { var _a; return (_a = l.stack) === null || _a === void 0 ? void 0 : _a.print(); });\r\n                    });\r\n                }\r\n                this._listeners = undefined;\r\n                this._size = 0;\r\n            }\r\n            (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidRemoveLastListener) === null || _c === void 0 ? void 0 : _c.call(_b);\r\n            (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();\r\n        }\r\n    }\r\n    /**\r\n     * For the public to allow to subscribe\r\n     * to events from this Emitter\r\n     */\r\n    get event() {\r\n        var _a;\r\n        (_a = this._event) !== null && _a !== void 0 ? _a : (this._event = (callback, thisArgs, disposables) => {\r\n            var _a, _b, _c, _d, _e, _f, _g;\r\n            if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {\r\n                const message = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;\r\n                console.warn(message);\r\n                const tuple = (_a = this._leakageMon.getMostFrequentStack()) !== null && _a !== void 0 ? _a : ['UNKNOWN stack', -1];\r\n                const error = new ListenerRefusalError(`${message}. HINT: Stack shows most frequent listener (${tuple[1]}-times)`, tuple[0]);\r\n                const errorHandler = ((_b = this._options) === null || _b === void 0 ? void 0 : _b.onListenerError) || _errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError;\r\n                errorHandler(error);\r\n                return _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\r\n            }\r\n            if (this._disposed) {\r\n                // todo: should we warn if a listener is added to a disposed emitter? This happens often\r\n                return _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\r\n            }\r\n            if (thisArgs) {\r\n                callback = callback.bind(thisArgs);\r\n            }\r\n            const contained = new UniqueContainer(callback);\r\n            let removeMonitor;\r\n            let stack;\r\n            if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {\r\n                // check and record this emitter for potential leakage\r\n                contained.stack = Stacktrace.create();\r\n                removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);\r\n            }\r\n            if (_enableDisposeWithListenerWarning) {\r\n                contained.stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();\r\n            }\r\n            if (!this._listeners) {\r\n                (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onWillAddFirstListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\r\n                this._listeners = contained;\r\n                (_f = (_e = this._options) === null || _e === void 0 ? void 0 : _e.onDidAddFirstListener) === null || _f === void 0 ? void 0 : _f.call(_e, this);\r\n            }\r\n            else if (this._listeners instanceof UniqueContainer) {\r\n                (_g = this._deliveryQueue) !== null && _g !== void 0 ? _g : (this._deliveryQueue = new EventDeliveryQueuePrivate());\r\n                this._listeners = [this._listeners, contained];\r\n            }\r\n            else {\r\n                this._listeners.push(contained);\r\n            }\r\n            this._size++;\r\n            const result = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {\r\n                _listenerFinalizers === null || _listenerFinalizers === void 0 ? void 0 : _listenerFinalizers.unregister(result);\r\n                removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor();\r\n                this._removeListener(contained);\r\n            });\r\n            if (disposables instanceof _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore) {\r\n                disposables.add(result);\r\n            }\r\n            else if (Array.isArray(disposables)) {\r\n                disposables.push(result);\r\n            }\r\n            if (_listenerFinalizers) {\r\n                const stack = new Error().stack.split('\\n').slice(2).join('\\n').trim();\r\n                _listenerFinalizers.register(result, stack, result);\r\n            }\r\n            return result;\r\n        });\r\n        return this._event;\r\n    }\r\n    _removeListener(listener) {\r\n        var _a, _b, _c, _d;\r\n        (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillRemoveListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);\r\n        if (!this._listeners) {\r\n            return; // expected if a listener gets disposed\r\n        }\r\n        if (this._size === 1) {\r\n            this._listeners = undefined;\r\n            (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidRemoveLastListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);\r\n            this._size = 0;\r\n            return;\r\n        }\r\n        // size > 1 which requires that listeners be a list:\r\n        const listeners = this._listeners;\r\n        const index = listeners.indexOf(listener);\r\n        if (index === -1) {\r\n            console.log('disposed?', this._disposed);\r\n            console.log('size?', this._size);\r\n            console.log('arr?', JSON.stringify(this._listeners));\r\n            throw new Error('Attempted to dispose unknown listener');\r\n        }\r\n        this._size--;\r\n        listeners[index] = undefined;\r\n        const adjustDeliveryQueue = this._deliveryQueue.current === this;\r\n        if (this._size * compactionThreshold <= listeners.length) {\r\n            let n = 0;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listeners[i]) {\r\n                    listeners[n++] = listeners[i];\r\n                }\r\n                else if (adjustDeliveryQueue) {\r\n                    this._deliveryQueue.end--;\r\n                    if (n < this._deliveryQueue.i) {\r\n                        this._deliveryQueue.i--;\r\n                    }\r\n                }\r\n            }\r\n            listeners.length = n;\r\n        }\r\n    }\r\n    _deliver(listener, value) {\r\n        var _a;\r\n        if (!listener) {\r\n            return;\r\n        }\r\n        const errorHandler = ((_a = this._options) === null || _a === void 0 ? void 0 : _a.onListenerError) || _errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError;\r\n        if (!errorHandler) {\r\n            listener.value(value);\r\n            return;\r\n        }\r\n        try {\r\n            listener.value(value);\r\n        }\r\n        catch (e) {\r\n            errorHandler(e);\r\n        }\r\n    }\r\n    /** Delivers items in the queue. Assumes the queue is ready to go. */\r\n    _deliverQueue(dq) {\r\n        const listeners = dq.current._listeners;\r\n        while (dq.i < dq.end) {\r\n            // important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()\r\n            this._deliver(listeners[dq.i++], dq.value);\r\n        }\r\n        dq.reset();\r\n    }\r\n    /**\r\n     * To be kept private to fire an event to\r\n     * subscribers\r\n     */\r\n    fire(event) {\r\n        var _a, _b, _c, _d;\r\n        if ((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) {\r\n            this._deliverQueue(this._deliveryQueue);\r\n            (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop(); // last fire() will have starting perfmon, stop it before starting the next dispatch\r\n        }\r\n        (_c = this._perfMon) === null || _c === void 0 ? void 0 : _c.start(this._size);\r\n        if (!this._listeners) {\r\n            // no-op\r\n        }\r\n        else if (this._listeners instanceof UniqueContainer) {\r\n            this._deliver(this._listeners, event);\r\n        }\r\n        else {\r\n            const dq = this._deliveryQueue;\r\n            dq.enqueue(this, event, this._listeners.length);\r\n            this._deliverQueue(dq);\r\n        }\r\n        (_d = this._perfMon) === null || _d === void 0 ? void 0 : _d.stop();\r\n    }\r\n    hasListeners() {\r\n        return this._size > 0;\r\n    }\r\n}\r\nconst createEventDeliveryQueue = () => new EventDeliveryQueuePrivate();\r\nclass EventDeliveryQueuePrivate {\r\n    constructor() {\r\n        /**\r\n         * Index in current's listener list.\r\n         */\r\n        this.i = -1;\r\n        /**\r\n         * The last index in the listener's list to deliver.\r\n         */\r\n        this.end = 0;\r\n    }\r\n    enqueue(emitter, value, end) {\r\n        this.i = 0;\r\n        this.end = end;\r\n        this.current = emitter;\r\n        this.value = value;\r\n    }\r\n    reset() {\r\n        this.i = this.end; // force any current emission loop to stop, mainly for during dispose\r\n        this.current = undefined;\r\n        this.value = undefined;\r\n    }\r\n}\r\nclass PauseableEmitter extends Emitter {\r\n    constructor(options) {\r\n        super(options);\r\n        this._isPaused = 0;\r\n        this._eventQueue = new _linkedList_js__WEBPACK_IMPORTED_MODULE_3__.LinkedList();\r\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\r\n    }\r\n    pause() {\r\n        this._isPaused++;\r\n    }\r\n    resume() {\r\n        if (this._isPaused !== 0 && --this._isPaused === 0) {\r\n            if (this._mergeFn) {\r\n                // use the merge function to create a single composite\r\n                // event. make a copy in case firing pauses this emitter\r\n                if (this._eventQueue.size > 0) {\r\n                    const events = Array.from(this._eventQueue);\r\n                    this._eventQueue.clear();\r\n                    super.fire(this._mergeFn(events));\r\n                }\r\n            }\r\n            else {\r\n                // no merging, fire each event individually and test\r\n                // that this emitter isn't paused halfway through\r\n                while (!this._isPaused && this._eventQueue.size !== 0) {\r\n                    super.fire(this._eventQueue.shift());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    fire(event) {\r\n        if (this._size) {\r\n            if (this._isPaused !== 0) {\r\n                this._eventQueue.push(event);\r\n            }\r\n            else {\r\n                super.fire(event);\r\n            }\r\n        }\r\n    }\r\n}\r\nclass DebounceEmitter extends PauseableEmitter {\r\n    constructor(options) {\r\n        var _a;\r\n        super(options);\r\n        this._delay = (_a = options.delay) !== null && _a !== void 0 ? _a : 100;\r\n    }\r\n    fire(event) {\r\n        if (!this._handle) {\r\n            this.pause();\r\n            this._handle = setTimeout(() => {\r\n                this._handle = undefined;\r\n                this.resume();\r\n            }, this._delay);\r\n        }\r\n        super.fire(event);\r\n    }\r\n}\r\n/**\r\n * An emitter which queue all events and then process them at the\r\n * end of the event loop.\r\n */\r\nclass MicrotaskEmitter extends Emitter {\r\n    constructor(options) {\r\n        super(options);\r\n        this._queuedEvents = [];\r\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\r\n    }\r\n    fire(event) {\r\n        if (!this.hasListeners()) {\r\n            return;\r\n        }\r\n        this._queuedEvents.push(event);\r\n        if (this._queuedEvents.length === 1) {\r\n            queueMicrotask(() => {\r\n                if (this._mergeFn) {\r\n                    super.fire(this._mergeFn(this._queuedEvents));\r\n                }\r\n                else {\r\n                    this._queuedEvents.forEach(e => super.fire(e));\r\n                }\r\n                this._queuedEvents = [];\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * An event emitter that multiplexes many events into a single event.\r\n *\r\n * @example Listen to the `onData` event of all `Thing`s, dynamically adding and removing `Thing`s\r\n * to the multiplexer as needed.\r\n *\r\n * ```typescript\r\n * const anythingDataMultiplexer = new EventMultiplexer<{ data: string }>();\r\n *\r\n * const thingListeners = DisposableMap<Thing, IDisposable>();\r\n *\r\n * thingService.onDidAddThing(thing => {\r\n *   thingListeners.set(thing, anythingDataMultiplexer.add(thing.onData);\r\n * });\r\n * thingService.onDidRemoveThing(thing => {\r\n *   thingListeners.deleteAndDispose(thing);\r\n * });\r\n *\r\n * anythingDataMultiplexer.event(e => {\r\n *   console.log('Something fired data ' + e.data)\r\n * });\r\n * ```\r\n */\r\nclass EventMultiplexer {\r\n    constructor() {\r\n        this.hasListeners = false;\r\n        this.events = [];\r\n        this.emitter = new Emitter({\r\n            onWillAddFirstListener: () => this.onFirstListenerAdd(),\r\n            onDidRemoveLastListener: () => this.onLastListenerRemove()\r\n        });\r\n    }\r\n    get event() {\r\n        return this.emitter.event;\r\n    }\r\n    add(event) {\r\n        const e = { event: event, listener: null };\r\n        this.events.push(e);\r\n        if (this.hasListeners) {\r\n            this.hook(e);\r\n        }\r\n        const dispose = () => {\r\n            if (this.hasListeners) {\r\n                this.unhook(e);\r\n            }\r\n            const idx = this.events.indexOf(e);\r\n            this.events.splice(idx, 1);\r\n        };\r\n        return (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)((0,_functional_js__WEBPACK_IMPORTED_MODULE_1__.createSingleCallFunction)(dispose));\r\n    }\r\n    onFirstListenerAdd() {\r\n        this.hasListeners = true;\r\n        this.events.forEach(e => this.hook(e));\r\n    }\r\n    onLastListenerRemove() {\r\n        this.hasListeners = false;\r\n        this.events.forEach(e => this.unhook(e));\r\n    }\r\n    hook(e) {\r\n        e.listener = e.event(r => this.emitter.fire(r));\r\n    }\r\n    unhook(e) {\r\n        var _a;\r\n        (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        e.listener = null;\r\n    }\r\n    dispose() {\r\n        var _a;\r\n        this.emitter.dispose();\r\n        for (const e of this.events) {\r\n            (_a = e.listener) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        }\r\n        this.events = [];\r\n    }\r\n}\r\n/**\r\n * The EventBufferer is useful in situations in which you want\r\n * to delay firing your events during some code.\r\n * You can wrap that code and be sure that the event will not\r\n * be fired during that wrap.\r\n *\r\n * ```\r\n * const emitter: Emitter;\r\n * const delayer = new EventDelayer();\r\n * const delayedEvent = delayer.wrapEvent(emitter.event);\r\n *\r\n * delayedEvent(console.log);\r\n *\r\n * delayer.bufferEvents(() => {\r\n *   emitter.fire(); // event will not be fired yet\r\n * });\r\n *\r\n * // event will only be fired at this point\r\n * ```\r\n */\r\nclass EventBufferer {\r\n    constructor() {\r\n        this.data = [];\r\n    }\r\n    wrapEvent(event, reduce, initial) {\r\n        return (listener, thisArgs, disposables) => {\r\n            return event(i => {\r\n                var _a;\r\n                const data = this.data[this.data.length - 1];\r\n                // Non-reduce scenario\r\n                if (!reduce) {\r\n                    // Buffering case\r\n                    if (data) {\r\n                        data.buffers.push(() => listener.call(thisArgs, i));\r\n                    }\r\n                    else {\r\n                        // Not buffering case\r\n                        listener.call(thisArgs, i);\r\n                    }\r\n                    return;\r\n                }\r\n                // Reduce scenario\r\n                const reduceData = data;\r\n                // Not buffering case\r\n                if (!reduceData) {\r\n                    // TODO: Is there a way to cache this reduce call for all listeners?\r\n                    listener.call(thisArgs, reduce(initial, i));\r\n                    return;\r\n                }\r\n                // Buffering case\r\n                (_a = reduceData.items) !== null && _a !== void 0 ? _a : (reduceData.items = []);\r\n                reduceData.items.push(i);\r\n                if (reduceData.buffers.length === 0) {\r\n                    // Include a single buffered function that will reduce all events when we're done buffering events\r\n                    data.buffers.push(() => {\r\n                        var _a;\r\n                        // cache the reduced result so that the value can be shared across all listeners\r\n                        (_a = reduceData.reducedResult) !== null && _a !== void 0 ? _a : (reduceData.reducedResult = initial\r\n                            ? reduceData.items.reduce(reduce, initial)\r\n                            : reduceData.items.reduce(reduce));\r\n                        listener.call(thisArgs, reduceData.reducedResult);\r\n                    });\r\n                }\r\n            }, undefined, disposables);\r\n        };\r\n    }\r\n    bufferEvents(fn) {\r\n        const data = { buffers: new Array() };\r\n        this.data.push(data);\r\n        const r = fn();\r\n        this.data.pop();\r\n        data.buffers.forEach(flush => flush());\r\n        return r;\r\n    }\r\n}\r\n/**\r\n * A Relay is an event forwarder which functions as a replugabble event pipe.\r\n * Once created, you can connect an input event to it and it will simply forward\r\n * events from that input event through its own `event` property. The `input`\r\n * can be changed at any point in time.\r\n */\r\nclass Relay {\r\n    constructor() {\r\n        this.listening = false;\r\n        this.inputEvent = Event.None;\r\n        this.inputEventListener = _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;\r\n        this.emitter = new Emitter({\r\n            onDidAddFirstListener: () => {\r\n                this.listening = true;\r\n                this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\r\n            },\r\n            onDidRemoveLastListener: () => {\r\n                this.listening = false;\r\n                this.inputEventListener.dispose();\r\n            }\r\n        });\r\n        this.event = this.emitter.event;\r\n    }\r\n    set input(event) {\r\n        this.inputEvent = event;\r\n        if (this.listening) {\r\n            this.inputEventListener.dispose();\r\n            this.inputEventListener = event(this.emitter.fire, this.emitter);\r\n        }\r\n    }\r\n    dispose() {\r\n        this.inputEventListener.dispose();\r\n        this.emitter.dispose();\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/event.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/functional.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/functional.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSingleCallFunction: () => (/* binding */ createSingleCallFunction)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * Given a function, returns a function that is only calling that function once.\r\n */\r\nfunction createSingleCallFunction(fn, fnDidRunCallback) {\r\n    const _this = this;\r\n    let didCall = false;\r\n    let result;\r\n    return function () {\r\n        if (didCall) {\r\n            return result;\r\n        }\r\n        didCall = true;\r\n        if (fnDidRunCallback) {\r\n            try {\r\n                result = fn.apply(_this, arguments);\r\n            }\r\n            finally {\r\n                fnDidRunCallback();\r\n            }\r\n        }\r\n        else {\r\n            result = fn.apply(_this, arguments);\r\n        }\r\n        return result;\r\n    };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vZnVuY3Rpb25hbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL2Z1bmN0aW9uYWwuanM/MGJmYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuLyoqXHJcbiAqIEdpdmVuIGEgZnVuY3Rpb24sIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIG9ubHkgY2FsbGluZyB0aGF0IGZ1bmN0aW9uIG9uY2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2luZ2xlQ2FsbEZ1bmN0aW9uKGZuLCBmbkRpZFJ1bkNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgZGlkQ2FsbCA9IGZhbHNlO1xyXG4gICAgbGV0IHJlc3VsdDtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGRpZENhbGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlkQ2FsbCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGZuRGlkUnVuQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KF90aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgZm5EaWRSdW5DYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBmbi5hcHBseShfdGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/functional.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/hash.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/hash.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringSHA1: () => (/* binding */ StringSHA1),\n/* harmony export */   doHash: () => (/* binding */ doHash),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   numberHash: () => (/* binding */ numberHash),\n/* harmony export */   stringHash: () => (/* binding */ stringHash),\n/* harmony export */   toHexString: () => (/* binding */ toHexString)\n/* harmony export */ });\n/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Return a hash value for an object.\r\n */\r\nfunction hash(obj) {\r\n    return doHash(obj, 0);\r\n}\r\nfunction doHash(obj, hashVal) {\r\n    switch (typeof obj) {\r\n        case 'object':\r\n            if (obj === null) {\r\n                return numberHash(349, hashVal);\r\n            }\r\n            else if (Array.isArray(obj)) {\r\n                return arrayHash(obj, hashVal);\r\n            }\r\n            return objectHash(obj, hashVal);\r\n        case 'string':\r\n            return stringHash(obj, hashVal);\r\n        case 'boolean':\r\n            return booleanHash(obj, hashVal);\r\n        case 'number':\r\n            return numberHash(obj, hashVal);\r\n        case 'undefined':\r\n            return numberHash(937, hashVal);\r\n        default:\r\n            return numberHash(617, hashVal);\r\n    }\r\n}\r\nfunction numberHash(val, initialHashVal) {\r\n    return (((initialHashVal << 5) - initialHashVal) + val) | 0; // hashVal * 31 + ch, keep as int32\r\n}\r\nfunction booleanHash(b, initialHashVal) {\r\n    return numberHash(b ? 433 : 863, initialHashVal);\r\n}\r\nfunction stringHash(s, hashVal) {\r\n    hashVal = numberHash(149417, hashVal);\r\n    for (let i = 0, length = s.length; i < length; i++) {\r\n        hashVal = numberHash(s.charCodeAt(i), hashVal);\r\n    }\r\n    return hashVal;\r\n}\r\nfunction arrayHash(arr, initialHashVal) {\r\n    initialHashVal = numberHash(104579, initialHashVal);\r\n    return arr.reduce((hashVal, item) => doHash(item, hashVal), initialHashVal);\r\n}\r\nfunction objectHash(obj, initialHashVal) {\r\n    initialHashVal = numberHash(181387, initialHashVal);\r\n    return Object.keys(obj).sort().reduce((hashVal, key) => {\r\n        hashVal = stringHash(key, hashVal);\r\n        return doHash(obj[key], hashVal);\r\n    }, initialHashVal);\r\n}\r\nfunction leftRotate(value, bits, totalBits = 32) {\r\n    // delta + bits = totalBits\r\n    const delta = totalBits - bits;\r\n    // All ones, expect `delta` zeros aligned to the right\r\n    const mask = ~((1 << delta) - 1);\r\n    // Join (value left-shifted `bits` bits) with (masked value right-shifted `delta` bits)\r\n    return ((value << bits) | ((mask & value) >>> delta)) >>> 0;\r\n}\r\nfunction fill(dest, index = 0, count = dest.byteLength, value = 0) {\r\n    for (let i = 0; i < count; i++) {\r\n        dest[index + i] = value;\r\n    }\r\n}\r\nfunction leftPad(value, length, char = '0') {\r\n    while (value.length < length) {\r\n        value = char + value;\r\n    }\r\n    return value;\r\n}\r\nfunction toHexString(bufferOrValue, bitsize = 32) {\r\n    if (bufferOrValue instanceof ArrayBuffer) {\r\n        return Array.from(new Uint8Array(bufferOrValue)).map(b => b.toString(16).padStart(2, '0')).join('');\r\n    }\r\n    return leftPad((bufferOrValue >>> 0).toString(16), bitsize / 4);\r\n}\r\n/**\r\n * A SHA1 implementation that works with strings and does not allocate.\r\n */\r\nclass StringSHA1 {\r\n    constructor() {\r\n        this._h0 = 0x67452301;\r\n        this._h1 = 0xEFCDAB89;\r\n        this._h2 = 0x98BADCFE;\r\n        this._h3 = 0x10325476;\r\n        this._h4 = 0xC3D2E1F0;\r\n        this._buff = new Uint8Array(64 /* SHA1Constant.BLOCK_SIZE */ + 3 /* to fit any utf-8 */);\r\n        this._buffDV = new DataView(this._buff.buffer);\r\n        this._buffLen = 0;\r\n        this._totalLen = 0;\r\n        this._leftoverHighSurrogate = 0;\r\n        this._finished = false;\r\n    }\r\n    update(str) {\r\n        const strLen = str.length;\r\n        if (strLen === 0) {\r\n            return;\r\n        }\r\n        const buff = this._buff;\r\n        let buffLen = this._buffLen;\r\n        let leftoverHighSurrogate = this._leftoverHighSurrogate;\r\n        let charCode;\r\n        let offset;\r\n        if (leftoverHighSurrogate !== 0) {\r\n            charCode = leftoverHighSurrogate;\r\n            offset = -1;\r\n            leftoverHighSurrogate = 0;\r\n        }\r\n        else {\r\n            charCode = str.charCodeAt(0);\r\n            offset = 0;\r\n        }\r\n        while (true) {\r\n            let codePoint = charCode;\r\n            if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isHighSurrogate(charCode)) {\r\n                if (offset + 1 < strLen) {\r\n                    const nextCharCode = str.charCodeAt(offset + 1);\r\n                    if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isLowSurrogate(nextCharCode)) {\r\n                        offset++;\r\n                        codePoint = _strings_js__WEBPACK_IMPORTED_MODULE_0__.computeCodePoint(charCode, nextCharCode);\r\n                    }\r\n                    else {\r\n                        // illegal => unicode replacement character\r\n                        codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */;\r\n                    }\r\n                }\r\n                else {\r\n                    // last character is a surrogate pair\r\n                    leftoverHighSurrogate = charCode;\r\n                    break;\r\n                }\r\n            }\r\n            else if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isLowSurrogate(charCode)) {\r\n                // illegal => unicode replacement character\r\n                codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */;\r\n            }\r\n            buffLen = this._push(buff, buffLen, codePoint);\r\n            offset++;\r\n            if (offset < strLen) {\r\n                charCode = str.charCodeAt(offset);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        this._buffLen = buffLen;\r\n        this._leftoverHighSurrogate = leftoverHighSurrogate;\r\n    }\r\n    _push(buff, buffLen, codePoint) {\r\n        if (codePoint < 0x0080) {\r\n            buff[buffLen++] = codePoint;\r\n        }\r\n        else if (codePoint < 0x0800) {\r\n            buff[buffLen++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\r\n        }\r\n        else if (codePoint < 0x10000) {\r\n            buff[buffLen++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\r\n        }\r\n        else {\r\n            buff[buffLen++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\r\n            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\r\n        }\r\n        if (buffLen >= 64 /* SHA1Constant.BLOCK_SIZE */) {\r\n            this._step();\r\n            buffLen -= 64 /* SHA1Constant.BLOCK_SIZE */;\r\n            this._totalLen += 64 /* SHA1Constant.BLOCK_SIZE */;\r\n            // take last 3 in case of UTF8 overflow\r\n            buff[0] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 0];\r\n            buff[1] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 1];\r\n            buff[2] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 2];\r\n        }\r\n        return buffLen;\r\n    }\r\n    digest() {\r\n        if (!this._finished) {\r\n            this._finished = true;\r\n            if (this._leftoverHighSurrogate) {\r\n                // illegal => unicode replacement character\r\n                this._leftoverHighSurrogate = 0;\r\n                this._buffLen = this._push(this._buff, this._buffLen, 65533 /* SHA1Constant.UNICODE_REPLACEMENT */);\r\n            }\r\n            this._totalLen += this._buffLen;\r\n            this._wrapUp();\r\n        }\r\n        return toHexString(this._h0) + toHexString(this._h1) + toHexString(this._h2) + toHexString(this._h3) + toHexString(this._h4);\r\n    }\r\n    _wrapUp() {\r\n        this._buff[this._buffLen++] = 0x80;\r\n        fill(this._buff, this._buffLen);\r\n        if (this._buffLen > 56) {\r\n            this._step();\r\n            fill(this._buff);\r\n        }\r\n        // this will fit because the mantissa can cover up to 52 bits\r\n        const ml = 8 * this._totalLen;\r\n        this._buffDV.setUint32(56, Math.floor(ml / 4294967296), false);\r\n        this._buffDV.setUint32(60, ml % 4294967296, false);\r\n        this._step();\r\n    }\r\n    _step() {\r\n        const bigBlock32 = StringSHA1._bigBlock32;\r\n        const data = this._buffDV;\r\n        for (let j = 0; j < 64 /* 16*4 */; j += 4) {\r\n            bigBlock32.setUint32(j, data.getUint32(j, false), false);\r\n        }\r\n        for (let j = 64; j < 320 /* 80*4 */; j += 4) {\r\n            bigBlock32.setUint32(j, leftRotate((bigBlock32.getUint32(j - 12, false) ^ bigBlock32.getUint32(j - 32, false) ^ bigBlock32.getUint32(j - 56, false) ^ bigBlock32.getUint32(j - 64, false)), 1), false);\r\n        }\r\n        let a = this._h0;\r\n        let b = this._h1;\r\n        let c = this._h2;\r\n        let d = this._h3;\r\n        let e = this._h4;\r\n        let f, k;\r\n        let temp;\r\n        for (let j = 0; j < 80; j++) {\r\n            if (j < 20) {\r\n                f = (b & c) | ((~b) & d);\r\n                k = 0x5A827999;\r\n            }\r\n            else if (j < 40) {\r\n                f = b ^ c ^ d;\r\n                k = 0x6ED9EBA1;\r\n            }\r\n            else if (j < 60) {\r\n                f = (b & c) | (b & d) | (c & d);\r\n                k = 0x8F1BBCDC;\r\n            }\r\n            else {\r\n                f = b ^ c ^ d;\r\n                k = 0xCA62C1D6;\r\n            }\r\n            temp = (leftRotate(a, 5) + f + e + k + bigBlock32.getUint32(j * 4, false)) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = leftRotate(b, 30);\r\n            b = a;\r\n            a = temp;\r\n        }\r\n        this._h0 = (this._h0 + a) & 0xffffffff;\r\n        this._h1 = (this._h1 + b) & 0xffffffff;\r\n        this._h2 = (this._h2 + c) & 0xffffffff;\r\n        this._h3 = (this._h3 + d) & 0xffffffff;\r\n        this._h4 = (this._h4 + e) & 0xffffffff;\r\n    }\r\n}\r\nStringSHA1._bigBlock32 = new DataView(new ArrayBuffer(320)); // 80 * 4 = 320\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vaGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx1Q0FBdUMsWUFBWTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixXQUFXO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0RBQXVCO0FBQ3ZDO0FBQ0E7QUFDQSx3QkFBd0IsdURBQXNCO0FBQzlDO0FBQ0Esb0NBQW9DLHlEQUF3QjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdURBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQSx5QkFBeUIsb0JBQW9CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9oYXNoLmpzP2VkYTciXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCAqIGFzIHN0cmluZ3MgZnJvbSAnLi9zdHJpbmdzLmpzJztcclxuLyoqXHJcbiAqIFJldHVybiBhIGhhc2ggdmFsdWUgZm9yIGFuIG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNoKG9iaikge1xyXG4gICAgcmV0dXJuIGRvSGFzaChvYmosIDApO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBkb0hhc2gob2JqLCBoYXNoVmFsKSB7XHJcbiAgICBzd2l0Y2ggKHR5cGVvZiBvYmopIHtcclxuICAgICAgICBjYXNlICdvYmplY3QnOlxyXG4gICAgICAgICAgICBpZiAob2JqID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVySGFzaCgzNDksIGhhc2hWYWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5SGFzaChvYmosIGhhc2hWYWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3RIYXNoKG9iaiwgaGFzaFZhbCk7XHJcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0hhc2gob2JqLCBoYXNoVmFsKTtcclxuICAgICAgICBjYXNlICdib29sZWFuJzpcclxuICAgICAgICAgICAgcmV0dXJuIGJvb2xlYW5IYXNoKG9iaiwgaGFzaFZhbCk7XHJcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlckhhc2gob2JqLCBoYXNoVmFsKTtcclxuICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxyXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVySGFzaCg5MzcsIGhhc2hWYWwpO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJIYXNoKDYxNywgaGFzaFZhbCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlckhhc2godmFsLCBpbml0aWFsSGFzaFZhbCkge1xyXG4gICAgcmV0dXJuICgoKGluaXRpYWxIYXNoVmFsIDw8IDUpIC0gaW5pdGlhbEhhc2hWYWwpICsgdmFsKSB8IDA7IC8vIGhhc2hWYWwgKiAzMSArIGNoLCBrZWVwIGFzIGludDMyXHJcbn1cclxuZnVuY3Rpb24gYm9vbGVhbkhhc2goYiwgaW5pdGlhbEhhc2hWYWwpIHtcclxuICAgIHJldHVybiBudW1iZXJIYXNoKGIgPyA0MzMgOiA4NjMsIGluaXRpYWxIYXNoVmFsKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nSGFzaChzLCBoYXNoVmFsKSB7XHJcbiAgICBoYXNoVmFsID0gbnVtYmVySGFzaCgxNDk0MTcsIGhhc2hWYWwpO1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBoYXNoVmFsID0gbnVtYmVySGFzaChzLmNoYXJDb2RlQXQoaSksIGhhc2hWYWwpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhhc2hWYWw7XHJcbn1cclxuZnVuY3Rpb24gYXJyYXlIYXNoKGFyciwgaW5pdGlhbEhhc2hWYWwpIHtcclxuICAgIGluaXRpYWxIYXNoVmFsID0gbnVtYmVySGFzaCgxMDQ1NzksIGluaXRpYWxIYXNoVmFsKTtcclxuICAgIHJldHVybiBhcnIucmVkdWNlKChoYXNoVmFsLCBpdGVtKSA9PiBkb0hhc2goaXRlbSwgaGFzaFZhbCksIGluaXRpYWxIYXNoVmFsKTtcclxufVxyXG5mdW5jdGlvbiBvYmplY3RIYXNoKG9iaiwgaW5pdGlhbEhhc2hWYWwpIHtcclxuICAgIGluaXRpYWxIYXNoVmFsID0gbnVtYmVySGFzaCgxODEzODcsIGluaXRpYWxIYXNoVmFsKTtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnNvcnQoKS5yZWR1Y2UoKGhhc2hWYWwsIGtleSkgPT4ge1xyXG4gICAgICAgIGhhc2hWYWwgPSBzdHJpbmdIYXNoKGtleSwgaGFzaFZhbCk7XHJcbiAgICAgICAgcmV0dXJuIGRvSGFzaChvYmpba2V5XSwgaGFzaFZhbCk7XHJcbiAgICB9LCBpbml0aWFsSGFzaFZhbCk7XHJcbn1cclxuZnVuY3Rpb24gbGVmdFJvdGF0ZSh2YWx1ZSwgYml0cywgdG90YWxCaXRzID0gMzIpIHtcclxuICAgIC8vIGRlbHRhICsgYml0cyA9IHRvdGFsQml0c1xyXG4gICAgY29uc3QgZGVsdGEgPSB0b3RhbEJpdHMgLSBiaXRzO1xyXG4gICAgLy8gQWxsIG9uZXMsIGV4cGVjdCBgZGVsdGFgIHplcm9zIGFsaWduZWQgdG8gdGhlIHJpZ2h0XHJcbiAgICBjb25zdCBtYXNrID0gfigoMSA8PCBkZWx0YSkgLSAxKTtcclxuICAgIC8vIEpvaW4gKHZhbHVlIGxlZnQtc2hpZnRlZCBgYml0c2AgYml0cykgd2l0aCAobWFza2VkIHZhbHVlIHJpZ2h0LXNoaWZ0ZWQgYGRlbHRhYCBiaXRzKVxyXG4gICAgcmV0dXJuICgodmFsdWUgPDwgYml0cykgfCAoKG1hc2sgJiB2YWx1ZSkgPj4+IGRlbHRhKSkgPj4+IDA7XHJcbn1cclxuZnVuY3Rpb24gZmlsbChkZXN0LCBpbmRleCA9IDAsIGNvdW50ID0gZGVzdC5ieXRlTGVuZ3RoLCB2YWx1ZSA9IDApIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgIGRlc3RbaW5kZXggKyBpXSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGxlZnRQYWQodmFsdWUsIGxlbmd0aCwgY2hhciA9ICcwJykge1xyXG4gICAgd2hpbGUgKHZhbHVlLmxlbmd0aCA8IGxlbmd0aCkge1xyXG4gICAgICAgIHZhbHVlID0gY2hhciArIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB0b0hleFN0cmluZyhidWZmZXJPclZhbHVlLCBiaXRzaXplID0gMzIpIHtcclxuICAgIGlmIChidWZmZXJPclZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShidWZmZXJPclZhbHVlKSkubWFwKGIgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVmdFBhZCgoYnVmZmVyT3JWYWx1ZSA+Pj4gMCkudG9TdHJpbmcoMTYpLCBiaXRzaXplIC8gNCk7XHJcbn1cclxuLyoqXHJcbiAqIEEgU0hBMSBpbXBsZW1lbnRhdGlvbiB0aGF0IHdvcmtzIHdpdGggc3RyaW5ncyBhbmQgZG9lcyBub3QgYWxsb2NhdGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RyaW5nU0hBMSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9oMCA9IDB4Njc0NTIzMDE7XHJcbiAgICAgICAgdGhpcy5faDEgPSAweEVGQ0RBQjg5O1xyXG4gICAgICAgIHRoaXMuX2gyID0gMHg5OEJBRENGRTtcclxuICAgICAgICB0aGlzLl9oMyA9IDB4MTAzMjU0NzY7XHJcbiAgICAgICAgdGhpcy5faDQgPSAweEMzRDJFMUYwO1xyXG4gICAgICAgIHRoaXMuX2J1ZmYgPSBuZXcgVWludDhBcnJheSg2NCAvKiBTSEExQ29uc3RhbnQuQkxPQ0tfU0laRSAqLyArIDMgLyogdG8gZml0IGFueSB1dGYtOCAqLyk7XHJcbiAgICAgICAgdGhpcy5fYnVmZkRWID0gbmV3IERhdGFWaWV3KHRoaXMuX2J1ZmYuYnVmZmVyKTtcclxuICAgICAgICB0aGlzLl9idWZmTGVuID0gMDtcclxuICAgICAgICB0aGlzLl90b3RhbExlbiA9IDA7XHJcbiAgICAgICAgdGhpcy5fbGVmdG92ZXJIaWdoU3Vycm9nYXRlID0gMDtcclxuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKHN0cikge1xyXG4gICAgICAgIGNvbnN0IHN0ckxlbiA9IHN0ci5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHN0ckxlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJ1ZmYgPSB0aGlzLl9idWZmO1xyXG4gICAgICAgIGxldCBidWZmTGVuID0gdGhpcy5fYnVmZkxlbjtcclxuICAgICAgICBsZXQgbGVmdG92ZXJIaWdoU3Vycm9nYXRlID0gdGhpcy5fbGVmdG92ZXJIaWdoU3Vycm9nYXRlO1xyXG4gICAgICAgIGxldCBjaGFyQ29kZTtcclxuICAgICAgICBsZXQgb2Zmc2V0O1xyXG4gICAgICAgIGlmIChsZWZ0b3ZlckhpZ2hTdXJyb2dhdGUgIT09IDApIHtcclxuICAgICAgICAgICAgY2hhckNvZGUgPSBsZWZ0b3ZlckhpZ2hTdXJyb2dhdGU7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IC0xO1xyXG4gICAgICAgICAgICBsZWZ0b3ZlckhpZ2hTdXJyb2dhdGUgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdCgwKTtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgbGV0IGNvZGVQb2ludCA9IGNoYXJDb2RlO1xyXG4gICAgICAgICAgICBpZiAoc3RyaW5ncy5pc0hpZ2hTdXJyb2dhdGUoY2hhckNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ICsgMSA8IHN0ckxlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmdzLmlzTG93U3Vycm9nYXRlKG5leHRDaGFyQ29kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IHN0cmluZ3MuY29tcHV0ZUNvZGVQb2ludChjaGFyQ29kZSwgbmV4dENoYXJDb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlsbGVnYWwgPT4gdW5pY29kZSByZXBsYWNlbWVudCBjaGFyYWN0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZVBvaW50ID0gNjU1MzMgLyogU0hBMUNvbnN0YW50LlVOSUNPREVfUkVQTEFDRU1FTlQgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGFzdCBjaGFyYWN0ZXIgaXMgYSBzdXJyb2dhdGUgcGFpclxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnRvdmVySGlnaFN1cnJvZ2F0ZSA9IGNoYXJDb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHN0cmluZ3MuaXNMb3dTdXJyb2dhdGUoY2hhckNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbGxlZ2FsID0+IHVuaWNvZGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyXHJcbiAgICAgICAgICAgICAgICBjb2RlUG9pbnQgPSA2NTUzMyAvKiBTSEExQ29uc3RhbnQuVU5JQ09ERV9SRVBMQUNFTUVOVCAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBidWZmTGVuID0gdGhpcy5fcHVzaChidWZmLCBidWZmTGVuLCBjb2RlUG9pbnQpO1xyXG4gICAgICAgICAgICBvZmZzZXQrKztcclxuICAgICAgICAgICAgaWYgKG9mZnNldCA8IHN0ckxlbikge1xyXG4gICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYnVmZkxlbiA9IGJ1ZmZMZW47XHJcbiAgICAgICAgdGhpcy5fbGVmdG92ZXJIaWdoU3Vycm9nYXRlID0gbGVmdG92ZXJIaWdoU3Vycm9nYXRlO1xyXG4gICAgfVxyXG4gICAgX3B1c2goYnVmZiwgYnVmZkxlbiwgY29kZVBvaW50KSB7XHJcbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IDB4MDA4MCkge1xyXG4gICAgICAgICAgICBidWZmW2J1ZmZMZW4rK10gPSBjb2RlUG9pbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MDgwMCkge1xyXG4gICAgICAgICAgICBidWZmW2J1ZmZMZW4rK10gPSAwYjExMDAwMDAwIHwgKChjb2RlUG9pbnQgJiAwYjAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMTExMDAwMDAwKSA+Pj4gNik7XHJcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTAwMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTExMTEpID4+PiAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xyXG4gICAgICAgICAgICBidWZmW2J1ZmZMZW4rK10gPSAwYjExMTAwMDAwIHwgKChjb2RlUG9pbnQgJiAwYjAwMDAwMDAwMDAwMDAwMDAxMTExMDAwMDAwMDAwMDAwKSA+Pj4gMTIpO1xyXG4gICAgICAgICAgICBidWZmW2J1ZmZMZW4rK10gPSAwYjEwMDAwMDAwIHwgKChjb2RlUG9pbnQgJiAwYjAwMDAwMDAwMDAwMDAwMDAwMDAwMTExMTExMDAwMDAwKSA+Pj4gNik7XHJcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTAwMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTExMTEpID4+PiAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTExMTAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAxMTEwMDAwMDAwMDAwMDAwMDAwMDApID4+PiAxOCk7XHJcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTAwMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAxMTExMTEwMDAwMDAwMDAwMDApID4+PiAxMik7XHJcbiAgICAgICAgICAgIGJ1ZmZbYnVmZkxlbisrXSA9IDBiMTAwMDAwMDAgfCAoKGNvZGVQb2ludCAmIDBiMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTExMTEwMDAwMDApID4+PiA2KTtcclxuICAgICAgICAgICAgYnVmZltidWZmTGVuKytdID0gMGIxMDAwMDAwMCB8ICgoY29kZVBvaW50ICYgMGIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDExMTExMSkgPj4+IDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnVmZkxlbiA+PSA2NCAvKiBTSEExQ29uc3RhbnQuQkxPQ0tfU0laRSAqLykge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGVwKCk7XHJcbiAgICAgICAgICAgIGJ1ZmZMZW4gLT0gNjQgLyogU0hBMUNvbnN0YW50LkJMT0NLX1NJWkUgKi87XHJcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuICs9IDY0IC8qIFNIQTFDb25zdGFudC5CTE9DS19TSVpFICovO1xyXG4gICAgICAgICAgICAvLyB0YWtlIGxhc3QgMyBpbiBjYXNlIG9mIFVURjggb3ZlcmZsb3dcclxuICAgICAgICAgICAgYnVmZlswXSA9IGJ1ZmZbNjQgLyogU0hBMUNvbnN0YW50LkJMT0NLX1NJWkUgKi8gKyAwXTtcclxuICAgICAgICAgICAgYnVmZlsxXSA9IGJ1ZmZbNjQgLyogU0hBMUNvbnN0YW50LkJMT0NLX1NJWkUgKi8gKyAxXTtcclxuICAgICAgICAgICAgYnVmZlsyXSA9IGJ1ZmZbNjQgLyogU0hBMUNvbnN0YW50LkJMT0NLX1NJWkUgKi8gKyAyXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ1ZmZMZW47XHJcbiAgICB9XHJcbiAgICBkaWdlc3QoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9maW5pc2hlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9maW5pc2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9sZWZ0b3ZlckhpZ2hTdXJyb2dhdGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlsbGVnYWwgPT4gdW5pY29kZSByZXBsYWNlbWVudCBjaGFyYWN0ZXJcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xlZnRvdmVySGlnaFN1cnJvZ2F0ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9idWZmTGVuID0gdGhpcy5fcHVzaCh0aGlzLl9idWZmLCB0aGlzLl9idWZmTGVuLCA2NTUzMyAvKiBTSEExQ29uc3RhbnQuVU5JQ09ERV9SRVBMQUNFTUVOVCAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fdG90YWxMZW4gKz0gdGhpcy5fYnVmZkxlbjtcclxuICAgICAgICAgICAgdGhpcy5fd3JhcFVwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0b0hleFN0cmluZyh0aGlzLl9oMCkgKyB0b0hleFN0cmluZyh0aGlzLl9oMSkgKyB0b0hleFN0cmluZyh0aGlzLl9oMikgKyB0b0hleFN0cmluZyh0aGlzLl9oMykgKyB0b0hleFN0cmluZyh0aGlzLl9oNCk7XHJcbiAgICB9XHJcbiAgICBfd3JhcFVwKCkge1xyXG4gICAgICAgIHRoaXMuX2J1ZmZbdGhpcy5fYnVmZkxlbisrXSA9IDB4ODA7XHJcbiAgICAgICAgZmlsbCh0aGlzLl9idWZmLCB0aGlzLl9idWZmTGVuKTtcclxuICAgICAgICBpZiAodGhpcy5fYnVmZkxlbiA+IDU2KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0ZXAoKTtcclxuICAgICAgICAgICAgZmlsbCh0aGlzLl9idWZmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhpcyB3aWxsIGZpdCBiZWNhdXNlIHRoZSBtYW50aXNzYSBjYW4gY292ZXIgdXAgdG8gNTIgYml0c1xyXG4gICAgICAgIGNvbnN0IG1sID0gOCAqIHRoaXMuX3RvdGFsTGVuO1xyXG4gICAgICAgIHRoaXMuX2J1ZmZEVi5zZXRVaW50MzIoNTYsIE1hdGguZmxvb3IobWwgLyA0Mjk0OTY3Mjk2KSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuX2J1ZmZEVi5zZXRVaW50MzIoNjAsIG1sICUgNDI5NDk2NzI5NiwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuX3N0ZXAoKTtcclxuICAgIH1cclxuICAgIF9zdGVwKCkge1xyXG4gICAgICAgIGNvbnN0IGJpZ0Jsb2NrMzIgPSBTdHJpbmdTSEExLl9iaWdCbG9jazMyO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9idWZmRFY7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA2NCAvKiAxNio0ICovOyBqICs9IDQpIHtcclxuICAgICAgICAgICAgYmlnQmxvY2szMi5zZXRVaW50MzIoaiwgZGF0YS5nZXRVaW50MzIoaiwgZmFsc2UpLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGogPSA2NDsgaiA8IDMyMCAvKiA4MCo0ICovOyBqICs9IDQpIHtcclxuICAgICAgICAgICAgYmlnQmxvY2szMi5zZXRVaW50MzIoaiwgbGVmdFJvdGF0ZSgoYmlnQmxvY2szMi5nZXRVaW50MzIoaiAtIDEyLCBmYWxzZSkgXiBiaWdCbG9jazMyLmdldFVpbnQzMihqIC0gMzIsIGZhbHNlKSBeIGJpZ0Jsb2NrMzIuZ2V0VWludDMyKGogLSA1NiwgZmFsc2UpIF4gYmlnQmxvY2szMi5nZXRVaW50MzIoaiAtIDY0LCBmYWxzZSkpLCAxKSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYSA9IHRoaXMuX2gwO1xyXG4gICAgICAgIGxldCBiID0gdGhpcy5faDE7XHJcbiAgICAgICAgbGV0IGMgPSB0aGlzLl9oMjtcclxuICAgICAgICBsZXQgZCA9IHRoaXMuX2gzO1xyXG4gICAgICAgIGxldCBlID0gdGhpcy5faDQ7XHJcbiAgICAgICAgbGV0IGYsIGs7XHJcbiAgICAgICAgbGV0IHRlbXA7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA4MDsgaisrKSB7XHJcbiAgICAgICAgICAgIGlmIChqIDwgMjApIHtcclxuICAgICAgICAgICAgICAgIGYgPSAoYiAmIGMpIHwgKCh+YikgJiBkKTtcclxuICAgICAgICAgICAgICAgIGsgPSAweDVBODI3OTk5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGogPCA0MCkge1xyXG4gICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgIGsgPSAweDZFRDlFQkExO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGogPCA2MCkge1xyXG4gICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKTtcclxuICAgICAgICAgICAgICAgIGsgPSAweDhGMUJCQ0RDO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgIGsgPSAweENBNjJDMUQ2O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRlbXAgPSAobGVmdFJvdGF0ZShhLCA1KSArIGYgKyBlICsgayArIGJpZ0Jsb2NrMzIuZ2V0VWludDMyKGogKiA0LCBmYWxzZSkpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICAgICAgZSA9IGQ7XHJcbiAgICAgICAgICAgIGQgPSBjO1xyXG4gICAgICAgICAgICBjID0gbGVmdFJvdGF0ZShiLCAzMCk7XHJcbiAgICAgICAgICAgIGIgPSBhO1xyXG4gICAgICAgICAgICBhID0gdGVtcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faDAgPSAodGhpcy5faDAgKyBhKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5faDEgPSAodGhpcy5faDEgKyBiKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5faDIgPSAodGhpcy5faDIgKyBjKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5faDMgPSAodGhpcy5faDMgKyBkKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5faDQgPSAodGhpcy5faDQgKyBlKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICB9XHJcbn1cclxuU3RyaW5nU0hBMS5fYmlnQmxvY2szMiA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMzIwKSk7IC8vIDgwICogNCA9IDMyMFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/hash.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/iterator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Iterable: () => (/* binding */ Iterable)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar Iterable;\r\n(function (Iterable) {\r\n    function is(thing) {\r\n        return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\r\n    }\r\n    Iterable.is = is;\r\n    const _empty = Object.freeze([]);\r\n    function empty() {\r\n        return _empty;\r\n    }\r\n    Iterable.empty = empty;\r\n    function* single(element) {\r\n        yield element;\r\n    }\r\n    Iterable.single = single;\r\n    function wrap(iterableOrElement) {\r\n        if (is(iterableOrElement)) {\r\n            return iterableOrElement;\r\n        }\r\n        else {\r\n            return single(iterableOrElement);\r\n        }\r\n    }\r\n    Iterable.wrap = wrap;\r\n    function from(iterable) {\r\n        return iterable || _empty;\r\n    }\r\n    Iterable.from = from;\r\n    function* reverse(array) {\r\n        for (let i = array.length - 1; i >= 0; i--) {\r\n            yield array[i];\r\n        }\r\n    }\r\n    Iterable.reverse = reverse;\r\n    function isEmpty(iterable) {\r\n        return !iterable || iterable[Symbol.iterator]().next().done === true;\r\n    }\r\n    Iterable.isEmpty = isEmpty;\r\n    function first(iterable) {\r\n        return iterable[Symbol.iterator]().next().value;\r\n    }\r\n    Iterable.first = first;\r\n    function some(iterable, predicate) {\r\n        for (const element of iterable) {\r\n            if (predicate(element)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    Iterable.some = some;\r\n    function find(iterable, predicate) {\r\n        for (const element of iterable) {\r\n            if (predicate(element)) {\r\n                return element;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    Iterable.find = find;\r\n    function* filter(iterable, predicate) {\r\n        for (const element of iterable) {\r\n            if (predicate(element)) {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n    Iterable.filter = filter;\r\n    function* map(iterable, fn) {\r\n        let index = 0;\r\n        for (const element of iterable) {\r\n            yield fn(element, index++);\r\n        }\r\n    }\r\n    Iterable.map = map;\r\n    function* concat(...iterables) {\r\n        for (const iterable of iterables) {\r\n            yield* iterable;\r\n        }\r\n    }\r\n    Iterable.concat = concat;\r\n    function reduce(iterable, reducer, initialValue) {\r\n        let value = initialValue;\r\n        for (const element of iterable) {\r\n            value = reducer(value, element);\r\n        }\r\n        return value;\r\n    }\r\n    Iterable.reduce = reduce;\r\n    /**\r\n     * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\r\n     */\r\n    function* slice(arr, from, to = arr.length) {\r\n        if (from < 0) {\r\n            from += arr.length;\r\n        }\r\n        if (to < 0) {\r\n            to += arr.length;\r\n        }\r\n        else if (to > arr.length) {\r\n            to = arr.length;\r\n        }\r\n        for (; from < to; from++) {\r\n            yield arr[from];\r\n        }\r\n    }\r\n    Iterable.slice = slice;\r\n    /**\r\n     * Consumes `atMost` elements from iterable and returns the consumed elements,\r\n     * and an iterable for the rest of the elements.\r\n     */\r\n    function consume(iterable, atMost = Number.POSITIVE_INFINITY) {\r\n        const consumed = [];\r\n        if (atMost === 0) {\r\n            return [consumed, iterable];\r\n        }\r\n        const iterator = iterable[Symbol.iterator]();\r\n        for (let i = 0; i < atMost; i++) {\r\n            const next = iterator.next();\r\n            if (next.done) {\r\n                return [consumed, Iterable.empty()];\r\n            }\r\n            consumed.push(next.value);\r\n        }\r\n        return [consumed, { [Symbol.iterator]() { return iterator; } }];\r\n    }\r\n    Iterable.consume = consume;\r\n    async function asyncToArray(iterable) {\r\n        const result = [];\r\n        for await (const item of iterable) {\r\n            result.push(item);\r\n        }\r\n        return Promise.resolve(result);\r\n    }\r\n    Iterable.asyncToArray = asyncToArray;\r\n})(Iterable || (Iterable = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vaXRlcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsV0FBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNCQUFzQixvQkFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9pdGVyYXRvci5qcz8yNThhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5leHBvcnQgdmFyIEl0ZXJhYmxlO1xyXG4oZnVuY3Rpb24gKEl0ZXJhYmxlKSB7XHJcbiAgICBmdW5jdGlvbiBpcyh0aGluZykge1xyXG4gICAgICAgIHJldHVybiB0aGluZyAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO1xyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuaXMgPSBpcztcclxuICAgIGNvbnN0IF9lbXB0eSA9IE9iamVjdC5mcmVlemUoW10pO1xyXG4gICAgZnVuY3Rpb24gZW1wdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9lbXB0eTtcclxuICAgIH1cclxuICAgIEl0ZXJhYmxlLmVtcHR5ID0gZW1wdHk7XHJcbiAgICBmdW5jdGlvbiogc2luZ2xlKGVsZW1lbnQpIHtcclxuICAgICAgICB5aWVsZCBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuc2luZ2xlID0gc2luZ2xlO1xyXG4gICAgZnVuY3Rpb24gd3JhcChpdGVyYWJsZU9yRWxlbWVudCkge1xyXG4gICAgICAgIGlmIChpcyhpdGVyYWJsZU9yRWxlbWVudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhYmxlT3JFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNpbmdsZShpdGVyYWJsZU9yRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgSXRlcmFibGUud3JhcCA9IHdyYXA7XHJcbiAgICBmdW5jdGlvbiBmcm9tKGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlIHx8IF9lbXB0eTtcclxuICAgIH1cclxuICAgIEl0ZXJhYmxlLmZyb20gPSBmcm9tO1xyXG4gICAgZnVuY3Rpb24qIHJldmVyc2UoYXJyYXkpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgeWllbGQgYXJyYXlbaV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgSXRlcmFibGUucmV2ZXJzZSA9IHJldmVyc2U7XHJcbiAgICBmdW5jdGlvbiBpc0VtcHR5KGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgcmV0dXJuICFpdGVyYWJsZSB8fCBpdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdKCkubmV4dCgpLmRvbmUgPT09IHRydWU7XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5pc0VtcHR5ID0gaXNFbXB0eTtcclxuICAgIGZ1bmN0aW9uIGZpcnN0KGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0oKS5uZXh0KCkudmFsdWU7XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5maXJzdCA9IGZpcnN0O1xyXG4gICAgZnVuY3Rpb24gc29tZShpdGVyYWJsZSwgcHJlZGljYXRlKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIEl0ZXJhYmxlLnNvbWUgPSBzb21lO1xyXG4gICAgZnVuY3Rpb24gZmluZChpdGVyYWJsZSwgcHJlZGljYXRlKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZXJhYmxlKSB7XHJcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5maW5kID0gZmluZDtcclxuICAgIGZ1bmN0aW9uKiBmaWx0ZXIoaXRlcmFibGUsIHByZWRpY2F0ZSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBpdGVyYWJsZSkge1xyXG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCBlbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuZmlsdGVyID0gZmlsdGVyO1xyXG4gICAgZnVuY3Rpb24qIG1hcChpdGVyYWJsZSwgZm4pIHtcclxuICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBpdGVyYWJsZSkge1xyXG4gICAgICAgICAgICB5aWVsZCBmbihlbGVtZW50LCBpbmRleCsrKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5tYXAgPSBtYXA7XHJcbiAgICBmdW5jdGlvbiogY29uY2F0KC4uLml0ZXJhYmxlcykge1xyXG4gICAgICAgIGZvciAoY29uc3QgaXRlcmFibGUgb2YgaXRlcmFibGVzKSB7XHJcbiAgICAgICAgICAgIHlpZWxkKiBpdGVyYWJsZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5jb25jYXQgPSBjb25jYXQ7XHJcbiAgICBmdW5jdGlvbiByZWR1Y2UoaXRlcmFibGUsIHJlZHVjZXIsIGluaXRpYWxWYWx1ZSkge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcclxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgaXRlcmFibGUpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSByZWR1Y2VyKHZhbHVlLCBlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgSXRlcmFibGUucmVkdWNlID0gcmVkdWNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFuIGl0ZXJhYmxlIHNsaWNlIG9mIHRoZSBhcnJheSwgd2l0aCB0aGUgc2FtZSBzZW1hbnRpY3MgYXMgYGFycmF5LnNsaWNlKClgLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiogc2xpY2UoYXJyLCBmcm9tLCB0byA9IGFyci5sZW5ndGgpIHtcclxuICAgICAgICBpZiAoZnJvbSA8IDApIHtcclxuICAgICAgICAgICAgZnJvbSArPSBhcnIubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG8gPCAwKSB7XHJcbiAgICAgICAgICAgIHRvICs9IGFyci5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRvID4gYXJyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0byA9IGFyci5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoOyBmcm9tIDwgdG87IGZyb20rKykge1xyXG4gICAgICAgICAgICB5aWVsZCBhcnJbZnJvbV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuc2xpY2UgPSBzbGljZTtcclxuICAgIC8qKlxyXG4gICAgICogQ29uc3VtZXMgYGF0TW9zdGAgZWxlbWVudHMgZnJvbSBpdGVyYWJsZSBhbmQgcmV0dXJucyB0aGUgY29uc3VtZWQgZWxlbWVudHMsXHJcbiAgICAgKiBhbmQgYW4gaXRlcmFibGUgZm9yIHRoZSByZXN0IG9mIHRoZSBlbGVtZW50cy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY29uc3VtZShpdGVyYWJsZSwgYXRNb3N0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSB7XHJcbiAgICAgICAgY29uc3QgY29uc3VtZWQgPSBbXTtcclxuICAgICAgICBpZiAoYXRNb3N0ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbY29uc3VtZWQsIGl0ZXJhYmxlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSBpdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdE1vc3Q7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlcmF0b3IubmV4dCgpO1xyXG4gICAgICAgICAgICBpZiAobmV4dC5kb25lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2NvbnN1bWVkLCBJdGVyYWJsZS5lbXB0eSgpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdW1lZC5wdXNoKG5leHQudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2NvbnN1bWVkLCB7IFtTeW1ib2wuaXRlcmF0b3JdKCkgeyByZXR1cm4gaXRlcmF0b3I7IH0gfV07XHJcbiAgICB9XHJcbiAgICBJdGVyYWJsZS5jb25zdW1lID0gY29uc3VtZTtcclxuICAgIGFzeW5jIGZ1bmN0aW9uIGFzeW5jVG9BcnJheShpdGVyYWJsZSkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBpdGVyYWJsZSkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgfVxyXG4gICAgSXRlcmFibGUuYXN5bmNUb0FycmF5ID0gYXN5bmNUb0FycmF5O1xyXG59KShJdGVyYWJsZSB8fCAoSXRlcmFibGUgPSB7fSkpO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/iterator.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EVENT_KEY_CODE_MAP: () => (/* binding */ EVENT_KEY_CODE_MAP),\n/* harmony export */   IMMUTABLE_CODE_TO_KEY_CODE: () => (/* binding */ IMMUTABLE_CODE_TO_KEY_CODE),\n/* harmony export */   IMMUTABLE_KEY_CODE_TO_CODE: () => (/* binding */ IMMUTABLE_KEY_CODE_TO_CODE),\n/* harmony export */   KeyChord: () => (/* binding */ KeyChord),\n/* harmony export */   KeyCodeUtils: () => (/* binding */ KeyCodeUtils),\n/* harmony export */   NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE: () => (/* binding */ NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nclass KeyCodeStrMap {\r\n    constructor() {\r\n        this._keyCodeToStr = [];\r\n        this._strToKeyCode = Object.create(null);\r\n    }\r\n    define(keyCode, str) {\r\n        this._keyCodeToStr[keyCode] = str;\r\n        this._strToKeyCode[str.toLowerCase()] = keyCode;\r\n    }\r\n    keyCodeToStr(keyCode) {\r\n        return this._keyCodeToStr[keyCode];\r\n    }\r\n    strToKeyCode(str) {\r\n        return this._strToKeyCode[str.toLowerCase()] || 0 /* KeyCode.Unknown */;\r\n    }\r\n}\r\nconst uiMap = new KeyCodeStrMap();\r\nconst userSettingsUSMap = new KeyCodeStrMap();\r\nconst userSettingsGeneralMap = new KeyCodeStrMap();\r\nconst EVENT_KEY_CODE_MAP = new Array(230);\r\nconst NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE = {};\r\nconst scanCodeIntToStr = [];\r\nconst scanCodeStrToInt = Object.create(null);\r\nconst scanCodeLowerCaseStrToInt = Object.create(null);\r\n/**\r\n * -1 if a ScanCode => KeyCode mapping depends on kb layout.\r\n */\r\nconst IMMUTABLE_CODE_TO_KEY_CODE = [];\r\n/**\r\n * -1 if a KeyCode => ScanCode mapping depends on kb layout.\r\n */\r\nconst IMMUTABLE_KEY_CODE_TO_CODE = [];\r\nfor (let i = 0; i <= 193 /* ScanCode.MAX_VALUE */; i++) {\r\n    IMMUTABLE_CODE_TO_KEY_CODE[i] = -1 /* KeyCode.DependsOnKbLayout */;\r\n}\r\nfor (let i = 0; i <= 132 /* KeyCode.MAX_VALUE */; i++) {\r\n    IMMUTABLE_KEY_CODE_TO_CODE[i] = -1 /* ScanCode.DependsOnKbLayout */;\r\n}\r\n(function () {\r\n    // See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\r\n    // See https://github.com/microsoft/node-native-keymap/blob/88c0b0e5/deps/chromium/keyboard_codes_win.h\r\n    const empty = '';\r\n    const mappings = [\r\n        // immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel\r\n        [1, 0 /* ScanCode.None */, 'None', 0 /* KeyCode.Unknown */, 'unknown', 0, 'VK_UNKNOWN', empty, empty],\r\n        [1, 1 /* ScanCode.Hyper */, 'Hyper', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 2 /* ScanCode.Super */, 'Super', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 3 /* ScanCode.Fn */, 'Fn', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 4 /* ScanCode.FnLock */, 'FnLock', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 5 /* ScanCode.Suspend */, 'Suspend', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 6 /* ScanCode.Resume */, 'Resume', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 7 /* ScanCode.Turbo */, 'Turbo', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 8 /* ScanCode.Sleep */, 'Sleep', 0 /* KeyCode.Unknown */, empty, 0, 'VK_SLEEP', empty, empty],\r\n        [1, 9 /* ScanCode.WakeUp */, 'WakeUp', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [0, 10 /* ScanCode.KeyA */, 'KeyA', 31 /* KeyCode.KeyA */, 'A', 65, 'VK_A', empty, empty],\r\n        [0, 11 /* ScanCode.KeyB */, 'KeyB', 32 /* KeyCode.KeyB */, 'B', 66, 'VK_B', empty, empty],\r\n        [0, 12 /* ScanCode.KeyC */, 'KeyC', 33 /* KeyCode.KeyC */, 'C', 67, 'VK_C', empty, empty],\r\n        [0, 13 /* ScanCode.KeyD */, 'KeyD', 34 /* KeyCode.KeyD */, 'D', 68, 'VK_D', empty, empty],\r\n        [0, 14 /* ScanCode.KeyE */, 'KeyE', 35 /* KeyCode.KeyE */, 'E', 69, 'VK_E', empty, empty],\r\n        [0, 15 /* ScanCode.KeyF */, 'KeyF', 36 /* KeyCode.KeyF */, 'F', 70, 'VK_F', empty, empty],\r\n        [0, 16 /* ScanCode.KeyG */, 'KeyG', 37 /* KeyCode.KeyG */, 'G', 71, 'VK_G', empty, empty],\r\n        [0, 17 /* ScanCode.KeyH */, 'KeyH', 38 /* KeyCode.KeyH */, 'H', 72, 'VK_H', empty, empty],\r\n        [0, 18 /* ScanCode.KeyI */, 'KeyI', 39 /* KeyCode.KeyI */, 'I', 73, 'VK_I', empty, empty],\r\n        [0, 19 /* ScanCode.KeyJ */, 'KeyJ', 40 /* KeyCode.KeyJ */, 'J', 74, 'VK_J', empty, empty],\r\n        [0, 20 /* ScanCode.KeyK */, 'KeyK', 41 /* KeyCode.KeyK */, 'K', 75, 'VK_K', empty, empty],\r\n        [0, 21 /* ScanCode.KeyL */, 'KeyL', 42 /* KeyCode.KeyL */, 'L', 76, 'VK_L', empty, empty],\r\n        [0, 22 /* ScanCode.KeyM */, 'KeyM', 43 /* KeyCode.KeyM */, 'M', 77, 'VK_M', empty, empty],\r\n        [0, 23 /* ScanCode.KeyN */, 'KeyN', 44 /* KeyCode.KeyN */, 'N', 78, 'VK_N', empty, empty],\r\n        [0, 24 /* ScanCode.KeyO */, 'KeyO', 45 /* KeyCode.KeyO */, 'O', 79, 'VK_O', empty, empty],\r\n        [0, 25 /* ScanCode.KeyP */, 'KeyP', 46 /* KeyCode.KeyP */, 'P', 80, 'VK_P', empty, empty],\r\n        [0, 26 /* ScanCode.KeyQ */, 'KeyQ', 47 /* KeyCode.KeyQ */, 'Q', 81, 'VK_Q', empty, empty],\r\n        [0, 27 /* ScanCode.KeyR */, 'KeyR', 48 /* KeyCode.KeyR */, 'R', 82, 'VK_R', empty, empty],\r\n        [0, 28 /* ScanCode.KeyS */, 'KeyS', 49 /* KeyCode.KeyS */, 'S', 83, 'VK_S', empty, empty],\r\n        [0, 29 /* ScanCode.KeyT */, 'KeyT', 50 /* KeyCode.KeyT */, 'T', 84, 'VK_T', empty, empty],\r\n        [0, 30 /* ScanCode.KeyU */, 'KeyU', 51 /* KeyCode.KeyU */, 'U', 85, 'VK_U', empty, empty],\r\n        [0, 31 /* ScanCode.KeyV */, 'KeyV', 52 /* KeyCode.KeyV */, 'V', 86, 'VK_V', empty, empty],\r\n        [0, 32 /* ScanCode.KeyW */, 'KeyW', 53 /* KeyCode.KeyW */, 'W', 87, 'VK_W', empty, empty],\r\n        [0, 33 /* ScanCode.KeyX */, 'KeyX', 54 /* KeyCode.KeyX */, 'X', 88, 'VK_X', empty, empty],\r\n        [0, 34 /* ScanCode.KeyY */, 'KeyY', 55 /* KeyCode.KeyY */, 'Y', 89, 'VK_Y', empty, empty],\r\n        [0, 35 /* ScanCode.KeyZ */, 'KeyZ', 56 /* KeyCode.KeyZ */, 'Z', 90, 'VK_Z', empty, empty],\r\n        [0, 36 /* ScanCode.Digit1 */, 'Digit1', 22 /* KeyCode.Digit1 */, '1', 49, 'VK_1', empty, empty],\r\n        [0, 37 /* ScanCode.Digit2 */, 'Digit2', 23 /* KeyCode.Digit2 */, '2', 50, 'VK_2', empty, empty],\r\n        [0, 38 /* ScanCode.Digit3 */, 'Digit3', 24 /* KeyCode.Digit3 */, '3', 51, 'VK_3', empty, empty],\r\n        [0, 39 /* ScanCode.Digit4 */, 'Digit4', 25 /* KeyCode.Digit4 */, '4', 52, 'VK_4', empty, empty],\r\n        [0, 40 /* ScanCode.Digit5 */, 'Digit5', 26 /* KeyCode.Digit5 */, '5', 53, 'VK_5', empty, empty],\r\n        [0, 41 /* ScanCode.Digit6 */, 'Digit6', 27 /* KeyCode.Digit6 */, '6', 54, 'VK_6', empty, empty],\r\n        [0, 42 /* ScanCode.Digit7 */, 'Digit7', 28 /* KeyCode.Digit7 */, '7', 55, 'VK_7', empty, empty],\r\n        [0, 43 /* ScanCode.Digit8 */, 'Digit8', 29 /* KeyCode.Digit8 */, '8', 56, 'VK_8', empty, empty],\r\n        [0, 44 /* ScanCode.Digit9 */, 'Digit9', 30 /* KeyCode.Digit9 */, '9', 57, 'VK_9', empty, empty],\r\n        [0, 45 /* ScanCode.Digit0 */, 'Digit0', 21 /* KeyCode.Digit0 */, '0', 48, 'VK_0', empty, empty],\r\n        [1, 46 /* ScanCode.Enter */, 'Enter', 3 /* KeyCode.Enter */, 'Enter', 13, 'VK_RETURN', empty, empty],\r\n        [1, 47 /* ScanCode.Escape */, 'Escape', 9 /* KeyCode.Escape */, 'Escape', 27, 'VK_ESCAPE', empty, empty],\r\n        [1, 48 /* ScanCode.Backspace */, 'Backspace', 1 /* KeyCode.Backspace */, 'Backspace', 8, 'VK_BACK', empty, empty],\r\n        [1, 49 /* ScanCode.Tab */, 'Tab', 2 /* KeyCode.Tab */, 'Tab', 9, 'VK_TAB', empty, empty],\r\n        [1, 50 /* ScanCode.Space */, 'Space', 10 /* KeyCode.Space */, 'Space', 32, 'VK_SPACE', empty, empty],\r\n        [0, 51 /* ScanCode.Minus */, 'Minus', 88 /* KeyCode.Minus */, '-', 189, 'VK_OEM_MINUS', '-', 'OEM_MINUS'],\r\n        [0, 52 /* ScanCode.Equal */, 'Equal', 86 /* KeyCode.Equal */, '=', 187, 'VK_OEM_PLUS', '=', 'OEM_PLUS'],\r\n        [0, 53 /* ScanCode.BracketLeft */, 'BracketLeft', 92 /* KeyCode.BracketLeft */, '[', 219, 'VK_OEM_4', '[', 'OEM_4'],\r\n        [0, 54 /* ScanCode.BracketRight */, 'BracketRight', 94 /* KeyCode.BracketRight */, ']', 221, 'VK_OEM_6', ']', 'OEM_6'],\r\n        [0, 55 /* ScanCode.Backslash */, 'Backslash', 93 /* KeyCode.Backslash */, '\\\\', 220, 'VK_OEM_5', '\\\\', 'OEM_5'],\r\n        [0, 56 /* ScanCode.IntlHash */, 'IntlHash', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], // has been dropped from the w3c spec\r\n        [0, 57 /* ScanCode.Semicolon */, 'Semicolon', 85 /* KeyCode.Semicolon */, ';', 186, 'VK_OEM_1', ';', 'OEM_1'],\r\n        [0, 58 /* ScanCode.Quote */, 'Quote', 95 /* KeyCode.Quote */, '\\'', 222, 'VK_OEM_7', '\\'', 'OEM_7'],\r\n        [0, 59 /* ScanCode.Backquote */, 'Backquote', 91 /* KeyCode.Backquote */, '`', 192, 'VK_OEM_3', '`', 'OEM_3'],\r\n        [0, 60 /* ScanCode.Comma */, 'Comma', 87 /* KeyCode.Comma */, ',', 188, 'VK_OEM_COMMA', ',', 'OEM_COMMA'],\r\n        [0, 61 /* ScanCode.Period */, 'Period', 89 /* KeyCode.Period */, '.', 190, 'VK_OEM_PERIOD', '.', 'OEM_PERIOD'],\r\n        [0, 62 /* ScanCode.Slash */, 'Slash', 90 /* KeyCode.Slash */, '/', 191, 'VK_OEM_2', '/', 'OEM_2'],\r\n        [1, 63 /* ScanCode.CapsLock */, 'CapsLock', 8 /* KeyCode.CapsLock */, 'CapsLock', 20, 'VK_CAPITAL', empty, empty],\r\n        [1, 64 /* ScanCode.F1 */, 'F1', 59 /* KeyCode.F1 */, 'F1', 112, 'VK_F1', empty, empty],\r\n        [1, 65 /* ScanCode.F2 */, 'F2', 60 /* KeyCode.F2 */, 'F2', 113, 'VK_F2', empty, empty],\r\n        [1, 66 /* ScanCode.F3 */, 'F3', 61 /* KeyCode.F3 */, 'F3', 114, 'VK_F3', empty, empty],\r\n        [1, 67 /* ScanCode.F4 */, 'F4', 62 /* KeyCode.F4 */, 'F4', 115, 'VK_F4', empty, empty],\r\n        [1, 68 /* ScanCode.F5 */, 'F5', 63 /* KeyCode.F5 */, 'F5', 116, 'VK_F5', empty, empty],\r\n        [1, 69 /* ScanCode.F6 */, 'F6', 64 /* KeyCode.F6 */, 'F6', 117, 'VK_F6', empty, empty],\r\n        [1, 70 /* ScanCode.F7 */, 'F7', 65 /* KeyCode.F7 */, 'F7', 118, 'VK_F7', empty, empty],\r\n        [1, 71 /* ScanCode.F8 */, 'F8', 66 /* KeyCode.F8 */, 'F8', 119, 'VK_F8', empty, empty],\r\n        [1, 72 /* ScanCode.F9 */, 'F9', 67 /* KeyCode.F9 */, 'F9', 120, 'VK_F9', empty, empty],\r\n        [1, 73 /* ScanCode.F10 */, 'F10', 68 /* KeyCode.F10 */, 'F10', 121, 'VK_F10', empty, empty],\r\n        [1, 74 /* ScanCode.F11 */, 'F11', 69 /* KeyCode.F11 */, 'F11', 122, 'VK_F11', empty, empty],\r\n        [1, 75 /* ScanCode.F12 */, 'F12', 70 /* KeyCode.F12 */, 'F12', 123, 'VK_F12', empty, empty],\r\n        [1, 76 /* ScanCode.PrintScreen */, 'PrintScreen', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 77 /* ScanCode.ScrollLock */, 'ScrollLock', 84 /* KeyCode.ScrollLock */, 'ScrollLock', 145, 'VK_SCROLL', empty, empty],\r\n        [1, 78 /* ScanCode.Pause */, 'Pause', 7 /* KeyCode.PauseBreak */, 'PauseBreak', 19, 'VK_PAUSE', empty, empty],\r\n        [1, 79 /* ScanCode.Insert */, 'Insert', 19 /* KeyCode.Insert */, 'Insert', 45, 'VK_INSERT', empty, empty],\r\n        [1, 80 /* ScanCode.Home */, 'Home', 14 /* KeyCode.Home */, 'Home', 36, 'VK_HOME', empty, empty],\r\n        [1, 81 /* ScanCode.PageUp */, 'PageUp', 11 /* KeyCode.PageUp */, 'PageUp', 33, 'VK_PRIOR', empty, empty],\r\n        [1, 82 /* ScanCode.Delete */, 'Delete', 20 /* KeyCode.Delete */, 'Delete', 46, 'VK_DELETE', empty, empty],\r\n        [1, 83 /* ScanCode.End */, 'End', 13 /* KeyCode.End */, 'End', 35, 'VK_END', empty, empty],\r\n        [1, 84 /* ScanCode.PageDown */, 'PageDown', 12 /* KeyCode.PageDown */, 'PageDown', 34, 'VK_NEXT', empty, empty],\r\n        [1, 85 /* ScanCode.ArrowRight */, 'ArrowRight', 17 /* KeyCode.RightArrow */, 'RightArrow', 39, 'VK_RIGHT', 'Right', empty],\r\n        [1, 86 /* ScanCode.ArrowLeft */, 'ArrowLeft', 15 /* KeyCode.LeftArrow */, 'LeftArrow', 37, 'VK_LEFT', 'Left', empty],\r\n        [1, 87 /* ScanCode.ArrowDown */, 'ArrowDown', 18 /* KeyCode.DownArrow */, 'DownArrow', 40, 'VK_DOWN', 'Down', empty],\r\n        [1, 88 /* ScanCode.ArrowUp */, 'ArrowUp', 16 /* KeyCode.UpArrow */, 'UpArrow', 38, 'VK_UP', 'Up', empty],\r\n        [1, 89 /* ScanCode.NumLock */, 'NumLock', 83 /* KeyCode.NumLock */, 'NumLock', 144, 'VK_NUMLOCK', empty, empty],\r\n        [1, 90 /* ScanCode.NumpadDivide */, 'NumpadDivide', 113 /* KeyCode.NumpadDivide */, 'NumPad_Divide', 111, 'VK_DIVIDE', empty, empty],\r\n        [1, 91 /* ScanCode.NumpadMultiply */, 'NumpadMultiply', 108 /* KeyCode.NumpadMultiply */, 'NumPad_Multiply', 106, 'VK_MULTIPLY', empty, empty],\r\n        [1, 92 /* ScanCode.NumpadSubtract */, 'NumpadSubtract', 111 /* KeyCode.NumpadSubtract */, 'NumPad_Subtract', 109, 'VK_SUBTRACT', empty, empty],\r\n        [1, 93 /* ScanCode.NumpadAdd */, 'NumpadAdd', 109 /* KeyCode.NumpadAdd */, 'NumPad_Add', 107, 'VK_ADD', empty, empty],\r\n        [1, 94 /* ScanCode.NumpadEnter */, 'NumpadEnter', 3 /* KeyCode.Enter */, empty, 0, empty, empty, empty],\r\n        [1, 95 /* ScanCode.Numpad1 */, 'Numpad1', 99 /* KeyCode.Numpad1 */, 'NumPad1', 97, 'VK_NUMPAD1', empty, empty],\r\n        [1, 96 /* ScanCode.Numpad2 */, 'Numpad2', 100 /* KeyCode.Numpad2 */, 'NumPad2', 98, 'VK_NUMPAD2', empty, empty],\r\n        [1, 97 /* ScanCode.Numpad3 */, 'Numpad3', 101 /* KeyCode.Numpad3 */, 'NumPad3', 99, 'VK_NUMPAD3', empty, empty],\r\n        [1, 98 /* ScanCode.Numpad4 */, 'Numpad4', 102 /* KeyCode.Numpad4 */, 'NumPad4', 100, 'VK_NUMPAD4', empty, empty],\r\n        [1, 99 /* ScanCode.Numpad5 */, 'Numpad5', 103 /* KeyCode.Numpad5 */, 'NumPad5', 101, 'VK_NUMPAD5', empty, empty],\r\n        [1, 100 /* ScanCode.Numpad6 */, 'Numpad6', 104 /* KeyCode.Numpad6 */, 'NumPad6', 102, 'VK_NUMPAD6', empty, empty],\r\n        [1, 101 /* ScanCode.Numpad7 */, 'Numpad7', 105 /* KeyCode.Numpad7 */, 'NumPad7', 103, 'VK_NUMPAD7', empty, empty],\r\n        [1, 102 /* ScanCode.Numpad8 */, 'Numpad8', 106 /* KeyCode.Numpad8 */, 'NumPad8', 104, 'VK_NUMPAD8', empty, empty],\r\n        [1, 103 /* ScanCode.Numpad9 */, 'Numpad9', 107 /* KeyCode.Numpad9 */, 'NumPad9', 105, 'VK_NUMPAD9', empty, empty],\r\n        [1, 104 /* ScanCode.Numpad0 */, 'Numpad0', 98 /* KeyCode.Numpad0 */, 'NumPad0', 96, 'VK_NUMPAD0', empty, empty],\r\n        [1, 105 /* ScanCode.NumpadDecimal */, 'NumpadDecimal', 112 /* KeyCode.NumpadDecimal */, 'NumPad_Decimal', 110, 'VK_DECIMAL', empty, empty],\r\n        [0, 106 /* ScanCode.IntlBackslash */, 'IntlBackslash', 97 /* KeyCode.IntlBackslash */, 'OEM_102', 226, 'VK_OEM_102', empty, empty],\r\n        [1, 107 /* ScanCode.ContextMenu */, 'ContextMenu', 58 /* KeyCode.ContextMenu */, 'ContextMenu', 93, empty, empty, empty],\r\n        [1, 108 /* ScanCode.Power */, 'Power', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 109 /* ScanCode.NumpadEqual */, 'NumpadEqual', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 110 /* ScanCode.F13 */, 'F13', 71 /* KeyCode.F13 */, 'F13', 124, 'VK_F13', empty, empty],\r\n        [1, 111 /* ScanCode.F14 */, 'F14', 72 /* KeyCode.F14 */, 'F14', 125, 'VK_F14', empty, empty],\r\n        [1, 112 /* ScanCode.F15 */, 'F15', 73 /* KeyCode.F15 */, 'F15', 126, 'VK_F15', empty, empty],\r\n        [1, 113 /* ScanCode.F16 */, 'F16', 74 /* KeyCode.F16 */, 'F16', 127, 'VK_F16', empty, empty],\r\n        [1, 114 /* ScanCode.F17 */, 'F17', 75 /* KeyCode.F17 */, 'F17', 128, 'VK_F17', empty, empty],\r\n        [1, 115 /* ScanCode.F18 */, 'F18', 76 /* KeyCode.F18 */, 'F18', 129, 'VK_F18', empty, empty],\r\n        [1, 116 /* ScanCode.F19 */, 'F19', 77 /* KeyCode.F19 */, 'F19', 130, 'VK_F19', empty, empty],\r\n        [1, 117 /* ScanCode.F20 */, 'F20', 78 /* KeyCode.F20 */, 'F20', 131, 'VK_F20', empty, empty],\r\n        [1, 118 /* ScanCode.F21 */, 'F21', 79 /* KeyCode.F21 */, 'F21', 132, 'VK_F21', empty, empty],\r\n        [1, 119 /* ScanCode.F22 */, 'F22', 80 /* KeyCode.F22 */, 'F22', 133, 'VK_F22', empty, empty],\r\n        [1, 120 /* ScanCode.F23 */, 'F23', 81 /* KeyCode.F23 */, 'F23', 134, 'VK_F23', empty, empty],\r\n        [1, 121 /* ScanCode.F24 */, 'F24', 82 /* KeyCode.F24 */, 'F24', 135, 'VK_F24', empty, empty],\r\n        [1, 122 /* ScanCode.Open */, 'Open', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 123 /* ScanCode.Help */, 'Help', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 124 /* ScanCode.Select */, 'Select', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 125 /* ScanCode.Again */, 'Again', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 126 /* ScanCode.Undo */, 'Undo', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 127 /* ScanCode.Cut */, 'Cut', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 128 /* ScanCode.Copy */, 'Copy', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 129 /* ScanCode.Paste */, 'Paste', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 130 /* ScanCode.Find */, 'Find', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 131 /* ScanCode.AudioVolumeMute */, 'AudioVolumeMute', 117 /* KeyCode.AudioVolumeMute */, 'AudioVolumeMute', 173, 'VK_VOLUME_MUTE', empty, empty],\r\n        [1, 132 /* ScanCode.AudioVolumeUp */, 'AudioVolumeUp', 118 /* KeyCode.AudioVolumeUp */, 'AudioVolumeUp', 175, 'VK_VOLUME_UP', empty, empty],\r\n        [1, 133 /* ScanCode.AudioVolumeDown */, 'AudioVolumeDown', 119 /* KeyCode.AudioVolumeDown */, 'AudioVolumeDown', 174, 'VK_VOLUME_DOWN', empty, empty],\r\n        [1, 134 /* ScanCode.NumpadComma */, 'NumpadComma', 110 /* KeyCode.NUMPAD_SEPARATOR */, 'NumPad_Separator', 108, 'VK_SEPARATOR', empty, empty],\r\n        [0, 135 /* ScanCode.IntlRo */, 'IntlRo', 115 /* KeyCode.ABNT_C1 */, 'ABNT_C1', 193, 'VK_ABNT_C1', empty, empty],\r\n        [1, 136 /* ScanCode.KanaMode */, 'KanaMode', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [0, 137 /* ScanCode.IntlYen */, 'IntlYen', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 138 /* ScanCode.Convert */, 'Convert', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 139 /* ScanCode.NonConvert */, 'NonConvert', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 140 /* ScanCode.Lang1 */, 'Lang1', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 141 /* ScanCode.Lang2 */, 'Lang2', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 142 /* ScanCode.Lang3 */, 'Lang3', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 143 /* ScanCode.Lang4 */, 'Lang4', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 144 /* ScanCode.Lang5 */, 'Lang5', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 145 /* ScanCode.Abort */, 'Abort', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 146 /* ScanCode.Props */, 'Props', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 147 /* ScanCode.NumpadParenLeft */, 'NumpadParenLeft', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 148 /* ScanCode.NumpadParenRight */, 'NumpadParenRight', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 149 /* ScanCode.NumpadBackspace */, 'NumpadBackspace', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 150 /* ScanCode.NumpadMemoryStore */, 'NumpadMemoryStore', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 151 /* ScanCode.NumpadMemoryRecall */, 'NumpadMemoryRecall', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 152 /* ScanCode.NumpadMemoryClear */, 'NumpadMemoryClear', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 153 /* ScanCode.NumpadMemoryAdd */, 'NumpadMemoryAdd', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 154 /* ScanCode.NumpadMemorySubtract */, 'NumpadMemorySubtract', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 155 /* ScanCode.NumpadClear */, 'NumpadClear', 131 /* KeyCode.Clear */, 'Clear', 12, 'VK_CLEAR', empty, empty],\r\n        [1, 156 /* ScanCode.NumpadClearEntry */, 'NumpadClearEntry', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 5 /* KeyCode.Ctrl */, 'Ctrl', 17, 'VK_CONTROL', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 4 /* KeyCode.Shift */, 'Shift', 16, 'VK_SHIFT', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 6 /* KeyCode.Alt */, 'Alt', 18, 'VK_MENU', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 57 /* KeyCode.Meta */, 'Meta', 91, 'VK_COMMAND', empty, empty],\r\n        [1, 157 /* ScanCode.ControlLeft */, 'ControlLeft', 5 /* KeyCode.Ctrl */, empty, 0, 'VK_LCONTROL', empty, empty],\r\n        [1, 158 /* ScanCode.ShiftLeft */, 'ShiftLeft', 4 /* KeyCode.Shift */, empty, 0, 'VK_LSHIFT', empty, empty],\r\n        [1, 159 /* ScanCode.AltLeft */, 'AltLeft', 6 /* KeyCode.Alt */, empty, 0, 'VK_LMENU', empty, empty],\r\n        [1, 160 /* ScanCode.MetaLeft */, 'MetaLeft', 57 /* KeyCode.Meta */, empty, 0, 'VK_LWIN', empty, empty],\r\n        [1, 161 /* ScanCode.ControlRight */, 'ControlRight', 5 /* KeyCode.Ctrl */, empty, 0, 'VK_RCONTROL', empty, empty],\r\n        [1, 162 /* ScanCode.ShiftRight */, 'ShiftRight', 4 /* KeyCode.Shift */, empty, 0, 'VK_RSHIFT', empty, empty],\r\n        [1, 163 /* ScanCode.AltRight */, 'AltRight', 6 /* KeyCode.Alt */, empty, 0, 'VK_RMENU', empty, empty],\r\n        [1, 164 /* ScanCode.MetaRight */, 'MetaRight', 57 /* KeyCode.Meta */, empty, 0, 'VK_RWIN', empty, empty],\r\n        [1, 165 /* ScanCode.BrightnessUp */, 'BrightnessUp', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 166 /* ScanCode.BrightnessDown */, 'BrightnessDown', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 167 /* ScanCode.MediaPlay */, 'MediaPlay', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 168 /* ScanCode.MediaRecord */, 'MediaRecord', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 169 /* ScanCode.MediaFastForward */, 'MediaFastForward', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 170 /* ScanCode.MediaRewind */, 'MediaRewind', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 171 /* ScanCode.MediaTrackNext */, 'MediaTrackNext', 124 /* KeyCode.MediaTrackNext */, 'MediaTrackNext', 176, 'VK_MEDIA_NEXT_TRACK', empty, empty],\r\n        [1, 172 /* ScanCode.MediaTrackPrevious */, 'MediaTrackPrevious', 125 /* KeyCode.MediaTrackPrevious */, 'MediaTrackPrevious', 177, 'VK_MEDIA_PREV_TRACK', empty, empty],\r\n        [1, 173 /* ScanCode.MediaStop */, 'MediaStop', 126 /* KeyCode.MediaStop */, 'MediaStop', 178, 'VK_MEDIA_STOP', empty, empty],\r\n        [1, 174 /* ScanCode.Eject */, 'Eject', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 175 /* ScanCode.MediaPlayPause */, 'MediaPlayPause', 127 /* KeyCode.MediaPlayPause */, 'MediaPlayPause', 179, 'VK_MEDIA_PLAY_PAUSE', empty, empty],\r\n        [1, 176 /* ScanCode.MediaSelect */, 'MediaSelect', 128 /* KeyCode.LaunchMediaPlayer */, 'LaunchMediaPlayer', 181, 'VK_MEDIA_LAUNCH_MEDIA_SELECT', empty, empty],\r\n        [1, 177 /* ScanCode.LaunchMail */, 'LaunchMail', 129 /* KeyCode.LaunchMail */, 'LaunchMail', 180, 'VK_MEDIA_LAUNCH_MAIL', empty, empty],\r\n        [1, 178 /* ScanCode.LaunchApp2 */, 'LaunchApp2', 130 /* KeyCode.LaunchApp2 */, 'LaunchApp2', 183, 'VK_MEDIA_LAUNCH_APP2', empty, empty],\r\n        [1, 179 /* ScanCode.LaunchApp1 */, 'LaunchApp1', 0 /* KeyCode.Unknown */, empty, 0, 'VK_MEDIA_LAUNCH_APP1', empty, empty],\r\n        [1, 180 /* ScanCode.SelectTask */, 'SelectTask', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 181 /* ScanCode.LaunchScreenSaver */, 'LaunchScreenSaver', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 182 /* ScanCode.BrowserSearch */, 'BrowserSearch', 120 /* KeyCode.BrowserSearch */, 'BrowserSearch', 170, 'VK_BROWSER_SEARCH', empty, empty],\r\n        [1, 183 /* ScanCode.BrowserHome */, 'BrowserHome', 121 /* KeyCode.BrowserHome */, 'BrowserHome', 172, 'VK_BROWSER_HOME', empty, empty],\r\n        [1, 184 /* ScanCode.BrowserBack */, 'BrowserBack', 122 /* KeyCode.BrowserBack */, 'BrowserBack', 166, 'VK_BROWSER_BACK', empty, empty],\r\n        [1, 185 /* ScanCode.BrowserForward */, 'BrowserForward', 123 /* KeyCode.BrowserForward */, 'BrowserForward', 167, 'VK_BROWSER_FORWARD', empty, empty],\r\n        [1, 186 /* ScanCode.BrowserStop */, 'BrowserStop', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_STOP', empty, empty],\r\n        [1, 187 /* ScanCode.BrowserRefresh */, 'BrowserRefresh', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_REFRESH', empty, empty],\r\n        [1, 188 /* ScanCode.BrowserFavorites */, 'BrowserFavorites', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_FAVORITES', empty, empty],\r\n        [1, 189 /* ScanCode.ZoomToggle */, 'ZoomToggle', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 190 /* ScanCode.MailReply */, 'MailReply', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 191 /* ScanCode.MailForward */, 'MailForward', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        [1, 192 /* ScanCode.MailSend */, 'MailSend', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],\r\n        // See https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\r\n        // If an Input Method Editor is processing key input and the event is keydown, return 229.\r\n        [1, 0 /* ScanCode.None */, empty, 114 /* KeyCode.KEY_IN_COMPOSITION */, 'KeyInComposition', 229, empty, empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 116 /* KeyCode.ABNT_C2 */, 'ABNT_C2', 194, 'VK_ABNT_C2', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 96 /* KeyCode.OEM_8 */, 'OEM_8', 223, 'VK_OEM_8', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_KANA', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HANGUL', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_JUNJA', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_FINAL', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HANJA', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_KANJI', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_CONVERT', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_NONCONVERT', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ACCEPT', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_MODECHANGE', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_SELECT', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PRINT', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EXECUTE', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_SNAPSHOT', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HELP', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_APPS', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PROCESSKEY', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PACKET', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_DBE_SBCSCHAR', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_DBE_DBCSCHAR', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ATTN', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_CRSEL', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EXSEL', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EREOF', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PLAY', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ZOOM', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_NONAME', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PA1', empty, empty],\r\n        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_OEM_CLEAR', empty, empty],\r\n    ];\r\n    const seenKeyCode = [];\r\n    const seenScanCode = [];\r\n    for (const mapping of mappings) {\r\n        const [immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel] = mapping;\r\n        if (!seenScanCode[scanCode]) {\r\n            seenScanCode[scanCode] = true;\r\n            scanCodeIntToStr[scanCode] = scanCodeStr;\r\n            scanCodeStrToInt[scanCodeStr] = scanCode;\r\n            scanCodeLowerCaseStrToInt[scanCodeStr.toLowerCase()] = scanCode;\r\n            if (immutable) {\r\n                IMMUTABLE_CODE_TO_KEY_CODE[scanCode] = keyCode;\r\n                if ((keyCode !== 0 /* KeyCode.Unknown */)\r\n                    && (keyCode !== 3 /* KeyCode.Enter */)\r\n                    && (keyCode !== 5 /* KeyCode.Ctrl */)\r\n                    && (keyCode !== 4 /* KeyCode.Shift */)\r\n                    && (keyCode !== 6 /* KeyCode.Alt */)\r\n                    && (keyCode !== 57 /* KeyCode.Meta */)) {\r\n                    IMMUTABLE_KEY_CODE_TO_CODE[keyCode] = scanCode;\r\n                }\r\n            }\r\n        }\r\n        if (!seenKeyCode[keyCode]) {\r\n            seenKeyCode[keyCode] = true;\r\n            if (!keyCodeStr) {\r\n                throw new Error(`String representation missing for key code ${keyCode} around scan code ${scanCodeStr}`);\r\n            }\r\n            uiMap.define(keyCode, keyCodeStr);\r\n            userSettingsUSMap.define(keyCode, usUserSettingsLabel || keyCodeStr);\r\n            userSettingsGeneralMap.define(keyCode, generalUserSettingsLabel || usUserSettingsLabel || keyCodeStr);\r\n        }\r\n        if (eventKeyCode) {\r\n            EVENT_KEY_CODE_MAP[eventKeyCode] = keyCode;\r\n        }\r\n        if (vkey) {\r\n            NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[vkey] = keyCode;\r\n        }\r\n    }\r\n    // Manually added due to the exclusion above (due to duplication with NumpadEnter)\r\n    IMMUTABLE_KEY_CODE_TO_CODE[3 /* KeyCode.Enter */] = 46 /* ScanCode.Enter */;\r\n})();\r\nvar KeyCodeUtils;\r\n(function (KeyCodeUtils) {\r\n    function toString(keyCode) {\r\n        return uiMap.keyCodeToStr(keyCode);\r\n    }\r\n    KeyCodeUtils.toString = toString;\r\n    function fromString(key) {\r\n        return uiMap.strToKeyCode(key);\r\n    }\r\n    KeyCodeUtils.fromString = fromString;\r\n    function toUserSettingsUS(keyCode) {\r\n        return userSettingsUSMap.keyCodeToStr(keyCode);\r\n    }\r\n    KeyCodeUtils.toUserSettingsUS = toUserSettingsUS;\r\n    function toUserSettingsGeneral(keyCode) {\r\n        return userSettingsGeneralMap.keyCodeToStr(keyCode);\r\n    }\r\n    KeyCodeUtils.toUserSettingsGeneral = toUserSettingsGeneral;\r\n    function fromUserSettings(key) {\r\n        return userSettingsUSMap.strToKeyCode(key) || userSettingsGeneralMap.strToKeyCode(key);\r\n    }\r\n    KeyCodeUtils.fromUserSettings = fromUserSettings;\r\n    function toElectronAccelerator(keyCode) {\r\n        if (keyCode >= 98 /* KeyCode.Numpad0 */ && keyCode <= 113 /* KeyCode.NumpadDivide */) {\r\n            // [Electron Accelerators] Electron is able to parse numpad keys, but unfortunately it\r\n            // renders them just as regular keys in menus. For example, num0 is rendered as \"0\",\r\n            // numdiv is rendered as \"/\", numsub is rendered as \"-\".\r\n            //\r\n            // This can lead to incredible confusion, as it makes numpad based keybindings indistinguishable\r\n            // from keybindings based on regular keys.\r\n            //\r\n            // We therefore need to fall back to custom rendering for numpad keys.\r\n            return null;\r\n        }\r\n        switch (keyCode) {\r\n            case 16 /* KeyCode.UpArrow */:\r\n                return 'Up';\r\n            case 18 /* KeyCode.DownArrow */:\r\n                return 'Down';\r\n            case 15 /* KeyCode.LeftArrow */:\r\n                return 'Left';\r\n            case 17 /* KeyCode.RightArrow */:\r\n                return 'Right';\r\n        }\r\n        return uiMap.keyCodeToStr(keyCode);\r\n    }\r\n    KeyCodeUtils.toElectronAccelerator = toElectronAccelerator;\r\n})(KeyCodeUtils || (KeyCodeUtils = {}));\r\nfunction KeyChord(firstPart, secondPart) {\r\n    const chordPart = ((secondPart & 0x0000FFFF) << 16) >>> 0;\r\n    return (firstPart | chordPart) >>> 0;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/lazy.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lazy.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lazy: () => (/* binding */ Lazy)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nclass Lazy {\r\n    constructor(executor) {\r\n        this.executor = executor;\r\n        this._didRun = false;\r\n    }\r\n    /**\r\n     * Get the wrapped value.\r\n     *\r\n     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\r\n     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\r\n     */\r\n    get value() {\r\n        if (!this._didRun) {\r\n            try {\r\n                this._value = this.executor();\r\n            }\r\n            catch (err) {\r\n                this._error = err;\r\n            }\r\n            finally {\r\n                this._didRun = true;\r\n            }\r\n        }\r\n        if (this._error) {\r\n            throw this._error;\r\n        }\r\n        return this._value;\r\n    }\r\n    /**\r\n     * Get the wrapped value without forcing evaluation.\r\n     */\r\n    get rawValue() { return this._value; }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vbGF6eS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9sYXp5LmpzPzQxZDIiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmV4cG9ydCBjbGFzcyBMYXp5IHtcclxuICAgIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XHJcbiAgICAgICAgdGhpcy5leGVjdXRvciA9IGV4ZWN1dG9yO1xyXG4gICAgICAgIHRoaXMuX2RpZFJ1biA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHdyYXBwZWQgdmFsdWUuXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyB3aWxsIGZvcmNlIGV2YWx1YXRpb24gb2YgdGhlIGxhenkgdmFsdWUgaWYgaXQgaGFzIG5vdCBiZWVuIHJlc29sdmVkIHlldC4gTGF6eSB2YWx1ZXMgYXJlIG9ubHlcclxuICAgICAqIHJlc29sdmVkIG9uY2UuIGBnZXRWYWx1ZWAgd2lsbCByZS10aHJvdyBleGNlcHRpb25zIHRoYXQgYXJlIGhpdCB3aGlsZSByZXNvbHZpbmcgdGhlIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2RpZFJ1bikge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLmV4ZWN1dG9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBlcnI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWRSdW4gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyB0aGlzLl9lcnJvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHdyYXBwZWQgdmFsdWUgd2l0aG91dCBmb3JjaW5nIGV2YWx1YXRpb24uXHJcbiAgICAgKi9cclxuICAgIGdldCByYXdWYWx1ZSgpIHsgcmV0dXJuIHRoaXMuX3ZhbHVlOyB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/lazy.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Disposable: () => (/* binding */ Disposable),\n/* harmony export */   DisposableMap: () => (/* binding */ DisposableMap),\n/* harmony export */   DisposableStore: () => (/* binding */ DisposableStore),\n/* harmony export */   ImmortalReference: () => (/* binding */ ImmortalReference),\n/* harmony export */   MutableDisposable: () => (/* binding */ MutableDisposable),\n/* harmony export */   RefCountedDisposable: () => (/* binding */ RefCountedDisposable),\n/* harmony export */   combinedDisposable: () => (/* binding */ combinedDisposable),\n/* harmony export */   dispose: () => (/* binding */ dispose),\n/* harmony export */   isDisposable: () => (/* binding */ isDisposable),\n/* harmony export */   markAsDisposed: () => (/* binding */ markAsDisposed),\n/* harmony export */   markAsSingleton: () => (/* binding */ markAsSingleton),\n/* harmony export */   setDisposableTracker: () => (/* binding */ setDisposableTracker),\n/* harmony export */   toDisposable: () => (/* binding */ toDisposable),\n/* harmony export */   trackDisposable: () => (/* binding */ trackDisposable)\n/* harmony export */ });\n/* harmony import */ var _functional_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional.js */ \"./node_modules/monaco-editor/esm/vs/base/common/functional.js\");\n/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterator.js */ \"./node_modules/monaco-editor/esm/vs/base/common/iterator.js\");\n\r\n\r\n// #region Disposable Tracking\r\n/**\r\n * Enables logging of potentially leaked disposables.\r\n *\r\n * A disposable is considered leaked if it is not disposed or not registered as the child of\r\n * another disposable. This tracking is very simple an only works for classes that either\r\n * extend Disposable or use a DisposableStore. This means there are a lot of false positives.\r\n */\r\nconst TRACK_DISPOSABLES = false;\r\nlet disposableTracker = null;\r\nfunction setDisposableTracker(tracker) {\r\n    disposableTracker = tracker;\r\n}\r\nif (TRACK_DISPOSABLES) {\r\n    const __is_disposable_tracked__ = '__is_disposable_tracked__';\r\n    setDisposableTracker(new class {\r\n        trackDisposable(x) {\r\n            const stack = new Error('Potentially leaked disposable').stack;\r\n            setTimeout(() => {\r\n                if (!x[__is_disposable_tracked__]) {\r\n                    console.log(stack);\r\n                }\r\n            }, 3000);\r\n        }\r\n        setParent(child, parent) {\r\n            if (child && child !== Disposable.None) {\r\n                try {\r\n                    child[__is_disposable_tracked__] = true;\r\n                }\r\n                catch (_a) {\r\n                    // noop\r\n                }\r\n            }\r\n        }\r\n        markAsDisposed(disposable) {\r\n            if (disposable && disposable !== Disposable.None) {\r\n                try {\r\n                    disposable[__is_disposable_tracked__] = true;\r\n                }\r\n                catch (_a) {\r\n                    // noop\r\n                }\r\n            }\r\n        }\r\n        markAsSingleton(disposable) { }\r\n    });\r\n}\r\nfunction trackDisposable(x) {\r\n    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.trackDisposable(x);\r\n    return x;\r\n}\r\nfunction markAsDisposed(disposable) {\r\n    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.markAsDisposed(disposable);\r\n}\r\nfunction setParentOfDisposable(child, parent) {\r\n    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.setParent(child, parent);\r\n}\r\nfunction setParentOfDisposables(children, parent) {\r\n    if (!disposableTracker) {\r\n        return;\r\n    }\r\n    for (const child of children) {\r\n        disposableTracker.setParent(child, parent);\r\n    }\r\n}\r\n/**\r\n * Indicates that the given object is a singleton which does not need to be disposed.\r\n*/\r\nfunction markAsSingleton(singleton) {\r\n    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.markAsSingleton(singleton);\r\n    return singleton;\r\n}\r\n/**\r\n * Check if `thing` is {@link IDisposable disposable}.\r\n */\r\nfunction isDisposable(thing) {\r\n    return typeof thing === 'object' && thing !== null && typeof thing.dispose === 'function' && thing.dispose.length === 0;\r\n}\r\nfunction dispose(arg) {\r\n    if (_iterator_js__WEBPACK_IMPORTED_MODULE_1__.Iterable.is(arg)) {\r\n        const errors = [];\r\n        for (const d of arg) {\r\n            if (d) {\r\n                try {\r\n                    d.dispose();\r\n                }\r\n                catch (e) {\r\n                    errors.push(e);\r\n                }\r\n            }\r\n        }\r\n        if (errors.length === 1) {\r\n            throw errors[0];\r\n        }\r\n        else if (errors.length > 1) {\r\n            throw new AggregateError(errors, 'Encountered errors while disposing of store');\r\n        }\r\n        return Array.isArray(arg) ? [] : arg;\r\n    }\r\n    else if (arg) {\r\n        arg.dispose();\r\n        return arg;\r\n    }\r\n}\r\n/**\r\n * Combine multiple disposable values into a single {@link IDisposable}.\r\n */\r\nfunction combinedDisposable(...disposables) {\r\n    const parent = toDisposable(() => dispose(disposables));\r\n    setParentOfDisposables(disposables, parent);\r\n    return parent;\r\n}\r\n/**\r\n * Turn a function that implements dispose into an {@link IDisposable}.\r\n *\r\n * @param fn Clean up function, guaranteed to be called only **once**.\r\n */\r\nfunction toDisposable(fn) {\r\n    const self = trackDisposable({\r\n        dispose: (0,_functional_js__WEBPACK_IMPORTED_MODULE_0__.createSingleCallFunction)(() => {\r\n            markAsDisposed(self);\r\n            fn();\r\n        })\r\n    });\r\n    return self;\r\n}\r\n/**\r\n * Manages a collection of disposable values.\r\n *\r\n * This is the preferred way to manage multiple disposables. A `DisposableStore` is safer to work with than an\r\n * `IDisposable[]` as it considers edge cases, such as registering the same value multiple times or adding an item to a\r\n * store that has already been disposed of.\r\n */\r\nclass DisposableStore {\r\n    constructor() {\r\n        this._toDispose = new Set();\r\n        this._isDisposed = false;\r\n        trackDisposable(this);\r\n    }\r\n    /**\r\n     * Dispose of all registered disposables and mark this object as disposed.\r\n     *\r\n     * Any future disposables added to this object will be disposed of on `add`.\r\n     */\r\n    dispose() {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        markAsDisposed(this);\r\n        this._isDisposed = true;\r\n        this.clear();\r\n    }\r\n    /**\r\n     * @return `true` if this object has been disposed of.\r\n     */\r\n    get isDisposed() {\r\n        return this._isDisposed;\r\n    }\r\n    /**\r\n     * Dispose of all registered disposables but do not mark this object as disposed.\r\n     */\r\n    clear() {\r\n        if (this._toDispose.size === 0) {\r\n            return;\r\n        }\r\n        try {\r\n            dispose(this._toDispose);\r\n        }\r\n        finally {\r\n            this._toDispose.clear();\r\n        }\r\n    }\r\n    /**\r\n     * Add a new {@link IDisposable disposable} to the collection.\r\n     */\r\n    add(o) {\r\n        if (!o) {\r\n            return o;\r\n        }\r\n        if (o === this) {\r\n            throw new Error('Cannot register a disposable on itself!');\r\n        }\r\n        setParentOfDisposable(o, this);\r\n        if (this._isDisposed) {\r\n            if (!DisposableStore.DISABLE_DISPOSED_WARNING) {\r\n                console.warn(new Error('Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!').stack);\r\n            }\r\n        }\r\n        else {\r\n            this._toDispose.add(o);\r\n        }\r\n        return o;\r\n    }\r\n    /**\r\n     * Deletes the value from the store, but does not dispose it.\r\n     */\r\n    deleteAndLeak(o) {\r\n        if (!o) {\r\n            return;\r\n        }\r\n        if (this._toDispose.has(o)) {\r\n            this._toDispose.delete(o);\r\n            setParentOfDisposable(o, null);\r\n        }\r\n    }\r\n}\r\nDisposableStore.DISABLE_DISPOSED_WARNING = false;\r\n/**\r\n * Abstract base class for a {@link IDisposable disposable} object.\r\n *\r\n * Subclasses can {@linkcode _register} disposables that will be automatically cleaned up when this object is disposed of.\r\n */\r\nclass Disposable {\r\n    constructor() {\r\n        this._store = new DisposableStore();\r\n        trackDisposable(this);\r\n        setParentOfDisposable(this._store, this);\r\n    }\r\n    dispose() {\r\n        markAsDisposed(this);\r\n        this._store.dispose();\r\n    }\r\n    /**\r\n     * Adds `o` to the collection of disposables managed by this object.\r\n     */\r\n    _register(o) {\r\n        if (o === this) {\r\n            throw new Error('Cannot register a disposable on itself!');\r\n        }\r\n        return this._store.add(o);\r\n    }\r\n}\r\n/**\r\n * A disposable that does nothing when it is disposed of.\r\n *\r\n * TODO: This should not be a static property.\r\n */\r\nDisposable.None = Object.freeze({ dispose() { } });\r\n/**\r\n * Manages the lifecycle of a disposable value that may be changed.\r\n *\r\n * This ensures that when the disposable value is changed, the previously held disposable is disposed of. You can\r\n * also register a `MutableDisposable` on a `Disposable` to ensure it is automatically cleaned up.\r\n */\r\nclass MutableDisposable {\r\n    constructor() {\r\n        this._isDisposed = false;\r\n        trackDisposable(this);\r\n    }\r\n    get value() {\r\n        return this._isDisposed ? undefined : this._value;\r\n    }\r\n    set value(value) {\r\n        var _a;\r\n        if (this._isDisposed || value === this._value) {\r\n            return;\r\n        }\r\n        (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        if (value) {\r\n            setParentOfDisposable(value, this);\r\n        }\r\n        this._value = value;\r\n    }\r\n    /**\r\n     * Resets the stored value and disposed of the previously stored value.\r\n     */\r\n    clear() {\r\n        this.value = undefined;\r\n    }\r\n    dispose() {\r\n        var _a;\r\n        this._isDisposed = true;\r\n        markAsDisposed(this);\r\n        (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        this._value = undefined;\r\n    }\r\n}\r\nclass RefCountedDisposable {\r\n    constructor(_disposable) {\r\n        this._disposable = _disposable;\r\n        this._counter = 1;\r\n    }\r\n    acquire() {\r\n        this._counter++;\r\n        return this;\r\n    }\r\n    release() {\r\n        if (--this._counter === 0) {\r\n            this._disposable.dispose();\r\n        }\r\n        return this;\r\n    }\r\n}\r\nclass ImmortalReference {\r\n    constructor(object) {\r\n        this.object = object;\r\n    }\r\n    dispose() { }\r\n}\r\n/**\r\n * A map the manages the lifecycle of the values that it stores.\r\n */\r\nclass DisposableMap {\r\n    constructor() {\r\n        this._store = new Map();\r\n        this._isDisposed = false;\r\n        trackDisposable(this);\r\n    }\r\n    /**\r\n     * Disposes of all stored values and mark this object as disposed.\r\n     *\r\n     * Trying to use this object after it has been disposed of is an error.\r\n     */\r\n    dispose() {\r\n        markAsDisposed(this);\r\n        this._isDisposed = true;\r\n        this.clearAndDisposeAll();\r\n    }\r\n    /**\r\n     * Disposes of all stored values and clear the map, but DO NOT mark this object as disposed.\r\n     */\r\n    clearAndDisposeAll() {\r\n        if (!this._store.size) {\r\n            return;\r\n        }\r\n        try {\r\n            dispose(this._store.values());\r\n        }\r\n        finally {\r\n            this._store.clear();\r\n        }\r\n    }\r\n    get(key) {\r\n        return this._store.get(key);\r\n    }\r\n    set(key, value, skipDisposeOnOverwrite = false) {\r\n        var _a;\r\n        if (this._isDisposed) {\r\n            console.warn(new Error('Trying to add a disposable to a DisposableMap that has already been disposed of. The added object will be leaked!').stack);\r\n        }\r\n        if (!skipDisposeOnOverwrite) {\r\n            (_a = this._store.get(key)) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        }\r\n        this._store.set(key, value);\r\n    }\r\n    /**\r\n     * Delete the value stored for `key` from this map and also dispose of it.\r\n     */\r\n    deleteAndDispose(key) {\r\n        var _a;\r\n        (_a = this._store.get(key)) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        this._store.delete(key);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return this._store[Symbol.iterator]();\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/linkedList.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/linkedList.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinkedList: () => (/* binding */ LinkedList)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nclass Node {\r\n    constructor(element) {\r\n        this.element = element;\r\n        this.next = Node.Undefined;\r\n        this.prev = Node.Undefined;\r\n    }\r\n}\r\nNode.Undefined = new Node(undefined);\r\nclass LinkedList {\r\n    constructor() {\r\n        this._first = Node.Undefined;\r\n        this._last = Node.Undefined;\r\n        this._size = 0;\r\n    }\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    isEmpty() {\r\n        return this._first === Node.Undefined;\r\n    }\r\n    clear() {\r\n        let node = this._first;\r\n        while (node !== Node.Undefined) {\r\n            const next = node.next;\r\n            node.prev = Node.Undefined;\r\n            node.next = Node.Undefined;\r\n            node = next;\r\n        }\r\n        this._first = Node.Undefined;\r\n        this._last = Node.Undefined;\r\n        this._size = 0;\r\n    }\r\n    unshift(element) {\r\n        return this._insert(element, false);\r\n    }\r\n    push(element) {\r\n        return this._insert(element, true);\r\n    }\r\n    _insert(element, atTheEnd) {\r\n        const newNode = new Node(element);\r\n        if (this._first === Node.Undefined) {\r\n            this._first = newNode;\r\n            this._last = newNode;\r\n        }\r\n        else if (atTheEnd) {\r\n            // push\r\n            const oldLast = this._last;\r\n            this._last = newNode;\r\n            newNode.prev = oldLast;\r\n            oldLast.next = newNode;\r\n        }\r\n        else {\r\n            // unshift\r\n            const oldFirst = this._first;\r\n            this._first = newNode;\r\n            newNode.next = oldFirst;\r\n            oldFirst.prev = newNode;\r\n        }\r\n        this._size += 1;\r\n        let didRemove = false;\r\n        return () => {\r\n            if (!didRemove) {\r\n                didRemove = true;\r\n                this._remove(newNode);\r\n            }\r\n        };\r\n    }\r\n    shift() {\r\n        if (this._first === Node.Undefined) {\r\n            return undefined;\r\n        }\r\n        else {\r\n            const res = this._first.element;\r\n            this._remove(this._first);\r\n            return res;\r\n        }\r\n    }\r\n    pop() {\r\n        if (this._last === Node.Undefined) {\r\n            return undefined;\r\n        }\r\n        else {\r\n            const res = this._last.element;\r\n            this._remove(this._last);\r\n            return res;\r\n        }\r\n    }\r\n    _remove(node) {\r\n        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\r\n            // middle\r\n            const anchor = node.prev;\r\n            anchor.next = node.next;\r\n            node.next.prev = anchor;\r\n        }\r\n        else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\r\n            // only node\r\n            this._first = Node.Undefined;\r\n            this._last = Node.Undefined;\r\n        }\r\n        else if (node.next === Node.Undefined) {\r\n            // last\r\n            this._last = this._last.prev;\r\n            this._last.next = Node.Undefined;\r\n        }\r\n        else if (node.prev === Node.Undefined) {\r\n            // first\r\n            this._first = this._first.next;\r\n            this._first.prev = Node.Undefined;\r\n        }\r\n        // done\r\n        this._size -= 1;\r\n    }\r\n    *[Symbol.iterator]() {\r\n        let node = this._first;\r\n        while (node !== Node.Undefined) {\r\n            yield node.element;\r\n            node = node.next;\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vbGlua2VkTGlzdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vbGlua2VkTGlzdC5qcz9kYjg4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5jbGFzcyBOb2RlIHtcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMubmV4dCA9IE5vZGUuVW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMucHJldiA9IE5vZGUuVW5kZWZpbmVkO1xyXG4gICAgfVxyXG59XHJcbk5vZGUuVW5kZWZpbmVkID0gbmV3IE5vZGUodW5kZWZpbmVkKTtcclxuZXhwb3J0IGNsYXNzIExpbmtlZExpc3Qge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fZmlyc3QgPSBOb2RlLlVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9sYXN0ID0gTm9kZS5VbmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XHJcbiAgICB9XHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcclxuICAgIH1cclxuICAgIGlzRW1wdHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcnN0ID09PSBOb2RlLlVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5fZmlyc3Q7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUgIT09IE5vZGUuVW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBub2RlLm5leHQ7XHJcbiAgICAgICAgICAgIG5vZGUucHJldiA9IE5vZGUuVW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBub2RlLm5leHQgPSBOb2RlLlVuZGVmaW5lZDtcclxuICAgICAgICAgICAgbm9kZSA9IG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2ZpcnN0ID0gTm9kZS5VbmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fbGFzdCA9IE5vZGUuVW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xyXG4gICAgfVxyXG4gICAgdW5zaGlmdChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc2VydChlbGVtZW50LCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBwdXNoKGVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zZXJ0KGVsZW1lbnQsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgX2luc2VydChlbGVtZW50LCBhdFRoZUVuZCkge1xyXG4gICAgICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgTm9kZShlbGVtZW50KTtcclxuICAgICAgICBpZiAodGhpcy5fZmlyc3QgPT09IE5vZGUuVW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gbmV3Tm9kZTtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdCA9IG5ld05vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGF0VGhlRW5kKSB7XHJcbiAgICAgICAgICAgIC8vIHB1c2hcclxuICAgICAgICAgICAgY29uc3Qgb2xkTGFzdCA9IHRoaXMuX2xhc3Q7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3QgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICBuZXdOb2RlLnByZXYgPSBvbGRMYXN0O1xyXG4gICAgICAgICAgICBvbGRMYXN0Lm5leHQgPSBuZXdOb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdW5zaGlmdFxyXG4gICAgICAgICAgICBjb25zdCBvbGRGaXJzdCA9IHRoaXMuX2ZpcnN0O1xyXG4gICAgICAgICAgICB0aGlzLl9maXJzdCA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgIG5ld05vZGUubmV4dCA9IG9sZEZpcnN0O1xyXG4gICAgICAgICAgICBvbGRGaXJzdC5wcmV2ID0gbmV3Tm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc2l6ZSArPSAxO1xyXG4gICAgICAgIGxldCBkaWRSZW1vdmUgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWRpZFJlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgZGlkUmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZShuZXdOb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBzaGlmdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZmlyc3QgPT09IE5vZGUuVW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByZXMgPSB0aGlzLl9maXJzdC5lbGVtZW50O1xyXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmUodGhpcy5fZmlyc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBvcCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fbGFzdCA9PT0gTm9kZS5VbmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX2xhc3QuZWxlbWVudDtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlKHRoaXMuX2xhc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9yZW1vdmUobm9kZSkge1xyXG4gICAgICAgIGlmIChub2RlLnByZXYgIT09IE5vZGUuVW5kZWZpbmVkICYmIG5vZGUubmV4dCAhPT0gTm9kZS5VbmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gbWlkZGxlXHJcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IG5vZGUucHJldjtcclxuICAgICAgICAgICAgYW5jaG9yLm5leHQgPSBub2RlLm5leHQ7XHJcbiAgICAgICAgICAgIG5vZGUubmV4dC5wcmV2ID0gYW5jaG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChub2RlLnByZXYgPT09IE5vZGUuVW5kZWZpbmVkICYmIG5vZGUubmV4dCA9PT0gTm9kZS5VbmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gb25seSBub2RlXHJcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gTm9kZS5VbmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3QgPSBOb2RlLlVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobm9kZS5uZXh0ID09PSBOb2RlLlVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBsYXN0XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3QgPSB0aGlzLl9sYXN0LnByZXY7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3QubmV4dCA9IE5vZGUuVW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChub2RlLnByZXYgPT09IE5vZGUuVW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIGZpcnN0XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gdGhpcy5fZmlyc3QubmV4dDtcclxuICAgICAgICAgICAgdGhpcy5fZmlyc3QucHJldiA9IE5vZGUuVW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBkb25lXHJcbiAgICAgICAgdGhpcy5fc2l6ZSAtPSAxO1xyXG4gICAgfVxyXG4gICAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5fZmlyc3Q7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUgIT09IE5vZGUuVW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHlpZWxkIG5vZGUuZWxlbWVudDtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUubmV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/map.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/map.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BidirectionalMap: () => (/* binding */ BidirectionalMap),\n/* harmony export */   LRUCache: () => (/* binding */ LRUCache),\n/* harmony export */   LinkedMap: () => (/* binding */ LinkedMap),\n/* harmony export */   ResourceMap: () => (/* binding */ ResourceMap),\n/* harmony export */   SetMap: () => (/* binding */ SetMap)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a, _b;\r\nclass ResourceMapEntry {\r\n    constructor(uri, value) {\r\n        this.uri = uri;\r\n        this.value = value;\r\n    }\r\n}\r\nfunction isEntries(arg) {\r\n    return Array.isArray(arg);\r\n}\r\nclass ResourceMap {\r\n    constructor(arg, toKey) {\r\n        this[_a] = 'ResourceMap';\r\n        if (arg instanceof ResourceMap) {\r\n            this.map = new Map(arg.map);\r\n            this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\r\n        }\r\n        else if (isEntries(arg)) {\r\n            this.map = new Map();\r\n            this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\r\n            for (const [resource, value] of arg) {\r\n                this.set(resource, value);\r\n            }\r\n        }\r\n        else {\r\n            this.map = new Map();\r\n            this.toKey = arg !== null && arg !== void 0 ? arg : ResourceMap.defaultToKey;\r\n        }\r\n    }\r\n    set(resource, value) {\r\n        this.map.set(this.toKey(resource), new ResourceMapEntry(resource, value));\r\n        return this;\r\n    }\r\n    get(resource) {\r\n        var _c;\r\n        return (_c = this.map.get(this.toKey(resource))) === null || _c === void 0 ? void 0 : _c.value;\r\n    }\r\n    has(resource) {\r\n        return this.map.has(this.toKey(resource));\r\n    }\r\n    get size() {\r\n        return this.map.size;\r\n    }\r\n    clear() {\r\n        this.map.clear();\r\n    }\r\n    delete(resource) {\r\n        return this.map.delete(this.toKey(resource));\r\n    }\r\n    forEach(clb, thisArg) {\r\n        if (typeof thisArg !== 'undefined') {\r\n            clb = clb.bind(thisArg);\r\n        }\r\n        for (const [_, entry] of this.map) {\r\n            clb(entry.value, entry.uri, this);\r\n        }\r\n    }\r\n    *values() {\r\n        for (const entry of this.map.values()) {\r\n            yield entry.value;\r\n        }\r\n    }\r\n    *keys() {\r\n        for (const entry of this.map.values()) {\r\n            yield entry.uri;\r\n        }\r\n    }\r\n    *entries() {\r\n        for (const entry of this.map.values()) {\r\n            yield [entry.uri, entry.value];\r\n        }\r\n    }\r\n    *[(_a = Symbol.toStringTag, Symbol.iterator)]() {\r\n        for (const [, entry] of this.map) {\r\n            yield [entry.uri, entry.value];\r\n        }\r\n    }\r\n}\r\nResourceMap.defaultToKey = (resource) => resource.toString();\r\nclass LinkedMap {\r\n    constructor() {\r\n        this[_b] = 'LinkedMap';\r\n        this._map = new Map();\r\n        this._head = undefined;\r\n        this._tail = undefined;\r\n        this._size = 0;\r\n        this._state = 0;\r\n    }\r\n    clear() {\r\n        this._map.clear();\r\n        this._head = undefined;\r\n        this._tail = undefined;\r\n        this._size = 0;\r\n        this._state++;\r\n    }\r\n    isEmpty() {\r\n        return !this._head && !this._tail;\r\n    }\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    get first() {\r\n        var _c;\r\n        return (_c = this._head) === null || _c === void 0 ? void 0 : _c.value;\r\n    }\r\n    get last() {\r\n        var _c;\r\n        return (_c = this._tail) === null || _c === void 0 ? void 0 : _c.value;\r\n    }\r\n    has(key) {\r\n        return this._map.has(key);\r\n    }\r\n    get(key, touch = 0 /* Touch.None */) {\r\n        const item = this._map.get(key);\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        if (touch !== 0 /* Touch.None */) {\r\n            this.touch(item, touch);\r\n        }\r\n        return item.value;\r\n    }\r\n    set(key, value, touch = 0 /* Touch.None */) {\r\n        let item = this._map.get(key);\r\n        if (item) {\r\n            item.value = value;\r\n            if (touch !== 0 /* Touch.None */) {\r\n                this.touch(item, touch);\r\n            }\r\n        }\r\n        else {\r\n            item = { key, value, next: undefined, previous: undefined };\r\n            switch (touch) {\r\n                case 0 /* Touch.None */:\r\n                    this.addItemLast(item);\r\n                    break;\r\n                case 1 /* Touch.AsOld */:\r\n                    this.addItemFirst(item);\r\n                    break;\r\n                case 2 /* Touch.AsNew */:\r\n                    this.addItemLast(item);\r\n                    break;\r\n                default:\r\n                    this.addItemLast(item);\r\n                    break;\r\n            }\r\n            this._map.set(key, item);\r\n            this._size++;\r\n        }\r\n        return this;\r\n    }\r\n    delete(key) {\r\n        return !!this.remove(key);\r\n    }\r\n    remove(key) {\r\n        const item = this._map.get(key);\r\n        if (!item) {\r\n            return undefined;\r\n        }\r\n        this._map.delete(key);\r\n        this.removeItem(item);\r\n        this._size--;\r\n        return item.value;\r\n    }\r\n    shift() {\r\n        if (!this._head && !this._tail) {\r\n            return undefined;\r\n        }\r\n        if (!this._head || !this._tail) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        const item = this._head;\r\n        this._map.delete(item.key);\r\n        this.removeItem(item);\r\n        this._size--;\r\n        return item.value;\r\n    }\r\n    forEach(callbackfn, thisArg) {\r\n        const state = this._state;\r\n        let current = this._head;\r\n        while (current) {\r\n            if (thisArg) {\r\n                callbackfn.bind(thisArg)(current.value, current.key, this);\r\n            }\r\n            else {\r\n                callbackfn(current.value, current.key, this);\r\n            }\r\n            if (this._state !== state) {\r\n                throw new Error(`LinkedMap got modified during iteration.`);\r\n            }\r\n            current = current.next;\r\n        }\r\n    }\r\n    keys() {\r\n        const map = this;\r\n        const state = this._state;\r\n        let current = this._head;\r\n        const iterator = {\r\n            [Symbol.iterator]() {\r\n                return iterator;\r\n            },\r\n            next() {\r\n                if (map._state !== state) {\r\n                    throw new Error(`LinkedMap got modified during iteration.`);\r\n                }\r\n                if (current) {\r\n                    const result = { value: current.key, done: false };\r\n                    current = current.next;\r\n                    return result;\r\n                }\r\n                else {\r\n                    return { value: undefined, done: true };\r\n                }\r\n            }\r\n        };\r\n        return iterator;\r\n    }\r\n    values() {\r\n        const map = this;\r\n        const state = this._state;\r\n        let current = this._head;\r\n        const iterator = {\r\n            [Symbol.iterator]() {\r\n                return iterator;\r\n            },\r\n            next() {\r\n                if (map._state !== state) {\r\n                    throw new Error(`LinkedMap got modified during iteration.`);\r\n                }\r\n                if (current) {\r\n                    const result = { value: current.value, done: false };\r\n                    current = current.next;\r\n                    return result;\r\n                }\r\n                else {\r\n                    return { value: undefined, done: true };\r\n                }\r\n            }\r\n        };\r\n        return iterator;\r\n    }\r\n    entries() {\r\n        const map = this;\r\n        const state = this._state;\r\n        let current = this._head;\r\n        const iterator = {\r\n            [Symbol.iterator]() {\r\n                return iterator;\r\n            },\r\n            next() {\r\n                if (map._state !== state) {\r\n                    throw new Error(`LinkedMap got modified during iteration.`);\r\n                }\r\n                if (current) {\r\n                    const result = { value: [current.key, current.value], done: false };\r\n                    current = current.next;\r\n                    return result;\r\n                }\r\n                else {\r\n                    return { value: undefined, done: true };\r\n                }\r\n            }\r\n        };\r\n        return iterator;\r\n    }\r\n    [(_b = Symbol.toStringTag, Symbol.iterator)]() {\r\n        return this.entries();\r\n    }\r\n    trimOld(newSize) {\r\n        if (newSize >= this.size) {\r\n            return;\r\n        }\r\n        if (newSize === 0) {\r\n            this.clear();\r\n            return;\r\n        }\r\n        let current = this._head;\r\n        let currentSize = this.size;\r\n        while (current && currentSize > newSize) {\r\n            this._map.delete(current.key);\r\n            current = current.next;\r\n            currentSize--;\r\n        }\r\n        this._head = current;\r\n        this._size = currentSize;\r\n        if (current) {\r\n            current.previous = undefined;\r\n        }\r\n        this._state++;\r\n    }\r\n    trimNew(newSize) {\r\n        if (newSize >= this.size) {\r\n            return;\r\n        }\r\n        if (newSize === 0) {\r\n            this.clear();\r\n            return;\r\n        }\r\n        let current = this._tail;\r\n        let currentSize = this.size;\r\n        while (current && currentSize > newSize) {\r\n            this._map.delete(current.key);\r\n            current = current.previous;\r\n            currentSize--;\r\n        }\r\n        this._tail = current;\r\n        this._size = currentSize;\r\n        if (current) {\r\n            current.next = undefined;\r\n        }\r\n        this._state++;\r\n    }\r\n    addItemFirst(item) {\r\n        // First time Insert\r\n        if (!this._head && !this._tail) {\r\n            this._tail = item;\r\n        }\r\n        else if (!this._head) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        else {\r\n            item.next = this._head;\r\n            this._head.previous = item;\r\n        }\r\n        this._head = item;\r\n        this._state++;\r\n    }\r\n    addItemLast(item) {\r\n        // First time Insert\r\n        if (!this._head && !this._tail) {\r\n            this._head = item;\r\n        }\r\n        else if (!this._tail) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        else {\r\n            item.previous = this._tail;\r\n            this._tail.next = item;\r\n        }\r\n        this._tail = item;\r\n        this._state++;\r\n    }\r\n    removeItem(item) {\r\n        if (item === this._head && item === this._tail) {\r\n            this._head = undefined;\r\n            this._tail = undefined;\r\n        }\r\n        else if (item === this._head) {\r\n            // This can only happen if size === 1 which is handled\r\n            // by the case above.\r\n            if (!item.next) {\r\n                throw new Error('Invalid list');\r\n            }\r\n            item.next.previous = undefined;\r\n            this._head = item.next;\r\n        }\r\n        else if (item === this._tail) {\r\n            // This can only happen if size === 1 which is handled\r\n            // by the case above.\r\n            if (!item.previous) {\r\n                throw new Error('Invalid list');\r\n            }\r\n            item.previous.next = undefined;\r\n            this._tail = item.previous;\r\n        }\r\n        else {\r\n            const next = item.next;\r\n            const previous = item.previous;\r\n            if (!next || !previous) {\r\n                throw new Error('Invalid list');\r\n            }\r\n            next.previous = previous;\r\n            previous.next = next;\r\n        }\r\n        item.next = undefined;\r\n        item.previous = undefined;\r\n        this._state++;\r\n    }\r\n    touch(item, touch) {\r\n        if (!this._head || !this._tail) {\r\n            throw new Error('Invalid list');\r\n        }\r\n        if ((touch !== 1 /* Touch.AsOld */ && touch !== 2 /* Touch.AsNew */)) {\r\n            return;\r\n        }\r\n        if (touch === 1 /* Touch.AsOld */) {\r\n            if (item === this._head) {\r\n                return;\r\n            }\r\n            const next = item.next;\r\n            const previous = item.previous;\r\n            // Unlink the item\r\n            if (item === this._tail) {\r\n                // previous must be defined since item was not head but is tail\r\n                // So there are more than on item in the map\r\n                previous.next = undefined;\r\n                this._tail = previous;\r\n            }\r\n            else {\r\n                // Both next and previous are not undefined since item was neither head nor tail.\r\n                next.previous = previous;\r\n                previous.next = next;\r\n            }\r\n            // Insert the node at head\r\n            item.previous = undefined;\r\n            item.next = this._head;\r\n            this._head.previous = item;\r\n            this._head = item;\r\n            this._state++;\r\n        }\r\n        else if (touch === 2 /* Touch.AsNew */) {\r\n            if (item === this._tail) {\r\n                return;\r\n            }\r\n            const next = item.next;\r\n            const previous = item.previous;\r\n            // Unlink the item.\r\n            if (item === this._head) {\r\n                // next must be defined since item was not tail but is head\r\n                // So there are more than on item in the map\r\n                next.previous = undefined;\r\n                this._head = next;\r\n            }\r\n            else {\r\n                // Both next and previous are not undefined since item was neither head nor tail.\r\n                next.previous = previous;\r\n                previous.next = next;\r\n            }\r\n            item.next = undefined;\r\n            item.previous = this._tail;\r\n            this._tail.next = item;\r\n            this._tail = item;\r\n            this._state++;\r\n        }\r\n    }\r\n    toJSON() {\r\n        const data = [];\r\n        this.forEach((value, key) => {\r\n            data.push([key, value]);\r\n        });\r\n        return data;\r\n    }\r\n    fromJSON(data) {\r\n        this.clear();\r\n        for (const [key, value] of data) {\r\n            this.set(key, value);\r\n        }\r\n    }\r\n}\r\nclass Cache extends LinkedMap {\r\n    constructor(limit, ratio = 1) {\r\n        super();\r\n        this._limit = limit;\r\n        this._ratio = Math.min(Math.max(0, ratio), 1);\r\n    }\r\n    get limit() {\r\n        return this._limit;\r\n    }\r\n    set limit(limit) {\r\n        this._limit = limit;\r\n        this.checkTrim();\r\n    }\r\n    get(key, touch = 2 /* Touch.AsNew */) {\r\n        return super.get(key, touch);\r\n    }\r\n    peek(key) {\r\n        return super.get(key, 0 /* Touch.None */);\r\n    }\r\n    set(key, value) {\r\n        super.set(key, value, 2 /* Touch.AsNew */);\r\n        return this;\r\n    }\r\n    checkTrim() {\r\n        if (this.size > this._limit) {\r\n            this.trim(Math.round(this._limit * this._ratio));\r\n        }\r\n    }\r\n}\r\nclass LRUCache extends Cache {\r\n    constructor(limit, ratio = 1) {\r\n        super(limit, ratio);\r\n    }\r\n    trim(newSize) {\r\n        this.trimOld(newSize);\r\n    }\r\n    set(key, value) {\r\n        super.set(key, value);\r\n        this.checkTrim();\r\n        return this;\r\n    }\r\n}\r\n/**\r\n * A map that allows access both by keys and values.\r\n * **NOTE**: values need to be unique.\r\n */\r\nclass BidirectionalMap {\r\n    constructor(entries) {\r\n        this._m1 = new Map();\r\n        this._m2 = new Map();\r\n        if (entries) {\r\n            for (const [key, value] of entries) {\r\n                this.set(key, value);\r\n            }\r\n        }\r\n    }\r\n    clear() {\r\n        this._m1.clear();\r\n        this._m2.clear();\r\n    }\r\n    set(key, value) {\r\n        this._m1.set(key, value);\r\n        this._m2.set(value, key);\r\n    }\r\n    get(key) {\r\n        return this._m1.get(key);\r\n    }\r\n    getKey(value) {\r\n        return this._m2.get(value);\r\n    }\r\n    delete(key) {\r\n        const value = this._m1.get(key);\r\n        if (value === undefined) {\r\n            return false;\r\n        }\r\n        this._m1.delete(key);\r\n        this._m2.delete(value);\r\n        return true;\r\n    }\r\n    keys() {\r\n        return this._m1.keys();\r\n    }\r\n    values() {\r\n        return this._m1.values();\r\n    }\r\n}\r\nclass SetMap {\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n    add(key, value) {\r\n        let values = this.map.get(key);\r\n        if (!values) {\r\n            values = new Set();\r\n            this.map.set(key, values);\r\n        }\r\n        values.add(value);\r\n    }\r\n    delete(key, value) {\r\n        const values = this.map.get(key);\r\n        if (!values) {\r\n            return;\r\n        }\r\n        values.delete(value);\r\n        if (values.size === 0) {\r\n            this.map.delete(key);\r\n        }\r\n    }\r\n    forEach(key, fn) {\r\n        const values = this.map.get(key);\r\n        if (!values) {\r\n            return;\r\n        }\r\n        values.forEach(fn);\r\n    }\r\n    get(key) {\r\n        const values = this.map.get(key);\r\n        if (!values) {\r\n            return new Set();\r\n        }\r\n        return values;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/map.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/objects.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/objects.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloneAndChange: () => (/* binding */ cloneAndChange),\n/* harmony export */   createProxyObject: () => (/* binding */ createProxyObject),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   deepFreeze: () => (/* binding */ deepFreeze),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   getAllMethodNames: () => (/* binding */ getAllMethodNames),\n/* harmony export */   getAllPropertyNames: () => (/* binding */ getAllPropertyNames),\n/* harmony export */   mixin: () => (/* binding */ mixin)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"./node_modules/monaco-editor/esm/vs/base/common/types.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nfunction deepClone(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n        return obj;\r\n    }\r\n    if (obj instanceof RegExp) {\r\n        return obj;\r\n    }\r\n    const result = Array.isArray(obj) ? [] : {};\r\n    Object.entries(obj).forEach(([key, value]) => {\r\n        result[key] = value && typeof value === 'object' ? deepClone(value) : value;\r\n    });\r\n    return result;\r\n}\r\nfunction deepFreeze(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n        return obj;\r\n    }\r\n    const stack = [obj];\r\n    while (stack.length > 0) {\r\n        const obj = stack.shift();\r\n        Object.freeze(obj);\r\n        for (const key in obj) {\r\n            if (_hasOwnProperty.call(obj, key)) {\r\n                const prop = obj[key];\r\n                if (typeof prop === 'object' && !Object.isFrozen(prop) && !(0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isTypedArray)(prop)) {\r\n                    stack.push(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return obj;\r\n}\r\nconst _hasOwnProperty = Object.prototype.hasOwnProperty;\r\nfunction cloneAndChange(obj, changer) {\r\n    return _cloneAndChange(obj, changer, new Set());\r\n}\r\nfunction _cloneAndChange(obj, changer, seen) {\r\n    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isUndefinedOrNull)(obj)) {\r\n        return obj;\r\n    }\r\n    const changed = changer(obj);\r\n    if (typeof changed !== 'undefined') {\r\n        return changed;\r\n    }\r\n    if (Array.isArray(obj)) {\r\n        const r1 = [];\r\n        for (const e of obj) {\r\n            r1.push(_cloneAndChange(e, changer, seen));\r\n        }\r\n        return r1;\r\n    }\r\n    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(obj)) {\r\n        if (seen.has(obj)) {\r\n            throw new Error('Cannot clone recursive data-structure');\r\n        }\r\n        seen.add(obj);\r\n        const r2 = {};\r\n        for (const i2 in obj) {\r\n            if (_hasOwnProperty.call(obj, i2)) {\r\n                r2[i2] = _cloneAndChange(obj[i2], changer, seen);\r\n            }\r\n        }\r\n        seen.delete(obj);\r\n        return r2;\r\n    }\r\n    return obj;\r\n}\r\n/**\r\n * Copies all properties of source into destination. The optional parameter \"overwrite\" allows to control\r\n * if existing properties on the destination should be overwritten or not. Defaults to true (overwrite).\r\n */\r\nfunction mixin(destination, source, overwrite = true) {\r\n    if (!(0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(destination)) {\r\n        return source;\r\n    }\r\n    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source)) {\r\n        Object.keys(source).forEach(key => {\r\n            if (key in destination) {\r\n                if (overwrite) {\r\n                    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(destination[key]) && (0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source[key])) {\r\n                        mixin(destination[key], source[key], overwrite);\r\n                    }\r\n                    else {\r\n                        destination[key] = source[key];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                destination[key] = source[key];\r\n            }\r\n        });\r\n    }\r\n    return destination;\r\n}\r\nfunction equals(one, other) {\r\n    if (one === other) {\r\n        return true;\r\n    }\r\n    if (one === null || one === undefined || other === null || other === undefined) {\r\n        return false;\r\n    }\r\n    if (typeof one !== typeof other) {\r\n        return false;\r\n    }\r\n    if (typeof one !== 'object') {\r\n        return false;\r\n    }\r\n    if ((Array.isArray(one)) !== (Array.isArray(other))) {\r\n        return false;\r\n    }\r\n    let i;\r\n    let key;\r\n    if (Array.isArray(one)) {\r\n        if (one.length !== other.length) {\r\n            return false;\r\n        }\r\n        for (i = 0; i < one.length; i++) {\r\n            if (!equals(one[i], other[i])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const oneKeys = [];\r\n        for (key in one) {\r\n            oneKeys.push(key);\r\n        }\r\n        oneKeys.sort();\r\n        const otherKeys = [];\r\n        for (key in other) {\r\n            otherKeys.push(key);\r\n        }\r\n        otherKeys.sort();\r\n        if (!equals(oneKeys, otherKeys)) {\r\n            return false;\r\n        }\r\n        for (i = 0; i < oneKeys.length; i++) {\r\n            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction getAllPropertyNames(obj) {\r\n    let res = [];\r\n    while (Object.prototype !== obj) {\r\n        res = res.concat(Object.getOwnPropertyNames(obj));\r\n        obj = Object.getPrototypeOf(obj);\r\n    }\r\n    return res;\r\n}\r\nfunction getAllMethodNames(obj) {\r\n    const methods = [];\r\n    for (const prop of getAllPropertyNames(obj)) {\r\n        if (typeof obj[prop] === 'function') {\r\n            methods.push(prop);\r\n        }\r\n    }\r\n    return methods;\r\n}\r\nfunction createProxyObject(methodNames, invoke) {\r\n    const createProxyMethod = (method) => {\r\n        return function () {\r\n            const args = Array.prototype.slice.call(arguments, 0);\r\n            return invoke(method, args);\r\n        };\r\n    };\r\n    const result = {};\r\n    for (const methodName of methodNames) {\r\n        result[methodName] = createProxyMethod(methodName);\r\n    }\r\n    return result;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/objects.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/path.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/path.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   basename: () => (/* binding */ basename),\n/* harmony export */   dirname: () => (/* binding */ dirname),\n/* harmony export */   extname: () => (/* binding */ extname),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   posix: () => (/* binding */ posix),\n/* harmony export */   relative: () => (/* binding */ relative),\n/* harmony export */   resolve: () => (/* binding */ resolve),\n/* harmony export */   sep: () => (/* binding */ sep),\n/* harmony export */   win32: () => (/* binding */ win32)\n/* harmony export */ });\n/* harmony import */ var _process_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process.js */ \"./node_modules/monaco-editor/esm/vs/base/common/process.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\r\n// Copied from: https://github.com/nodejs/node/blob/v16.14.2/lib/path.js\r\n/**\r\n * Copyright Joyent, Inc. and other Node contributors.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to permit\r\n * persons to whom the Software is furnished to do so, subject to the\r\n * following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nconst CHAR_UPPERCASE_A = 65; /* A */\r\nconst CHAR_LOWERCASE_A = 97; /* a */\r\nconst CHAR_UPPERCASE_Z = 90; /* Z */\r\nconst CHAR_LOWERCASE_Z = 122; /* z */\r\nconst CHAR_DOT = 46; /* . */\r\nconst CHAR_FORWARD_SLASH = 47; /* / */\r\nconst CHAR_BACKWARD_SLASH = 92; /* \\ */\r\nconst CHAR_COLON = 58; /* : */\r\nconst CHAR_QUESTION_MARK = 63; /* ? */\r\nclass ErrorInvalidArgType extends Error {\r\n    constructor(name, expected, actual) {\r\n        // determiner: 'must be' or 'must not be'\r\n        let determiner;\r\n        if (typeof expected === 'string' && expected.indexOf('not ') === 0) {\r\n            determiner = 'must not be';\r\n            expected = expected.replace(/^not /, '');\r\n        }\r\n        else {\r\n            determiner = 'must be';\r\n        }\r\n        const type = name.indexOf('.') !== -1 ? 'property' : 'argument';\r\n        let msg = `The \"${name}\" ${type} ${determiner} of type ${expected}`;\r\n        msg += `. Received type ${typeof actual}`;\r\n        super(msg);\r\n        this.code = 'ERR_INVALID_ARG_TYPE';\r\n    }\r\n}\r\nfunction validateObject(pathObject, name) {\r\n    if (pathObject === null || typeof pathObject !== 'object') {\r\n        throw new ErrorInvalidArgType(name, 'Object', pathObject);\r\n    }\r\n}\r\nfunction validateString(value, name) {\r\n    if (typeof value !== 'string') {\r\n        throw new ErrorInvalidArgType(name, 'string', value);\r\n    }\r\n}\r\nconst platformIsWin32 = (_process_js__WEBPACK_IMPORTED_MODULE_0__.platform === 'win32');\r\nfunction isPathSeparator(code) {\r\n    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\r\n}\r\nfunction isPosixPathSeparator(code) {\r\n    return code === CHAR_FORWARD_SLASH;\r\n}\r\nfunction isWindowsDeviceRoot(code) {\r\n    return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\r\n        (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\r\n}\r\n// Resolves . and .. elements in a path with directory names\r\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\r\n    let res = '';\r\n    let lastSegmentLength = 0;\r\n    let lastSlash = -1;\r\n    let dots = 0;\r\n    let code = 0;\r\n    for (let i = 0; i <= path.length; ++i) {\r\n        if (i < path.length) {\r\n            code = path.charCodeAt(i);\r\n        }\r\n        else if (isPathSeparator(code)) {\r\n            break;\r\n        }\r\n        else {\r\n            code = CHAR_FORWARD_SLASH;\r\n        }\r\n        if (isPathSeparator(code)) {\r\n            if (lastSlash === i - 1 || dots === 1) {\r\n                // NOOP\r\n            }\r\n            else if (dots === 2) {\r\n                if (res.length < 2 || lastSegmentLength !== 2 ||\r\n                    res.charCodeAt(res.length - 1) !== CHAR_DOT ||\r\n                    res.charCodeAt(res.length - 2) !== CHAR_DOT) {\r\n                    if (res.length > 2) {\r\n                        const lastSlashIndex = res.lastIndexOf(separator);\r\n                        if (lastSlashIndex === -1) {\r\n                            res = '';\r\n                            lastSegmentLength = 0;\r\n                        }\r\n                        else {\r\n                            res = res.slice(0, lastSlashIndex);\r\n                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\r\n                        }\r\n                        lastSlash = i;\r\n                        dots = 0;\r\n                        continue;\r\n                    }\r\n                    else if (res.length !== 0) {\r\n                        res = '';\r\n                        lastSegmentLength = 0;\r\n                        lastSlash = i;\r\n                        dots = 0;\r\n                        continue;\r\n                    }\r\n                }\r\n                if (allowAboveRoot) {\r\n                    res += res.length > 0 ? `${separator}..` : '..';\r\n                    lastSegmentLength = 2;\r\n                }\r\n            }\r\n            else {\r\n                if (res.length > 0) {\r\n                    res += `${separator}${path.slice(lastSlash + 1, i)}`;\r\n                }\r\n                else {\r\n                    res = path.slice(lastSlash + 1, i);\r\n                }\r\n                lastSegmentLength = i - lastSlash - 1;\r\n            }\r\n            lastSlash = i;\r\n            dots = 0;\r\n        }\r\n        else if (code === CHAR_DOT && dots !== -1) {\r\n            ++dots;\r\n        }\r\n        else {\r\n            dots = -1;\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction _format(sep, pathObject) {\r\n    validateObject(pathObject, 'pathObject');\r\n    const dir = pathObject.dir || pathObject.root;\r\n    const base = pathObject.base ||\r\n        `${pathObject.name || ''}${pathObject.ext || ''}`;\r\n    if (!dir) {\r\n        return base;\r\n    }\r\n    return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\r\n}\r\nconst win32 = {\r\n    // path.resolve([from ...], to)\r\n    resolve(...pathSegments) {\r\n        let resolvedDevice = '';\r\n        let resolvedTail = '';\r\n        let resolvedAbsolute = false;\r\n        for (let i = pathSegments.length - 1; i >= -1; i--) {\r\n            let path;\r\n            if (i >= 0) {\r\n                path = pathSegments[i];\r\n                validateString(path, 'path');\r\n                // Skip empty entries\r\n                if (path.length === 0) {\r\n                    continue;\r\n                }\r\n            }\r\n            else if (resolvedDevice.length === 0) {\r\n                path = _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();\r\n            }\r\n            else {\r\n                // Windows has the concept of drive-specific current working\r\n                // directories. If we've resolved a drive letter but not yet an\r\n                // absolute path, get cwd for that drive, or the process cwd if\r\n                // the drive cwd is not available. We're sure the device is not\r\n                // a UNC path at this points, because UNC paths are always absolute.\r\n                path = _process_js__WEBPACK_IMPORTED_MODULE_0__.env[`=${resolvedDevice}`] || _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();\r\n                // Verify that a cwd was found and that it actually points\r\n                // to our drive. If not, default to the drive's root.\r\n                if (path === undefined ||\r\n                    (path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() &&\r\n                        path.charCodeAt(2) === CHAR_BACKWARD_SLASH)) {\r\n                    path = `${resolvedDevice}\\\\`;\r\n                }\r\n            }\r\n            const len = path.length;\r\n            let rootEnd = 0;\r\n            let device = '';\r\n            let isAbsolute = false;\r\n            const code = path.charCodeAt(0);\r\n            // Try to match a root\r\n            if (len === 1) {\r\n                if (isPathSeparator(code)) {\r\n                    // `path` contains just a path separator\r\n                    rootEnd = 1;\r\n                    isAbsolute = true;\r\n                }\r\n            }\r\n            else if (isPathSeparator(code)) {\r\n                // Possible UNC root\r\n                // If we started with a separator, we know we at least have an\r\n                // absolute path of some kind (UNC or otherwise)\r\n                isAbsolute = true;\r\n                if (isPathSeparator(path.charCodeAt(1))) {\r\n                    // Matched double path separator at beginning\r\n                    let j = 2;\r\n                    let last = j;\r\n                    // Match 1 or more non-path separators\r\n                    while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n                        j++;\r\n                    }\r\n                    if (j < len && j !== last) {\r\n                        const firstPart = path.slice(last, j);\r\n                        // Matched!\r\n                        last = j;\r\n                        // Match 1 or more path separators\r\n                        while (j < len && isPathSeparator(path.charCodeAt(j))) {\r\n                            j++;\r\n                        }\r\n                        if (j < len && j !== last) {\r\n                            // Matched!\r\n                            last = j;\r\n                            // Match 1 or more non-path separators\r\n                            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n                                j++;\r\n                            }\r\n                            if (j === len || j !== last) {\r\n                                // We matched a UNC root\r\n                                device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\r\n                                rootEnd = j;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    rootEnd = 1;\r\n                }\r\n            }\r\n            else if (isWindowsDeviceRoot(code) &&\r\n                path.charCodeAt(1) === CHAR_COLON) {\r\n                // Possible device root\r\n                device = path.slice(0, 2);\r\n                rootEnd = 2;\r\n                if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\r\n                    // Treat separator following drive name as an absolute path\r\n                    // indicator\r\n                    isAbsolute = true;\r\n                    rootEnd = 3;\r\n                }\r\n            }\r\n            if (device.length > 0) {\r\n                if (resolvedDevice.length > 0) {\r\n                    if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {\r\n                        // This path points to another device so it is not applicable\r\n                        continue;\r\n                    }\r\n                }\r\n                else {\r\n                    resolvedDevice = device;\r\n                }\r\n            }\r\n            if (resolvedAbsolute) {\r\n                if (resolvedDevice.length > 0) {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                resolvedTail = `${path.slice(rootEnd)}\\\\${resolvedTail}`;\r\n                resolvedAbsolute = isAbsolute;\r\n                if (isAbsolute && resolvedDevice.length > 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // At this point the path should be resolved to a full absolute path,\r\n        // but handle relative paths to be safe (might happen when process.cwd()\r\n        // fails)\r\n        // Normalize the tail path\r\n        resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isPathSeparator);\r\n        return resolvedAbsolute ?\r\n            `${resolvedDevice}\\\\${resolvedTail}` :\r\n            `${resolvedDevice}${resolvedTail}` || '.';\r\n    },\r\n    normalize(path) {\r\n        validateString(path, 'path');\r\n        const len = path.length;\r\n        if (len === 0) {\r\n            return '.';\r\n        }\r\n        let rootEnd = 0;\r\n        let device;\r\n        let isAbsolute = false;\r\n        const code = path.charCodeAt(0);\r\n        // Try to match a root\r\n        if (len === 1) {\r\n            // `path` contains just a single char, exit early to avoid\r\n            // unnecessary work\r\n            return isPosixPathSeparator(code) ? '\\\\' : path;\r\n        }\r\n        if (isPathSeparator(code)) {\r\n            // Possible UNC root\r\n            // If we started with a separator, we know we at least have an absolute\r\n            // path of some kind (UNC or otherwise)\r\n            isAbsolute = true;\r\n            if (isPathSeparator(path.charCodeAt(1))) {\r\n                // Matched double path separator at beginning\r\n                let j = 2;\r\n                let last = j;\r\n                // Match 1 or more non-path separators\r\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n                    j++;\r\n                }\r\n                if (j < len && j !== last) {\r\n                    const firstPart = path.slice(last, j);\r\n                    // Matched!\r\n                    last = j;\r\n                    // Match 1 or more path separators\r\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\r\n                        j++;\r\n                    }\r\n                    if (j < len && j !== last) {\r\n                        // Matched!\r\n                        last = j;\r\n                        // Match 1 or more non-path separators\r\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n                            j++;\r\n                        }\r\n                        if (j === len) {\r\n                            // We matched a UNC root only\r\n                            // Return the normalized version of the UNC root since there\r\n                            // is nothing left to process\r\n                            return `\\\\\\\\${firstPart}\\\\${path.slice(last)}\\\\`;\r\n                        }\r\n                        if (j !== last) {\r\n                            // We matched a UNC root with leftovers\r\n                            device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\r\n                            rootEnd = j;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                rootEnd = 1;\r\n            }\r\n        }\r\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\r\n            // Possible device root\r\n            device = path.slice(0, 2);\r\n            rootEnd = 2;\r\n            if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\r\n                // Treat separator following drive name as an absolute path\r\n                // indicator\r\n                isAbsolute = true;\r\n                rootEnd = 3;\r\n            }\r\n        }\r\n        let tail = rootEnd < len ?\r\n            normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\', isPathSeparator) :\r\n            '';\r\n        if (tail.length === 0 && !isAbsolute) {\r\n            tail = '.';\r\n        }\r\n        if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\r\n            tail += '\\\\';\r\n        }\r\n        if (device === undefined) {\r\n            return isAbsolute ? `\\\\${tail}` : tail;\r\n        }\r\n        return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\r\n    },\r\n    isAbsolute(path) {\r\n        validateString(path, 'path');\r\n        const len = path.length;\r\n        if (len === 0) {\r\n            return false;\r\n        }\r\n        const code = path.charCodeAt(0);\r\n        return isPathSeparator(code) ||\r\n            // Possible device root\r\n            (len > 2 &&\r\n                isWindowsDeviceRoot(code) &&\r\n                path.charCodeAt(1) === CHAR_COLON &&\r\n                isPathSeparator(path.charCodeAt(2)));\r\n    },\r\n    join(...paths) {\r\n        if (paths.length === 0) {\r\n            return '.';\r\n        }\r\n        let joined;\r\n        let firstPart;\r\n        for (let i = 0; i < paths.length; ++i) {\r\n            const arg = paths[i];\r\n            validateString(arg, 'path');\r\n            if (arg.length > 0) {\r\n                if (joined === undefined) {\r\n                    joined = firstPart = arg;\r\n                }\r\n                else {\r\n                    joined += `\\\\${arg}`;\r\n                }\r\n            }\r\n        }\r\n        if (joined === undefined) {\r\n            return '.';\r\n        }\r\n        // Make sure that the joined path doesn't start with two slashes, because\r\n        // normalize() will mistake it for a UNC path then.\r\n        //\r\n        // This step is skipped when it is very clear that the user actually\r\n        // intended to point at a UNC path. This is assumed when the first\r\n        // non-empty string arguments starts with exactly two slashes followed by\r\n        // at least one more non-slash character.\r\n        //\r\n        // Note that for normalize() to treat a path as a UNC path it needs to\r\n        // have at least 2 components, so we don't filter for that here.\r\n        // This means that the user can use join to construct UNC paths from\r\n        // a server name and a share name; for example:\r\n        //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\r\n        let needsReplace = true;\r\n        let slashCount = 0;\r\n        if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {\r\n            ++slashCount;\r\n            const firstLen = firstPart.length;\r\n            if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {\r\n                ++slashCount;\r\n                if (firstLen > 2) {\r\n                    if (isPathSeparator(firstPart.charCodeAt(2))) {\r\n                        ++slashCount;\r\n                    }\r\n                    else {\r\n                        // We matched a UNC path in the first part\r\n                        needsReplace = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (needsReplace) {\r\n            // Find any more consecutive slashes we need to replace\r\n            while (slashCount < joined.length &&\r\n                isPathSeparator(joined.charCodeAt(slashCount))) {\r\n                slashCount++;\r\n            }\r\n            // Replace the slashes if needed\r\n            if (slashCount >= 2) {\r\n                joined = `\\\\${joined.slice(slashCount)}`;\r\n            }\r\n        }\r\n        return win32.normalize(joined);\r\n    },\r\n    // It will solve the relative path from `from` to `to`, for instance:\r\n    //  from = 'C:\\\\orandea\\\\test\\\\aaa'\r\n    //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\r\n    // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\r\n    relative(from, to) {\r\n        validateString(from, 'from');\r\n        validateString(to, 'to');\r\n        if (from === to) {\r\n            return '';\r\n        }\r\n        const fromOrig = win32.resolve(from);\r\n        const toOrig = win32.resolve(to);\r\n        if (fromOrig === toOrig) {\r\n            return '';\r\n        }\r\n        from = fromOrig.toLowerCase();\r\n        to = toOrig.toLowerCase();\r\n        if (from === to) {\r\n            return '';\r\n        }\r\n        // Trim any leading backslashes\r\n        let fromStart = 0;\r\n        while (fromStart < from.length &&\r\n            from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\r\n            fromStart++;\r\n        }\r\n        // Trim trailing backslashes (applicable to UNC paths only)\r\n        let fromEnd = from.length;\r\n        while (fromEnd - 1 > fromStart &&\r\n            from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\r\n            fromEnd--;\r\n        }\r\n        const fromLen = fromEnd - fromStart;\r\n        // Trim any leading backslashes\r\n        let toStart = 0;\r\n        while (toStart < to.length &&\r\n            to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\r\n            toStart++;\r\n        }\r\n        // Trim trailing backslashes (applicable to UNC paths only)\r\n        let toEnd = to.length;\r\n        while (toEnd - 1 > toStart &&\r\n            to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\r\n            toEnd--;\r\n        }\r\n        const toLen = toEnd - toStart;\r\n        // Compare paths to find the longest common path from root\r\n        const length = fromLen < toLen ? fromLen : toLen;\r\n        let lastCommonSep = -1;\r\n        let i = 0;\r\n        for (; i < length; i++) {\r\n            const fromCode = from.charCodeAt(fromStart + i);\r\n            if (fromCode !== to.charCodeAt(toStart + i)) {\r\n                break;\r\n            }\r\n            else if (fromCode === CHAR_BACKWARD_SLASH) {\r\n                lastCommonSep = i;\r\n            }\r\n        }\r\n        // We found a mismatch before the first common path separator was seen, so\r\n        // return the original `to`.\r\n        if (i !== length) {\r\n            if (lastCommonSep === -1) {\r\n                return toOrig;\r\n            }\r\n        }\r\n        else {\r\n            if (toLen > length) {\r\n                if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\r\n                    // We get here if `from` is the exact base path for `to`.\r\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\r\n                    return toOrig.slice(toStart + i + 1);\r\n                }\r\n                if (i === 2) {\r\n                    // We get here if `from` is the device root.\r\n                    // For example: from='C:\\\\'; to='C:\\\\foo'\r\n                    return toOrig.slice(toStart + i);\r\n                }\r\n            }\r\n            if (fromLen > length) {\r\n                if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\r\n                    // We get here if `to` is the exact base path for `from`.\r\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\r\n                    lastCommonSep = i;\r\n                }\r\n                else if (i === 2) {\r\n                    // We get here if `to` is the device root.\r\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\r\n                    lastCommonSep = 3;\r\n                }\r\n            }\r\n            if (lastCommonSep === -1) {\r\n                lastCommonSep = 0;\r\n            }\r\n        }\r\n        let out = '';\r\n        // Generate the relative path based on the path difference between `to` and\r\n        // `from`\r\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\r\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\r\n                out += out.length === 0 ? '..' : '\\\\..';\r\n            }\r\n        }\r\n        toStart += lastCommonSep;\r\n        // Lastly, append the rest of the destination (`to`) path that comes after\r\n        // the common path parts\r\n        if (out.length > 0) {\r\n            return `${out}${toOrig.slice(toStart, toEnd)}`;\r\n        }\r\n        if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\r\n            ++toStart;\r\n        }\r\n        return toOrig.slice(toStart, toEnd);\r\n    },\r\n    toNamespacedPath(path) {\r\n        // Note: this will *probably* throw somewhere.\r\n        if (typeof path !== 'string' || path.length === 0) {\r\n            return path;\r\n        }\r\n        const resolvedPath = win32.resolve(path);\r\n        if (resolvedPath.length <= 2) {\r\n            return path;\r\n        }\r\n        if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\r\n            // Possible UNC root\r\n            if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\r\n                const code = resolvedPath.charCodeAt(2);\r\n                if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\r\n                    // Matched non-long UNC root, convert the path to a long UNC path\r\n                    return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.slice(2)}`;\r\n                }\r\n            }\r\n        }\r\n        else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&\r\n            resolvedPath.charCodeAt(1) === CHAR_COLON &&\r\n            resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\r\n            // Matched device root, convert the path to a long UNC path\r\n            return `\\\\\\\\?\\\\${resolvedPath}`;\r\n        }\r\n        return path;\r\n    },\r\n    dirname(path) {\r\n        validateString(path, 'path');\r\n        const len = path.length;\r\n        if (len === 0) {\r\n            return '.';\r\n        }\r\n        let rootEnd = -1;\r\n        let offset = 0;\r\n        const code = path.charCodeAt(0);\r\n        if (len === 1) {\r\n            // `path` contains just a path separator, exit early to avoid\r\n            // unnecessary work or a dot.\r\n            return isPathSeparator(code) ? path : '.';\r\n        }\r\n        // Try to match a root\r\n        if (isPathSeparator(code)) {\r\n            // Possible UNC root\r\n            rootEnd = offset = 1;\r\n            if (isPathSeparator(path.charCodeAt(1))) {\r\n                // Matched double path separator at beginning\r\n                let j = 2;\r\n                let last = j;\r\n                // Match 1 or more non-path separators\r\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n                    j++;\r\n                }\r\n                if (j < len && j !== last) {\r\n                    // Matched!\r\n                    last = j;\r\n                    // Match 1 or more path separators\r\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\r\n                        j++;\r\n                    }\r\n                    if (j < len && j !== last) {\r\n                        // Matched!\r\n                        last = j;\r\n                        // Match 1 or more non-path separators\r\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n                            j++;\r\n                        }\r\n                        if (j === len) {\r\n                            // We matched a UNC root only\r\n                            return path;\r\n                        }\r\n                        if (j !== last) {\r\n                            // We matched a UNC root with leftovers\r\n                            // Offset by 1 to include the separator after the UNC root to\r\n                            // treat it as a \"normal root\" on top of a (UNC) root\r\n                            rootEnd = offset = j + 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Possible device root\r\n        }\r\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\r\n            rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;\r\n            offset = rootEnd;\r\n        }\r\n        let end = -1;\r\n        let matchedSlash = true;\r\n        for (let i = len - 1; i >= offset; --i) {\r\n            if (isPathSeparator(path.charCodeAt(i))) {\r\n                if (!matchedSlash) {\r\n                    end = i;\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                // We saw the first non-path separator\r\n                matchedSlash = false;\r\n            }\r\n        }\r\n        if (end === -1) {\r\n            if (rootEnd === -1) {\r\n                return '.';\r\n            }\r\n            end = rootEnd;\r\n        }\r\n        return path.slice(0, end);\r\n    },\r\n    basename(path, ext) {\r\n        if (ext !== undefined) {\r\n            validateString(ext, 'ext');\r\n        }\r\n        validateString(path, 'path');\r\n        let start = 0;\r\n        let end = -1;\r\n        let matchedSlash = true;\r\n        let i;\r\n        // Check for a drive letter prefix so as not to mistake the following\r\n        // path separator as an extra separator at the end of the path that can be\r\n        // disregarded\r\n        if (path.length >= 2 &&\r\n            isWindowsDeviceRoot(path.charCodeAt(0)) &&\r\n            path.charCodeAt(1) === CHAR_COLON) {\r\n            start = 2;\r\n        }\r\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\r\n            if (ext === path) {\r\n                return '';\r\n            }\r\n            let extIdx = ext.length - 1;\r\n            let firstNonSlashEnd = -1;\r\n            for (i = path.length - 1; i >= start; --i) {\r\n                const code = path.charCodeAt(i);\r\n                if (isPathSeparator(code)) {\r\n                    // If we reached a path separator that was not part of a set of path\r\n                    // separators at the end of the string, stop now\r\n                    if (!matchedSlash) {\r\n                        start = i + 1;\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    if (firstNonSlashEnd === -1) {\r\n                        // We saw the first non-path separator, remember this index in case\r\n                        // we need it if the extension ends up not matching\r\n                        matchedSlash = false;\r\n                        firstNonSlashEnd = i + 1;\r\n                    }\r\n                    if (extIdx >= 0) {\r\n                        // Try to match the explicit extension\r\n                        if (code === ext.charCodeAt(extIdx)) {\r\n                            if (--extIdx === -1) {\r\n                                // We matched the extension, so mark this as the end of our path\r\n                                // component\r\n                                end = i;\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Extension does not match, so our result is the entire path\r\n                            // component\r\n                            extIdx = -1;\r\n                            end = firstNonSlashEnd;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (start === end) {\r\n                end = firstNonSlashEnd;\r\n            }\r\n            else if (end === -1) {\r\n                end = path.length;\r\n            }\r\n            return path.slice(start, end);\r\n        }\r\n        for (i = path.length - 1; i >= start; --i) {\r\n            if (isPathSeparator(path.charCodeAt(i))) {\r\n                // If we reached a path separator that was not part of a set of path\r\n                // separators at the end of the string, stop now\r\n                if (!matchedSlash) {\r\n                    start = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n            else if (end === -1) {\r\n                // We saw the first non-path separator, mark this as the end of our\r\n                // path component\r\n                matchedSlash = false;\r\n                end = i + 1;\r\n            }\r\n        }\r\n        if (end === -1) {\r\n            return '';\r\n        }\r\n        return path.slice(start, end);\r\n    },\r\n    extname(path) {\r\n        validateString(path, 'path');\r\n        let start = 0;\r\n        let startDot = -1;\r\n        let startPart = 0;\r\n        let end = -1;\r\n        let matchedSlash = true;\r\n        // Track the state of characters (if any) we see before our first dot and\r\n        // after any path separator we find\r\n        let preDotState = 0;\r\n        // Check for a drive letter prefix so as not to mistake the following\r\n        // path separator as an extra separator at the end of the path that can be\r\n        // disregarded\r\n        if (path.length >= 2 &&\r\n            path.charCodeAt(1) === CHAR_COLON &&\r\n            isWindowsDeviceRoot(path.charCodeAt(0))) {\r\n            start = startPart = 2;\r\n        }\r\n        for (let i = path.length - 1; i >= start; --i) {\r\n            const code = path.charCodeAt(i);\r\n            if (isPathSeparator(code)) {\r\n                // If we reached a path separator that was not part of a set of path\r\n                // separators at the end of the string, stop now\r\n                if (!matchedSlash) {\r\n                    startPart = i + 1;\r\n                    break;\r\n                }\r\n                continue;\r\n            }\r\n            if (end === -1) {\r\n                // We saw the first non-path separator, mark this as the end of our\r\n                // extension\r\n                matchedSlash = false;\r\n                end = i + 1;\r\n            }\r\n            if (code === CHAR_DOT) {\r\n                // If this is our first dot, mark it as the start of our extension\r\n                if (startDot === -1) {\r\n                    startDot = i;\r\n                }\r\n                else if (preDotState !== 1) {\r\n                    preDotState = 1;\r\n                }\r\n            }\r\n            else if (startDot !== -1) {\r\n                // We saw a non-dot and non-path separator before our dot, so we should\r\n                // have a good chance at having a non-empty extension\r\n                preDotState = -1;\r\n            }\r\n        }\r\n        if (startDot === -1 ||\r\n            end === -1 ||\r\n            // We saw a non-dot character immediately before the dot\r\n            preDotState === 0 ||\r\n            // The (right-most) trimmed path component is exactly '..'\r\n            (preDotState === 1 &&\r\n                startDot === end - 1 &&\r\n                startDot === startPart + 1)) {\r\n            return '';\r\n        }\r\n        return path.slice(startDot, end);\r\n    },\r\n    format: _format.bind(null, '\\\\'),\r\n    parse(path) {\r\n        validateString(path, 'path');\r\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\r\n        if (path.length === 0) {\r\n            return ret;\r\n        }\r\n        const len = path.length;\r\n        let rootEnd = 0;\r\n        let code = path.charCodeAt(0);\r\n        if (len === 1) {\r\n            if (isPathSeparator(code)) {\r\n                // `path` contains just a path separator, exit early to avoid\r\n                // unnecessary work\r\n                ret.root = ret.dir = path;\r\n                return ret;\r\n            }\r\n            ret.base = ret.name = path;\r\n            return ret;\r\n        }\r\n        // Try to match a root\r\n        if (isPathSeparator(code)) {\r\n            // Possible UNC root\r\n            rootEnd = 1;\r\n            if (isPathSeparator(path.charCodeAt(1))) {\r\n                // Matched double path separator at beginning\r\n                let j = 2;\r\n                let last = j;\r\n                // Match 1 or more non-path separators\r\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n                    j++;\r\n                }\r\n                if (j < len && j !== last) {\r\n                    // Matched!\r\n                    last = j;\r\n                    // Match 1 or more path separators\r\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\r\n                        j++;\r\n                    }\r\n                    if (j < len && j !== last) {\r\n                        // Matched!\r\n                        last = j;\r\n                        // Match 1 or more non-path separators\r\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\r\n                            j++;\r\n                        }\r\n                        if (j === len) {\r\n                            // We matched a UNC root only\r\n                            rootEnd = j;\r\n                        }\r\n                        else if (j !== last) {\r\n                            // We matched a UNC root with leftovers\r\n                            rootEnd = j + 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\r\n            // Possible device root\r\n            if (len <= 2) {\r\n                // `path` contains just a drive root, exit early to avoid\r\n                // unnecessary work\r\n                ret.root = ret.dir = path;\r\n                return ret;\r\n            }\r\n            rootEnd = 2;\r\n            if (isPathSeparator(path.charCodeAt(2))) {\r\n                if (len === 3) {\r\n                    // `path` contains just a drive root, exit early to avoid\r\n                    // unnecessary work\r\n                    ret.root = ret.dir = path;\r\n                    return ret;\r\n                }\r\n                rootEnd = 3;\r\n            }\r\n        }\r\n        if (rootEnd > 0) {\r\n            ret.root = path.slice(0, rootEnd);\r\n        }\r\n        let startDot = -1;\r\n        let startPart = rootEnd;\r\n        let end = -1;\r\n        let matchedSlash = true;\r\n        let i = path.length - 1;\r\n        // Track the state of characters (if any) we see before our first dot and\r\n        // after any path separator we find\r\n        let preDotState = 0;\r\n        // Get non-dir info\r\n        for (; i >= rootEnd; --i) {\r\n            code = path.charCodeAt(i);\r\n            if (isPathSeparator(code)) {\r\n                // If we reached a path separator that was not part of a set of path\r\n                // separators at the end of the string, stop now\r\n                if (!matchedSlash) {\r\n                    startPart = i + 1;\r\n                    break;\r\n                }\r\n                continue;\r\n            }\r\n            if (end === -1) {\r\n                // We saw the first non-path separator, mark this as the end of our\r\n                // extension\r\n                matchedSlash = false;\r\n                end = i + 1;\r\n            }\r\n            if (code === CHAR_DOT) {\r\n                // If this is our first dot, mark it as the start of our extension\r\n                if (startDot === -1) {\r\n                    startDot = i;\r\n                }\r\n                else if (preDotState !== 1) {\r\n                    preDotState = 1;\r\n                }\r\n            }\r\n            else if (startDot !== -1) {\r\n                // We saw a non-dot and non-path separator before our dot, so we should\r\n                // have a good chance at having a non-empty extension\r\n                preDotState = -1;\r\n            }\r\n        }\r\n        if (end !== -1) {\r\n            if (startDot === -1 ||\r\n                // We saw a non-dot character immediately before the dot\r\n                preDotState === 0 ||\r\n                // The (right-most) trimmed path component is exactly '..'\r\n                (preDotState === 1 &&\r\n                    startDot === end - 1 &&\r\n                    startDot === startPart + 1)) {\r\n                ret.base = ret.name = path.slice(startPart, end);\r\n            }\r\n            else {\r\n                ret.name = path.slice(startPart, startDot);\r\n                ret.base = path.slice(startPart, end);\r\n                ret.ext = path.slice(startDot, end);\r\n            }\r\n        }\r\n        // If the directory is the root, use the entire root as the `dir` including\r\n        // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\r\n        // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\r\n        if (startPart > 0 && startPart !== rootEnd) {\r\n            ret.dir = path.slice(0, startPart - 1);\r\n        }\r\n        else {\r\n            ret.dir = ret.root;\r\n        }\r\n        return ret;\r\n    },\r\n    sep: '\\\\',\r\n    delimiter: ';',\r\n    win32: null,\r\n    posix: null\r\n};\r\nconst posixCwd = (() => {\r\n    if (platformIsWin32) {\r\n        // Converts Windows' backslash path separators to POSIX forward slashes\r\n        // and truncates any drive indicator\r\n        const regexp = /\\\\/g;\r\n        return () => {\r\n            const cwd = _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd().replace(regexp, '/');\r\n            return cwd.slice(cwd.indexOf('/'));\r\n        };\r\n    }\r\n    // We're already on POSIX, no need for any transformations\r\n    return () => _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();\r\n})();\r\nconst posix = {\r\n    // path.resolve([from ...], to)\r\n    resolve(...pathSegments) {\r\n        let resolvedPath = '';\r\n        let resolvedAbsolute = false;\r\n        for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n            const path = i >= 0 ? pathSegments[i] : posixCwd();\r\n            validateString(path, 'path');\r\n            // Skip empty entries\r\n            if (path.length === 0) {\r\n                continue;\r\n            }\r\n            resolvedPath = `${path}/${resolvedPath}`;\r\n            resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n        }\r\n        // At this point the path should be resolved to a full absolute path, but\r\n        // handle relative paths to be safe (might happen when process.cwd() fails)\r\n        // Normalize the path\r\n        resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);\r\n        if (resolvedAbsolute) {\r\n            return `/${resolvedPath}`;\r\n        }\r\n        return resolvedPath.length > 0 ? resolvedPath : '.';\r\n    },\r\n    normalize(path) {\r\n        validateString(path, 'path');\r\n        if (path.length === 0) {\r\n            return '.';\r\n        }\r\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n        const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\r\n        // Normalize the path\r\n        path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\r\n        if (path.length === 0) {\r\n            if (isAbsolute) {\r\n                return '/';\r\n            }\r\n            return trailingSeparator ? './' : '.';\r\n        }\r\n        if (trailingSeparator) {\r\n            path += '/';\r\n        }\r\n        return isAbsolute ? `/${path}` : path;\r\n    },\r\n    isAbsolute(path) {\r\n        validateString(path, 'path');\r\n        return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n    },\r\n    join(...paths) {\r\n        if (paths.length === 0) {\r\n            return '.';\r\n        }\r\n        let joined;\r\n        for (let i = 0; i < paths.length; ++i) {\r\n            const arg = paths[i];\r\n            validateString(arg, 'path');\r\n            if (arg.length > 0) {\r\n                if (joined === undefined) {\r\n                    joined = arg;\r\n                }\r\n                else {\r\n                    joined += `/${arg}`;\r\n                }\r\n            }\r\n        }\r\n        if (joined === undefined) {\r\n            return '.';\r\n        }\r\n        return posix.normalize(joined);\r\n    },\r\n    relative(from, to) {\r\n        validateString(from, 'from');\r\n        validateString(to, 'to');\r\n        if (from === to) {\r\n            return '';\r\n        }\r\n        // Trim leading forward slashes.\r\n        from = posix.resolve(from);\r\n        to = posix.resolve(to);\r\n        if (from === to) {\r\n            return '';\r\n        }\r\n        const fromStart = 1;\r\n        const fromEnd = from.length;\r\n        const fromLen = fromEnd - fromStart;\r\n        const toStart = 1;\r\n        const toLen = to.length - toStart;\r\n        // Compare paths to find the longest common path from root\r\n        const length = (fromLen < toLen ? fromLen : toLen);\r\n        let lastCommonSep = -1;\r\n        let i = 0;\r\n        for (; i < length; i++) {\r\n            const fromCode = from.charCodeAt(fromStart + i);\r\n            if (fromCode !== to.charCodeAt(toStart + i)) {\r\n                break;\r\n            }\r\n            else if (fromCode === CHAR_FORWARD_SLASH) {\r\n                lastCommonSep = i;\r\n            }\r\n        }\r\n        if (i === length) {\r\n            if (toLen > length) {\r\n                if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\r\n                    // We get here if `from` is the exact base path for `to`.\r\n                    // For example: from='/foo/bar'; to='/foo/bar/baz'\r\n                    return to.slice(toStart + i + 1);\r\n                }\r\n                if (i === 0) {\r\n                    // We get here if `from` is the root\r\n                    // For example: from='/'; to='/foo'\r\n                    return to.slice(toStart + i);\r\n                }\r\n            }\r\n            else if (fromLen > length) {\r\n                if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\r\n                    // We get here if `to` is the exact base path for `from`.\r\n                    // For example: from='/foo/bar/baz'; to='/foo/bar'\r\n                    lastCommonSep = i;\r\n                }\r\n                else if (i === 0) {\r\n                    // We get here if `to` is the root.\r\n                    // For example: from='/foo/bar'; to='/'\r\n                    lastCommonSep = 0;\r\n                }\r\n            }\r\n        }\r\n        let out = '';\r\n        // Generate the relative path based on the path difference between `to`\r\n        // and `from`.\r\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\r\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\r\n                out += out.length === 0 ? '..' : '/..';\r\n            }\r\n        }\r\n        // Lastly, append the rest of the destination (`to`) path that comes after\r\n        // the common path parts.\r\n        return `${out}${to.slice(toStart + lastCommonSep)}`;\r\n    },\r\n    toNamespacedPath(path) {\r\n        // Non-op on posix systems\r\n        return path;\r\n    },\r\n    dirname(path) {\r\n        validateString(path, 'path');\r\n        if (path.length === 0) {\r\n            return '.';\r\n        }\r\n        const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n        let end = -1;\r\n        let matchedSlash = true;\r\n        for (let i = path.length - 1; i >= 1; --i) {\r\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\r\n                if (!matchedSlash) {\r\n                    end = i;\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                // We saw the first non-path separator\r\n                matchedSlash = false;\r\n            }\r\n        }\r\n        if (end === -1) {\r\n            return hasRoot ? '/' : '.';\r\n        }\r\n        if (hasRoot && end === 1) {\r\n            return '//';\r\n        }\r\n        return path.slice(0, end);\r\n    },\r\n    basename(path, ext) {\r\n        if (ext !== undefined) {\r\n            validateString(ext, 'ext');\r\n        }\r\n        validateString(path, 'path');\r\n        let start = 0;\r\n        let end = -1;\r\n        let matchedSlash = true;\r\n        let i;\r\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\r\n            if (ext === path) {\r\n                return '';\r\n            }\r\n            let extIdx = ext.length - 1;\r\n            let firstNonSlashEnd = -1;\r\n            for (i = path.length - 1; i >= 0; --i) {\r\n                const code = path.charCodeAt(i);\r\n                if (code === CHAR_FORWARD_SLASH) {\r\n                    // If we reached a path separator that was not part of a set of path\r\n                    // separators at the end of the string, stop now\r\n                    if (!matchedSlash) {\r\n                        start = i + 1;\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    if (firstNonSlashEnd === -1) {\r\n                        // We saw the first non-path separator, remember this index in case\r\n                        // we need it if the extension ends up not matching\r\n                        matchedSlash = false;\r\n                        firstNonSlashEnd = i + 1;\r\n                    }\r\n                    if (extIdx >= 0) {\r\n                        // Try to match the explicit extension\r\n                        if (code === ext.charCodeAt(extIdx)) {\r\n                            if (--extIdx === -1) {\r\n                                // We matched the extension, so mark this as the end of our path\r\n                                // component\r\n                                end = i;\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Extension does not match, so our result is the entire path\r\n                            // component\r\n                            extIdx = -1;\r\n                            end = firstNonSlashEnd;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (start === end) {\r\n                end = firstNonSlashEnd;\r\n            }\r\n            else if (end === -1) {\r\n                end = path.length;\r\n            }\r\n            return path.slice(start, end);\r\n        }\r\n        for (i = path.length - 1; i >= 0; --i) {\r\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\r\n                // If we reached a path separator that was not part of a set of path\r\n                // separators at the end of the string, stop now\r\n                if (!matchedSlash) {\r\n                    start = i + 1;\r\n                    break;\r\n                }\r\n            }\r\n            else if (end === -1) {\r\n                // We saw the first non-path separator, mark this as the end of our\r\n                // path component\r\n                matchedSlash = false;\r\n                end = i + 1;\r\n            }\r\n        }\r\n        if (end === -1) {\r\n            return '';\r\n        }\r\n        return path.slice(start, end);\r\n    },\r\n    extname(path) {\r\n        validateString(path, 'path');\r\n        let startDot = -1;\r\n        let startPart = 0;\r\n        let end = -1;\r\n        let matchedSlash = true;\r\n        // Track the state of characters (if any) we see before our first dot and\r\n        // after any path separator we find\r\n        let preDotState = 0;\r\n        for (let i = path.length - 1; i >= 0; --i) {\r\n            const code = path.charCodeAt(i);\r\n            if (code === CHAR_FORWARD_SLASH) {\r\n                // If we reached a path separator that was not part of a set of path\r\n                // separators at the end of the string, stop now\r\n                if (!matchedSlash) {\r\n                    startPart = i + 1;\r\n                    break;\r\n                }\r\n                continue;\r\n            }\r\n            if (end === -1) {\r\n                // We saw the first non-path separator, mark this as the end of our\r\n                // extension\r\n                matchedSlash = false;\r\n                end = i + 1;\r\n            }\r\n            if (code === CHAR_DOT) {\r\n                // If this is our first dot, mark it as the start of our extension\r\n                if (startDot === -1) {\r\n                    startDot = i;\r\n                }\r\n                else if (preDotState !== 1) {\r\n                    preDotState = 1;\r\n                }\r\n            }\r\n            else if (startDot !== -1) {\r\n                // We saw a non-dot and non-path separator before our dot, so we should\r\n                // have a good chance at having a non-empty extension\r\n                preDotState = -1;\r\n            }\r\n        }\r\n        if (startDot === -1 ||\r\n            end === -1 ||\r\n            // We saw a non-dot character immediately before the dot\r\n            preDotState === 0 ||\r\n            // The (right-most) trimmed path component is exactly '..'\r\n            (preDotState === 1 &&\r\n                startDot === end - 1 &&\r\n                startDot === startPart + 1)) {\r\n            return '';\r\n        }\r\n        return path.slice(startDot, end);\r\n    },\r\n    format: _format.bind(null, '/'),\r\n    parse(path) {\r\n        validateString(path, 'path');\r\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\r\n        if (path.length === 0) {\r\n            return ret;\r\n        }\r\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\r\n        let start;\r\n        if (isAbsolute) {\r\n            ret.root = '/';\r\n            start = 1;\r\n        }\r\n        else {\r\n            start = 0;\r\n        }\r\n        let startDot = -1;\r\n        let startPart = 0;\r\n        let end = -1;\r\n        let matchedSlash = true;\r\n        let i = path.length - 1;\r\n        // Track the state of characters (if any) we see before our first dot and\r\n        // after any path separator we find\r\n        let preDotState = 0;\r\n        // Get non-dir info\r\n        for (; i >= start; --i) {\r\n            const code = path.charCodeAt(i);\r\n            if (code === CHAR_FORWARD_SLASH) {\r\n                // If we reached a path separator that was not part of a set of path\r\n                // separators at the end of the string, stop now\r\n                if (!matchedSlash) {\r\n                    startPart = i + 1;\r\n                    break;\r\n                }\r\n                continue;\r\n            }\r\n            if (end === -1) {\r\n                // We saw the first non-path separator, mark this as the end of our\r\n                // extension\r\n                matchedSlash = false;\r\n                end = i + 1;\r\n            }\r\n            if (code === CHAR_DOT) {\r\n                // If this is our first dot, mark it as the start of our extension\r\n                if (startDot === -1) {\r\n                    startDot = i;\r\n                }\r\n                else if (preDotState !== 1) {\r\n                    preDotState = 1;\r\n                }\r\n            }\r\n            else if (startDot !== -1) {\r\n                // We saw a non-dot and non-path separator before our dot, so we should\r\n                // have a good chance at having a non-empty extension\r\n                preDotState = -1;\r\n            }\r\n        }\r\n        if (end !== -1) {\r\n            const start = startPart === 0 && isAbsolute ? 1 : startPart;\r\n            if (startDot === -1 ||\r\n                // We saw a non-dot character immediately before the dot\r\n                preDotState === 0 ||\r\n                // The (right-most) trimmed path component is exactly '..'\r\n                (preDotState === 1 &&\r\n                    startDot === end - 1 &&\r\n                    startDot === startPart + 1)) {\r\n                ret.base = ret.name = path.slice(start, end);\r\n            }\r\n            else {\r\n                ret.name = path.slice(start, startDot);\r\n                ret.base = path.slice(start, end);\r\n                ret.ext = path.slice(startDot, end);\r\n            }\r\n        }\r\n        if (startPart > 0) {\r\n            ret.dir = path.slice(0, startPart - 1);\r\n        }\r\n        else if (isAbsolute) {\r\n            ret.dir = '/';\r\n        }\r\n        return ret;\r\n    },\r\n    sep: '/',\r\n    delimiter: ':',\r\n    win32: null,\r\n    posix: null\r\n};\r\nposix.win32 = win32.win32 = win32;\r\nposix.posix = win32.posix = posix;\r\nconst normalize = (platformIsWin32 ? win32.normalize : posix.normalize);\r\nconst resolve = (platformIsWin32 ? win32.resolve : posix.resolve);\r\nconst relative = (platformIsWin32 ? win32.relative : posix.relative);\r\nconst dirname = (platformIsWin32 ? win32.dirname : posix.dirname);\r\nconst basename = (platformIsWin32 ? win32.basename : posix.basename);\r\nconst extname = (platformIsWin32 ? win32.extname : posix.extname);\r\nconst sep = (platformIsWin32 ? win32.sep : posix.sep);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcGF0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0M7QUFDeEMsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCLHFCQUFxQjtBQUNyQiwrQkFBK0I7QUFDL0IsZ0NBQWdDO0FBQ2hDLHVCQUF1QjtBQUN2QiwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLEtBQUssSUFBSSxNQUFNLEVBQUUsWUFBWSxVQUFVLFNBQVM7QUFDMUUsa0NBQWtDLGNBQWM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpREFBZ0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsVUFBVTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFVBQVUsRUFBRSw2QkFBNkI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQixFQUFFLHFCQUFxQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsSUFBSSxFQUFFLEtBQUssT0FBTyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUs7QUFDM0U7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsU0FBUztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0Q0FBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0Q0FBVyxLQUFLLGVBQWUsTUFBTSw0Q0FBVztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGVBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELFVBQVUsSUFBSSxvQkFBb0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxvQkFBb0IsSUFBSSxhQUFhO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZUFBZSxJQUFJLGFBQWE7QUFDL0MsZUFBZSxlQUFlLEVBQUUsYUFBYTtBQUM3QyxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFVBQVUsSUFBSSxpQkFBaUI7QUFDekU7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFVBQVUsSUFBSSxvQkFBb0I7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLEtBQUs7QUFDMUM7QUFDQSwrQkFBK0IsT0FBTyxJQUFJLEtBQUssT0FBTyxPQUFPLEVBQUUsS0FBSztBQUNwRSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxJQUFJO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHlCQUF5QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsY0FBYztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLElBQUksRUFBRSw2QkFBNkI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsc0JBQXNCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGFBQWE7QUFDMUM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixhQUFhO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFlBQVk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFlBQVk7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFlBQVk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDRDQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDRDQUFXO0FBQzVCLENBQUM7QUFDTTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDhCQUE4QjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsS0FBSyxHQUFHLGFBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsYUFBYTtBQUNwQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxLQUFLO0FBQ3JDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsSUFBSTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxjQUFjO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixJQUFJLEVBQUUsa0NBQWtDO0FBQzFELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxRQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL3BhdGguanM/MzJiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuLy8gTk9URTogVlNDb2RlJ3MgY29weSBvZiBub2RlanMgcGF0aCBsaWJyYXJ5IHRvIGJlIHVzYWJsZSBpbiBjb21tb24gKG5vbi1ub2RlKSBuYW1lc3BhY2VcclxuLy8gQ29waWVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxNi4xNC4yL2xpYi9wYXRoLmpzXHJcbi8qKlxyXG4gKiBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcclxuICogY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxyXG4gKiBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcclxuICogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxyXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XHJcbiAqIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxyXG4gKiBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcclxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcclxuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxyXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXHJcbiAqIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxyXG4gKiBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcclxuICogT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxyXG4gKiBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tICcuL3Byb2Nlc3MuanMnO1xyXG5jb25zdCBDSEFSX1VQUEVSQ0FTRV9BID0gNjU7IC8qIEEgKi9cclxuY29uc3QgQ0hBUl9MT1dFUkNBU0VfQSA9IDk3OyAvKiBhICovXHJcbmNvbnN0IENIQVJfVVBQRVJDQVNFX1ogPSA5MDsgLyogWiAqL1xyXG5jb25zdCBDSEFSX0xPV0VSQ0FTRV9aID0gMTIyOyAvKiB6ICovXHJcbmNvbnN0IENIQVJfRE9UID0gNDY7IC8qIC4gKi9cclxuY29uc3QgQ0hBUl9GT1JXQVJEX1NMQVNIID0gNDc7IC8qIC8gKi9cclxuY29uc3QgQ0hBUl9CQUNLV0FSRF9TTEFTSCA9IDkyOyAvKiBcXCAqL1xyXG5jb25zdCBDSEFSX0NPTE9OID0gNTg7IC8qIDogKi9cclxuY29uc3QgQ0hBUl9RVUVTVElPTl9NQVJLID0gNjM7IC8qID8gKi9cclxuY2xhc3MgRXJyb3JJbnZhbGlkQXJnVHlwZSBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGV4cGVjdGVkLCBhY3R1YWwpIHtcclxuICAgICAgICAvLyBkZXRlcm1pbmVyOiAnbXVzdCBiZScgb3IgJ211c3Qgbm90IGJlJ1xyXG4gICAgICAgIGxldCBkZXRlcm1pbmVyO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnICYmIGV4cGVjdGVkLmluZGV4T2YoJ25vdCAnKSA9PT0gMCkge1xyXG4gICAgICAgICAgICBkZXRlcm1pbmVyID0gJ211c3Qgbm90IGJlJztcclxuICAgICAgICAgICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRldGVybWluZXIgPSAnbXVzdCBiZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBuYW1lLmluZGV4T2YoJy4nKSAhPT0gLTEgPyAncHJvcGVydHknIDogJ2FyZ3VtZW50JztcclxuICAgICAgICBsZXQgbXNnID0gYFRoZSBcIiR7bmFtZX1cIiAke3R5cGV9ICR7ZGV0ZXJtaW5lcn0gb2YgdHlwZSAke2V4cGVjdGVkfWA7XHJcbiAgICAgICAgbXNnICs9IGAuIFJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgYWN0dWFsfWA7XHJcbiAgICAgICAgc3VwZXIobXNnKTtcclxuICAgICAgICB0aGlzLmNvZGUgPSAnRVJSX0lOVkFMSURfQVJHX1RZUEUnO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KHBhdGhPYmplY3QsIG5hbWUpIHtcclxuICAgIGlmIChwYXRoT2JqZWN0ID09PSBudWxsIHx8IHR5cGVvZiBwYXRoT2JqZWN0ICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvckludmFsaWRBcmdUeXBlKG5hbWUsICdPYmplY3QnLCBwYXRoT2JqZWN0KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZVN0cmluZyh2YWx1ZSwgbmFtZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3JJbnZhbGlkQXJnVHlwZShuYW1lLCAnc3RyaW5nJywgdmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IHBsYXRmb3JtSXNXaW4zMiA9IChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKTtcclxuZnVuY3Rpb24gaXNQYXRoU2VwYXJhdG9yKGNvZGUpIHtcclxuICAgIHJldHVybiBjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0ggfHwgY29kZSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSDtcclxufVxyXG5mdW5jdGlvbiBpc1Bvc2l4UGF0aFNlcGFyYXRvcihjb2RlKSB7XHJcbiAgICByZXR1cm4gY29kZSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xyXG59XHJcbmZ1bmN0aW9uIGlzV2luZG93c0RldmljZVJvb3QoY29kZSkge1xyXG4gICAgcmV0dXJuIChjb2RlID49IENIQVJfVVBQRVJDQVNFX0EgJiYgY29kZSA8PSBDSEFSX1VQUEVSQ0FTRV9aKSB8fFxyXG4gICAgICAgIChjb2RlID49IENIQVJfTE9XRVJDQVNFX0EgJiYgY29kZSA8PSBDSEFSX0xPV0VSQ0FTRV9aKTtcclxufVxyXG4vLyBSZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggd2l0aCBkaXJlY3RvcnkgbmFtZXNcclxuZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5nKHBhdGgsIGFsbG93QWJvdmVSb290LCBzZXBhcmF0b3IsIGlzUGF0aFNlcGFyYXRvcikge1xyXG4gICAgbGV0IHJlcyA9ICcnO1xyXG4gICAgbGV0IGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcclxuICAgIGxldCBsYXN0U2xhc2ggPSAtMTtcclxuICAgIGxldCBkb3RzID0gMDtcclxuICAgIGxldCBjb2RlID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IHBhdGgubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBpZiAoaSA8IHBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvZGUgPSBDSEFSX0ZPUldBUkRfU0xBU0g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgaWYgKGxhc3RTbGFzaCA9PT0gaSAtIDEgfHwgZG90cyA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTk9PUFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRvdHMgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoIDwgMiB8fCBsYXN0U2VnbWVudExlbmd0aCAhPT0gMiB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5jaGFyQ29kZUF0KHJlcy5sZW5ndGggLSAxKSAhPT0gQ0hBUl9ET1QgfHxcclxuICAgICAgICAgICAgICAgICAgICByZXMuY2hhckNvZGVBdChyZXMubGVuZ3RoIC0gMikgIT09IENIQVJfRE9UKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RTbGFzaEluZGV4ID0gcmVzLmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gcmVzLnNsaWNlKDAsIGxhc3RTbGFzaEluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gcmVzLmxlbmd0aCAtIDEgLSByZXMubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0U2xhc2ggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3RzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG90cyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSByZXMubGVuZ3RoID4gMCA/IGAke3NlcGFyYXRvcn0uLmAgOiAnLi4nO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBgJHtzZXBhcmF0b3J9JHtwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGkpfWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSBpIC0gbGFzdFNsYXNoIC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0U2xhc2ggPSBpO1xyXG4gICAgICAgICAgICBkb3RzID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29kZSA9PT0gQ0hBUl9ET1QgJiYgZG90cyAhPT0gLTEpIHtcclxuICAgICAgICAgICAgKytkb3RzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG90cyA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gX2Zvcm1hdChzZXAsIHBhdGhPYmplY3QpIHtcclxuICAgIHZhbGlkYXRlT2JqZWN0KHBhdGhPYmplY3QsICdwYXRoT2JqZWN0Jyk7XHJcbiAgICBjb25zdCBkaXIgPSBwYXRoT2JqZWN0LmRpciB8fCBwYXRoT2JqZWN0LnJvb3Q7XHJcbiAgICBjb25zdCBiYXNlID0gcGF0aE9iamVjdC5iYXNlIHx8XHJcbiAgICAgICAgYCR7cGF0aE9iamVjdC5uYW1lIHx8ICcnfSR7cGF0aE9iamVjdC5leHQgfHwgJyd9YDtcclxuICAgIGlmICghZGlyKSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGlyID09PSBwYXRoT2JqZWN0LnJvb3QgPyBgJHtkaXJ9JHtiYXNlfWAgOiBgJHtkaXJ9JHtzZXB9JHtiYXNlfWA7XHJcbn1cclxuZXhwb3J0IGNvbnN0IHdpbjMyID0ge1xyXG4gICAgLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxyXG4gICAgcmVzb2x2ZSguLi5wYXRoU2VnbWVudHMpIHtcclxuICAgICAgICBsZXQgcmVzb2x2ZWREZXZpY2UgPSAnJztcclxuICAgICAgICBsZXQgcmVzb2x2ZWRUYWlsID0gJyc7XHJcbiAgICAgICAgbGV0IHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gcGF0aFNlZ21lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTE7IGktLSkge1xyXG4gICAgICAgICAgICBsZXQgcGF0aDtcclxuICAgICAgICAgICAgaWYgKGkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgcGF0aCA9IHBhdGhTZWdtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgICAgICAgICAvLyBTa2lwIGVtcHR5IGVudHJpZXNcclxuICAgICAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc29sdmVkRGV2aWNlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcGF0aCA9IHByb2Nlc3MuY3dkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXaW5kb3dzIGhhcyB0aGUgY29uY2VwdCBvZiBkcml2ZS1zcGVjaWZpYyBjdXJyZW50IHdvcmtpbmdcclxuICAgICAgICAgICAgICAgIC8vIGRpcmVjdG9yaWVzLiBJZiB3ZSd2ZSByZXNvbHZlZCBhIGRyaXZlIGxldHRlciBidXQgbm90IHlldCBhblxyXG4gICAgICAgICAgICAgICAgLy8gYWJzb2x1dGUgcGF0aCwgZ2V0IGN3ZCBmb3IgdGhhdCBkcml2ZSwgb3IgdGhlIHByb2Nlc3MgY3dkIGlmXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgZHJpdmUgY3dkIGlzIG5vdCBhdmFpbGFibGUuIFdlJ3JlIHN1cmUgdGhlIGRldmljZSBpcyBub3RcclxuICAgICAgICAgICAgICAgIC8vIGEgVU5DIHBhdGggYXQgdGhpcyBwb2ludHMsIGJlY2F1c2UgVU5DIHBhdGhzIGFyZSBhbHdheXMgYWJzb2x1dGUuXHJcbiAgICAgICAgICAgICAgICBwYXRoID0gcHJvY2Vzcy5lbnZbYD0ke3Jlc29sdmVkRGV2aWNlfWBdIHx8IHByb2Nlc3MuY3dkKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBWZXJpZnkgdGhhdCBhIGN3ZCB3YXMgZm91bmQgYW5kIHRoYXQgaXQgYWN0dWFsbHkgcG9pbnRzXHJcbiAgICAgICAgICAgICAgICAvLyB0byBvdXIgZHJpdmUuIElmIG5vdCwgZGVmYXVsdCB0byB0aGUgZHJpdmUncyByb290LlxyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGggPT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChwYXRoLnNsaWNlKDAsIDIpLnRvTG93ZXJDYXNlKCkgIT09IHJlc29sdmVkRGV2aWNlLnRvTG93ZXJDYXNlKCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5jaGFyQ29kZUF0KDIpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBgJHtyZXNvbHZlZERldmljZX1cXFxcYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcclxuICAgICAgICAgICAgbGV0IHJvb3RFbmQgPSAwO1xyXG4gICAgICAgICAgICBsZXQgZGV2aWNlID0gJyc7XHJcbiAgICAgICAgICAgIGxldCBpc0Fic29sdXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgICAgIC8vIFRyeSB0byBtYXRjaCBhIHJvb3RcclxuICAgICAgICAgICAgaWYgKGxlbiA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGBwYXRoYCBjb250YWlucyBqdXN0IGEgcGF0aCBzZXBhcmF0b3JcclxuICAgICAgICAgICAgICAgICAgICByb290RW5kID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFBvc3NpYmxlIFVOQyByb290XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBzdGFydGVkIHdpdGggYSBzZXBhcmF0b3IsIHdlIGtub3cgd2UgYXQgbGVhc3QgaGF2ZSBhblxyXG4gICAgICAgICAgICAgICAgLy8gYWJzb2x1dGUgcGF0aCBvZiBzb21lIGtpbmQgKFVOQyBvciBvdGhlcndpc2UpXHJcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDEpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgZG91YmxlIHBhdGggc2VwYXJhdG9yIGF0IGJlZ2lubmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBqID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiAhaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChqKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbiAmJiBqICE9PSBsYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0UGFydCA9IHBhdGguc2xpY2UobGFzdCwgaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgcGF0aCBzZXBhcmF0b3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBsZW4gfHwgaiAhPT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZSA9IGBcXFxcXFxcXCR7Zmlyc3RQYXJ0fVxcXFwke3BhdGguc2xpY2UobGFzdCwgail9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290RW5kID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QoY29kZSkgJiZcclxuICAgICAgICAgICAgICAgIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTikge1xyXG4gICAgICAgICAgICAgICAgLy8gUG9zc2libGUgZGV2aWNlIHJvb3RcclxuICAgICAgICAgICAgICAgIGRldmljZSA9IHBhdGguc2xpY2UoMCwgMik7XHJcbiAgICAgICAgICAgICAgICByb290RW5kID0gMjtcclxuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAyICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJlYXQgc2VwYXJhdG9yIGZvbGxvd2luZyBkcml2ZSBuYW1lIGFzIGFuIGFic29sdXRlIHBhdGhcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbmRpY2F0b3JcclxuICAgICAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICByb290RW5kID0gMztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGV2aWNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZERldmljZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRldmljZS50b0xvd2VyQ2FzZSgpICE9PSByZXNvbHZlZERldmljZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcGF0aCBwb2ludHMgdG8gYW5vdGhlciBkZXZpY2Ugc28gaXQgaXMgbm90IGFwcGxpY2FibGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWREZXZpY2UgPSBkZXZpY2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlc29sdmVkQWJzb2x1dGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZERldmljZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlZFRhaWwgPSBgJHtwYXRoLnNsaWNlKHJvb3RFbmQpfVxcXFwke3Jlc29sdmVkVGFpbH1gO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGlzQWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNBYnNvbHV0ZSAmJiByZXNvbHZlZERldmljZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsXHJcbiAgICAgICAgLy8gYnV0IGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpXHJcbiAgICAgICAgLy8gZmFpbHMpXHJcbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSB0YWlsIHBhdGhcclxuICAgICAgICByZXNvbHZlZFRhaWwgPSBub3JtYWxpemVTdHJpbmcocmVzb2x2ZWRUYWlsLCAhcmVzb2x2ZWRBYnNvbHV0ZSwgJ1xcXFwnLCBpc1BhdGhTZXBhcmF0b3IpO1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlZEFic29sdXRlID9cclxuICAgICAgICAgICAgYCR7cmVzb2x2ZWREZXZpY2V9XFxcXCR7cmVzb2x2ZWRUYWlsfWAgOlxyXG4gICAgICAgICAgICBgJHtyZXNvbHZlZERldmljZX0ke3Jlc29sdmVkVGFpbH1gIHx8ICcuJztcclxuICAgIH0sXHJcbiAgICBub3JtYWxpemUocGF0aCkge1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgY29uc3QgbGVuID0gcGF0aC5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcm9vdEVuZCA9IDA7XHJcbiAgICAgICAgbGV0IGRldmljZTtcclxuICAgICAgICBsZXQgaXNBYnNvbHV0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIGEgcm9vdFxyXG4gICAgICAgIGlmIChsZW4gPT09IDEpIHtcclxuICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBzaW5nbGUgY2hhciwgZXhpdCBlYXJseSB0byBhdm9pZFxyXG4gICAgICAgICAgICAvLyB1bm5lY2Vzc2FyeSB3b3JrXHJcbiAgICAgICAgICAgIHJldHVybiBpc1Bvc2l4UGF0aFNlcGFyYXRvcihjb2RlKSA/ICdcXFxcJyA6IHBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgLy8gUG9zc2libGUgVU5DIHJvb3RcclxuICAgICAgICAgICAgLy8gSWYgd2Ugc3RhcnRlZCB3aXRoIGEgc2VwYXJhdG9yLCB3ZSBrbm93IHdlIGF0IGxlYXN0IGhhdmUgYW4gYWJzb2x1dGVcclxuICAgICAgICAgICAgLy8gcGF0aCBvZiBzb21lIGtpbmQgKFVOQyBvciBvdGhlcndpc2UpXHJcbiAgICAgICAgICAgIGlzQWJzb2x1dGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgxKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgZG91YmxlIHBhdGggc2VwYXJhdG9yIGF0IGJlZ2lubmluZ1xyXG4gICAgICAgICAgICAgICAgbGV0IGogPSAyO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFBhcnQgPSBwYXRoLnNsaWNlKGxhc3QsIGopO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIHBhdGggc2VwYXJhdG9yc1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgIWlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGxlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCBhIFVOQyByb290IG9ubHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBVTkMgcm9vdCBzaW5jZSB0aGVyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm90aGluZyBsZWZ0IHRvIHByb2Nlc3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgXFxcXFxcXFwke2ZpcnN0UGFydH1cXFxcJHtwYXRoLnNsaWNlKGxhc3QpfVxcXFxgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqICE9PSBsYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIGEgVU5DIHJvb3Qgd2l0aCBsZWZ0b3ZlcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZSA9IGBcXFxcXFxcXCR7Zmlyc3RQYXJ0fVxcXFwke3BhdGguc2xpY2UobGFzdCwgail9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcm9vdEVuZCA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNXaW5kb3dzRGV2aWNlUm9vdChjb2RlKSAmJiBwYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04pIHtcclxuICAgICAgICAgICAgLy8gUG9zc2libGUgZGV2aWNlIHJvb3RcclxuICAgICAgICAgICAgZGV2aWNlID0gcGF0aC5zbGljZSgwLCAyKTtcclxuICAgICAgICAgICAgcm9vdEVuZCA9IDI7XHJcbiAgICAgICAgICAgIGlmIChsZW4gPiAyICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUcmVhdCBzZXBhcmF0b3IgZm9sbG93aW5nIGRyaXZlIG5hbWUgYXMgYW4gYWJzb2x1dGUgcGF0aFxyXG4gICAgICAgICAgICAgICAgLy8gaW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJvb3RFbmQgPSAzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB0YWlsID0gcm9vdEVuZCA8IGxlbiA/XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZVN0cmluZyhwYXRoLnNsaWNlKHJvb3RFbmQpLCAhaXNBYnNvbHV0ZSwgJ1xcXFwnLCBpc1BhdGhTZXBhcmF0b3IpIDpcclxuICAgICAgICAgICAgJyc7XHJcbiAgICAgICAgaWYgKHRhaWwubGVuZ3RoID09PSAwICYmICFpc0Fic29sdXRlKSB7XHJcbiAgICAgICAgICAgIHRhaWwgPSAnLic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0YWlsLmxlbmd0aCA+IDAgJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdChsZW4gLSAxKSkpIHtcclxuICAgICAgICAgICAgdGFpbCArPSAnXFxcXCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkZXZpY2UgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNBYnNvbHV0ZSA/IGBcXFxcJHt0YWlsfWAgOiB0YWlsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNBYnNvbHV0ZSA/IGAke2RldmljZX1cXFxcJHt0YWlsfWAgOiBgJHtkZXZpY2V9JHt0YWlsfWA7XHJcbiAgICB9LFxyXG4gICAgaXNBYnNvbHV0ZShwYXRoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcclxuICAgICAgICBpZiAobGVuID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcclxuICAgICAgICByZXR1cm4gaXNQYXRoU2VwYXJhdG9yKGNvZGUpIHx8XHJcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIGRldmljZSByb290XHJcbiAgICAgICAgICAgIChsZW4gPiAyICYmXHJcbiAgICAgICAgICAgICAgICBpc1dpbmRvd3NEZXZpY2VSb290KGNvZGUpICYmXHJcbiAgICAgICAgICAgICAgICBwYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04gJiZcclxuICAgICAgICAgICAgICAgIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpKTtcclxuICAgIH0sXHJcbiAgICBqb2luKC4uLnBhdGhzKSB7XHJcbiAgICAgICAgaWYgKHBhdGhzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgam9pbmVkO1xyXG4gICAgICAgIGxldCBmaXJzdFBhcnQ7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRocy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBhcmcgPSBwYXRoc1tpXTtcclxuICAgICAgICAgICAgdmFsaWRhdGVTdHJpbmcoYXJnLCAncGF0aCcpO1xyXG4gICAgICAgICAgICBpZiAoYXJnLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChqb2luZWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGpvaW5lZCA9IGZpcnN0UGFydCA9IGFyZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGpvaW5lZCArPSBgXFxcXCR7YXJnfWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGpvaW5lZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnLic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBqb2luZWQgcGF0aCBkb2Vzbid0IHN0YXJ0IHdpdGggdHdvIHNsYXNoZXMsIGJlY2F1c2VcclxuICAgICAgICAvLyBub3JtYWxpemUoKSB3aWxsIG1pc3Rha2UgaXQgZm9yIGEgVU5DIHBhdGggdGhlbi5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFRoaXMgc3RlcCBpcyBza2lwcGVkIHdoZW4gaXQgaXMgdmVyeSBjbGVhciB0aGF0IHRoZSB1c2VyIGFjdHVhbGx5XHJcbiAgICAgICAgLy8gaW50ZW5kZWQgdG8gcG9pbnQgYXQgYSBVTkMgcGF0aC4gVGhpcyBpcyBhc3N1bWVkIHdoZW4gdGhlIGZpcnN0XHJcbiAgICAgICAgLy8gbm9uLWVtcHR5IHN0cmluZyBhcmd1bWVudHMgc3RhcnRzIHdpdGggZXhhY3RseSB0d28gc2xhc2hlcyBmb2xsb3dlZCBieVxyXG4gICAgICAgIC8vIGF0IGxlYXN0IG9uZSBtb3JlIG5vbi1zbGFzaCBjaGFyYWN0ZXIuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBOb3RlIHRoYXQgZm9yIG5vcm1hbGl6ZSgpIHRvIHRyZWF0IGEgcGF0aCBhcyBhIFVOQyBwYXRoIGl0IG5lZWRzIHRvXHJcbiAgICAgICAgLy8gaGF2ZSBhdCBsZWFzdCAyIGNvbXBvbmVudHMsIHNvIHdlIGRvbid0IGZpbHRlciBmb3IgdGhhdCBoZXJlLlxyXG4gICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGUgdXNlciBjYW4gdXNlIGpvaW4gdG8gY29uc3RydWN0IFVOQyBwYXRocyBmcm9tXHJcbiAgICAgICAgLy8gYSBzZXJ2ZXIgbmFtZSBhbmQgYSBzaGFyZSBuYW1lOyBmb3IgZXhhbXBsZTpcclxuICAgICAgICAvLyAgIHBhdGguam9pbignLy9zZXJ2ZXInLCAnc2hhcmUnKSAtPiAnXFxcXFxcXFxzZXJ2ZXJcXFxcc2hhcmVcXFxcJylcclxuICAgICAgICBsZXQgbmVlZHNSZXBsYWNlID0gdHJ1ZTtcclxuICAgICAgICBsZXQgc2xhc2hDb3VudCA9IDA7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmaXJzdFBhcnQgPT09ICdzdHJpbmcnICYmIGlzUGF0aFNlcGFyYXRvcihmaXJzdFBhcnQuY2hhckNvZGVBdCgwKSkpIHtcclxuICAgICAgICAgICAgKytzbGFzaENvdW50O1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdExlbiA9IGZpcnN0UGFydC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChmaXJzdExlbiA+IDEgJiYgaXNQYXRoU2VwYXJhdG9yKGZpcnN0UGFydC5jaGFyQ29kZUF0KDEpKSkge1xyXG4gICAgICAgICAgICAgICAgKytzbGFzaENvdW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0TGVuID4gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoZmlyc3RQYXJ0LmNoYXJDb2RlQXQoMikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsrc2xhc2hDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcGF0aCBpbiB0aGUgZmlyc3QgcGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkc1JlcGxhY2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5lZWRzUmVwbGFjZSkge1xyXG4gICAgICAgICAgICAvLyBGaW5kIGFueSBtb3JlIGNvbnNlY3V0aXZlIHNsYXNoZXMgd2UgbmVlZCB0byByZXBsYWNlXHJcbiAgICAgICAgICAgIHdoaWxlIChzbGFzaENvdW50IDwgam9pbmVkLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAgICAgaXNQYXRoU2VwYXJhdG9yKGpvaW5lZC5jaGFyQ29kZUF0KHNsYXNoQ291bnQpKSkge1xyXG4gICAgICAgICAgICAgICAgc2xhc2hDb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIHNsYXNoZXMgaWYgbmVlZGVkXHJcbiAgICAgICAgICAgIGlmIChzbGFzaENvdW50ID49IDIpIHtcclxuICAgICAgICAgICAgICAgIGpvaW5lZCA9IGBcXFxcJHtqb2luZWQuc2xpY2Uoc2xhc2hDb3VudCl9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd2luMzIubm9ybWFsaXplKGpvaW5lZCk7XHJcbiAgICB9LFxyXG4gICAgLy8gSXQgd2lsbCBzb2x2ZSB0aGUgcmVsYXRpdmUgcGF0aCBmcm9tIGBmcm9tYCB0byBgdG9gLCBmb3IgaW5zdGFuY2U6XHJcbiAgICAvLyAgZnJvbSA9ICdDOlxcXFxvcmFuZGVhXFxcXHRlc3RcXFxcYWFhJ1xyXG4gICAgLy8gIHRvID0gJ0M6XFxcXG9yYW5kZWFcXFxcaW1wbFxcXFxiYmInXHJcbiAgICAvLyBUaGUgb3V0cHV0IG9mIHRoZSBmdW5jdGlvbiBzaG91bGQgYmU6ICcuLlxcXFwuLlxcXFxpbXBsXFxcXGJiYidcclxuICAgIHJlbGF0aXZlKGZyb20sIHRvKSB7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcoZnJvbSwgJ2Zyb20nKTtcclxuICAgICAgICB2YWxpZGF0ZVN0cmluZyh0bywgJ3RvJyk7XHJcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZnJvbU9yaWcgPSB3aW4zMi5yZXNvbHZlKGZyb20pO1xyXG4gICAgICAgIGNvbnN0IHRvT3JpZyA9IHdpbjMyLnJlc29sdmUodG8pO1xyXG4gICAgICAgIGlmIChmcm9tT3JpZyA9PT0gdG9PcmlnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZnJvbSA9IGZyb21PcmlnLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdG8gPSB0b09yaWcudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUcmltIGFueSBsZWFkaW5nIGJhY2tzbGFzaGVzXHJcbiAgICAgICAgbGV0IGZyb21TdGFydCA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGZyb21TdGFydCA8IGZyb20ubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgIGZyb21TdGFydCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUcmltIHRyYWlsaW5nIGJhY2tzbGFzaGVzIChhcHBsaWNhYmxlIHRvIFVOQyBwYXRocyBvbmx5KVxyXG4gICAgICAgIGxldCBmcm9tRW5kID0gZnJvbS5sZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKGZyb21FbmQgLSAxID4gZnJvbVN0YXJ0ICYmXHJcbiAgICAgICAgICAgIGZyb20uY2hhckNvZGVBdChmcm9tRW5kIC0gMSkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgZnJvbUVuZC0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmcm9tTGVuID0gZnJvbUVuZCAtIGZyb21TdGFydDtcclxuICAgICAgICAvLyBUcmltIGFueSBsZWFkaW5nIGJhY2tzbGFzaGVzXHJcbiAgICAgICAgbGV0IHRvU3RhcnQgPSAwO1xyXG4gICAgICAgIHdoaWxlICh0b1N0YXJ0IDwgdG8ubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIHRvLmNoYXJDb2RlQXQodG9TdGFydCkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgdG9TdGFydCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUcmltIHRyYWlsaW5nIGJhY2tzbGFzaGVzIChhcHBsaWNhYmxlIHRvIFVOQyBwYXRocyBvbmx5KVxyXG4gICAgICAgIGxldCB0b0VuZCA9IHRvLmxlbmd0aDtcclxuICAgICAgICB3aGlsZSAodG9FbmQgLSAxID4gdG9TdGFydCAmJlxyXG4gICAgICAgICAgICB0by5jaGFyQ29kZUF0KHRvRW5kIC0gMSkgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgdG9FbmQtLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9MZW4gPSB0b0VuZCAtIHRvU3RhcnQ7XHJcbiAgICAgICAgLy8gQ29tcGFyZSBwYXRocyB0byBmaW5kIHRoZSBsb25nZXN0IGNvbW1vbiBwYXRoIGZyb20gcm9vdFxyXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGZyb21MZW4gPCB0b0xlbiA/IGZyb21MZW4gOiB0b0xlbjtcclxuICAgICAgICBsZXQgbGFzdENvbW1vblNlcCA9IC0xO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZyb21Db2RlID0gZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpO1xyXG4gICAgICAgICAgICBpZiAoZnJvbUNvZGUgIT09IHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChmcm9tQ29kZSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gV2UgZm91bmQgYSBtaXNtYXRjaCBiZWZvcmUgdGhlIGZpcnN0IGNvbW1vbiBwYXRoIHNlcGFyYXRvciB3YXMgc2Vlbiwgc29cclxuICAgICAgICAvLyByZXR1cm4gdGhlIG9yaWdpbmFsIGB0b2AuXHJcbiAgICAgICAgaWYgKGkgIT09IGxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAobGFzdENvbW1vblNlcCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0b09yaWc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0b0xlbiA+IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSBleGFjdCBiYXNlIHBhdGggZm9yIGB0b2AuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209J0M6XFxcXGZvb1xcXFxiYXInOyB0bz0nQzpcXFxcZm9vXFxcXGJhclxcXFxiYXonXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvT3JpZy5zbGljZSh0b1N0YXJ0ICsgaSArIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgZnJvbWAgaXMgdGhlIGRldmljZSByb290LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPSdDOlxcXFwnOyB0bz0nQzpcXFxcZm9vJ1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b09yaWcuc2xpY2UodG9TdGFydCArIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmcm9tTGVuID4gbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYHRvYCBpcyB0aGUgZXhhY3QgYmFzZSBwYXRoIGZvciBgZnJvbWAuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209J0M6XFxcXGZvb1xcXFxiYXInOyB0bz0nQzpcXFxcZm9vJ1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIGRldmljZSByb290LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPSdDOlxcXFxmb29cXFxcYmFyJzsgdG89J0M6XFxcXCdcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gMztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobGFzdENvbW1vblNlcCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBvdXQgPSAnJztcclxuICAgICAgICAvLyBHZW5lcmF0ZSB0aGUgcmVsYXRpdmUgcGF0aCBiYXNlZCBvbiB0aGUgcGF0aCBkaWZmZXJlbmNlIGJldHdlZW4gYHRvYCBhbmRcclxuICAgICAgICAvLyBgZnJvbWBcclxuICAgICAgICBmb3IgKGkgPSBmcm9tU3RhcnQgKyBsYXN0Q29tbW9uU2VwICsgMTsgaSA8PSBmcm9tRW5kOyArK2kpIHtcclxuICAgICAgICAgICAgaWYgKGkgPT09IGZyb21FbmQgfHwgZnJvbS5jaGFyQ29kZUF0KGkpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICAgICBvdXQgKz0gb3V0Lmxlbmd0aCA9PT0gMCA/ICcuLicgOiAnXFxcXC4uJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0b1N0YXJ0ICs9IGxhc3RDb21tb25TZXA7XHJcbiAgICAgICAgLy8gTGFzdGx5LCBhcHBlbmQgdGhlIHJlc3Qgb2YgdGhlIGRlc3RpbmF0aW9uIChgdG9gKSBwYXRoIHRoYXQgY29tZXMgYWZ0ZXJcclxuICAgICAgICAvLyB0aGUgY29tbW9uIHBhdGggcGFydHNcclxuICAgICAgICBpZiAob3V0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke291dH0ke3RvT3JpZy5zbGljZSh0b1N0YXJ0LCB0b0VuZCl9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRvT3JpZy5jaGFyQ29kZUF0KHRvU3RhcnQpID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICsrdG9TdGFydDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvT3JpZy5zbGljZSh0b1N0YXJ0LCB0b0VuZCk7XHJcbiAgICB9LFxyXG4gICAgdG9OYW1lc3BhY2VkUGF0aChwYXRoKSB7XHJcbiAgICAgICAgLy8gTm90ZTogdGhpcyB3aWxsICpwcm9iYWJseSogdGhyb3cgc29tZXdoZXJlLlxyXG4gICAgICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgfHwgcGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkUGF0aCA9IHdpbjMyLnJlc29sdmUocGF0aCk7XHJcbiAgICAgICAgaWYgKHJlc29sdmVkUGF0aC5sZW5ndGggPD0gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc29sdmVkUGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIFVOQyByb290XHJcbiAgICAgICAgICAgIGlmIChyZXNvbHZlZFBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IHJlc29sdmVkUGF0aC5jaGFyQ29kZUF0KDIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgIT09IENIQVJfUVVFU1RJT05fTUFSSyAmJiBjb2RlICE9PSBDSEFSX0RPVCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgbm9uLWxvbmcgVU5DIHJvb3QsIGNvbnZlcnQgdGhlIHBhdGggdG8gYSBsb25nIFVOQyBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcXFxcXFxcXD9cXFxcVU5DXFxcXCR7cmVzb2x2ZWRQYXRoLnNsaWNlKDIpfWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNXaW5kb3dzRGV2aWNlUm9vdChyZXNvbHZlZFBhdGguY2hhckNvZGVBdCgwKSkgJiZcclxuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04gJiZcclxuICAgICAgICAgICAgcmVzb2x2ZWRQYXRoLmNoYXJDb2RlQXQoMikgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgLy8gTWF0Y2hlZCBkZXZpY2Ugcm9vdCwgY29udmVydCB0aGUgcGF0aCB0byBhIGxvbmcgVU5DIHBhdGhcclxuICAgICAgICAgICAgcmV0dXJuIGBcXFxcXFxcXD9cXFxcJHtyZXNvbHZlZFBhdGh9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICB9LFxyXG4gICAgZGlybmFtZShwYXRoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcclxuICAgICAgICBpZiAobGVuID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnLic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByb290RW5kID0gLTE7XHJcbiAgICAgICAgbGV0IG9mZnNldCA9IDA7XHJcbiAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcclxuICAgICAgICBpZiAobGVuID09PSAxKSB7XHJcbiAgICAgICAgICAgIC8vIGBwYXRoYCBjb250YWlucyBqdXN0IGEgcGF0aCBzZXBhcmF0b3IsIGV4aXQgZWFybHkgdG8gYXZvaWRcclxuICAgICAgICAgICAgLy8gdW5uZWNlc3Nhcnkgd29yayBvciBhIGRvdC5cclxuICAgICAgICAgICAgcmV0dXJuIGlzUGF0aFNlcGFyYXRvcihjb2RlKSA/IHBhdGggOiAnLic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRyeSB0byBtYXRjaCBhIHJvb3RcclxuICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XHJcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIFVOQyByb290XHJcbiAgICAgICAgICAgIHJvb3RFbmQgPSBvZmZzZXQgPSAxO1xyXG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgxKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQgZG91YmxlIHBhdGggc2VwYXJhdG9yIGF0IGJlZ2lubmluZ1xyXG4gICAgICAgICAgICAgICAgbGV0IGogPSAyO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBwYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbiAmJiBpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgbGVuICYmIGogIT09IGxhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoIDEgb3IgbW9yZSBub24tcGF0aCBzZXBhcmF0b3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmICFpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGopKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdCBvbmx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiAhPT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCBhIFVOQyByb290IHdpdGggbGVmdG92ZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPZmZzZXQgYnkgMSB0byBpbmNsdWRlIHRoZSBzZXBhcmF0b3IgYWZ0ZXIgdGhlIFVOQyByb290IHRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cmVhdCBpdCBhcyBhIFwibm9ybWFsIHJvb3RcIiBvbiB0b3Agb2YgYSAoVU5DKSByb290XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290RW5kID0gb2Zmc2V0ID0gaiArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gUG9zc2libGUgZGV2aWNlIHJvb3RcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNXaW5kb3dzRGV2aWNlUm9vdChjb2RlKSAmJiBwYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04pIHtcclxuICAgICAgICAgICAgcm9vdEVuZCA9IGxlbiA+IDIgJiYgaXNQYXRoU2VwYXJhdG9yKHBhdGguY2hhckNvZGVBdCgyKSkgPyAzIDogMjtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gcm9vdEVuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGVuZCA9IC0xO1xyXG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBsZW4gLSAxOyBpID49IG9mZnNldDsgLS1pKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGkpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmQgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3JcclxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIGlmIChyb290RW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbmQgPSByb290RW5kO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGF0aC5zbGljZSgwLCBlbmQpO1xyXG4gICAgfSxcclxuICAgIGJhc2VuYW1lKHBhdGgsIGV4dCkge1xyXG4gICAgICAgIGlmIChleHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZVN0cmluZyhleHQsICdleHQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICBsZXQgc3RhcnQgPSAwO1xyXG4gICAgICAgIGxldCBlbmQgPSAtMTtcclxuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcclxuICAgICAgICBsZXQgaTtcclxuICAgICAgICAvLyBDaGVjayBmb3IgYSBkcml2ZSBsZXR0ZXIgcHJlZml4IHNvIGFzIG5vdCB0byBtaXN0YWtlIHRoZSBmb2xsb3dpbmdcclxuICAgICAgICAvLyBwYXRoIHNlcGFyYXRvciBhcyBhbiBleHRyYSBzZXBhcmF0b3IgYXQgdGhlIGVuZCBvZiB0aGUgcGF0aCB0aGF0IGNhbiBiZVxyXG4gICAgICAgIC8vIGRpc3JlZ2FyZGVkXHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID49IDIgJiZcclxuICAgICAgICAgICAgaXNXaW5kb3dzRGV2aWNlUm9vdChwYXRoLmNoYXJDb2RlQXQoMCkpICYmXHJcbiAgICAgICAgICAgIHBhdGguY2hhckNvZGVBdCgxKSA9PT0gQ0hBUl9DT0xPTikge1xyXG4gICAgICAgICAgICBzdGFydCA9IDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChleHQgIT09IHVuZGVmaW5lZCAmJiBleHQubGVuZ3RoID4gMCAmJiBleHQubGVuZ3RoIDw9IHBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmIChleHQgPT09IHBhdGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgZXh0SWR4ID0gZXh0Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdE5vblNsYXNoRW5kID0gLTE7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgLS1pKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0Tm9uU2xhc2hFbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCByZW1lbWJlciB0aGlzIGluZGV4IGluIGNhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCBpdCBpZiB0aGUgZXh0ZW5zaW9uIGVuZHMgdXAgbm90IG1hdGNoaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRJZHggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gbWF0Y2ggdGhlIGV4cGxpY2l0IGV4dGVuc2lvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gZXh0LmNoYXJDb2RlQXQoZXh0SWR4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0tZXh0SWR4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgdGhlIGV4dGVuc2lvbiwgc28gbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyIHBhdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0ZW5zaW9uIGRvZXMgbm90IG1hdGNoLCBzbyBvdXIgcmVzdWx0IGlzIHRoZSBlbnRpcmUgcGF0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRJZHggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcclxuICAgICAgICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgZW5kID0gcGF0aC5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgLS1pKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KGkpKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcclxuICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGVuZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcclxuICAgICAgICAgICAgICAgIC8vIHBhdGggY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XHJcbiAgICB9LFxyXG4gICAgZXh0bmFtZShwYXRoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICBsZXQgc3RhcnQgPSAwO1xyXG4gICAgICAgIGxldCBzdGFydERvdCA9IC0xO1xyXG4gICAgICAgIGxldCBzdGFydFBhcnQgPSAwO1xyXG4gICAgICAgIGxldCBlbmQgPSAtMTtcclxuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcclxuICAgICAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXHJcbiAgICAgICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcclxuICAgICAgICBsZXQgcHJlRG90U3RhdGUgPSAwO1xyXG4gICAgICAgIC8vIENoZWNrIGZvciBhIGRyaXZlIGxldHRlciBwcmVmaXggc28gYXMgbm90IHRvIG1pc3Rha2UgdGhlIGZvbGxvd2luZ1xyXG4gICAgICAgIC8vIHBhdGggc2VwYXJhdG9yIGFzIGFuIGV4dHJhIHNlcGFyYXRvciBhdCB0aGUgZW5kIG9mIHRoZSBwYXRoIHRoYXQgY2FuIGJlXHJcbiAgICAgICAgLy8gZGlzcmVnYXJkZWRcclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPj0gMiAmJlxyXG4gICAgICAgICAgICBwYXRoLmNoYXJDb2RlQXQoMSkgPT09IENIQVJfQ09MT04gJiZcclxuICAgICAgICAgICAgaXNXaW5kb3dzRGV2aWNlUm9vdChwYXRoLmNoYXJDb2RlQXQoMCkpKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnRQYXJ0ID0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSBzdGFydDsgLS1pKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXHJcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxyXG4gICAgICAgICAgICAgICAgLy8gZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGVuZCA9IGkgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0RPVCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fFxyXG4gICAgICAgICAgICBlbmQgPT09IC0xIHx8XHJcbiAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XHJcbiAgICAgICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XHJcbiAgICAgICAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcclxuICAgICAgICAgICAgKHByZURvdFN0YXRlID09PSAxICYmXHJcbiAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gZW5kIC0gMSAmJlxyXG4gICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XHJcbiAgICB9LFxyXG4gICAgZm9ybWF0OiBfZm9ybWF0LmJpbmQobnVsbCwgJ1xcXFwnKSxcclxuICAgIHBhcnNlKHBhdGgpIHtcclxuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xyXG4gICAgICAgIGNvbnN0IHJldCA9IHsgcm9vdDogJycsIGRpcjogJycsIGJhc2U6ICcnLCBleHQ6ICcnLCBuYW1lOiAnJyB9O1xyXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsZW4gPSBwYXRoLmxlbmd0aDtcclxuICAgICAgICBsZXQgcm9vdEVuZCA9IDA7XHJcbiAgICAgICAgbGV0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMSkge1xyXG4gICAgICAgICAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGNvZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBgcGF0aGAgY29udGFpbnMganVzdCBhIHBhdGggc2VwYXJhdG9yLCBleGl0IGVhcmx5IHRvIGF2b2lkXHJcbiAgICAgICAgICAgICAgICAvLyB1bm5lY2Vzc2FyeSB3b3JrXHJcbiAgICAgICAgICAgICAgICByZXQucm9vdCA9IHJldC5kaXIgPSBwYXRoO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXQuYmFzZSA9IHJldC5uYW1lID0gcGF0aDtcclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIGEgcm9vdFxyXG4gICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcclxuICAgICAgICAgICAgLy8gUG9zc2libGUgVU5DIHJvb3RcclxuICAgICAgICAgICAgcm9vdEVuZCA9IDE7XHJcbiAgICAgICAgICAgIGlmIChpc1BhdGhTZXBhcmF0b3IocGF0aC5jaGFyQ29kZUF0KDEpKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTWF0Y2hlZCBkb3VibGUgcGF0aCBzZXBhcmF0b3IgYXQgYmVnaW5uaW5nXHJcbiAgICAgICAgICAgICAgICBsZXQgaiA9IDI7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGFzdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAvLyBNYXRjaCAxIG9yIG1vcmUgbm9uLXBhdGggc2VwYXJhdG9yc1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgIWlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaisrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hdGNoZWQhXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIHBhdGggc2VwYXJhdG9yc1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuICYmIGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPCBsZW4gJiYgaiAhPT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVkIVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2ggMSBvciBtb3JlIG5vbi1wYXRoIHNlcGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsZW4gJiYgIWlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoaikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGxlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCBhIFVOQyByb290IG9ubHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbmQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGogIT09IGxhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG1hdGNoZWQgYSBVTkMgcm9vdCB3aXRoIGxlZnRvdmVyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEVuZCA9IGogKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzV2luZG93c0RldmljZVJvb3QoY29kZSkgJiYgcGF0aC5jaGFyQ29kZUF0KDEpID09PSBDSEFSX0NPTE9OKSB7XHJcbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIGRldmljZSByb290XHJcbiAgICAgICAgICAgIGlmIChsZW4gPD0gMikge1xyXG4gICAgICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBkcml2ZSByb290LCBleGl0IGVhcmx5IHRvIGF2b2lkXHJcbiAgICAgICAgICAgICAgICAvLyB1bm5lY2Vzc2FyeSB3b3JrXHJcbiAgICAgICAgICAgICAgICByZXQucm9vdCA9IHJldC5kaXIgPSBwYXRoO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByb290RW5kID0gMjtcclxuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihwYXRoLmNoYXJDb2RlQXQoMikpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYHBhdGhgIGNvbnRhaW5zIGp1c3QgYSBkcml2ZSByb290LCBleGl0IGVhcmx5IHRvIGF2b2lkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdW5uZWNlc3Nhcnkgd29ya1xyXG4gICAgICAgICAgICAgICAgICAgIHJldC5yb290ID0gcmV0LmRpciA9IHBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJvb3RFbmQgPSAzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyb290RW5kID4gMCkge1xyXG4gICAgICAgICAgICByZXQucm9vdCA9IHBhdGguc2xpY2UoMCwgcm9vdEVuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzdGFydERvdCA9IC0xO1xyXG4gICAgICAgIGxldCBzdGFydFBhcnQgPSByb290RW5kO1xyXG4gICAgICAgIGxldCBlbmQgPSAtMTtcclxuICAgICAgICBsZXQgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcclxuICAgICAgICBsZXQgaSA9IHBhdGgubGVuZ3RoIC0gMTtcclxuICAgICAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXHJcbiAgICAgICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcclxuICAgICAgICBsZXQgcHJlRG90U3RhdGUgPSAwO1xyXG4gICAgICAgIC8vIEdldCBub24tZGlyIGluZm9cclxuICAgICAgICBmb3IgKDsgaSA+PSByb290RW5kOyAtLWkpIHtcclxuICAgICAgICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcclxuICAgICAgICAgICAgaWYgKGlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcclxuICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXHJcbiAgICAgICAgICAgICAgICAvLyBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZW5kID0gaSArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRE9UKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9IGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgZ29vZCBjaGFuY2UgYXQgaGF2aW5nIGEgbm9uLWVtcHR5IGV4dGVuc2lvblxyXG4gICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW5kICE9PSAtMSkge1xyXG4gICAgICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xIHx8XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdFxyXG4gICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPT09IDAgfHxcclxuICAgICAgICAgICAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcclxuICAgICAgICAgICAgICAgIChwcmVEb3RTdGF0ZSA9PT0gMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpKSB7XHJcbiAgICAgICAgICAgICAgICByZXQuYmFzZSA9IHJldC5uYW1lID0gcGF0aC5zbGljZShzdGFydFBhcnQsIGVuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBzdGFydERvdCk7XHJcbiAgICAgICAgICAgICAgICByZXQuYmFzZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgcmV0LmV4dCA9IHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgdGhlIGRpcmVjdG9yeSBpcyB0aGUgcm9vdCwgdXNlIHRoZSBlbnRpcmUgcm9vdCBhcyB0aGUgYGRpcmAgaW5jbHVkaW5nXHJcbiAgICAgICAgLy8gdGhlIHRyYWlsaW5nIHNsYXNoIGlmIGFueSAoYEM6XFxhYmNgIC0+IGBDOlxcYCkuIE90aGVyd2lzZSwgc3RyaXAgb3V0IHRoZVxyXG4gICAgICAgIC8vIHRyYWlsaW5nIHNsYXNoIChgQzpcXGFiY1xcZGVmYCAtPiBgQzpcXGFiY2ApLlxyXG4gICAgICAgIGlmIChzdGFydFBhcnQgPiAwICYmIHN0YXJ0UGFydCAhPT0gcm9vdEVuZCkge1xyXG4gICAgICAgICAgICByZXQuZGlyID0gcGF0aC5zbGljZSgwLCBzdGFydFBhcnQgLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldC5kaXIgPSByZXQucm9vdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH0sXHJcbiAgICBzZXA6ICdcXFxcJyxcclxuICAgIGRlbGltaXRlcjogJzsnLFxyXG4gICAgd2luMzI6IG51bGwsXHJcbiAgICBwb3NpeDogbnVsbFxyXG59O1xyXG5jb25zdCBwb3NpeEN3ZCA9ICgoKSA9PiB7XHJcbiAgICBpZiAocGxhdGZvcm1Jc1dpbjMyKSB7XHJcbiAgICAgICAgLy8gQ29udmVydHMgV2luZG93cycgYmFja3NsYXNoIHBhdGggc2VwYXJhdG9ycyB0byBQT1NJWCBmb3J3YXJkIHNsYXNoZXNcclxuICAgICAgICAvLyBhbmQgdHJ1bmNhdGVzIGFueSBkcml2ZSBpbmRpY2F0b3JcclxuICAgICAgICBjb25zdCByZWdleHAgPSAvXFxcXC9nO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN3ZCA9IHByb2Nlc3MuY3dkKCkucmVwbGFjZShyZWdleHAsICcvJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBjd2Quc2xpY2UoY3dkLmluZGV4T2YoJy8nKSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8vIFdlJ3JlIGFscmVhZHkgb24gUE9TSVgsIG5vIG5lZWQgZm9yIGFueSB0cmFuc2Zvcm1hdGlvbnNcclxuICAgIHJldHVybiAoKSA9PiBwcm9jZXNzLmN3ZCgpO1xyXG59KSgpO1xyXG5leHBvcnQgY29uc3QgcG9zaXggPSB7XHJcbiAgICAvLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXHJcbiAgICByZXNvbHZlKC4uLnBhdGhTZWdtZW50cykge1xyXG4gICAgICAgIGxldCByZXNvbHZlZFBhdGggPSAnJztcclxuICAgICAgICBsZXQgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoU2VnbWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBpID49IDAgPyBwYXRoU2VnbWVudHNbaV0gOiBwb3NpeEN3ZCgpO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xyXG4gICAgICAgICAgICAvLyBTa2lwIGVtcHR5IGVudHJpZXNcclxuICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvbHZlZFBhdGggPSBgJHtwYXRofS8ke3Jlc29sdmVkUGF0aH1gO1xyXG4gICAgICAgICAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcclxuICAgICAgICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcclxuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcclxuICAgICAgICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVTdHJpbmcocmVzb2x2ZWRQYXRoLCAhcmVzb2x2ZWRBYnNvbHV0ZSwgJy8nLCBpc1Bvc2l4UGF0aFNlcGFyYXRvcik7XHJcbiAgICAgICAgaWYgKHJlc29sdmVkQWJzb2x1dGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAvJHtyZXNvbHZlZFBhdGh9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkUGF0aC5sZW5ndGggPiAwID8gcmVzb2x2ZWRQYXRoIDogJy4nO1xyXG4gICAgfSxcclxuICAgIG5vcm1hbGl6ZShwYXRoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVTdHJpbmcocGF0aCwgJ3BhdGgnKTtcclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICcuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaXNBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIO1xyXG4gICAgICAgIGNvbnN0IHRyYWlsaW5nU2VwYXJhdG9yID0gcGF0aC5jaGFyQ29kZUF0KHBhdGgubGVuZ3RoIC0gMSkgPT09IENIQVJfRk9SV0FSRF9TTEFTSDtcclxuICAgICAgICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcclxuICAgICAgICBwYXRoID0gbm9ybWFsaXplU3RyaW5nKHBhdGgsICFpc0Fic29sdXRlLCAnLycsIGlzUG9zaXhQYXRoU2VwYXJhdG9yKTtcclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGlzQWJzb2x1dGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnLyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRyYWlsaW5nU2VwYXJhdG9yID8gJy4vJyA6ICcuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRyYWlsaW5nU2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgIHBhdGggKz0gJy8nO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNBYnNvbHV0ZSA/IGAvJHtwYXRofWAgOiBwYXRoO1xyXG4gICAgfSxcclxuICAgIGlzQWJzb2x1dGUocGF0aCkge1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoID4gMCAmJiBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IENIQVJfRk9SV0FSRF9TTEFTSDtcclxuICAgIH0sXHJcbiAgICBqb2luKC4uLnBhdGhzKSB7XHJcbiAgICAgICAgaWYgKHBhdGhzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgam9pbmVkO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgYXJnID0gcGF0aHNbaV07XHJcbiAgICAgICAgICAgIHZhbGlkYXRlU3RyaW5nKGFyZywgJ3BhdGgnKTtcclxuICAgICAgICAgICAgaWYgKGFyZy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoam9pbmVkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBqb2luZWQgPSBhcmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBqb2luZWQgKz0gYC8ke2FyZ31gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChqb2luZWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcG9zaXgubm9ybWFsaXplKGpvaW5lZCk7XHJcbiAgICB9LFxyXG4gICAgcmVsYXRpdmUoZnJvbSwgdG8pIHtcclxuICAgICAgICB2YWxpZGF0ZVN0cmluZyhmcm9tLCAnZnJvbScpO1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHRvLCAndG8nKTtcclxuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUcmltIGxlYWRpbmcgZm9yd2FyZCBzbGFzaGVzLlxyXG4gICAgICAgIGZyb20gPSBwb3NpeC5yZXNvbHZlKGZyb20pO1xyXG4gICAgICAgIHRvID0gcG9zaXgucmVzb2x2ZSh0byk7XHJcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZnJvbVN0YXJ0ID0gMTtcclxuICAgICAgICBjb25zdCBmcm9tRW5kID0gZnJvbS5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgZnJvbUxlbiA9IGZyb21FbmQgLSBmcm9tU3RhcnQ7XHJcbiAgICAgICAgY29uc3QgdG9TdGFydCA9IDE7XHJcbiAgICAgICAgY29uc3QgdG9MZW4gPSB0by5sZW5ndGggLSB0b1N0YXJ0O1xyXG4gICAgICAgIC8vIENvbXBhcmUgcGF0aHMgdG8gZmluZCB0aGUgbG9uZ2VzdCBjb21tb24gcGF0aCBmcm9tIHJvb3RcclxuICAgICAgICBjb25zdCBsZW5ndGggPSAoZnJvbUxlbiA8IHRvTGVuID8gZnJvbUxlbiA6IHRvTGVuKTtcclxuICAgICAgICBsZXQgbGFzdENvbW1vblNlcCA9IC0xO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZyb21Db2RlID0gZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpO1xyXG4gICAgICAgICAgICBpZiAoZnJvbUNvZGUgIT09IHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChmcm9tQ29kZSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaSA9PT0gbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmICh0b0xlbiA+IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgZnJvbWAgaXMgdGhlIGV4YWN0IGJhc2UgcGF0aCBmb3IgYHRvYC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nL2Zvby9iYXInOyB0bz0nL2Zvby9iYXIvYmF6J1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSArIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgZnJvbWAgaXMgdGhlIHJvb3RcclxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nLyc7IHRvPScvZm9vJ1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZnJvbUxlbiA+IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZyb20uY2hhckNvZGVBdChmcm9tU3RhcnQgKyBpKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYHRvYCBpcyB0aGUgZXhhY3QgYmFzZSBwYXRoIGZvciBgZnJvbWAuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy9mb28vYmFyL2Jheic7IHRvPScvZm9vL2JhcidcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgdG9gIGlzIHRoZSByb290LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPScvZm9vL2Jhcic7IHRvPScvJ1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RDb21tb25TZXAgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBvdXQgPSAnJztcclxuICAgICAgICAvLyBHZW5lcmF0ZSB0aGUgcmVsYXRpdmUgcGF0aCBiYXNlZCBvbiB0aGUgcGF0aCBkaWZmZXJlbmNlIGJldHdlZW4gYHRvYFxyXG4gICAgICAgIC8vIGFuZCBgZnJvbWAuXHJcbiAgICAgICAgZm9yIChpID0gZnJvbVN0YXJ0ICsgbGFzdENvbW1vblNlcCArIDE7IGkgPD0gZnJvbUVuZDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChpID09PSBmcm9tRW5kIHx8IGZyb20uY2hhckNvZGVBdChpKSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICAgICBvdXQgKz0gb3V0Lmxlbmd0aCA9PT0gMCA/ICcuLicgOiAnLy4uJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBMYXN0bHksIGFwcGVuZCB0aGUgcmVzdCBvZiB0aGUgZGVzdGluYXRpb24gKGB0b2ApIHBhdGggdGhhdCBjb21lcyBhZnRlclxyXG4gICAgICAgIC8vIHRoZSBjb21tb24gcGF0aCBwYXJ0cy5cclxuICAgICAgICByZXR1cm4gYCR7b3V0fSR7dG8uc2xpY2UodG9TdGFydCArIGxhc3RDb21tb25TZXApfWA7XHJcbiAgICB9LFxyXG4gICAgdG9OYW1lc3BhY2VkUGF0aChwYXRoKSB7XHJcbiAgICAgICAgLy8gTm9uLW9wIG9uIHBvc2l4IHN5c3RlbXNcclxuICAgICAgICByZXR1cm4gcGF0aDtcclxuICAgIH0sXHJcbiAgICBkaXJuYW1lKHBhdGgpIHtcclxuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xyXG4gICAgICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBoYXNSb290ID0gcGF0aC5jaGFyQ29kZUF0KDApID09PSBDSEFSX0ZPUldBUkRfU0xBU0g7XHJcbiAgICAgICAgbGV0IGVuZCA9IC0xO1xyXG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMTsgLS1pKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaSkgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmQgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3JcclxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoYXNSb290ID8gJy8nIDogJy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFzUm9vdCAmJiBlbmQgPT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcvLyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoLnNsaWNlKDAsIGVuZCk7XHJcbiAgICB9LFxyXG4gICAgYmFzZW5hbWUocGF0aCwgZXh0KSB7XHJcbiAgICAgICAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlU3RyaW5nKGV4dCwgJ2V4dCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWxpZGF0ZVN0cmluZyhwYXRoLCAncGF0aCcpO1xyXG4gICAgICAgIGxldCBzdGFydCA9IDA7XHJcbiAgICAgICAgbGV0IGVuZCA9IC0xO1xyXG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xyXG4gICAgICAgIGxldCBpO1xyXG4gICAgICAgIGlmIChleHQgIT09IHVuZGVmaW5lZCAmJiBleHQubGVuZ3RoID4gMCAmJiBleHQubGVuZ3RoIDw9IHBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmIChleHQgPT09IHBhdGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgZXh0SWR4ID0gZXh0Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdE5vblNsYXNoRW5kID0gLTE7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3ROb25TbGFzaEVuZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIHJlbWVtYmVyIHRoaXMgaW5kZXggaW4gY2FzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIGl0IGlmIHRoZSBleHRlbnNpb24gZW5kcyB1cCBub3QgbWF0Y2hpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Tm9uU2xhc2hFbmQgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dElkeCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyeSB0byBtYXRjaCB0aGUgZXhwbGljaXQgZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSBleHQuY2hhckNvZGVBdChleHRJZHgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLS1leHRJZHggPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbWF0Y2hlZCB0aGUgZXh0ZW5zaW9uLCBzbyBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXIgcGF0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRlbnNpb24gZG9lcyBub3QgbWF0Y2gsIHNvIG91ciByZXN1bHQgaXMgdGhlIGVudGlyZSBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dElkeCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCkge1xyXG4gICAgICAgICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBwYXRoLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGkpID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXHJcbiAgICAgICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcclxuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXHJcbiAgICAgICAgICAgICAgICAvLyBwYXRoIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBpICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xyXG4gICAgfSxcclxuICAgIGV4dG5hbWUocGF0aCkge1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgbGV0IHN0YXJ0RG90ID0gLTE7XHJcbiAgICAgICAgbGV0IHN0YXJ0UGFydCA9IDA7XHJcbiAgICAgICAgbGV0IGVuZCA9IC0xO1xyXG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xyXG4gICAgICAgIC8vIFRyYWNrIHRoZSBzdGF0ZSBvZiBjaGFyYWN0ZXJzIChpZiBhbnkpIHdlIHNlZSBiZWZvcmUgb3VyIGZpcnN0IGRvdCBhbmRcclxuICAgICAgICAvLyBhZnRlciBhbnkgcGF0aCBzZXBhcmF0b3Igd2UgZmluZFxyXG4gICAgICAgIGxldCBwcmVEb3RTdGF0ZSA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcclxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcclxuICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXHJcbiAgICAgICAgICAgICAgICAvLyBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZW5kID0gaSArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRE9UKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9IGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgZ29vZCBjaGFuY2UgYXQgaGF2aW5nIGEgbm9uLWVtcHR5IGV4dGVuc2lvblxyXG4gICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xIHx8XHJcbiAgICAgICAgICAgIGVuZCA9PT0gLTEgfHxcclxuICAgICAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcclxuICAgICAgICAgICAgcHJlRG90U3RhdGUgPT09IDAgfHxcclxuICAgICAgICAgICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xyXG4gICAgICAgICAgICAocHJlRG90U3RhdGUgPT09IDEgJiZcclxuICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmXHJcbiAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcclxuICAgIH0sXHJcbiAgICBmb3JtYXQ6IF9mb3JtYXQuYmluZChudWxsLCAnLycpLFxyXG4gICAgcGFyc2UocGF0aCkge1xyXG4gICAgICAgIHZhbGlkYXRlU3RyaW5nKHBhdGgsICdwYXRoJyk7XHJcbiAgICAgICAgY29uc3QgcmV0ID0geyByb290OiAnJywgZGlyOiAnJywgYmFzZTogJycsIGV4dDogJycsIG5hbWU6ICcnIH07XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGlzQWJzb2x1dGUgPSBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IENIQVJfRk9SV0FSRF9TTEFTSDtcclxuICAgICAgICBsZXQgc3RhcnQ7XHJcbiAgICAgICAgaWYgKGlzQWJzb2x1dGUpIHtcclxuICAgICAgICAgICAgcmV0LnJvb3QgPSAnLyc7XHJcbiAgICAgICAgICAgIHN0YXJ0ID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHN0YXJ0RG90ID0gLTE7XHJcbiAgICAgICAgbGV0IHN0YXJ0UGFydCA9IDA7XHJcbiAgICAgICAgbGV0IGVuZCA9IC0xO1xyXG4gICAgICAgIGxldCBtYXRjaGVkU2xhc2ggPSB0cnVlO1xyXG4gICAgICAgIGxldCBpID0gcGF0aC5sZW5ndGggLSAxO1xyXG4gICAgICAgIC8vIFRyYWNrIHRoZSBzdGF0ZSBvZiBjaGFyYWN0ZXJzIChpZiBhbnkpIHdlIHNlZSBiZWZvcmUgb3VyIGZpcnN0IGRvdCBhbmRcclxuICAgICAgICAvLyBhZnRlciBhbnkgcGF0aCBzZXBhcmF0b3Igd2UgZmluZFxyXG4gICAgICAgIGxldCBwcmVEb3RTdGF0ZSA9IDA7XHJcbiAgICAgICAgLy8gR2V0IG5vbi1kaXIgaW5mb1xyXG4gICAgICAgIGZvciAoOyBpID49IHN0YXJ0OyAtLWkpIHtcclxuICAgICAgICAgICAgY29uc3QgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcclxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcclxuICAgICAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXHJcbiAgICAgICAgICAgICAgICAvLyBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZW5kID0gaSArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRE9UKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cclxuICAgICAgICAgICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9IGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgZ29vZCBjaGFuY2UgYXQgaGF2aW5nIGEgbm9uLWVtcHR5IGV4dGVuc2lvblxyXG4gICAgICAgICAgICAgICAgcHJlRG90U3RhdGUgPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW5kICE9PSAtMSkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHN0YXJ0UGFydCA9PT0gMCAmJiBpc0Fic29sdXRlID8gMSA6IHN0YXJ0UGFydDtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fFxyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcclxuICAgICAgICAgICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXHJcbiAgICAgICAgICAgICAgICAocHJlRG90U3RhdGUgPT09IDEgJiZcclxuICAgICAgICAgICAgICAgICAgICBzdGFydERvdCA9PT0gZW5kIC0gMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0LmJhc2UgPSByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnQsIHN0YXJ0RG90KTtcclxuICAgICAgICAgICAgICAgIHJldC5iYXNlID0gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcclxuICAgICAgICAgICAgICAgIHJldC5leHQgPSBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFydFBhcnQgPiAwKSB7XHJcbiAgICAgICAgICAgIHJldC5kaXIgPSBwYXRoLnNsaWNlKDAsIHN0YXJ0UGFydCAtIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc0Fic29sdXRlKSB7XHJcbiAgICAgICAgICAgIHJldC5kaXIgPSAnLyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9LFxyXG4gICAgc2VwOiAnLycsXHJcbiAgICBkZWxpbWl0ZXI6ICc6JyxcclxuICAgIHdpbjMyOiBudWxsLFxyXG4gICAgcG9zaXg6IG51bGxcclxufTtcclxucG9zaXgud2luMzIgPSB3aW4zMi53aW4zMiA9IHdpbjMyO1xyXG5wb3NpeC5wb3NpeCA9IHdpbjMyLnBvc2l4ID0gcG9zaXg7XHJcbmV4cG9ydCBjb25zdCBub3JtYWxpemUgPSAocGxhdGZvcm1Jc1dpbjMyID8gd2luMzIubm9ybWFsaXplIDogcG9zaXgubm9ybWFsaXplKTtcclxuZXhwb3J0IGNvbnN0IHJlc29sdmUgPSAocGxhdGZvcm1Jc1dpbjMyID8gd2luMzIucmVzb2x2ZSA6IHBvc2l4LnJlc29sdmUpO1xyXG5leHBvcnQgY29uc3QgcmVsYXRpdmUgPSAocGxhdGZvcm1Jc1dpbjMyID8gd2luMzIucmVsYXRpdmUgOiBwb3NpeC5yZWxhdGl2ZSk7XHJcbmV4cG9ydCBjb25zdCBkaXJuYW1lID0gKHBsYXRmb3JtSXNXaW4zMiA/IHdpbjMyLmRpcm5hbWUgOiBwb3NpeC5kaXJuYW1lKTtcclxuZXhwb3J0IGNvbnN0IGJhc2VuYW1lID0gKHBsYXRmb3JtSXNXaW4zMiA/IHdpbjMyLmJhc2VuYW1lIDogcG9zaXguYmFzZW5hbWUpO1xyXG5leHBvcnQgY29uc3QgZXh0bmFtZSA9IChwbGF0Zm9ybUlzV2luMzIgPyB3aW4zMi5leHRuYW1lIDogcG9zaXguZXh0bmFtZSk7XHJcbmV4cG9ydCBjb25zdCBzZXAgPSAocGxhdGZvcm1Jc1dpbjMyID8gd2luMzIuc2VwIDogcG9zaXguc2VwKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/path.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/platform.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/platform.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LANGUAGE_DEFAULT: () => (/* binding */ LANGUAGE_DEFAULT),\n/* harmony export */   OS: () => (/* binding */ OS),\n/* harmony export */   isAndroid: () => (/* binding */ isAndroid),\n/* harmony export */   isChrome: () => (/* binding */ isChrome),\n/* harmony export */   isEdge: () => (/* binding */ isEdge),\n/* harmony export */   isFirefox: () => (/* binding */ isFirefox),\n/* harmony export */   isIOS: () => (/* binding */ isIOS),\n/* harmony export */   isLinux: () => (/* binding */ isLinux),\n/* harmony export */   isLittleEndian: () => (/* binding */ isLittleEndian),\n/* harmony export */   isMacintosh: () => (/* binding */ isMacintosh),\n/* harmony export */   isMobile: () => (/* binding */ isMobile),\n/* harmony export */   isNative: () => (/* binding */ isNative),\n/* harmony export */   isSafari: () => (/* binding */ isSafari),\n/* harmony export */   isWeb: () => (/* binding */ isWeb),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker),\n/* harmony export */   isWindows: () => (/* binding */ isWindows),\n/* harmony export */   language: () => (/* binding */ language),\n/* harmony export */   setTimeout0: () => (/* binding */ setTimeout0),\n/* harmony export */   setTimeout0IsFaster: () => (/* binding */ setTimeout0IsFaster),\n/* harmony export */   userAgent: () => (/* binding */ userAgent),\n/* harmony export */   webWorkerOrigin: () => (/* binding */ webWorkerOrigin)\n/* harmony export */ });\n/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../nls.js */ \"./node_modules/monaco-editor/esm/vs/nls.js\");\nvar _a, _b;\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nconst LANGUAGE_DEFAULT = 'en';\r\nlet _isWindows = false;\r\nlet _isMacintosh = false;\r\nlet _isLinux = false;\r\nlet _isLinuxSnap = false;\r\nlet _isNative = false;\r\nlet _isWeb = false;\r\nlet _isElectron = false;\r\nlet _isIOS = false;\r\nlet _isCI = false;\r\nlet _isMobile = false;\r\nlet _locale = undefined;\r\nlet _language = LANGUAGE_DEFAULT;\r\nlet _platformLocale = LANGUAGE_DEFAULT;\r\nlet _translationsConfigFile = undefined;\r\nlet _userAgent = undefined;\r\nconst $globalThis = globalThis;\r\nlet nodeProcess = undefined;\r\nif (typeof $globalThis.vscode !== 'undefined' && typeof $globalThis.vscode.process !== 'undefined') {\r\n    // Native environment (sandboxed)\r\n    nodeProcess = $globalThis.vscode.process;\r\n}\r\nelse if (typeof process !== 'undefined' && typeof ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) === 'string') {\r\n    // Native environment (non-sandboxed)\r\n    nodeProcess = process;\r\n}\r\nconst isElectronProcess = typeof ((_b = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _b === void 0 ? void 0 : _b.electron) === 'string';\r\nconst isElectronRenderer = isElectronProcess && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.type) === 'renderer';\r\n// Native environment\r\nif (typeof nodeProcess === 'object') {\r\n    _isWindows = (nodeProcess.platform === 'win32');\r\n    _isMacintosh = (nodeProcess.platform === 'darwin');\r\n    _isLinux = (nodeProcess.platform === 'linux');\r\n    _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\r\n    _isElectron = isElectronProcess;\r\n    _isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];\r\n    _locale = LANGUAGE_DEFAULT;\r\n    _language = LANGUAGE_DEFAULT;\r\n    const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\r\n    if (rawNlsConfig) {\r\n        try {\r\n            const nlsConfig = JSON.parse(rawNlsConfig);\r\n            const resolved = nlsConfig.availableLanguages['*'];\r\n            _locale = nlsConfig.locale;\r\n            _platformLocale = nlsConfig.osLocale;\r\n            // VSCode's default language is 'en'\r\n            _language = resolved ? resolved : LANGUAGE_DEFAULT;\r\n            _translationsConfigFile = nlsConfig._translationsConfigFile;\r\n        }\r\n        catch (e) {\r\n        }\r\n    }\r\n    _isNative = true;\r\n}\r\n// Web environment\r\nelse if (typeof navigator === 'object' && !isElectronRenderer) {\r\n    _userAgent = navigator.userAgent;\r\n    _isWindows = _userAgent.indexOf('Windows') >= 0;\r\n    _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\r\n    _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\r\n    _isLinux = _userAgent.indexOf('Linux') >= 0;\r\n    _isMobile = (_userAgent === null || _userAgent === void 0 ? void 0 : _userAgent.indexOf('Mobi')) >= 0;\r\n    _isWeb = true;\r\n    const configuredLocale = _nls_js__WEBPACK_IMPORTED_MODULE_0__.getConfiguredDefaultLocale(\r\n    // This call _must_ be done in the file that calls `nls.getConfiguredDefaultLocale`\r\n    // to ensure that the NLS AMD Loader plugin has been loaded and configured.\r\n    // This is because the loader plugin decides what the default locale is based on\r\n    // how it's able to resolve the strings.\r\n    _nls_js__WEBPACK_IMPORTED_MODULE_0__.localize({ key: 'ensureLoaderPluginIsLoaded', comment: ['{Locked}'] }, '_'));\r\n    _locale = configuredLocale || LANGUAGE_DEFAULT;\r\n    _language = _locale;\r\n    _platformLocale = navigator.language;\r\n}\r\n// Unknown environment\r\nelse {\r\n    console.error('Unable to resolve platform.');\r\n}\r\nlet _platform = 0 /* Platform.Web */;\r\nif (_isMacintosh) {\r\n    _platform = 1 /* Platform.Mac */;\r\n}\r\nelse if (_isWindows) {\r\n    _platform = 3 /* Platform.Windows */;\r\n}\r\nelse if (_isLinux) {\r\n    _platform = 2 /* Platform.Linux */;\r\n}\r\nconst isWindows = _isWindows;\r\nconst isMacintosh = _isMacintosh;\r\nconst isLinux = _isLinux;\r\nconst isNative = _isNative;\r\nconst isWeb = _isWeb;\r\nconst isWebWorker = (_isWeb && typeof $globalThis.importScripts === 'function');\r\nconst webWorkerOrigin = isWebWorker ? $globalThis.origin : undefined;\r\nconst isIOS = _isIOS;\r\nconst isMobile = _isMobile;\r\nconst userAgent = _userAgent;\r\n/**\r\n * The language used for the user interface. The format of\r\n * the string is all lower case (e.g. zh-tw for Traditional\r\n * Chinese)\r\n */\r\nconst language = _language;\r\nconst setTimeout0IsFaster = (typeof $globalThis.postMessage === 'function' && !$globalThis.importScripts);\r\n/**\r\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\r\n *\r\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\r\n * that browsers set when the nesting level is > 5.\r\n */\r\nconst setTimeout0 = (() => {\r\n    if (setTimeout0IsFaster) {\r\n        const pending = [];\r\n        $globalThis.addEventListener('message', (e) => {\r\n            if (e.data && e.data.vscodeScheduleAsyncWork) {\r\n                for (let i = 0, len = pending.length; i < len; i++) {\r\n                    const candidate = pending[i];\r\n                    if (candidate.id === e.data.vscodeScheduleAsyncWork) {\r\n                        pending.splice(i, 1);\r\n                        candidate.callback();\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        let lastId = 0;\r\n        return (callback) => {\r\n            const myId = ++lastId;\r\n            pending.push({\r\n                id: myId,\r\n                callback: callback\r\n            });\r\n            $globalThis.postMessage({ vscodeScheduleAsyncWork: myId }, '*');\r\n        };\r\n    }\r\n    return (callback) => setTimeout(callback);\r\n})();\r\nconst OS = (_isMacintosh || _isIOS ? 2 /* OperatingSystem.Macintosh */ : (_isWindows ? 1 /* OperatingSystem.Windows */ : 3 /* OperatingSystem.Linux */));\r\nlet _isLittleEndian = true;\r\nlet _isLittleEndianComputed = false;\r\nfunction isLittleEndian() {\r\n    if (!_isLittleEndianComputed) {\r\n        _isLittleEndianComputed = true;\r\n        const test = new Uint8Array(2);\r\n        test[0] = 1;\r\n        test[1] = 2;\r\n        const view = new Uint16Array(test.buffer);\r\n        _isLittleEndian = (view[0] === (2 << 8) + 1);\r\n    }\r\n    return _isLittleEndian;\r\n}\r\nconst isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\r\nconst isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\r\nconst isSafari = !!(!isChrome && (userAgent && userAgent.indexOf('Safari') >= 0));\r\nconst isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\r\nconst isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcGxhdGZvcm0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0M7QUFDN0I7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLCtEQUE4QjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksNkNBQVksR0FBRywrQ0FBK0MsT0FBTyxJQUFJO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELFNBQVM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2Isc0NBQXNDLCtCQUErQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ007QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcGxhdGZvcm0uanM/MzBkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2EsIF9iO1xyXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0ICogYXMgbmxzIGZyb20gJy4uLy4uL25scy5qcyc7XHJcbmV4cG9ydCBjb25zdCBMQU5HVUFHRV9ERUZBVUxUID0gJ2VuJztcclxubGV0IF9pc1dpbmRvd3MgPSBmYWxzZTtcclxubGV0IF9pc01hY2ludG9zaCA9IGZhbHNlO1xyXG5sZXQgX2lzTGludXggPSBmYWxzZTtcclxubGV0IF9pc0xpbnV4U25hcCA9IGZhbHNlO1xyXG5sZXQgX2lzTmF0aXZlID0gZmFsc2U7XHJcbmxldCBfaXNXZWIgPSBmYWxzZTtcclxubGV0IF9pc0VsZWN0cm9uID0gZmFsc2U7XHJcbmxldCBfaXNJT1MgPSBmYWxzZTtcclxubGV0IF9pc0NJID0gZmFsc2U7XHJcbmxldCBfaXNNb2JpbGUgPSBmYWxzZTtcclxubGV0IF9sb2NhbGUgPSB1bmRlZmluZWQ7XHJcbmxldCBfbGFuZ3VhZ2UgPSBMQU5HVUFHRV9ERUZBVUxUO1xyXG5sZXQgX3BsYXRmb3JtTG9jYWxlID0gTEFOR1VBR0VfREVGQVVMVDtcclxubGV0IF90cmFuc2xhdGlvbnNDb25maWdGaWxlID0gdW5kZWZpbmVkO1xyXG5sZXQgX3VzZXJBZ2VudCA9IHVuZGVmaW5lZDtcclxuY29uc3QgJGdsb2JhbFRoaXMgPSBnbG9iYWxUaGlzO1xyXG5sZXQgbm9kZVByb2Nlc3MgPSB1bmRlZmluZWQ7XHJcbmlmICh0eXBlb2YgJGdsb2JhbFRoaXMudnNjb2RlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgJGdsb2JhbFRoaXMudnNjb2RlLnByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAvLyBOYXRpdmUgZW52aXJvbm1lbnQgKHNhbmRib3hlZClcclxuICAgIG5vZGVQcm9jZXNzID0gJGdsb2JhbFRoaXMudnNjb2RlLnByb2Nlc3M7XHJcbn1cclxuZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiAoKF9hID0gcHJvY2VzcyA9PT0gbnVsbCB8fCBwcm9jZXNzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9jZXNzLnZlcnNpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eubm9kZSkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAvLyBOYXRpdmUgZW52aXJvbm1lbnQgKG5vbi1zYW5kYm94ZWQpXHJcbiAgICBub2RlUHJvY2VzcyA9IHByb2Nlc3M7XHJcbn1cclxuY29uc3QgaXNFbGVjdHJvblByb2Nlc3MgPSB0eXBlb2YgKChfYiA9IG5vZGVQcm9jZXNzID09PSBudWxsIHx8IG5vZGVQcm9jZXNzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub2RlUHJvY2Vzcy52ZXJzaW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmVsZWN0cm9uKSA9PT0gJ3N0cmluZyc7XHJcbmNvbnN0IGlzRWxlY3Ryb25SZW5kZXJlciA9IGlzRWxlY3Ryb25Qcm9jZXNzICYmIChub2RlUHJvY2VzcyA9PT0gbnVsbCB8fCBub2RlUHJvY2VzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZVByb2Nlc3MudHlwZSkgPT09ICdyZW5kZXJlcic7XHJcbi8vIE5hdGl2ZSBlbnZpcm9ubWVudFxyXG5pZiAodHlwZW9mIG5vZGVQcm9jZXNzID09PSAnb2JqZWN0Jykge1xyXG4gICAgX2lzV2luZG93cyA9IChub2RlUHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyk7XHJcbiAgICBfaXNNYWNpbnRvc2ggPSAobm9kZVByb2Nlc3MucGxhdGZvcm0gPT09ICdkYXJ3aW4nKTtcclxuICAgIF9pc0xpbnV4ID0gKG5vZGVQcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnKTtcclxuICAgIF9pc0xpbnV4U25hcCA9IF9pc0xpbnV4ICYmICEhbm9kZVByb2Nlc3MuZW52WydTTkFQJ10gJiYgISFub2RlUHJvY2Vzcy5lbnZbJ1NOQVBfUkVWSVNJT04nXTtcclxuICAgIF9pc0VsZWN0cm9uID0gaXNFbGVjdHJvblByb2Nlc3M7XHJcbiAgICBfaXNDSSA9ICEhbm9kZVByb2Nlc3MuZW52WydDSSddIHx8ICEhbm9kZVByb2Nlc3MuZW52WydCVUlMRF9BUlRJRkFDVFNUQUdJTkdESVJFQ1RPUlknXTtcclxuICAgIF9sb2NhbGUgPSBMQU5HVUFHRV9ERUZBVUxUO1xyXG4gICAgX2xhbmd1YWdlID0gTEFOR1VBR0VfREVGQVVMVDtcclxuICAgIGNvbnN0IHJhd05sc0NvbmZpZyA9IG5vZGVQcm9jZXNzLmVudlsnVlNDT0RFX05MU19DT05GSUcnXTtcclxuICAgIGlmIChyYXdObHNDb25maWcpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBubHNDb25maWcgPSBKU09OLnBhcnNlKHJhd05sc0NvbmZpZyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkID0gbmxzQ29uZmlnLmF2YWlsYWJsZUxhbmd1YWdlc1snKiddO1xyXG4gICAgICAgICAgICBfbG9jYWxlID0gbmxzQ29uZmlnLmxvY2FsZTtcclxuICAgICAgICAgICAgX3BsYXRmb3JtTG9jYWxlID0gbmxzQ29uZmlnLm9zTG9jYWxlO1xyXG4gICAgICAgICAgICAvLyBWU0NvZGUncyBkZWZhdWx0IGxhbmd1YWdlIGlzICdlbidcclxuICAgICAgICAgICAgX2xhbmd1YWdlID0gcmVzb2x2ZWQgPyByZXNvbHZlZCA6IExBTkdVQUdFX0RFRkFVTFQ7XHJcbiAgICAgICAgICAgIF90cmFuc2xhdGlvbnNDb25maWdGaWxlID0gbmxzQ29uZmlnLl90cmFuc2xhdGlvbnNDb25maWdGaWxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9pc05hdGl2ZSA9IHRydWU7XHJcbn1cclxuLy8gV2ViIGVudmlyb25tZW50XHJcbmVsc2UgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmICFpc0VsZWN0cm9uUmVuZGVyZXIpIHtcclxuICAgIF91c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xyXG4gICAgX2lzV2luZG93cyA9IF91c2VyQWdlbnQuaW5kZXhPZignV2luZG93cycpID49IDA7XHJcbiAgICBfaXNNYWNpbnRvc2ggPSBfdXNlckFnZW50LmluZGV4T2YoJ01hY2ludG9zaCcpID49IDA7XHJcbiAgICBfaXNJT1MgPSAoX3VzZXJBZ2VudC5pbmRleE9mKCdNYWNpbnRvc2gnKSA+PSAwIHx8IF91c2VyQWdlbnQuaW5kZXhPZignaVBhZCcpID49IDAgfHwgX3VzZXJBZ2VudC5pbmRleE9mKCdpUGhvbmUnKSA+PSAwKSAmJiAhIW5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwO1xyXG4gICAgX2lzTGludXggPSBfdXNlckFnZW50LmluZGV4T2YoJ0xpbnV4JykgPj0gMDtcclxuICAgIF9pc01vYmlsZSA9IChfdXNlckFnZW50ID09PSBudWxsIHx8IF91c2VyQWdlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF91c2VyQWdlbnQuaW5kZXhPZignTW9iaScpKSA+PSAwO1xyXG4gICAgX2lzV2ViID0gdHJ1ZTtcclxuICAgIGNvbnN0IGNvbmZpZ3VyZWRMb2NhbGUgPSBubHMuZ2V0Q29uZmlndXJlZERlZmF1bHRMb2NhbGUoXHJcbiAgICAvLyBUaGlzIGNhbGwgX211c3RfIGJlIGRvbmUgaW4gdGhlIGZpbGUgdGhhdCBjYWxscyBgbmxzLmdldENvbmZpZ3VyZWREZWZhdWx0TG9jYWxlYFxyXG4gICAgLy8gdG8gZW5zdXJlIHRoYXQgdGhlIE5MUyBBTUQgTG9hZGVyIHBsdWdpbiBoYXMgYmVlbiBsb2FkZWQgYW5kIGNvbmZpZ3VyZWQuXHJcbiAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlIGxvYWRlciBwbHVnaW4gZGVjaWRlcyB3aGF0IHRoZSBkZWZhdWx0IGxvY2FsZSBpcyBiYXNlZCBvblxyXG4gICAgLy8gaG93IGl0J3MgYWJsZSB0byByZXNvbHZlIHRoZSBzdHJpbmdzLlxyXG4gICAgbmxzLmxvY2FsaXplKHsga2V5OiAnZW5zdXJlTG9hZGVyUGx1Z2luSXNMb2FkZWQnLCBjb21tZW50OiBbJ3tMb2NrZWR9J10gfSwgJ18nKSk7XHJcbiAgICBfbG9jYWxlID0gY29uZmlndXJlZExvY2FsZSB8fCBMQU5HVUFHRV9ERUZBVUxUO1xyXG4gICAgX2xhbmd1YWdlID0gX2xvY2FsZTtcclxuICAgIF9wbGF0Zm9ybUxvY2FsZSA9IG5hdmlnYXRvci5sYW5ndWFnZTtcclxufVxyXG4vLyBVbmtub3duIGVudmlyb25tZW50XHJcbmVsc2Uge1xyXG4gICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIHJlc29sdmUgcGxhdGZvcm0uJyk7XHJcbn1cclxubGV0IF9wbGF0Zm9ybSA9IDAgLyogUGxhdGZvcm0uV2ViICovO1xyXG5pZiAoX2lzTWFjaW50b3NoKSB7XHJcbiAgICBfcGxhdGZvcm0gPSAxIC8qIFBsYXRmb3JtLk1hYyAqLztcclxufVxyXG5lbHNlIGlmIChfaXNXaW5kb3dzKSB7XHJcbiAgICBfcGxhdGZvcm0gPSAzIC8qIFBsYXRmb3JtLldpbmRvd3MgKi87XHJcbn1cclxuZWxzZSBpZiAoX2lzTGludXgpIHtcclxuICAgIF9wbGF0Zm9ybSA9IDIgLyogUGxhdGZvcm0uTGludXggKi87XHJcbn1cclxuZXhwb3J0IGNvbnN0IGlzV2luZG93cyA9IF9pc1dpbmRvd3M7XHJcbmV4cG9ydCBjb25zdCBpc01hY2ludG9zaCA9IF9pc01hY2ludG9zaDtcclxuZXhwb3J0IGNvbnN0IGlzTGludXggPSBfaXNMaW51eDtcclxuZXhwb3J0IGNvbnN0IGlzTmF0aXZlID0gX2lzTmF0aXZlO1xyXG5leHBvcnQgY29uc3QgaXNXZWIgPSBfaXNXZWI7XHJcbmV4cG9ydCBjb25zdCBpc1dlYldvcmtlciA9IChfaXNXZWIgJiYgdHlwZW9mICRnbG9iYWxUaGlzLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbicpO1xyXG5leHBvcnQgY29uc3Qgd2ViV29ya2VyT3JpZ2luID0gaXNXZWJXb3JrZXIgPyAkZ2xvYmFsVGhpcy5vcmlnaW4gOiB1bmRlZmluZWQ7XHJcbmV4cG9ydCBjb25zdCBpc0lPUyA9IF9pc0lPUztcclxuZXhwb3J0IGNvbnN0IGlzTW9iaWxlID0gX2lzTW9iaWxlO1xyXG5leHBvcnQgY29uc3QgdXNlckFnZW50ID0gX3VzZXJBZ2VudDtcclxuLyoqXHJcbiAqIFRoZSBsYW5ndWFnZSB1c2VkIGZvciB0aGUgdXNlciBpbnRlcmZhY2UuIFRoZSBmb3JtYXQgb2ZcclxuICogdGhlIHN0cmluZyBpcyBhbGwgbG93ZXIgY2FzZSAoZS5nLiB6aC10dyBmb3IgVHJhZGl0aW9uYWxcclxuICogQ2hpbmVzZSlcclxuICovXHJcbmV4cG9ydCBjb25zdCBsYW5ndWFnZSA9IF9sYW5ndWFnZTtcclxuZXhwb3J0IGNvbnN0IHNldFRpbWVvdXQwSXNGYXN0ZXIgPSAodHlwZW9mICRnbG9iYWxUaGlzLnBvc3RNZXNzYWdlID09PSAnZnVuY3Rpb24nICYmICEkZ2xvYmFsVGhpcy5pbXBvcnRTY3JpcHRzKTtcclxuLyoqXHJcbiAqIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sIzp+OnRleHQ9dGhhbiUyMDQlMkMlMjB0aGVuLSxzZXQlMjB0aW1lb3V0JTIwdG8lMjA0LC0uXHJcbiAqXHJcbiAqIFdvcmtzIHNpbWlsYXJseSB0byBgc2V0VGltZW91dCgwKWAgYnV0IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhlIDRtcyBhcnRpZmljaWFsIGRlbGF5XHJcbiAqIHRoYXQgYnJvd3NlcnMgc2V0IHdoZW4gdGhlIG5lc3RpbmcgbGV2ZWwgaXMgPiA1LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNldFRpbWVvdXQwID0gKCgpID0+IHtcclxuICAgIGlmIChzZXRUaW1lb3V0MElzRmFzdGVyKSB7XHJcbiAgICAgICAgY29uc3QgcGVuZGluZyA9IFtdO1xyXG4gICAgICAgICRnbG9iYWxUaGlzLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS5kYXRhICYmIGUuZGF0YS52c2NvZGVTY2hlZHVsZUFzeW5jV29yaykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBlbmRpbmcubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSBwZW5kaW5nW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5kaWRhdGUuaWQgPT09IGUuZGF0YS52c2NvZGVTY2hlZHVsZUFzeW5jV29yaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgbGFzdElkID0gMDtcclxuICAgICAgICByZXR1cm4gKGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG15SWQgPSArK2xhc3RJZDtcclxuICAgICAgICAgICAgcGVuZGluZy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGlkOiBteUlkLFxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkZ2xvYmFsVGhpcy5wb3N0TWVzc2FnZSh7IHZzY29kZVNjaGVkdWxlQXN5bmNXb3JrOiBteUlkIH0sICcqJyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiAoY2FsbGJhY2spID0+IHNldFRpbWVvdXQoY2FsbGJhY2spO1xyXG59KSgpO1xyXG5leHBvcnQgY29uc3QgT1MgPSAoX2lzTWFjaW50b3NoIHx8IF9pc0lPUyA/IDIgLyogT3BlcmF0aW5nU3lzdGVtLk1hY2ludG9zaCAqLyA6IChfaXNXaW5kb3dzID8gMSAvKiBPcGVyYXRpbmdTeXN0ZW0uV2luZG93cyAqLyA6IDMgLyogT3BlcmF0aW5nU3lzdGVtLkxpbnV4ICovKSk7XHJcbmxldCBfaXNMaXR0bGVFbmRpYW4gPSB0cnVlO1xyXG5sZXQgX2lzTGl0dGxlRW5kaWFuQ29tcHV0ZWQgPSBmYWxzZTtcclxuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0dGxlRW5kaWFuKCkge1xyXG4gICAgaWYgKCFfaXNMaXR0bGVFbmRpYW5Db21wdXRlZCkge1xyXG4gICAgICAgIF9pc0xpdHRsZUVuZGlhbkNvbXB1dGVkID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCB0ZXN0ID0gbmV3IFVpbnQ4QXJyYXkoMik7XHJcbiAgICAgICAgdGVzdFswXSA9IDE7XHJcbiAgICAgICAgdGVzdFsxXSA9IDI7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50MTZBcnJheSh0ZXN0LmJ1ZmZlcik7XHJcbiAgICAgICAgX2lzTGl0dGxlRW5kaWFuID0gKHZpZXdbMF0gPT09ICgyIDw8IDgpICsgMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX2lzTGl0dGxlRW5kaWFuO1xyXG59XHJcbmV4cG9ydCBjb25zdCBpc0Nocm9tZSA9ICEhKHVzZXJBZ2VudCAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgPj0gMCk7XHJcbmV4cG9ydCBjb25zdCBpc0ZpcmVmb3ggPSAhISh1c2VyQWdlbnQgJiYgdXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA+PSAwKTtcclxuZXhwb3J0IGNvbnN0IGlzU2FmYXJpID0gISEoIWlzQ2hyb21lICYmICh1c2VyQWdlbnQgJiYgdXNlckFnZW50LmluZGV4T2YoJ1NhZmFyaScpID49IDApKTtcclxuZXhwb3J0IGNvbnN0IGlzRWRnZSA9ICEhKHVzZXJBZ2VudCAmJiB1c2VyQWdlbnQuaW5kZXhPZignRWRnLycpID49IDApO1xyXG5leHBvcnQgY29uc3QgaXNBbmRyb2lkID0gISEodXNlckFnZW50ICYmIHVzZXJBZ2VudC5pbmRleE9mKCdBbmRyb2lkJykgPj0gMCk7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/platform.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/process.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/process.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cwd: () => (/* binding */ cwd),\n/* harmony export */   env: () => (/* binding */ env),\n/* harmony export */   platform: () => (/* binding */ platform)\n/* harmony export */ });\n/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./platform.js */ \"./node_modules/monaco-editor/esm/vs/base/common/platform.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nlet safeProcess;\r\n// Native sandbox environment\r\nconst vscodeGlobal = globalThis.vscode;\r\nif (typeof vscodeGlobal !== 'undefined' && typeof vscodeGlobal.process !== 'undefined') {\r\n    const sandboxProcess = vscodeGlobal.process;\r\n    safeProcess = {\r\n        get platform() { return sandboxProcess.platform; },\r\n        get arch() { return sandboxProcess.arch; },\r\n        get env() { return sandboxProcess.env; },\r\n        cwd() { return sandboxProcess.cwd(); }\r\n    };\r\n}\r\n// Native node.js environment\r\nelse if (typeof process !== 'undefined') {\r\n    safeProcess = {\r\n        get platform() { return process.platform; },\r\n        get arch() { return process.arch; },\r\n        get env() { return process.env; },\r\n        cwd() { return process.env['VSCODE_CWD'] || process.cwd(); }\r\n    };\r\n}\r\n// Web environment\r\nelse {\r\n    safeProcess = {\r\n        // Supported\r\n        get platform() { return _platform_js__WEBPACK_IMPORTED_MODULE_0__.isWindows ? 'win32' : _platform_js__WEBPACK_IMPORTED_MODULE_0__.isMacintosh ? 'darwin' : 'linux'; },\r\n        get arch() { return undefined; /* arch is undefined in web */ },\r\n        // Unsupported\r\n        get env() { return {}; },\r\n        cwd() { return '/'; }\r\n    };\r\n}\r\n/**\r\n * Provides safe access to the `cwd` property in node.js, sandboxed or web\r\n * environments.\r\n *\r\n * Note: in web, this property is hardcoded to be `/`.\r\n *\r\n * @skipMangle\r\n */\r\nconst cwd = safeProcess.cwd;\r\n/**\r\n * Provides safe access to the `env` property in node.js, sandboxed or web\r\n * environments.\r\n *\r\n * Note: in web, this property is hardcoded to be `{}`.\r\n */\r\nconst env = safeProcess.env;\r\n/**\r\n * Provides safe access to the `platform` property in node.js, sandboxed or web\r\n * environments.\r\n */\r\nconst platform = safeProcess.platform;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vcHJvY2Vzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlDQUFpQztBQUMxRCxxQkFBcUIsNkJBQTZCO0FBQ2xELG9CQUFvQiw0QkFBNEI7QUFDaEQsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMEJBQTBCO0FBQ25ELHFCQUFxQixzQkFBc0I7QUFDM0Msb0JBQW9CLHFCQUFxQjtBQUN6QyxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE9BQU8sbURBQVMsYUFBYSxxREFBVyx3QkFBd0I7QUFDekYscUJBQXFCLGtCQUFrQixnQ0FBZ0M7QUFDdkU7QUFDQSxvQkFBb0IsWUFBWTtBQUNoQyxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL3Byb2Nlc3MuanM/YzMxNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgaXNNYWNpbnRvc2gsIGlzV2luZG93cyB9IGZyb20gJy4vcGxhdGZvcm0uanMnO1xyXG5sZXQgc2FmZVByb2Nlc3M7XHJcbi8vIE5hdGl2ZSBzYW5kYm94IGVudmlyb25tZW50XHJcbmNvbnN0IHZzY29kZUdsb2JhbCA9IGdsb2JhbFRoaXMudnNjb2RlO1xyXG5pZiAodHlwZW9mIHZzY29kZUdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHZzY29kZUdsb2JhbC5wcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgY29uc3Qgc2FuZGJveFByb2Nlc3MgPSB2c2NvZGVHbG9iYWwucHJvY2VzcztcclxuICAgIHNhZmVQcm9jZXNzID0ge1xyXG4gICAgICAgIGdldCBwbGF0Zm9ybSgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLnBsYXRmb3JtOyB9LFxyXG4gICAgICAgIGdldCBhcmNoKCkgeyByZXR1cm4gc2FuZGJveFByb2Nlc3MuYXJjaDsgfSxcclxuICAgICAgICBnZXQgZW52KCkgeyByZXR1cm4gc2FuZGJveFByb2Nlc3MuZW52OyB9LFxyXG4gICAgICAgIGN3ZCgpIHsgcmV0dXJuIHNhbmRib3hQcm9jZXNzLmN3ZCgpOyB9XHJcbiAgICB9O1xyXG59XHJcbi8vIE5hdGl2ZSBub2RlLmpzIGVudmlyb25tZW50XHJcbmVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgc2FmZVByb2Nlc3MgPSB7XHJcbiAgICAgICAgZ2V0IHBsYXRmb3JtKCkgeyByZXR1cm4gcHJvY2Vzcy5wbGF0Zm9ybTsgfSxcclxuICAgICAgICBnZXQgYXJjaCgpIHsgcmV0dXJuIHByb2Nlc3MuYXJjaDsgfSxcclxuICAgICAgICBnZXQgZW52KCkgeyByZXR1cm4gcHJvY2Vzcy5lbnY7IH0sXHJcbiAgICAgICAgY3dkKCkgeyByZXR1cm4gcHJvY2Vzcy5lbnZbJ1ZTQ09ERV9DV0QnXSB8fCBwcm9jZXNzLmN3ZCgpOyB9XHJcbiAgICB9O1xyXG59XHJcbi8vIFdlYiBlbnZpcm9ubWVudFxyXG5lbHNlIHtcclxuICAgIHNhZmVQcm9jZXNzID0ge1xyXG4gICAgICAgIC8vIFN1cHBvcnRlZFxyXG4gICAgICAgIGdldCBwbGF0Zm9ybSgpIHsgcmV0dXJuIGlzV2luZG93cyA/ICd3aW4zMicgOiBpc01hY2ludG9zaCA/ICdkYXJ3aW4nIDogJ2xpbnV4JzsgfSxcclxuICAgICAgICBnZXQgYXJjaCgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgLyogYXJjaCBpcyB1bmRlZmluZWQgaW4gd2ViICovIH0sXHJcbiAgICAgICAgLy8gVW5zdXBwb3J0ZWRcclxuICAgICAgICBnZXQgZW52KCkgeyByZXR1cm4ge307IH0sXHJcbiAgICAgICAgY3dkKCkgeyByZXR1cm4gJy8nOyB9XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBQcm92aWRlcyBzYWZlIGFjY2VzcyB0byB0aGUgYGN3ZGAgcHJvcGVydHkgaW4gbm9kZS5qcywgc2FuZGJveGVkIG9yIHdlYlxyXG4gKiBlbnZpcm9ubWVudHMuXHJcbiAqXHJcbiAqIE5vdGU6IGluIHdlYiwgdGhpcyBwcm9wZXJ0eSBpcyBoYXJkY29kZWQgdG8gYmUgYC9gLlxyXG4gKlxyXG4gKiBAc2tpcE1hbmdsZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGN3ZCA9IHNhZmVQcm9jZXNzLmN3ZDtcclxuLyoqXHJcbiAqIFByb3ZpZGVzIHNhZmUgYWNjZXNzIHRvIHRoZSBgZW52YCBwcm9wZXJ0eSBpbiBub2RlLmpzLCBzYW5kYm94ZWQgb3Igd2ViXHJcbiAqIGVudmlyb25tZW50cy5cclxuICpcclxuICogTm90ZTogaW4gd2ViLCB0aGlzIHByb3BlcnR5IGlzIGhhcmRjb2RlZCB0byBiZSBge31gLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGVudiA9IHNhZmVQcm9jZXNzLmVudjtcclxuLyoqXHJcbiAqIFByb3ZpZGVzIHNhZmUgYWNjZXNzIHRvIHRoZSBgcGxhdGZvcm1gIHByb3BlcnR5IGluIG5vZGUuanMsIHNhbmRib3hlZCBvciB3ZWJcclxuICogZW52aXJvbm1lbnRzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHBsYXRmb3JtID0gc2FmZVByb2Nlc3MucGxhdGZvcm07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/process.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StopWatch: () => (/* binding */ StopWatch)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nconst hasPerformanceNow = (globalThis.performance && typeof globalThis.performance.now === 'function');\r\nclass StopWatch {\r\n    static create(highResolution) {\r\n        return new StopWatch(highResolution);\r\n    }\r\n    constructor(highResolution) {\r\n        this._now = hasPerformanceNow && highResolution === false ? Date.now : globalThis.performance.now.bind(globalThis.performance);\r\n        this._startTime = this._now();\r\n        this._stopTime = -1;\r\n    }\r\n    stop() {\r\n        this._stopTime = this._now();\r\n    }\r\n    reset() {\r\n        this._startTime = this._now();\r\n        this._stopTime = -1;\r\n    }\r\n    elapsed() {\r\n        if (this._stopTime !== -1) {\r\n            return this._stopTime - this._startTime;\r\n        }\r\n        return this._now() - this._startTime;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vc3RvcHdhdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9iYXNlL2NvbW1vbi9zdG9wd2F0Y2guanM/ZTU4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuY29uc3QgaGFzUGVyZm9ybWFuY2VOb3cgPSAoZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZSAmJiB0eXBlb2YgZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicpO1xyXG5leHBvcnQgY2xhc3MgU3RvcFdhdGNoIHtcclxuICAgIHN0YXRpYyBjcmVhdGUoaGlnaFJlc29sdXRpb24pIHtcclxuICAgICAgICByZXR1cm4gbmV3IFN0b3BXYXRjaChoaWdoUmVzb2x1dGlvbik7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvcihoaWdoUmVzb2x1dGlvbikge1xyXG4gICAgICAgIHRoaXMuX25vdyA9IGhhc1BlcmZvcm1hbmNlTm93ICYmIGhpZ2hSZXNvbHV0aW9uID09PSBmYWxzZSA/IERhdGUubm93IDogZ2xvYmFsVGhpcy5wZXJmb3JtYW5jZS5ub3cuYmluZChnbG9iYWxUaGlzLnBlcmZvcm1hbmNlKTtcclxuICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSB0aGlzLl9ub3coKTtcclxuICAgICAgICB0aGlzLl9zdG9wVGltZSA9IC0xO1xyXG4gICAgfVxyXG4gICAgc3RvcCgpIHtcclxuICAgICAgICB0aGlzLl9zdG9wVGltZSA9IHRoaXMuX25vdygpO1xyXG4gICAgfVxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5fc3RhcnRUaW1lID0gdGhpcy5fbm93KCk7XHJcbiAgICAgICAgdGhpcy5fc3RvcFRpbWUgPSAtMTtcclxuICAgIH1cclxuICAgIGVsYXBzZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N0b3BUaW1lICE9PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RvcFRpbWUgLSB0aGlzLl9zdGFydFRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9ub3coKSAtIHRoaXMuX3N0YXJ0VGltZTtcclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/strings.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/strings.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AmbiguousCharacters: () => (/* binding */ AmbiguousCharacters),\n/* harmony export */   CodePointIterator: () => (/* binding */ CodePointIterator),\n/* harmony export */   GraphemeIterator: () => (/* binding */ GraphemeIterator),\n/* harmony export */   InvisibleCharacters: () => (/* binding */ InvisibleCharacters),\n/* harmony export */   UNUSUAL_LINE_TERMINATORS: () => (/* binding */ UNUSUAL_LINE_TERMINATORS),\n/* harmony export */   UTF8_BOM_CHARACTER: () => (/* binding */ UTF8_BOM_CHARACTER),\n/* harmony export */   commonPrefixLength: () => (/* binding */ commonPrefixLength),\n/* harmony export */   commonSuffixLength: () => (/* binding */ commonSuffixLength),\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   compareIgnoreCase: () => (/* binding */ compareIgnoreCase),\n/* harmony export */   compareSubstring: () => (/* binding */ compareSubstring),\n/* harmony export */   compareSubstringIgnoreCase: () => (/* binding */ compareSubstringIgnoreCase),\n/* harmony export */   computeCodePoint: () => (/* binding */ computeCodePoint),\n/* harmony export */   containsRTL: () => (/* binding */ containsRTL),\n/* harmony export */   containsUnusualLineTerminators: () => (/* binding */ containsUnusualLineTerminators),\n/* harmony export */   containsUppercaseCharacter: () => (/* binding */ containsUppercaseCharacter),\n/* harmony export */   convertSimple2RegExpPattern: () => (/* binding */ convertSimple2RegExpPattern),\n/* harmony export */   createRegExp: () => (/* binding */ createRegExp),\n/* harmony export */   equalsIgnoreCase: () => (/* binding */ equalsIgnoreCase),\n/* harmony export */   escape: () => (/* binding */ escape),\n/* harmony export */   escapeRegExpCharacters: () => (/* binding */ escapeRegExpCharacters),\n/* harmony export */   firstNonWhitespaceIndex: () => (/* binding */ firstNonWhitespaceIndex),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   getCharContainingOffset: () => (/* binding */ getCharContainingOffset),\n/* harmony export */   getLeadingWhitespace: () => (/* binding */ getLeadingWhitespace),\n/* harmony export */   getLeftDeleteOffset: () => (/* binding */ getLeftDeleteOffset),\n/* harmony export */   getNextCodePoint: () => (/* binding */ getNextCodePoint),\n/* harmony export */   htmlAttributeEncodeValue: () => (/* binding */ htmlAttributeEncodeValue),\n/* harmony export */   isAsciiDigit: () => (/* binding */ isAsciiDigit),\n/* harmony export */   isBasicASCII: () => (/* binding */ isBasicASCII),\n/* harmony export */   isEmojiImprecise: () => (/* binding */ isEmojiImprecise),\n/* harmony export */   isFalsyOrWhitespace: () => (/* binding */ isFalsyOrWhitespace),\n/* harmony export */   isFullWidthCharacter: () => (/* binding */ isFullWidthCharacter),\n/* harmony export */   isHighSurrogate: () => (/* binding */ isHighSurrogate),\n/* harmony export */   isLowSurrogate: () => (/* binding */ isLowSurrogate),\n/* harmony export */   isLowerAsciiLetter: () => (/* binding */ isLowerAsciiLetter),\n/* harmony export */   isUpperAsciiLetter: () => (/* binding */ isUpperAsciiLetter),\n/* harmony export */   lastNonWhitespaceIndex: () => (/* binding */ lastNonWhitespaceIndex),\n/* harmony export */   ltrim: () => (/* binding */ ltrim),\n/* harmony export */   nextCharLength: () => (/* binding */ nextCharLength),\n/* harmony export */   noBreakWhitespace: () => (/* binding */ noBreakWhitespace),\n/* harmony export */   prevCharLength: () => (/* binding */ prevCharLength),\n/* harmony export */   regExpLeadsToEndlessLoop: () => (/* binding */ regExpLeadsToEndlessLoop),\n/* harmony export */   rtrim: () => (/* binding */ rtrim),\n/* harmony export */   singleLetterHash: () => (/* binding */ singleLetterHash),\n/* harmony export */   splitLines: () => (/* binding */ splitLines),\n/* harmony export */   splitLinesIncludeSeparators: () => (/* binding */ splitLinesIncludeSeparators),\n/* harmony export */   startsWithIgnoreCase: () => (/* binding */ startsWithIgnoreCase),\n/* harmony export */   startsWithUTF8BOM: () => (/* binding */ startsWithUTF8BOM),\n/* harmony export */   stripWildcards: () => (/* binding */ stripWildcards),\n/* harmony export */   trim: () => (/* binding */ trim)\n/* harmony export */ });\n/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache.js */ \"./node_modules/monaco-editor/esm/vs/base/common/cache.js\");\n/* harmony import */ var _lazy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lazy.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lazy.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a;\r\n\r\n\r\nfunction isFalsyOrWhitespace(str) {\r\n    if (!str || typeof str !== 'string') {\r\n        return true;\r\n    }\r\n    return str.trim().length === 0;\r\n}\r\nconst _formatRegexp = /{(\\d+)}/g;\r\n/**\r\n * Helper to produce a string with a variable number of arguments. Insert variable segments\r\n * into the string using the {n} notation where N is the index of the argument following the string.\r\n * @param value string to which formatting is applied\r\n * @param args replacements for {n}-entries\r\n */\r\nfunction format(value, ...args) {\r\n    if (args.length === 0) {\r\n        return value;\r\n    }\r\n    return value.replace(_formatRegexp, function (match, group) {\r\n        const idx = parseInt(group, 10);\r\n        return isNaN(idx) || idx < 0 || idx >= args.length ?\r\n            match :\r\n            args[idx];\r\n    });\r\n}\r\n/**\r\n * Encodes the given value so that it can be used as literal value in html attributes.\r\n *\r\n * In other words, computes `$val`, such that `attr` in `<div attr=\"$val\" />` has the runtime value `value`.\r\n * This prevents XSS injection.\r\n */\r\nfunction htmlAttributeEncodeValue(value) {\r\n    return value.replace(/[<>\"'&]/g, ch => {\r\n        switch (ch) {\r\n            case '<': return '&lt;';\r\n            case '>': return '&gt;';\r\n            case '\"': return '&quot;';\r\n            case '\\'': return '&apos;';\r\n            case '&': return '&amp;';\r\n        }\r\n        return ch;\r\n    });\r\n}\r\n/**\r\n * Converts HTML characters inside the string to use entities instead. Makes the string safe from\r\n * being used e.g. in HTMLElement.innerHTML.\r\n */\r\nfunction escape(html) {\r\n    return html.replace(/[<>&]/g, function (match) {\r\n        switch (match) {\r\n            case '<': return '&lt;';\r\n            case '>': return '&gt;';\r\n            case '&': return '&amp;';\r\n            default: return match;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Escapes regular expression characters in a given string\r\n */\r\nfunction escapeRegExpCharacters(value) {\r\n    return value.replace(/[\\\\\\{\\}\\*\\+\\?\\|\\^\\$\\.\\[\\]\\(\\)]/g, '\\\\$&');\r\n}\r\n/**\r\n * Removes all occurrences of needle from the beginning and end of haystack.\r\n * @param haystack string to trim\r\n * @param needle the thing to trim (default is a blank)\r\n */\r\nfunction trim(haystack, needle = ' ') {\r\n    const trimmed = ltrim(haystack, needle);\r\n    return rtrim(trimmed, needle);\r\n}\r\n/**\r\n * Removes all occurrences of needle from the beginning of haystack.\r\n * @param haystack string to trim\r\n * @param needle the thing to trim\r\n */\r\nfunction ltrim(haystack, needle) {\r\n    if (!haystack || !needle) {\r\n        return haystack;\r\n    }\r\n    const needleLen = needle.length;\r\n    if (needleLen === 0 || haystack.length === 0) {\r\n        return haystack;\r\n    }\r\n    let offset = 0;\r\n    while (haystack.indexOf(needle, offset) === offset) {\r\n        offset = offset + needleLen;\r\n    }\r\n    return haystack.substring(offset);\r\n}\r\n/**\r\n * Removes all occurrences of needle from the end of haystack.\r\n * @param haystack string to trim\r\n * @param needle the thing to trim\r\n */\r\nfunction rtrim(haystack, needle) {\r\n    if (!haystack || !needle) {\r\n        return haystack;\r\n    }\r\n    const needleLen = needle.length, haystackLen = haystack.length;\r\n    if (needleLen === 0 || haystackLen === 0) {\r\n        return haystack;\r\n    }\r\n    let offset = haystackLen, idx = -1;\r\n    while (true) {\r\n        idx = haystack.lastIndexOf(needle, offset - 1);\r\n        if (idx === -1 || idx + needleLen !== offset) {\r\n            break;\r\n        }\r\n        if (idx === 0) {\r\n            return '';\r\n        }\r\n        offset = idx;\r\n    }\r\n    return haystack.substring(0, offset);\r\n}\r\nfunction convertSimple2RegExpPattern(pattern) {\r\n    return pattern.replace(/[\\-\\\\\\{\\}\\+\\?\\|\\^\\$\\.\\,\\[\\]\\(\\)\\#\\s]/g, '\\\\$&').replace(/[\\*]/g, '.*');\r\n}\r\nfunction stripWildcards(pattern) {\r\n    return pattern.replace(/\\*/g, '');\r\n}\r\nfunction createRegExp(searchString, isRegex, options = {}) {\r\n    if (!searchString) {\r\n        throw new Error('Cannot create regex from empty string');\r\n    }\r\n    if (!isRegex) {\r\n        searchString = escapeRegExpCharacters(searchString);\r\n    }\r\n    if (options.wholeWord) {\r\n        if (!/\\B/.test(searchString.charAt(0))) {\r\n            searchString = '\\\\b' + searchString;\r\n        }\r\n        if (!/\\B/.test(searchString.charAt(searchString.length - 1))) {\r\n            searchString = searchString + '\\\\b';\r\n        }\r\n    }\r\n    let modifiers = '';\r\n    if (options.global) {\r\n        modifiers += 'g';\r\n    }\r\n    if (!options.matchCase) {\r\n        modifiers += 'i';\r\n    }\r\n    if (options.multiline) {\r\n        modifiers += 'm';\r\n    }\r\n    if (options.unicode) {\r\n        modifiers += 'u';\r\n    }\r\n    return new RegExp(searchString, modifiers);\r\n}\r\nfunction regExpLeadsToEndlessLoop(regexp) {\r\n    // Exit early if it's one of these special cases which are meant to match\r\n    // against an empty string\r\n    if (regexp.source === '^' || regexp.source === '^$' || regexp.source === '$' || regexp.source === '^\\\\s*$') {\r\n        return false;\r\n    }\r\n    // We check against an empty string. If the regular expression doesn't advance\r\n    // (e.g. ends in an endless loop) it will match an empty string.\r\n    const match = regexp.exec('');\r\n    return !!(match && regexp.lastIndex === 0);\r\n}\r\nfunction splitLines(str) {\r\n    return str.split(/\\r\\n|\\r|\\n/);\r\n}\r\nfunction splitLinesIncludeSeparators(str) {\r\n    var _b;\r\n    const linesWithSeparators = [];\r\n    const splitLinesAndSeparators = str.split(/(\\r\\n|\\r|\\n)/);\r\n    for (let i = 0; i < Math.ceil(splitLinesAndSeparators.length / 2); i++) {\r\n        linesWithSeparators.push(splitLinesAndSeparators[2 * i] + ((_b = splitLinesAndSeparators[2 * i + 1]) !== null && _b !== void 0 ? _b : ''));\r\n    }\r\n    return linesWithSeparators;\r\n}\r\n/**\r\n * Returns first index of the string that is not whitespace.\r\n * If string is empty or contains only whitespaces, returns -1\r\n */\r\nfunction firstNonWhitespaceIndex(str) {\r\n    for (let i = 0, len = str.length; i < len; i++) {\r\n        const chCode = str.charCodeAt(i);\r\n        if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Returns the leading whitespace of the string.\r\n * If the string contains only whitespaces, returns entire string\r\n */\r\nfunction getLeadingWhitespace(str, start = 0, end = str.length) {\r\n    for (let i = start; i < end; i++) {\r\n        const chCode = str.charCodeAt(i);\r\n        if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {\r\n            return str.substring(start, i);\r\n        }\r\n    }\r\n    return str.substring(start, end);\r\n}\r\n/**\r\n * Returns last index of the string that is not whitespace.\r\n * If string is empty or contains only whitespaces, returns -1\r\n */\r\nfunction lastNonWhitespaceIndex(str, startIndex = str.length - 1) {\r\n    for (let i = startIndex; i >= 0; i--) {\r\n        const chCode = str.charCodeAt(i);\r\n        if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nfunction compare(a, b) {\r\n    if (a < b) {\r\n        return -1;\r\n    }\r\n    else if (a > b) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\nfunction compareSubstring(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {\r\n    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\r\n        const codeA = a.charCodeAt(aStart);\r\n        const codeB = b.charCodeAt(bStart);\r\n        if (codeA < codeB) {\r\n            return -1;\r\n        }\r\n        else if (codeA > codeB) {\r\n            return 1;\r\n        }\r\n    }\r\n    const aLen = aEnd - aStart;\r\n    const bLen = bEnd - bStart;\r\n    if (aLen < bLen) {\r\n        return -1;\r\n    }\r\n    else if (aLen > bLen) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nfunction compareIgnoreCase(a, b) {\r\n    return compareSubstringIgnoreCase(a, b, 0, a.length, 0, b.length);\r\n}\r\nfunction compareSubstringIgnoreCase(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {\r\n    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {\r\n        let codeA = a.charCodeAt(aStart);\r\n        let codeB = b.charCodeAt(bStart);\r\n        if (codeA === codeB) {\r\n            // equal\r\n            continue;\r\n        }\r\n        if (codeA >= 128 || codeB >= 128) {\r\n            // not ASCII letters -> fallback to lower-casing strings\r\n            return compareSubstring(a.toLowerCase(), b.toLowerCase(), aStart, aEnd, bStart, bEnd);\r\n        }\r\n        // mapper lower-case ascii letter onto upper-case varinats\r\n        // [97-122] (lower ascii) --> [65-90] (upper ascii)\r\n        if (isLowerAsciiLetter(codeA)) {\r\n            codeA -= 32;\r\n        }\r\n        if (isLowerAsciiLetter(codeB)) {\r\n            codeB -= 32;\r\n        }\r\n        // compare both code points\r\n        const diff = codeA - codeB;\r\n        if (diff === 0) {\r\n            continue;\r\n        }\r\n        return diff;\r\n    }\r\n    const aLen = aEnd - aStart;\r\n    const bLen = bEnd - bStart;\r\n    if (aLen < bLen) {\r\n        return -1;\r\n    }\r\n    else if (aLen > bLen) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nfunction isAsciiDigit(code) {\r\n    return code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */;\r\n}\r\nfunction isLowerAsciiLetter(code) {\r\n    return code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */;\r\n}\r\nfunction isUpperAsciiLetter(code) {\r\n    return code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */;\r\n}\r\nfunction equalsIgnoreCase(a, b) {\r\n    return a.length === b.length && compareSubstringIgnoreCase(a, b) === 0;\r\n}\r\nfunction startsWithIgnoreCase(str, candidate) {\r\n    const candidateLength = candidate.length;\r\n    if (candidate.length > str.length) {\r\n        return false;\r\n    }\r\n    return compareSubstringIgnoreCase(str, candidate, 0, candidateLength) === 0;\r\n}\r\n/**\r\n * @returns the length of the common prefix of the two strings.\r\n */\r\nfunction commonPrefixLength(a, b) {\r\n    const len = Math.min(a.length, b.length);\r\n    let i;\r\n    for (i = 0; i < len; i++) {\r\n        if (a.charCodeAt(i) !== b.charCodeAt(i)) {\r\n            return i;\r\n        }\r\n    }\r\n    return len;\r\n}\r\n/**\r\n * @returns the length of the common suffix of the two strings.\r\n */\r\nfunction commonSuffixLength(a, b) {\r\n    const len = Math.min(a.length, b.length);\r\n    let i;\r\n    const aLastIndex = a.length - 1;\r\n    const bLastIndex = b.length - 1;\r\n    for (i = 0; i < len; i++) {\r\n        if (a.charCodeAt(aLastIndex - i) !== b.charCodeAt(bLastIndex - i)) {\r\n            return i;\r\n        }\r\n    }\r\n    return len;\r\n}\r\n/**\r\n * See http://en.wikipedia.org/wiki/Surrogate_pair\r\n */\r\nfunction isHighSurrogate(charCode) {\r\n    return (0xD800 <= charCode && charCode <= 0xDBFF);\r\n}\r\n/**\r\n * See http://en.wikipedia.org/wiki/Surrogate_pair\r\n */\r\nfunction isLowSurrogate(charCode) {\r\n    return (0xDC00 <= charCode && charCode <= 0xDFFF);\r\n}\r\n/**\r\n * See http://en.wikipedia.org/wiki/Surrogate_pair\r\n */\r\nfunction computeCodePoint(highSurrogate, lowSurrogate) {\r\n    return ((highSurrogate - 0xD800) << 10) + (lowSurrogate - 0xDC00) + 0x10000;\r\n}\r\n/**\r\n * get the code point that begins at offset `offset`\r\n */\r\nfunction getNextCodePoint(str, len, offset) {\r\n    const charCode = str.charCodeAt(offset);\r\n    if (isHighSurrogate(charCode) && offset + 1 < len) {\r\n        const nextCharCode = str.charCodeAt(offset + 1);\r\n        if (isLowSurrogate(nextCharCode)) {\r\n            return computeCodePoint(charCode, nextCharCode);\r\n        }\r\n    }\r\n    return charCode;\r\n}\r\n/**\r\n * get the code point that ends right before offset `offset`\r\n */\r\nfunction getPrevCodePoint(str, offset) {\r\n    const charCode = str.charCodeAt(offset - 1);\r\n    if (isLowSurrogate(charCode) && offset > 1) {\r\n        const prevCharCode = str.charCodeAt(offset - 2);\r\n        if (isHighSurrogate(prevCharCode)) {\r\n            return computeCodePoint(prevCharCode, charCode);\r\n        }\r\n    }\r\n    return charCode;\r\n}\r\nclass CodePointIterator {\r\n    get offset() {\r\n        return this._offset;\r\n    }\r\n    constructor(str, offset = 0) {\r\n        this._str = str;\r\n        this._len = str.length;\r\n        this._offset = offset;\r\n    }\r\n    setOffset(offset) {\r\n        this._offset = offset;\r\n    }\r\n    prevCodePoint() {\r\n        const codePoint = getPrevCodePoint(this._str, this._offset);\r\n        this._offset -= (codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n        return codePoint;\r\n    }\r\n    nextCodePoint() {\r\n        const codePoint = getNextCodePoint(this._str, this._len, this._offset);\r\n        this._offset += (codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n        return codePoint;\r\n    }\r\n    eol() {\r\n        return (this._offset >= this._len);\r\n    }\r\n}\r\nclass GraphemeIterator {\r\n    get offset() {\r\n        return this._iterator.offset;\r\n    }\r\n    constructor(str, offset = 0) {\r\n        this._iterator = new CodePointIterator(str, offset);\r\n    }\r\n    nextGraphemeLength() {\r\n        const graphemeBreakTree = GraphemeBreakTree.getInstance();\r\n        const iterator = this._iterator;\r\n        const initialOffset = iterator.offset;\r\n        let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());\r\n        while (!iterator.eol()) {\r\n            const offset = iterator.offset;\r\n            const nextGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());\r\n            if (breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                // move iterator back\r\n                iterator.setOffset(offset);\r\n                break;\r\n            }\r\n            graphemeBreakType = nextGraphemeBreakType;\r\n        }\r\n        return (iterator.offset - initialOffset);\r\n    }\r\n    prevGraphemeLength() {\r\n        const graphemeBreakTree = GraphemeBreakTree.getInstance();\r\n        const iterator = this._iterator;\r\n        const initialOffset = iterator.offset;\r\n        let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());\r\n        while (iterator.offset > 0) {\r\n            const offset = iterator.offset;\r\n            const prevGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());\r\n            if (breakBetweenGraphemeBreakType(prevGraphemeBreakType, graphemeBreakType)) {\r\n                // move iterator back\r\n                iterator.setOffset(offset);\r\n                break;\r\n            }\r\n            graphemeBreakType = prevGraphemeBreakType;\r\n        }\r\n        return (initialOffset - iterator.offset);\r\n    }\r\n    eol() {\r\n        return this._iterator.eol();\r\n    }\r\n}\r\nfunction nextCharLength(str, initialOffset) {\r\n    const iterator = new GraphemeIterator(str, initialOffset);\r\n    return iterator.nextGraphemeLength();\r\n}\r\nfunction prevCharLength(str, initialOffset) {\r\n    const iterator = new GraphemeIterator(str, initialOffset);\r\n    return iterator.prevGraphemeLength();\r\n}\r\nfunction getCharContainingOffset(str, offset) {\r\n    if (offset > 0 && isLowSurrogate(str.charCodeAt(offset))) {\r\n        offset--;\r\n    }\r\n    const endOffset = offset + nextCharLength(str, offset);\r\n    const startOffset = endOffset - prevCharLength(str, endOffset);\r\n    return [startOffset, endOffset];\r\n}\r\nlet CONTAINS_RTL = undefined;\r\nfunction makeContainsRtl() {\r\n    // Generated using https://github.com/alexdima/unicode-utils/blob/main/rtl-test.js\r\n    return /(?:[\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05F4\\u0608\\u060B\\u060D\\u061B-\\u064A\\u066D-\\u066F\\u0671-\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1-\\u07EA\\u07F4\\u07F5\\u07FA\\u07FE-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u0858\\u085E-\\u088E\\u08A0-\\u08C9\\u200F\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFD3D\\uFD50-\\uFDC7\\uFDF0-\\uFDFC\\uFE70-\\uFEFC]|\\uD802[\\uDC00-\\uDD1B\\uDD20-\\uDE00\\uDE10-\\uDE35\\uDE40-\\uDEE4\\uDEEB-\\uDF35\\uDF40-\\uDFFF]|\\uD803[\\uDC00-\\uDD23\\uDE80-\\uDEA9\\uDEAD-\\uDF45\\uDF51-\\uDF81\\uDF86-\\uDFF6]|\\uD83A[\\uDC00-\\uDCCF\\uDD00-\\uDD43\\uDD4B-\\uDFFF]|\\uD83B[\\uDC00-\\uDEBB])/;\r\n}\r\n/**\r\n * Returns true if `str` contains any Unicode character that is classified as \"R\" or \"AL\".\r\n */\r\nfunction containsRTL(str) {\r\n    if (!CONTAINS_RTL) {\r\n        CONTAINS_RTL = makeContainsRtl();\r\n    }\r\n    return CONTAINS_RTL.test(str);\r\n}\r\nconst IS_BASIC_ASCII = /^[\\t\\n\\r\\x20-\\x7E]*$/;\r\n/**\r\n * Returns true if `str` contains only basic ASCII characters in the range 32 - 126 (including 32 and 126) or \\n, \\r, \\t\r\n */\r\nfunction isBasicASCII(str) {\r\n    return IS_BASIC_ASCII.test(str);\r\n}\r\nconst UNUSUAL_LINE_TERMINATORS = /[\\u2028\\u2029]/; // LINE SEPARATOR (LS) or PARAGRAPH SEPARATOR (PS)\r\n/**\r\n * Returns true if `str` contains unusual line terminators, like LS or PS\r\n */\r\nfunction containsUnusualLineTerminators(str) {\r\n    return UNUSUAL_LINE_TERMINATORS.test(str);\r\n}\r\nfunction isFullWidthCharacter(charCode) {\r\n    // Do a cheap trick to better support wrapping of wide characters, treat them as 2 columns\r\n    // http://jrgraphix.net/research/unicode_blocks.php\r\n    //          2E80 - 2EFF   CJK Radicals Supplement\r\n    //          2F00 - 2FDF   Kangxi Radicals\r\n    //          2FF0 - 2FFF   Ideographic Description Characters\r\n    //          3000 - 303F   CJK Symbols and Punctuation\r\n    //          3040 - 309F   Hiragana\r\n    //          30A0 - 30FF   Katakana\r\n    //          3100 - 312F   Bopomofo\r\n    //          3130 - 318F   Hangul Compatibility Jamo\r\n    //          3190 - 319F   Kanbun\r\n    //          31A0 - 31BF   Bopomofo Extended\r\n    //          31F0 - 31FF   Katakana Phonetic Extensions\r\n    //          3200 - 32FF   Enclosed CJK Letters and Months\r\n    //          3300 - 33FF   CJK Compatibility\r\n    //          3400 - 4DBF   CJK Unified Ideographs Extension A\r\n    //          4DC0 - 4DFF   Yijing Hexagram Symbols\r\n    //          4E00 - 9FFF   CJK Unified Ideographs\r\n    //          A000 - A48F   Yi Syllables\r\n    //          A490 - A4CF   Yi Radicals\r\n    //          AC00 - D7AF   Hangul Syllables\r\n    // [IGNORE] D800 - DB7F   High Surrogates\r\n    // [IGNORE] DB80 - DBFF   High Private Use Surrogates\r\n    // [IGNORE] DC00 - DFFF   Low Surrogates\r\n    // [IGNORE] E000 - F8FF   Private Use Area\r\n    //          F900 - FAFF   CJK Compatibility Ideographs\r\n    // [IGNORE] FB00 - FB4F   Alphabetic Presentation Forms\r\n    // [IGNORE] FB50 - FDFF   Arabic Presentation Forms-A\r\n    // [IGNORE] FE00 - FE0F   Variation Selectors\r\n    // [IGNORE] FE20 - FE2F   Combining Half Marks\r\n    // [IGNORE] FE30 - FE4F   CJK Compatibility Forms\r\n    // [IGNORE] FE50 - FE6F   Small Form Variants\r\n    // [IGNORE] FE70 - FEFF   Arabic Presentation Forms-B\r\n    //          FF00 - FFEF   Halfwidth and Fullwidth Forms\r\n    //               [https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms]\r\n    //               of which FF01 - FF5E fullwidth ASCII of 21 to 7E\r\n    // [IGNORE]    and FF65 - FFDC halfwidth of Katakana and Hangul\r\n    // [IGNORE] FFF0 - FFFF   Specials\r\n    return ((charCode >= 0x2E80 && charCode <= 0xD7AF)\r\n        || (charCode >= 0xF900 && charCode <= 0xFAFF)\r\n        || (charCode >= 0xFF01 && charCode <= 0xFF5E));\r\n}\r\n/**\r\n * A fast function (therefore imprecise) to check if code points are emojis.\r\n * Generated using https://github.com/alexdima/unicode-utils/blob/main/emoji-test.js\r\n */\r\nfunction isEmojiImprecise(x) {\r\n    return ((x >= 0x1F1E6 && x <= 0x1F1FF) || (x === 8986) || (x === 8987) || (x === 9200)\r\n        || (x === 9203) || (x >= 9728 && x <= 10175) || (x === 11088) || (x === 11093)\r\n        || (x >= 127744 && x <= 128591) || (x >= 128640 && x <= 128764)\r\n        || (x >= 128992 && x <= 129008) || (x >= 129280 && x <= 129535)\r\n        || (x >= 129648 && x <= 129782));\r\n}\r\n// -- UTF-8 BOM\r\nconst UTF8_BOM_CHARACTER = String.fromCharCode(65279 /* CharCode.UTF8_BOM */);\r\nfunction startsWithUTF8BOM(str) {\r\n    return !!(str && str.length > 0 && str.charCodeAt(0) === 65279 /* CharCode.UTF8_BOM */);\r\n}\r\nfunction containsUppercaseCharacter(target, ignoreEscapedChars = false) {\r\n    if (!target) {\r\n        return false;\r\n    }\r\n    if (ignoreEscapedChars) {\r\n        target = target.replace(/\\\\./g, '');\r\n    }\r\n    return target.toLowerCase() !== target;\r\n}\r\n/**\r\n * Produces 'a'-'z', followed by 'A'-'Z'... followed by 'a'-'z', etc.\r\n */\r\nfunction singleLetterHash(n) {\r\n    const LETTERS_CNT = (90 /* CharCode.Z */ - 65 /* CharCode.A */ + 1);\r\n    n = n % (2 * LETTERS_CNT);\r\n    if (n < LETTERS_CNT) {\r\n        return String.fromCharCode(97 /* CharCode.a */ + n);\r\n    }\r\n    return String.fromCharCode(65 /* CharCode.A */ + n - LETTERS_CNT);\r\n}\r\nfunction breakBetweenGraphemeBreakType(breakTypeA, breakTypeB) {\r\n    // http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules\r\n    // !!! Let's make the common case a bit faster\r\n    if (breakTypeA === 0 /* GraphemeBreakType.Other */) {\r\n        // see https://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakTest-13.0.0d10.html#table\r\n        return (breakTypeB !== 5 /* GraphemeBreakType.Extend */ && breakTypeB !== 7 /* GraphemeBreakType.SpacingMark */);\r\n    }\r\n    // Do not break between a CR and LF. Otherwise, break before and after controls.\r\n    // GB3                                        CR × LF\r\n    // GB4                       (Control | CR | LF) ÷\r\n    // GB5                                           ÷ (Control | CR | LF)\r\n    if (breakTypeA === 2 /* GraphemeBreakType.CR */) {\r\n        if (breakTypeB === 3 /* GraphemeBreakType.LF */) {\r\n            return false; // GB3\r\n        }\r\n    }\r\n    if (breakTypeA === 4 /* GraphemeBreakType.Control */ || breakTypeA === 2 /* GraphemeBreakType.CR */ || breakTypeA === 3 /* GraphemeBreakType.LF */) {\r\n        return true; // GB4\r\n    }\r\n    if (breakTypeB === 4 /* GraphemeBreakType.Control */ || breakTypeB === 2 /* GraphemeBreakType.CR */ || breakTypeB === 3 /* GraphemeBreakType.LF */) {\r\n        return true; // GB5\r\n    }\r\n    // Do not break Hangul syllable sequences.\r\n    // GB6                                         L × (L | V | LV | LVT)\r\n    // GB7                                  (LV | V) × (V | T)\r\n    // GB8                                 (LVT | T) × T\r\n    if (breakTypeA === 8 /* GraphemeBreakType.L */) {\r\n        if (breakTypeB === 8 /* GraphemeBreakType.L */ || breakTypeB === 9 /* GraphemeBreakType.V */ || breakTypeB === 11 /* GraphemeBreakType.LV */ || breakTypeB === 12 /* GraphemeBreakType.LVT */) {\r\n            return false; // GB6\r\n        }\r\n    }\r\n    if (breakTypeA === 11 /* GraphemeBreakType.LV */ || breakTypeA === 9 /* GraphemeBreakType.V */) {\r\n        if (breakTypeB === 9 /* GraphemeBreakType.V */ || breakTypeB === 10 /* GraphemeBreakType.T */) {\r\n            return false; // GB7\r\n        }\r\n    }\r\n    if (breakTypeA === 12 /* GraphemeBreakType.LVT */ || breakTypeA === 10 /* GraphemeBreakType.T */) {\r\n        if (breakTypeB === 10 /* GraphemeBreakType.T */) {\r\n            return false; // GB8\r\n        }\r\n    }\r\n    // Do not break before extending characters or ZWJ.\r\n    // GB9                                           × (Extend | ZWJ)\r\n    if (breakTypeB === 5 /* GraphemeBreakType.Extend */ || breakTypeB === 13 /* GraphemeBreakType.ZWJ */) {\r\n        return false; // GB9\r\n    }\r\n    // The GB9a and GB9b rules only apply to extended grapheme clusters:\r\n    // Do not break before SpacingMarks, or after Prepend characters.\r\n    // GB9a                                          × SpacingMark\r\n    // GB9b                                  Prepend ×\r\n    if (breakTypeB === 7 /* GraphemeBreakType.SpacingMark */) {\r\n        return false; // GB9a\r\n    }\r\n    if (breakTypeA === 1 /* GraphemeBreakType.Prepend */) {\r\n        return false; // GB9b\r\n    }\r\n    // Do not break within emoji modifier sequences or emoji zwj sequences.\r\n    // GB11    \\p{Extended_Pictographic} Extend* ZWJ × \\p{Extended_Pictographic}\r\n    if (breakTypeA === 13 /* GraphemeBreakType.ZWJ */ && breakTypeB === 14 /* GraphemeBreakType.Extended_Pictographic */) {\r\n        // Note: we are not implementing the rule entirely here to avoid introducing states\r\n        return false; // GB11\r\n    }\r\n    // GB12                          sot (RI RI)* RI × RI\r\n    // GB13                        [^RI] (RI RI)* RI × RI\r\n    if (breakTypeA === 6 /* GraphemeBreakType.Regional_Indicator */ && breakTypeB === 6 /* GraphemeBreakType.Regional_Indicator */) {\r\n        // Note: we are not implementing the rule entirely here to avoid introducing states\r\n        return false; // GB12 & GB13\r\n    }\r\n    // GB999                                     Any ÷ Any\r\n    return true;\r\n}\r\nclass GraphemeBreakTree {\r\n    static getInstance() {\r\n        if (!GraphemeBreakTree._INSTANCE) {\r\n            GraphemeBreakTree._INSTANCE = new GraphemeBreakTree();\r\n        }\r\n        return GraphemeBreakTree._INSTANCE;\r\n    }\r\n    constructor() {\r\n        this._data = getGraphemeBreakRawData();\r\n    }\r\n    getGraphemeBreakType(codePoint) {\r\n        // !!! Let's make 7bit ASCII a bit faster: 0..31\r\n        if (codePoint < 32) {\r\n            if (codePoint === 10 /* CharCode.LineFeed */) {\r\n                return 3 /* GraphemeBreakType.LF */;\r\n            }\r\n            if (codePoint === 13 /* CharCode.CarriageReturn */) {\r\n                return 2 /* GraphemeBreakType.CR */;\r\n            }\r\n            return 4 /* GraphemeBreakType.Control */;\r\n        }\r\n        // !!! Let's make 7bit ASCII a bit faster: 32..126\r\n        if (codePoint < 127) {\r\n            return 0 /* GraphemeBreakType.Other */;\r\n        }\r\n        const data = this._data;\r\n        const nodeCount = data.length / 3;\r\n        let nodeIndex = 1;\r\n        while (nodeIndex <= nodeCount) {\r\n            if (codePoint < data[3 * nodeIndex]) {\r\n                // go left\r\n                nodeIndex = 2 * nodeIndex;\r\n            }\r\n            else if (codePoint > data[3 * nodeIndex + 1]) {\r\n                // go right\r\n                nodeIndex = 2 * nodeIndex + 1;\r\n            }\r\n            else {\r\n                // hit\r\n                return data[3 * nodeIndex + 2];\r\n            }\r\n        }\r\n        return 0 /* GraphemeBreakType.Other */;\r\n    }\r\n}\r\nGraphemeBreakTree._INSTANCE = null;\r\nfunction getGraphemeBreakRawData() {\r\n    // generated using https://github.com/alexdima/unicode-utils/blob/main/grapheme-break.js\r\n    return JSON.parse('[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]');\r\n}\r\n//#endregion\r\n/**\r\n * Computes the offset after performing a left delete on the given string,\r\n * while considering unicode grapheme/emoji rules.\r\n*/\r\nfunction getLeftDeleteOffset(offset, str) {\r\n    if (offset === 0) {\r\n        return 0;\r\n    }\r\n    // Try to delete emoji part.\r\n    const emojiOffset = getOffsetBeforeLastEmojiComponent(offset, str);\r\n    if (emojiOffset !== undefined) {\r\n        return emojiOffset;\r\n    }\r\n    // Otherwise, just skip a single code point.\r\n    const iterator = new CodePointIterator(str, offset);\r\n    iterator.prevCodePoint();\r\n    return iterator.offset;\r\n}\r\nfunction getOffsetBeforeLastEmojiComponent(initialOffset, str) {\r\n    // See https://www.unicode.org/reports/tr51/tr51-14.html#EBNF_and_Regex for the\r\n    // structure of emojis.\r\n    const iterator = new CodePointIterator(str, initialOffset);\r\n    let codePoint = iterator.prevCodePoint();\r\n    // Skip modifiers\r\n    while ((isEmojiModifier(codePoint) || codePoint === 65039 /* CodePoint.emojiVariantSelector */ || codePoint === 8419 /* CodePoint.enclosingKeyCap */)) {\r\n        if (iterator.offset === 0) {\r\n            // Cannot skip modifier, no preceding emoji base.\r\n            return undefined;\r\n        }\r\n        codePoint = iterator.prevCodePoint();\r\n    }\r\n    // Expect base emoji\r\n    if (!isEmojiImprecise(codePoint)) {\r\n        // Unexpected code point, not a valid emoji.\r\n        return undefined;\r\n    }\r\n    let resultOffset = iterator.offset;\r\n    if (resultOffset > 0) {\r\n        // Skip optional ZWJ code points that combine multiple emojis.\r\n        // In theory, we should check if that ZWJ actually combines multiple emojis\r\n        // to prevent deleting ZWJs in situations we didn't account for.\r\n        const optionalZwjCodePoint = iterator.prevCodePoint();\r\n        if (optionalZwjCodePoint === 8205 /* CodePoint.zwj */) {\r\n            resultOffset = iterator.offset;\r\n        }\r\n    }\r\n    return resultOffset;\r\n}\r\nfunction isEmojiModifier(codePoint) {\r\n    return 0x1F3FB <= codePoint && codePoint <= 0x1F3FF;\r\n}\r\nconst noBreakWhitespace = '\\xa0';\r\nclass AmbiguousCharacters {\r\n    static getInstance(locales) {\r\n        return _a.cache.get(Array.from(locales));\r\n    }\r\n    static getLocales() {\r\n        return _a._locales.value;\r\n    }\r\n    constructor(confusableDictionary) {\r\n        this.confusableDictionary = confusableDictionary;\r\n    }\r\n    isAmbiguous(codePoint) {\r\n        return this.confusableDictionary.has(codePoint);\r\n    }\r\n    /**\r\n     * Returns the non basic ASCII code point that the given code point can be confused,\r\n     * or undefined if such code point does note exist.\r\n     */\r\n    getPrimaryConfusable(codePoint) {\r\n        return this.confusableDictionary.get(codePoint);\r\n    }\r\n    getConfusableCodePoints() {\r\n        return new Set(this.confusableDictionary.keys());\r\n    }\r\n}\r\n_a = AmbiguousCharacters;\r\nAmbiguousCharacters.ambiguousCharacterData = new _lazy_js__WEBPACK_IMPORTED_MODULE_1__.Lazy(() => {\r\n    // Generated using https://github.com/hediet/vscode-unicode-data\r\n    // Stored as key1, value1, key2, value2, ...\r\n    return JSON.parse('{\\\"_common\\\":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],\\\"_default\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"cs\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"de\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"es\\\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"fr\\\":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"it\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"ja\\\":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],\\\"ko\\\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"pl\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"pt-BR\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"qps-ploc\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"ru\\\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"tr\\\":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\\\"zh-hans\\\":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],\\\"zh-hant\\\":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}');\r\n});\r\nAmbiguousCharacters.cache = new _cache_js__WEBPACK_IMPORTED_MODULE_0__.LRUCachedFunction({ getCacheKey: JSON.stringify }, (locales) => {\r\n    function arrayToMap(arr) {\r\n        const result = new Map();\r\n        for (let i = 0; i < arr.length; i += 2) {\r\n            result.set(arr[i], arr[i + 1]);\r\n        }\r\n        return result;\r\n    }\r\n    function mergeMaps(map1, map2) {\r\n        const result = new Map(map1);\r\n        for (const [key, value] of map2) {\r\n            result.set(key, value);\r\n        }\r\n        return result;\r\n    }\r\n    function intersectMaps(map1, map2) {\r\n        if (!map1) {\r\n            return map2;\r\n        }\r\n        const result = new Map();\r\n        for (const [key, value] of map1) {\r\n            if (map2.has(key)) {\r\n                result.set(key, value);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    const data = _a.ambiguousCharacterData.value;\r\n    let filteredLocales = locales.filter((l) => !l.startsWith('_') && l in data);\r\n    if (filteredLocales.length === 0) {\r\n        filteredLocales = ['_default'];\r\n    }\r\n    let languageSpecificMap = undefined;\r\n    for (const locale of filteredLocales) {\r\n        const map = arrayToMap(data[locale]);\r\n        languageSpecificMap = intersectMaps(languageSpecificMap, map);\r\n    }\r\n    const commonMap = arrayToMap(data['_common']);\r\n    const map = mergeMaps(commonMap, languageSpecificMap);\r\n    return new _a(map);\r\n});\r\nAmbiguousCharacters._locales = new _lazy_js__WEBPACK_IMPORTED_MODULE_1__.Lazy(() => Object.keys(_a.ambiguousCharacterData.value).filter((k) => !k.startsWith('_')));\r\nclass InvisibleCharacters {\r\n    static getRawData() {\r\n        // Generated using https://github.com/hediet/vscode-unicode-data\r\n        return JSON.parse('[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]');\r\n    }\r\n    static getData() {\r\n        if (!this._data) {\r\n            this._data = new Set(InvisibleCharacters.getRawData());\r\n        }\r\n        return this._data;\r\n    }\r\n    static isInvisibleCharacter(codePoint) {\r\n        return InvisibleCharacters.getData().has(codePoint);\r\n    }\r\n    static get codePoints() {\r\n        return InvisibleCharacters.getData();\r\n    }\r\n}\r\nInvisibleCharacters._data = undefined;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/strings.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/types.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/types.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertIsDefined: () => (/* binding */ assertIsDefined),\n/* harmony export */   assertType: () => (/* binding */ assertType),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isTypedArray: () => (/* binding */ isTypedArray),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isUndefinedOrNull: () => (/* binding */ isUndefinedOrNull),\n/* harmony export */   validateConstraint: () => (/* binding */ validateConstraint),\n/* harmony export */   validateConstraints: () => (/* binding */ validateConstraints)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * @returns whether the provided parameter is a JavaScript String or not.\r\n */\r\nfunction isString(str) {\r\n    return (typeof str === 'string');\r\n}\r\n/**\r\n * @returns whether the provided parameter is of type `object` but **not**\r\n *\t`null`, an `array`, a `regexp`, nor a `date`.\r\n */\r\nfunction isObject(obj) {\r\n    // The method can't do a type cast since there are type (like strings) which\r\n    // are subclasses of any put not positvely matched by the function. Hence type\r\n    // narrowing results in wrong results.\r\n    return typeof obj === 'object'\r\n        && obj !== null\r\n        && !Array.isArray(obj)\r\n        && !(obj instanceof RegExp)\r\n        && !(obj instanceof Date);\r\n}\r\n/**\r\n * @returns whether the provided parameter is of type `Buffer` or Uint8Array dervived type\r\n */\r\nfunction isTypedArray(obj) {\r\n    const TypedArray = Object.getPrototypeOf(Uint8Array);\r\n    return typeof obj === 'object'\r\n        && obj instanceof TypedArray;\r\n}\r\n/**\r\n * In **contrast** to just checking `typeof` this will return `false` for `NaN`.\r\n * @returns whether the provided parameter is a JavaScript Number or not.\r\n */\r\nfunction isNumber(obj) {\r\n    return (typeof obj === 'number' && !isNaN(obj));\r\n}\r\n/**\r\n * @returns whether the provided parameter is an Iterable, casting to the given generic\r\n */\r\nfunction isIterable(obj) {\r\n    return !!obj && typeof obj[Symbol.iterator] === 'function';\r\n}\r\n/**\r\n * @returns whether the provided parameter is a JavaScript Boolean or not.\r\n */\r\nfunction isBoolean(obj) {\r\n    return (obj === true || obj === false);\r\n}\r\n/**\r\n * @returns whether the provided parameter is undefined.\r\n */\r\nfunction isUndefined(obj) {\r\n    return (typeof obj === 'undefined');\r\n}\r\n/**\r\n * @returns whether the provided parameter is defined.\r\n */\r\nfunction isDefined(arg) {\r\n    return !isUndefinedOrNull(arg);\r\n}\r\n/**\r\n * @returns whether the provided parameter is undefined or null.\r\n */\r\nfunction isUndefinedOrNull(obj) {\r\n    return (isUndefined(obj) || obj === null);\r\n}\r\nfunction assertType(condition, type) {\r\n    if (!condition) {\r\n        throw new Error(type ? `Unexpected type, expected '${type}'` : 'Unexpected type');\r\n    }\r\n}\r\n/**\r\n * Asserts that the argument passed in is neither undefined nor null.\r\n */\r\nfunction assertIsDefined(arg) {\r\n    if (isUndefinedOrNull(arg)) {\r\n        throw new Error('Assertion Failed: argument is undefined or null');\r\n    }\r\n    return arg;\r\n}\r\n/**\r\n * @returns whether the provided parameter is a JavaScript Function or not.\r\n */\r\nfunction isFunction(obj) {\r\n    return (typeof obj === 'function');\r\n}\r\nfunction validateConstraints(args, constraints) {\r\n    const len = Math.min(args.length, constraints.length);\r\n    for (let i = 0; i < len; i++) {\r\n        validateConstraint(args[i], constraints[i]);\r\n    }\r\n}\r\nfunction validateConstraint(arg, constraint) {\r\n    if (isString(constraint)) {\r\n        if (typeof arg !== constraint) {\r\n            throw new Error(`argument does not match constraint: typeof ${constraint}`);\r\n        }\r\n    }\r\n    else if (isFunction(constraint)) {\r\n        try {\r\n            if (arg instanceof constraint) {\r\n                return;\r\n            }\r\n        }\r\n        catch (_a) {\r\n            // ignore\r\n        }\r\n        if (!isUndefinedOrNull(arg) && arg.constructor === constraint) {\r\n            return;\r\n        }\r\n        if (constraint.length === 1 && constraint.call(undefined, arg) === true) {\r\n            return;\r\n        }\r\n        throw new Error(`argument does not match one of these constraints: arg instanceof constraint, arg.constructor === constraint, nor constraint(arg) === true`);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0EsNkRBQTZELEtBQUs7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSwwRUFBMEUsV0FBVztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL3R5cGVzLmpzP2VmOGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbi8qKlxyXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgYSBKYXZhU2NyaXB0IFN0cmluZyBvciBub3QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcoc3RyKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKTtcclxufVxyXG4vKipcclxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIG9mIHR5cGUgYG9iamVjdGAgYnV0ICoqbm90KipcclxuICpcdGBudWxsYCwgYW4gYGFycmF5YCwgYSBgcmVnZXhwYCwgbm9yIGEgYGRhdGVgLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xyXG4gICAgLy8gVGhlIG1ldGhvZCBjYW4ndCBkbyBhIHR5cGUgY2FzdCBzaW5jZSB0aGVyZSBhcmUgdHlwZSAobGlrZSBzdHJpbmdzKSB3aGljaFxyXG4gICAgLy8gYXJlIHN1YmNsYXNzZXMgb2YgYW55IHB1dCBub3QgcG9zaXR2ZWx5IG1hdGNoZWQgYnkgdGhlIGZ1bmN0aW9uLiBIZW5jZSB0eXBlXHJcbiAgICAvLyBuYXJyb3dpbmcgcmVzdWx0cyBpbiB3cm9uZyByZXN1bHRzLlxyXG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXHJcbiAgICAgICAgJiYgb2JqICE9PSBudWxsXHJcbiAgICAgICAgJiYgIUFycmF5LmlzQXJyYXkob2JqKVxyXG4gICAgICAgICYmICEob2JqIGluc3RhbmNlb2YgUmVnRXhwKVxyXG4gICAgICAgICYmICEob2JqIGluc3RhbmNlb2YgRGF0ZSk7XHJcbn1cclxuLyoqXHJcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBvZiB0eXBlIGBCdWZmZXJgIG9yIFVpbnQ4QXJyYXkgZGVydml2ZWQgdHlwZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZWRBcnJheShvYmopIHtcclxuICAgIGNvbnN0IFR5cGVkQXJyYXkgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSk7XHJcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcclxuICAgICAgICAmJiBvYmogaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xyXG59XHJcbi8qKlxyXG4gKiBJbiAqKmNvbnRyYXN0KiogdG8ganVzdCBjaGVja2luZyBgdHlwZW9mYCB0aGlzIHdpbGwgcmV0dXJuIGBmYWxzZWAgZm9yIGBOYU5gLlxyXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgYSBKYXZhU2NyaXB0IE51bWJlciBvciBub3QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIob2JqKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBvYmogPT09ICdudW1iZXInICYmICFpc05hTihvYmopKTtcclxufVxyXG4vKipcclxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIGFuIEl0ZXJhYmxlLCBjYXN0aW5nIHRvIHRoZSBnaXZlbiBnZW5lcmljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShvYmopIHtcclxuICAgIHJldHVybiAhIW9iaiAmJiB0eXBlb2Ygb2JqW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XHJcbn1cclxuLyoqXHJcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBhIEphdmFTY3JpcHQgQm9vbGVhbiBvciBub3QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKG9iaikge1xyXG4gICAgcmV0dXJuIChvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSk7XHJcbn1cclxuLyoqXHJcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyB1bmRlZmluZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWQob2JqKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKTtcclxufVxyXG4vKipcclxuICogQHJldHVybnMgd2hldGhlciB0aGUgcHJvdmlkZWQgcGFyYW1ldGVyIGlzIGRlZmluZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKGFyZykge1xyXG4gICAgcmV0dXJuICFpc1VuZGVmaW5lZE9yTnVsbChhcmcpO1xyXG59XHJcbi8qKlxyXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkIG9yIG51bGwuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWRPck51bGwob2JqKSB7XHJcbiAgICByZXR1cm4gKGlzVW5kZWZpbmVkKG9iaikgfHwgb2JqID09PSBudWxsKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VHlwZShjb25kaXRpb24sIHR5cGUpIHtcclxuICAgIGlmICghY29uZGl0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHR5cGUgPyBgVW5leHBlY3RlZCB0eXBlLCBleHBlY3RlZCAnJHt0eXBlfSdgIDogJ1VuZXhwZWN0ZWQgdHlwZScpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBc3NlcnRzIHRoYXQgdGhlIGFyZ3VtZW50IHBhc3NlZCBpbiBpcyBuZWl0aGVyIHVuZGVmaW5lZCBub3IgbnVsbC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJc0RlZmluZWQoYXJnKSB7XHJcbiAgICBpZiAoaXNVbmRlZmluZWRPck51bGwoYXJnKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXNzZXJ0aW9uIEZhaWxlZDogYXJndW1lbnQgaXMgdW5kZWZpbmVkIG9yIG51bGwnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcmc7XHJcbn1cclxuLyoqXHJcbiAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIHByb3ZpZGVkIHBhcmFtZXRlciBpcyBhIEphdmFTY3JpcHQgRnVuY3Rpb24gb3Igbm90LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbnN0cmFpbnRzKGFyZ3MsIGNvbnN0cmFpbnRzKSB7XHJcbiAgICBjb25zdCBsZW4gPSBNYXRoLm1pbihhcmdzLmxlbmd0aCwgY29uc3RyYWludHMubGVuZ3RoKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICB2YWxpZGF0ZUNvbnN0cmFpbnQoYXJnc1tpXSwgY29uc3RyYWludHNbaV0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbnN0cmFpbnQoYXJnLCBjb25zdHJhaW50KSB7XHJcbiAgICBpZiAoaXNTdHJpbmcoY29uc3RyYWludCkpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGFyZyAhPT0gY29uc3RyYWludCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGFyZ3VtZW50IGRvZXMgbm90IG1hdGNoIGNvbnN0cmFpbnQ6IHR5cGVvZiAke2NvbnN0cmFpbnR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihjb25zdHJhaW50KSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBjb25zdHJhaW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgIC8vIGlnbm9yZVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkT3JOdWxsKGFyZykgJiYgYXJnLmNvbnN0cnVjdG9yID09PSBjb25zdHJhaW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbnN0cmFpbnQubGVuZ3RoID09PSAxICYmIGNvbnN0cmFpbnQuY2FsbCh1bmRlZmluZWQsIGFyZykgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGFyZ3VtZW50IGRvZXMgbm90IG1hdGNoIG9uZSBvZiB0aGVzZSBjb25zdHJhaW50czogYXJnIGluc3RhbmNlb2YgY29uc3RyYWludCwgYXJnLmNvbnN0cnVjdG9yID09PSBjb25zdHJhaW50LCBub3IgY29uc3RyYWludChhcmcpID09PSB0cnVlYCk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/types.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/uint.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uint.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toUint32: () => (/* binding */ toUint32),\n/* harmony export */   toUint8: () => (/* binding */ toUint8)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nfunction toUint8(v) {\r\n    if (v < 0) {\r\n        return 0;\r\n    }\r\n    if (v > 255 /* Constants.MAX_UINT_8 */) {\r\n        return 255 /* Constants.MAX_UINT_8 */;\r\n    }\r\n    return v | 0;\r\n}\r\nfunction toUint32(v) {\r\n    if (v < 0) {\r\n        return 0;\r\n    }\r\n    if (v > 4294967295 /* Constants.MAX_UINT_32 */) {\r\n        return 4294967295 /* Constants.MAX_UINT_32 */;\r\n    }\r\n    return v | 0;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvYmFzZS9jb21tb24vdWludC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2Jhc2UvY29tbW9uL3VpbnQuanM/MDk5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvVWludDgodikge1xyXG4gICAgaWYgKHYgPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBpZiAodiA+IDI1NSAvKiBDb25zdGFudHMuTUFYX1VJTlRfOCAqLykge1xyXG4gICAgICAgIHJldHVybiAyNTUgLyogQ29uc3RhbnRzLk1BWF9VSU5UXzggKi87XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdiB8IDA7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHRvVWludDMyKHYpIHtcclxuICAgIGlmICh2IDwgMCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgaWYgKHYgPiA0Mjk0OTY3Mjk1IC8qIENvbnN0YW50cy5NQVhfVUlOVF8zMiAqLykge1xyXG4gICAgICAgIHJldHVybiA0Mjk0OTY3Mjk1IC8qIENvbnN0YW50cy5NQVhfVUlOVF8zMiAqLztcclxuICAgIH1cclxuICAgIHJldHVybiB2IHwgMDtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/uint.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/uri.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uri.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   URI: () => (/* binding */ URI),\n/* harmony export */   uriToFsPath: () => (/* binding */ uriToFsPath)\n/* harmony export */ });\n/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path.js */ \"./node_modules/monaco-editor/esm/vs/base/common/path.js\");\n/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform.js */ \"./node_modules/monaco-editor/esm/vs/base/common/platform.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\r\nconst _singleSlashStart = /^\\//;\r\nconst _doubleSlashStart = /^\\/\\//;\r\nfunction _validateUri(ret, _strict) {\r\n    // scheme, must be set\r\n    if (!ret.scheme && _strict) {\r\n        throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\r\n    }\r\n    // scheme, https://tools.ietf.org/html/rfc3986#section-3.1\r\n    // ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\r\n    if (ret.scheme && !_schemePattern.test(ret.scheme)) {\r\n        throw new Error('[UriError]: Scheme contains illegal characters.');\r\n    }\r\n    // path, http://tools.ietf.org/html/rfc3986#section-3.3\r\n    // If a URI contains an authority component, then the path component\r\n    // must either be empty or begin with a slash (\"/\") character.  If a URI\r\n    // does not contain an authority component, then the path cannot begin\r\n    // with two slash characters (\"//\").\r\n    if (ret.path) {\r\n        if (ret.authority) {\r\n            if (!_singleSlashStart.test(ret.path)) {\r\n                throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\r\n            }\r\n        }\r\n        else {\r\n            if (_doubleSlashStart.test(ret.path)) {\r\n                throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\r\n            }\r\n        }\r\n    }\r\n}\r\n// for a while we allowed uris *without* schemes and this is the migration\r\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\r\n// back to the file-scheme. that should cause the least carnage and still be a\r\n// clear warning\r\nfunction _schemeFix(scheme, _strict) {\r\n    if (!scheme && !_strict) {\r\n        return 'file';\r\n    }\r\n    return scheme;\r\n}\r\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\r\nfunction _referenceResolution(scheme, path) {\r\n    // the slash-character is our 'default base' as we don't\r\n    // support constructing URIs relative to other URIs. This\r\n    // also means that we alter and potentially break paths.\r\n    // see https://tools.ietf.org/html/rfc3986#section-5.1.4\r\n    switch (scheme) {\r\n        case 'https':\r\n        case 'http':\r\n        case 'file':\r\n            if (!path) {\r\n                path = _slash;\r\n            }\r\n            else if (path[0] !== _slash) {\r\n                path = _slash + path;\r\n            }\r\n            break;\r\n    }\r\n    return path;\r\n}\r\nconst _empty = '';\r\nconst _slash = '/';\r\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\r\n/**\r\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\r\n * This class is a simple parser which creates the basic component parts\r\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\r\n * and encoding.\r\n *\r\n * ```txt\r\n *       foo://example.com:8042/over/there?name=ferret#nose\r\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\r\n *        |           |            |            |        |\r\n *     scheme     authority       path        query   fragment\r\n *        |   _____________________|__\r\n *       / \\ /                        \\\r\n *       urn:example:animal:ferret:nose\r\n * ```\r\n */\r\nclass URI {\r\n    static isUri(thing) {\r\n        if (thing instanceof URI) {\r\n            return true;\r\n        }\r\n        if (!thing) {\r\n            return false;\r\n        }\r\n        return typeof thing.authority === 'string'\r\n            && typeof thing.fragment === 'string'\r\n            && typeof thing.path === 'string'\r\n            && typeof thing.query === 'string'\r\n            && typeof thing.scheme === 'string'\r\n            && typeof thing.fsPath === 'string'\r\n            && typeof thing.with === 'function'\r\n            && typeof thing.toString === 'function';\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(schemeOrData, authority, path, query, fragment, _strict = false) {\r\n        if (typeof schemeOrData === 'object') {\r\n            this.scheme = schemeOrData.scheme || _empty;\r\n            this.authority = schemeOrData.authority || _empty;\r\n            this.path = schemeOrData.path || _empty;\r\n            this.query = schemeOrData.query || _empty;\r\n            this.fragment = schemeOrData.fragment || _empty;\r\n            // no validation because it's this URI\r\n            // that creates uri components.\r\n            // _validateUri(this);\r\n        }\r\n        else {\r\n            this.scheme = _schemeFix(schemeOrData, _strict);\r\n            this.authority = authority || _empty;\r\n            this.path = _referenceResolution(this.scheme, path || _empty);\r\n            this.query = query || _empty;\r\n            this.fragment = fragment || _empty;\r\n            _validateUri(this, _strict);\r\n        }\r\n    }\r\n    // ---- filesystem path -----------------------\r\n    /**\r\n     * Returns a string representing the corresponding file system path of this URI.\r\n     * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\r\n     * platform specific path separator.\r\n     *\r\n     * * Will *not* validate the path for invalid characters and semantics.\r\n     * * Will *not* look at the scheme of this URI.\r\n     * * The result shall *not* be used for display purposes but for accessing a file on disk.\r\n     *\r\n     *\r\n     * The *difference* to `URI#path` is the use of the platform specific separator and the handling\r\n     * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\r\n     *\r\n     * ```ts\r\n        const u = URI.parse('file://server/c$/folder/file.txt')\r\n        u.authority === 'server'\r\n        u.path === '/shares/c$/file.txt'\r\n        u.fsPath === '\\\\server\\c$\\folder\\file.txt'\r\n    ```\r\n     *\r\n     * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\r\n     * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\r\n     * with URIs that represent files on disk (`file` scheme).\r\n     */\r\n    get fsPath() {\r\n        // if (this.scheme !== 'file') {\r\n        // \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\r\n        // }\r\n        return uriToFsPath(this, false);\r\n    }\r\n    // ---- modify to new -------------------------\r\n    with(change) {\r\n        if (!change) {\r\n            return this;\r\n        }\r\n        let { scheme, authority, path, query, fragment } = change;\r\n        if (scheme === undefined) {\r\n            scheme = this.scheme;\r\n        }\r\n        else if (scheme === null) {\r\n            scheme = _empty;\r\n        }\r\n        if (authority === undefined) {\r\n            authority = this.authority;\r\n        }\r\n        else if (authority === null) {\r\n            authority = _empty;\r\n        }\r\n        if (path === undefined) {\r\n            path = this.path;\r\n        }\r\n        else if (path === null) {\r\n            path = _empty;\r\n        }\r\n        if (query === undefined) {\r\n            query = this.query;\r\n        }\r\n        else if (query === null) {\r\n            query = _empty;\r\n        }\r\n        if (fragment === undefined) {\r\n            fragment = this.fragment;\r\n        }\r\n        else if (fragment === null) {\r\n            fragment = _empty;\r\n        }\r\n        if (scheme === this.scheme\r\n            && authority === this.authority\r\n            && path === this.path\r\n            && query === this.query\r\n            && fragment === this.fragment) {\r\n            return this;\r\n        }\r\n        return new Uri(scheme, authority, path, query, fragment);\r\n    }\r\n    // ---- parse & validate ------------------------\r\n    /**\r\n     * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\r\n     * `file:///usr/home`, or `scheme:with/path`.\r\n     *\r\n     * @param value A string which represents an URI (see `URI#toString`).\r\n     */\r\n    static parse(value, _strict = false) {\r\n        const match = _regexp.exec(value);\r\n        if (!match) {\r\n            return new Uri(_empty, _empty, _empty, _empty, _empty);\r\n        }\r\n        return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);\r\n    }\r\n    /**\r\n     * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\r\n     * `/usr/home`, or `\\\\server\\share\\some\\path`.\r\n     *\r\n     * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\r\n     * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\r\n     * `URI.parse('file://' + path)` because the path might contain characters that are\r\n     * interpreted (# and ?). See the following sample:\r\n     * ```ts\r\n    const good = URI.file('/coding/c#/project1');\r\n    good.scheme === 'file';\r\n    good.path === '/coding/c#/project1';\r\n    good.fragment === '';\r\n    const bad = URI.parse('file://' + '/coding/c#/project1');\r\n    bad.scheme === 'file';\r\n    bad.path === '/coding/c'; // path is now broken\r\n    bad.fragment === '/project1';\r\n    ```\r\n     *\r\n     * @param path A file system path (see `URI#fsPath`)\r\n     */\r\n    static file(path) {\r\n        let authority = _empty;\r\n        // normalize to fwd-slashes on windows,\r\n        // on other systems bwd-slashes are valid\r\n        // filename character, eg /f\\oo/ba\\r.txt\r\n        if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows) {\r\n            path = path.replace(/\\\\/g, _slash);\r\n        }\r\n        // check for authority as used in UNC shares\r\n        // or use the path as given\r\n        if (path[0] === _slash && path[1] === _slash) {\r\n            const idx = path.indexOf(_slash, 2);\r\n            if (idx === -1) {\r\n                authority = path.substring(2);\r\n                path = _slash;\r\n            }\r\n            else {\r\n                authority = path.substring(2, idx);\r\n                path = path.substring(idx) || _slash;\r\n            }\r\n        }\r\n        return new Uri('file', authority, path, _empty, _empty);\r\n    }\r\n    /**\r\n     * Creates new URI from uri components.\r\n     *\r\n     * Unless `strict` is `true` the scheme is defaults to be `file`. This function performs\r\n     * validation and should be used for untrusted uri components retrieved from storage,\r\n     * user input, command arguments etc\r\n     */\r\n    static from(components, strict) {\r\n        const result = new Uri(components.scheme, components.authority, components.path, components.query, components.fragment, strict);\r\n        return result;\r\n    }\r\n    /**\r\n     * Join a URI path with path fragments and normalizes the resulting path.\r\n     *\r\n     * @param uri The input URI.\r\n     * @param pathFragment The path fragment to add to the URI path.\r\n     * @returns The resulting URI.\r\n     */\r\n    static joinPath(uri, ...pathFragment) {\r\n        if (!uri.path) {\r\n            throw new Error(`[UriError]: cannot call joinPath on URI without path`);\r\n        }\r\n        let newPath;\r\n        if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows && uri.scheme === 'file') {\r\n            newPath = URI.file(_path_js__WEBPACK_IMPORTED_MODULE_0__.win32.join(uriToFsPath(uri, true), ...pathFragment)).path;\r\n        }\r\n        else {\r\n            newPath = _path_js__WEBPACK_IMPORTED_MODULE_0__.posix.join(uri.path, ...pathFragment);\r\n        }\r\n        return uri.with({ path: newPath });\r\n    }\r\n    // ---- printing/externalize ---------------------------\r\n    /**\r\n     * Creates a string representation for this URI. It's guaranteed that calling\r\n     * `URI.parse` with the result of this function creates an URI which is equal\r\n     * to this URI.\r\n     *\r\n     * * The result shall *not* be used for display purposes but for externalization or transport.\r\n     * * The result will be encoded using the percentage encoding and encoding happens mostly\r\n     * ignore the scheme-specific encoding rules.\r\n     *\r\n     * @param skipEncoding Do not encode the result, default is `false`\r\n     */\r\n    toString(skipEncoding = false) {\r\n        return _asFormatted(this, skipEncoding);\r\n    }\r\n    toJSON() {\r\n        return this;\r\n    }\r\n    static revive(data) {\r\n        var _a, _b;\r\n        if (!data) {\r\n            return data;\r\n        }\r\n        else if (data instanceof URI) {\r\n            return data;\r\n        }\r\n        else {\r\n            const result = new Uri(data);\r\n            result._formatted = (_a = data.external) !== null && _a !== void 0 ? _a : null;\r\n            result._fsPath = data._sep === _pathSepMarker ? (_b = data.fsPath) !== null && _b !== void 0 ? _b : null : null;\r\n            return result;\r\n        }\r\n    }\r\n}\r\nconst _pathSepMarker = _platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows ? 1 : undefined;\r\n// This class exists so that URI is compatible with vscode.Uri (API).\r\nclass Uri extends URI {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._formatted = null;\r\n        this._fsPath = null;\r\n    }\r\n    get fsPath() {\r\n        if (!this._fsPath) {\r\n            this._fsPath = uriToFsPath(this, false);\r\n        }\r\n        return this._fsPath;\r\n    }\r\n    toString(skipEncoding = false) {\r\n        if (!skipEncoding) {\r\n            if (!this._formatted) {\r\n                this._formatted = _asFormatted(this, false);\r\n            }\r\n            return this._formatted;\r\n        }\r\n        else {\r\n            // we don't cache that\r\n            return _asFormatted(this, true);\r\n        }\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            $mid: 1 /* MarshalledId.Uri */\r\n        };\r\n        // cached state\r\n        if (this._fsPath) {\r\n            res.fsPath = this._fsPath;\r\n            res._sep = _pathSepMarker;\r\n        }\r\n        if (this._formatted) {\r\n            res.external = this._formatted;\r\n        }\r\n        //--- uri components\r\n        if (this.path) {\r\n            res.path = this.path;\r\n        }\r\n        // TODO\r\n        // this isn't correct and can violate the UriComponents contract but\r\n        // this is part of the vscode.Uri API and we shouldn't change how that\r\n        // works anymore\r\n        if (this.scheme) {\r\n            res.scheme = this.scheme;\r\n        }\r\n        if (this.authority) {\r\n            res.authority = this.authority;\r\n        }\r\n        if (this.query) {\r\n            res.query = this.query;\r\n        }\r\n        if (this.fragment) {\r\n            res.fragment = this.fragment;\r\n        }\r\n        return res;\r\n    }\r\n}\r\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\r\nconst encodeTable = {\r\n    [58 /* CharCode.Colon */]: '%3A', // gen-delims\r\n    [47 /* CharCode.Slash */]: '%2F',\r\n    [63 /* CharCode.QuestionMark */]: '%3F',\r\n    [35 /* CharCode.Hash */]: '%23',\r\n    [91 /* CharCode.OpenSquareBracket */]: '%5B',\r\n    [93 /* CharCode.CloseSquareBracket */]: '%5D',\r\n    [64 /* CharCode.AtSign */]: '%40',\r\n    [33 /* CharCode.ExclamationMark */]: '%21', // sub-delims\r\n    [36 /* CharCode.DollarSign */]: '%24',\r\n    [38 /* CharCode.Ampersand */]: '%26',\r\n    [39 /* CharCode.SingleQuote */]: '%27',\r\n    [40 /* CharCode.OpenParen */]: '%28',\r\n    [41 /* CharCode.CloseParen */]: '%29',\r\n    [42 /* CharCode.Asterisk */]: '%2A',\r\n    [43 /* CharCode.Plus */]: '%2B',\r\n    [44 /* CharCode.Comma */]: '%2C',\r\n    [59 /* CharCode.Semicolon */]: '%3B',\r\n    [61 /* CharCode.Equals */]: '%3D',\r\n    [32 /* CharCode.Space */]: '%20',\r\n};\r\nfunction encodeURIComponentFast(uriComponent, isPath, isAuthority) {\r\n    let res = undefined;\r\n    let nativeEncodePos = -1;\r\n    for (let pos = 0; pos < uriComponent.length; pos++) {\r\n        const code = uriComponent.charCodeAt(pos);\r\n        // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\r\n        if ((code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */)\r\n            || (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */)\r\n            || (code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */)\r\n            || code === 45 /* CharCode.Dash */\r\n            || code === 46 /* CharCode.Period */\r\n            || code === 95 /* CharCode.Underline */\r\n            || code === 126 /* CharCode.Tilde */\r\n            || (isPath && code === 47 /* CharCode.Slash */)\r\n            || (isAuthority && code === 91 /* CharCode.OpenSquareBracket */)\r\n            || (isAuthority && code === 93 /* CharCode.CloseSquareBracket */)\r\n            || (isAuthority && code === 58 /* CharCode.Colon */)) {\r\n            // check if we are delaying native encode\r\n            if (nativeEncodePos !== -1) {\r\n                res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\r\n                nativeEncodePos = -1;\r\n            }\r\n            // check if we write into a new string (by default we try to return the param)\r\n            if (res !== undefined) {\r\n                res += uriComponent.charAt(pos);\r\n            }\r\n        }\r\n        else {\r\n            // encoding needed, we need to allocate a new string\r\n            if (res === undefined) {\r\n                res = uriComponent.substr(0, pos);\r\n            }\r\n            // check with default table first\r\n            const escaped = encodeTable[code];\r\n            if (escaped !== undefined) {\r\n                // check if we are delaying native encode\r\n                if (nativeEncodePos !== -1) {\r\n                    res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\r\n                    nativeEncodePos = -1;\r\n                }\r\n                // append escaped variant to result\r\n                res += escaped;\r\n            }\r\n            else if (nativeEncodePos === -1) {\r\n                // use native encode only when needed\r\n                nativeEncodePos = pos;\r\n            }\r\n        }\r\n    }\r\n    if (nativeEncodePos !== -1) {\r\n        res += encodeURIComponent(uriComponent.substring(nativeEncodePos));\r\n    }\r\n    return res !== undefined ? res : uriComponent;\r\n}\r\nfunction encodeURIComponentMinimal(path) {\r\n    let res = undefined;\r\n    for (let pos = 0; pos < path.length; pos++) {\r\n        const code = path.charCodeAt(pos);\r\n        if (code === 35 /* CharCode.Hash */ || code === 63 /* CharCode.QuestionMark */) {\r\n            if (res === undefined) {\r\n                res = path.substr(0, pos);\r\n            }\r\n            res += encodeTable[code];\r\n        }\r\n        else {\r\n            if (res !== undefined) {\r\n                res += path[pos];\r\n            }\r\n        }\r\n    }\r\n    return res !== undefined ? res : path;\r\n}\r\n/**\r\n * Compute `fsPath` for the given uri\r\n */\r\nfunction uriToFsPath(uri, keepDriveLetterCasing) {\r\n    let value;\r\n    if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\r\n        // unc path: file://shares/c$/far/boo\r\n        value = `//${uri.authority}${uri.path}`;\r\n    }\r\n    else if (uri.path.charCodeAt(0) === 47 /* CharCode.Slash */\r\n        && (uri.path.charCodeAt(1) >= 65 /* CharCode.A */ && uri.path.charCodeAt(1) <= 90 /* CharCode.Z */ || uri.path.charCodeAt(1) >= 97 /* CharCode.a */ && uri.path.charCodeAt(1) <= 122 /* CharCode.z */)\r\n        && uri.path.charCodeAt(2) === 58 /* CharCode.Colon */) {\r\n        if (!keepDriveLetterCasing) {\r\n            // windows drive letter: file:///c:/far/boo\r\n            value = uri.path[1].toLowerCase() + uri.path.substr(2);\r\n        }\r\n        else {\r\n            value = uri.path.substr(1);\r\n        }\r\n    }\r\n    else {\r\n        // other path\r\n        value = uri.path;\r\n    }\r\n    if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows) {\r\n        value = value.replace(/\\//g, '\\\\');\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Create the external version of a uri\r\n */\r\nfunction _asFormatted(uri, skipEncoding) {\r\n    const encoder = !skipEncoding\r\n        ? encodeURIComponentFast\r\n        : encodeURIComponentMinimal;\r\n    let res = '';\r\n    let { scheme, authority, path, query, fragment } = uri;\r\n    if (scheme) {\r\n        res += scheme;\r\n        res += ':';\r\n    }\r\n    if (authority || scheme === 'file') {\r\n        res += _slash;\r\n        res += _slash;\r\n    }\r\n    if (authority) {\r\n        let idx = authority.indexOf('@');\r\n        if (idx !== -1) {\r\n            // <user>@<auth>\r\n            const userinfo = authority.substr(0, idx);\r\n            authority = authority.substr(idx + 1);\r\n            idx = userinfo.lastIndexOf(':');\r\n            if (idx === -1) {\r\n                res += encoder(userinfo, false, false);\r\n            }\r\n            else {\r\n                // <user>:<pass>@<auth>\r\n                res += encoder(userinfo.substr(0, idx), false, false);\r\n                res += ':';\r\n                res += encoder(userinfo.substr(idx + 1), false, true);\r\n            }\r\n            res += '@';\r\n        }\r\n        authority = authority.toLowerCase();\r\n        idx = authority.lastIndexOf(':');\r\n        if (idx === -1) {\r\n            res += encoder(authority, false, true);\r\n        }\r\n        else {\r\n            // <auth>:<port>\r\n            res += encoder(authority.substr(0, idx), false, true);\r\n            res += authority.substr(idx);\r\n        }\r\n    }\r\n    if (path) {\r\n        // lower-case windows drive letters in /C:/fff or C:/fff\r\n        if (path.length >= 3 && path.charCodeAt(0) === 47 /* CharCode.Slash */ && path.charCodeAt(2) === 58 /* CharCode.Colon */) {\r\n            const code = path.charCodeAt(1);\r\n            if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\r\n                path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\r\n            }\r\n        }\r\n        else if (path.length >= 2 && path.charCodeAt(1) === 58 /* CharCode.Colon */) {\r\n            const code = path.charCodeAt(0);\r\n            if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {\r\n                path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\r\n            }\r\n        }\r\n        // encode the rest of the path\r\n        res += encoder(path, true, false);\r\n    }\r\n    if (query) {\r\n        res += '?';\r\n        res += encoder(query, false, false);\r\n    }\r\n    if (fragment) {\r\n        res += '#';\r\n        res += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\r\n    }\r\n    return res;\r\n}\r\n// --- decode\r\nfunction decodeURIComponentGraceful(str) {\r\n    try {\r\n        return decodeURIComponent(str);\r\n    }\r\n    catch (_a) {\r\n        if (str.length > 3) {\r\n            return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\r\n        }\r\n        else {\r\n            return str;\r\n        }\r\n    }\r\n}\r\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\r\nfunction percentDecode(str) {\r\n    if (!str.match(_rEncodedAsHex)) {\r\n        return str;\r\n    }\r\n    return str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/uri.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleWorkerClient: () => (/* binding */ SimpleWorkerClient),\n/* harmony export */   SimpleWorkerServer: () => (/* binding */ SimpleWorkerServer),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   logOnceWebWorkerWarning: () => (/* binding */ logOnceWebWorkerWarning)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\");\n/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../objects.js */ \"./node_modules/monaco-editor/esm/vs/base/common/objects.js\");\n/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../platform.js */ \"./node_modules/monaco-editor/esm/vs/base/common/platform.js\");\n/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst INITIALIZE = '$initialize';\r\nlet webWorkerWarningLogged = false;\r\nfunction logOnceWebWorkerWarning(err) {\r\n    if (!_platform_js__WEBPACK_IMPORTED_MODULE_4__.isWeb) {\r\n        // running tests\r\n        return;\r\n    }\r\n    if (!webWorkerWarningLogged) {\r\n        webWorkerWarningLogged = true;\r\n        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\r\n    }\r\n    console.warn(err.message);\r\n}\r\nclass RequestMessage {\r\n    constructor(vsWorker, req, method, args) {\r\n        this.vsWorker = vsWorker;\r\n        this.req = req;\r\n        this.method = method;\r\n        this.args = args;\r\n        this.type = 0 /* MessageType.Request */;\r\n    }\r\n}\r\nclass ReplyMessage {\r\n    constructor(vsWorker, seq, res, err) {\r\n        this.vsWorker = vsWorker;\r\n        this.seq = seq;\r\n        this.res = res;\r\n        this.err = err;\r\n        this.type = 1 /* MessageType.Reply */;\r\n    }\r\n}\r\nclass SubscribeEventMessage {\r\n    constructor(vsWorker, req, eventName, arg) {\r\n        this.vsWorker = vsWorker;\r\n        this.req = req;\r\n        this.eventName = eventName;\r\n        this.arg = arg;\r\n        this.type = 2 /* MessageType.SubscribeEvent */;\r\n    }\r\n}\r\nclass EventMessage {\r\n    constructor(vsWorker, req, event) {\r\n        this.vsWorker = vsWorker;\r\n        this.req = req;\r\n        this.event = event;\r\n        this.type = 3 /* MessageType.Event */;\r\n    }\r\n}\r\nclass UnsubscribeEventMessage {\r\n    constructor(vsWorker, req) {\r\n        this.vsWorker = vsWorker;\r\n        this.req = req;\r\n        this.type = 4 /* MessageType.UnsubscribeEvent */;\r\n    }\r\n}\r\nclass SimpleWorkerProtocol {\r\n    constructor(handler) {\r\n        this._workerId = -1;\r\n        this._handler = handler;\r\n        this._lastSentReq = 0;\r\n        this._pendingReplies = Object.create(null);\r\n        this._pendingEmitters = new Map();\r\n        this._pendingEvents = new Map();\r\n    }\r\n    setWorkerId(workerId) {\r\n        this._workerId = workerId;\r\n    }\r\n    sendMessage(method, args) {\r\n        const req = String(++this._lastSentReq);\r\n        return new Promise((resolve, reject) => {\r\n            this._pendingReplies[req] = {\r\n                resolve: resolve,\r\n                reject: reject\r\n            };\r\n            this._send(new RequestMessage(this._workerId, req, method, args));\r\n        });\r\n    }\r\n    listen(eventName, arg) {\r\n        let req = null;\r\n        const emitter = new _event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter({\r\n            onWillAddFirstListener: () => {\r\n                req = String(++this._lastSentReq);\r\n                this._pendingEmitters.set(req, emitter);\r\n                this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));\r\n            },\r\n            onDidRemoveLastListener: () => {\r\n                this._pendingEmitters.delete(req);\r\n                this._send(new UnsubscribeEventMessage(this._workerId, req));\r\n                req = null;\r\n            }\r\n        });\r\n        return emitter.event;\r\n    }\r\n    handleMessage(message) {\r\n        if (!message || !message.vsWorker) {\r\n            return;\r\n        }\r\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\r\n            return;\r\n        }\r\n        this._handleMessage(message);\r\n    }\r\n    _handleMessage(msg) {\r\n        switch (msg.type) {\r\n            case 1 /* MessageType.Reply */:\r\n                return this._handleReplyMessage(msg);\r\n            case 0 /* MessageType.Request */:\r\n                return this._handleRequestMessage(msg);\r\n            case 2 /* MessageType.SubscribeEvent */:\r\n                return this._handleSubscribeEventMessage(msg);\r\n            case 3 /* MessageType.Event */:\r\n                return this._handleEventMessage(msg);\r\n            case 4 /* MessageType.UnsubscribeEvent */:\r\n                return this._handleUnsubscribeEventMessage(msg);\r\n        }\r\n    }\r\n    _handleReplyMessage(replyMessage) {\r\n        if (!this._pendingReplies[replyMessage.seq]) {\r\n            console.warn('Got reply to unknown seq');\r\n            return;\r\n        }\r\n        const reply = this._pendingReplies[replyMessage.seq];\r\n        delete this._pendingReplies[replyMessage.seq];\r\n        if (replyMessage.err) {\r\n            let err = replyMessage.err;\r\n            if (replyMessage.err.$isError) {\r\n                err = new Error();\r\n                err.name = replyMessage.err.name;\r\n                err.message = replyMessage.err.message;\r\n                err.stack = replyMessage.err.stack;\r\n            }\r\n            reply.reject(err);\r\n            return;\r\n        }\r\n        reply.resolve(replyMessage.res);\r\n    }\r\n    _handleRequestMessage(requestMessage) {\r\n        const req = requestMessage.req;\r\n        const result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\r\n        result.then((r) => {\r\n            this._send(new ReplyMessage(this._workerId, req, r, undefined));\r\n        }, (e) => {\r\n            if (e.detail instanceof Error) {\r\n                // Loading errors have a detail property that points to the actual error\r\n                e.detail = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(e.detail);\r\n            }\r\n            this._send(new ReplyMessage(this._workerId, req, undefined, (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(e)));\r\n        });\r\n    }\r\n    _handleSubscribeEventMessage(msg) {\r\n        const req = msg.req;\r\n        const disposable = this._handler.handleEvent(msg.eventName, msg.arg)((event) => {\r\n            this._send(new EventMessage(this._workerId, req, event));\r\n        });\r\n        this._pendingEvents.set(req, disposable);\r\n    }\r\n    _handleEventMessage(msg) {\r\n        if (!this._pendingEmitters.has(msg.req)) {\r\n            console.warn('Got event for unknown req');\r\n            return;\r\n        }\r\n        this._pendingEmitters.get(msg.req).fire(msg.event);\r\n    }\r\n    _handleUnsubscribeEventMessage(msg) {\r\n        if (!this._pendingEvents.has(msg.req)) {\r\n            console.warn('Got unsubscribe for unknown req');\r\n            return;\r\n        }\r\n        this._pendingEvents.get(msg.req).dispose();\r\n        this._pendingEvents.delete(msg.req);\r\n    }\r\n    _send(msg) {\r\n        const transfer = [];\r\n        if (msg.type === 0 /* MessageType.Request */) {\r\n            for (let i = 0; i < msg.args.length; i++) {\r\n                if (msg.args[i] instanceof ArrayBuffer) {\r\n                    transfer.push(msg.args[i]);\r\n                }\r\n            }\r\n        }\r\n        else if (msg.type === 1 /* MessageType.Reply */) {\r\n            if (msg.res instanceof ArrayBuffer) {\r\n                transfer.push(msg.res);\r\n            }\r\n        }\r\n        this._handler.sendMessage(msg, transfer);\r\n    }\r\n}\r\n/**\r\n * Main thread side\r\n */\r\nclass SimpleWorkerClient extends _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {\r\n    constructor(workerFactory, moduleId, host) {\r\n        super();\r\n        let lazyProxyReject = null;\r\n        this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg) => {\r\n            this._protocol.handleMessage(msg);\r\n        }, (err) => {\r\n            // in Firefox, web workers fail lazily :(\r\n            // we will reject the proxy\r\n            lazyProxyReject === null || lazyProxyReject === void 0 ? void 0 : lazyProxyReject(err);\r\n        }));\r\n        this._protocol = new SimpleWorkerProtocol({\r\n            sendMessage: (msg, transfer) => {\r\n                this._worker.postMessage(msg, transfer);\r\n            },\r\n            handleMessage: (method, args) => {\r\n                if (typeof host[method] !== 'function') {\r\n                    return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\r\n                }\r\n                try {\r\n                    return Promise.resolve(host[method].apply(host, args));\r\n                }\r\n                catch (e) {\r\n                    return Promise.reject(e);\r\n                }\r\n            },\r\n            handleEvent: (eventName, arg) => {\r\n                if (propertyIsDynamicEvent(eventName)) {\r\n                    const event = host[eventName].call(host, arg);\r\n                    if (typeof event !== 'function') {\r\n                        throw new Error(`Missing dynamic event ${eventName} on main thread host.`);\r\n                    }\r\n                    return event;\r\n                }\r\n                if (propertyIsEvent(eventName)) {\r\n                    const event = host[eventName];\r\n                    if (typeof event !== 'function') {\r\n                        throw new Error(`Missing event ${eventName} on main thread host.`);\r\n                    }\r\n                    return event;\r\n                }\r\n                throw new Error(`Malformed event name ${eventName}`);\r\n            }\r\n        });\r\n        this._protocol.setWorkerId(this._worker.getId());\r\n        // Gather loader configuration\r\n        let loaderConfiguration = null;\r\n        const globalRequire = globalThis.require;\r\n        if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\r\n            // Get the configuration from the Monaco AMD Loader\r\n            loaderConfiguration = globalRequire.getConfig();\r\n        }\r\n        else if (typeof globalThis.requirejs !== 'undefined') {\r\n            // Get the configuration from requirejs\r\n            loaderConfiguration = globalThis.requirejs.s.contexts._.config;\r\n        }\r\n        const hostMethods = (0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(host);\r\n        // Send initialize message\r\n        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\r\n            this._worker.getId(),\r\n            JSON.parse(JSON.stringify(loaderConfiguration)),\r\n            moduleId,\r\n            hostMethods,\r\n        ]);\r\n        // Create proxy to loaded code\r\n        const proxyMethodRequest = (method, args) => {\r\n            return this._request(method, args);\r\n        };\r\n        const proxyListen = (eventName, arg) => {\r\n            return this._protocol.listen(eventName, arg);\r\n        };\r\n        this._lazyProxy = new Promise((resolve, reject) => {\r\n            lazyProxyReject = reject;\r\n            this._onModuleLoaded.then((availableMethods) => {\r\n                resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\r\n            }, (e) => {\r\n                reject(e);\r\n                this._onError('Worker failed to load ' + moduleId, e);\r\n            });\r\n        });\r\n    }\r\n    getProxyObject() {\r\n        return this._lazyProxy;\r\n    }\r\n    _request(method, args) {\r\n        return new Promise((resolve, reject) => {\r\n            this._onModuleLoaded.then(() => {\r\n                this._protocol.sendMessage(method, args).then(resolve, reject);\r\n            }, reject);\r\n        });\r\n    }\r\n    _onError(message, error) {\r\n        console.error(message);\r\n        console.info(error);\r\n    }\r\n}\r\nfunction propertyIsEvent(name) {\r\n    // Assume a property is an event if it has a form of \"onSomething\"\r\n    return name[0] === 'o' && name[1] === 'n' && _strings_js__WEBPACK_IMPORTED_MODULE_5__.isUpperAsciiLetter(name.charCodeAt(2));\r\n}\r\nfunction propertyIsDynamicEvent(name) {\r\n    // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\r\n    return /^onDynamic/.test(name) && _strings_js__WEBPACK_IMPORTED_MODULE_5__.isUpperAsciiLetter(name.charCodeAt(9));\r\n}\r\nfunction createProxyObject(methodNames, invoke, proxyListen) {\r\n    const createProxyMethod = (method) => {\r\n        return function () {\r\n            const args = Array.prototype.slice.call(arguments, 0);\r\n            return invoke(method, args);\r\n        };\r\n    };\r\n    const createProxyDynamicEvent = (eventName) => {\r\n        return function (arg) {\r\n            return proxyListen(eventName, arg);\r\n        };\r\n    };\r\n    const result = {};\r\n    for (const methodName of methodNames) {\r\n        if (propertyIsDynamicEvent(methodName)) {\r\n            result[methodName] = createProxyDynamicEvent(methodName);\r\n            continue;\r\n        }\r\n        if (propertyIsEvent(methodName)) {\r\n            result[methodName] = proxyListen(methodName, undefined);\r\n            continue;\r\n        }\r\n        result[methodName] = createProxyMethod(methodName);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Worker side\r\n */\r\nclass SimpleWorkerServer {\r\n    constructor(postMessage, requestHandlerFactory) {\r\n        this._requestHandlerFactory = requestHandlerFactory;\r\n        this._requestHandler = null;\r\n        this._protocol = new SimpleWorkerProtocol({\r\n            sendMessage: (msg, transfer) => {\r\n                postMessage(msg, transfer);\r\n            },\r\n            handleMessage: (method, args) => this._handleMessage(method, args),\r\n            handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)\r\n        });\r\n    }\r\n    onmessage(msg) {\r\n        this._protocol.handleMessage(msg);\r\n    }\r\n    _handleMessage(method, args) {\r\n        if (method === INITIALIZE) {\r\n            return this.initialize(args[0], args[1], args[2], args[3]);\r\n        }\r\n        if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\r\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\r\n        }\r\n        try {\r\n            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    _handleEvent(eventName, arg) {\r\n        if (!this._requestHandler) {\r\n            throw new Error(`Missing requestHandler`);\r\n        }\r\n        if (propertyIsDynamicEvent(eventName)) {\r\n            const event = this._requestHandler[eventName].call(this._requestHandler, arg);\r\n            if (typeof event !== 'function') {\r\n                throw new Error(`Missing dynamic event ${eventName} on request handler.`);\r\n            }\r\n            return event;\r\n        }\r\n        if (propertyIsEvent(eventName)) {\r\n            const event = this._requestHandler[eventName];\r\n            if (typeof event !== 'function') {\r\n                throw new Error(`Missing event ${eventName} on request handler.`);\r\n            }\r\n            return event;\r\n        }\r\n        throw new Error(`Malformed event name ${eventName}`);\r\n    }\r\n    initialize(workerId, loaderConfig, moduleId, hostMethods) {\r\n        this._protocol.setWorkerId(workerId);\r\n        const proxyMethodRequest = (method, args) => {\r\n            return this._protocol.sendMessage(method, args);\r\n        };\r\n        const proxyListen = (eventName, arg) => {\r\n            return this._protocol.listen(eventName, arg);\r\n        };\r\n        const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\r\n        if (this._requestHandlerFactory) {\r\n            // static request handler\r\n            this._requestHandler = this._requestHandlerFactory(hostProxy);\r\n            return Promise.resolve((0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(this._requestHandler));\r\n        }\r\n        if (loaderConfig) {\r\n            // Remove 'baseUrl', handling it is beyond scope for now\r\n            if (typeof loaderConfig.baseUrl !== 'undefined') {\r\n                delete loaderConfig['baseUrl'];\r\n            }\r\n            if (typeof loaderConfig.paths !== 'undefined') {\r\n                if (typeof loaderConfig.paths.vs !== 'undefined') {\r\n                    delete loaderConfig.paths['vs'];\r\n                }\r\n            }\r\n            if (typeof loaderConfig.trustedTypesPolicy !== 'undefined') {\r\n                // don't use, it has been destroyed during serialize\r\n                delete loaderConfig['trustedTypesPolicy'];\r\n            }\r\n            // Since this is in a web worker, enable catching errors\r\n            loaderConfig.catchError = true;\r\n            globalThis.require.config(loaderConfig);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            // Use the global require to be sure to get the global config\r\n            // ESM-comment-begin\r\n            // \t\t\tconst req = (globalThis.require || require);\r\n            // ESM-comment-end\r\n            // ESM-uncomment-begin\r\n            const req = globalThis.require;\r\n            // ESM-uncomment-end\r\n            req([moduleId], (module) => {\r\n                this._requestHandler = module.create(hostProxy);\r\n                if (!this._requestHandler) {\r\n                    reject(new Error(`No RequestHandler!`));\r\n                    return;\r\n                }\r\n                resolve((0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(this._requestHandler));\r\n            }, reject);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Called on the worker side\r\n * @skipMangle\r\n */\r\nfunction create(postMessage) {\r\n    return new SimpleWorkerServer(postMessage, null);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterClassifier: () => (/* binding */ CharacterClassifier),\n/* harmony export */   CharacterSet: () => (/* binding */ CharacterSet)\n/* harmony export */ });\n/* harmony import */ var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uint.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uint.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\r\nclass CharacterClassifier {\r\n    constructor(_defaultValue) {\r\n        const defaultValue = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(_defaultValue);\r\n        this._defaultValue = defaultValue;\r\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\r\n        this._map = new Map();\r\n    }\r\n    static _createAsciiMap(defaultValue) {\r\n        const asciiMap = new Uint8Array(256);\r\n        asciiMap.fill(defaultValue);\r\n        return asciiMap;\r\n    }\r\n    set(charCode, _value) {\r\n        const value = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(_value);\r\n        if (charCode >= 0 && charCode < 256) {\r\n            this._asciiMap[charCode] = value;\r\n        }\r\n        else {\r\n            this._map.set(charCode, value);\r\n        }\r\n    }\r\n    get(charCode) {\r\n        if (charCode >= 0 && charCode < 256) {\r\n            return this._asciiMap[charCode];\r\n        }\r\n        else {\r\n            return (this._map.get(charCode) || this._defaultValue);\r\n        }\r\n    }\r\n    clear() {\r\n        this._asciiMap.fill(this._defaultValue);\r\n        this._map.clear();\r\n    }\r\n}\r\nclass CharacterSet {\r\n    constructor() {\r\n        this._actual = new CharacterClassifier(0 /* Boolean.False */);\r\n    }\r\n    add(charCode) {\r\n        this._actual.set(charCode, 1 /* Boolean.True */);\r\n    }\r\n    has(charCode) {\r\n        return (this._actual.get(charCode) === 1 /* Boolean.True */);\r\n    }\r\n    clear() {\r\n        return this._actual.clear();\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL2NoYXJhY3RlckNsYXNzaWZpZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDZCQUE2Qiw2REFBTztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2REFBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2NvcmUvY2hhcmFjdGVyQ2xhc3NpZmllci5qcz8zMTcwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyB0b1VpbnQ4IH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vdWludC5qcyc7XHJcbi8qKlxyXG4gKiBBIGZhc3QgY2hhcmFjdGVyIGNsYXNzaWZpZXIgdGhhdCB1c2VzIGEgY29tcGFjdCBhcnJheSBmb3IgQVNDSUkgdmFsdWVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENoYXJhY3RlckNsYXNzaWZpZXIge1xyXG4gICAgY29uc3RydWN0b3IoX2RlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IHRvVWludDgoX2RlZmF1bHRWYWx1ZSk7XHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2FzY2lpTWFwID0gQ2hhcmFjdGVyQ2xhc3NpZmllci5fY3JlYXRlQXNjaWlNYXAoZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgX2NyZWF0ZUFzY2lpTWFwKGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IGFzY2lpTWFwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcclxuICAgICAgICBhc2NpaU1hcC5maWxsKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGFzY2lpTWFwO1xyXG4gICAgfVxyXG4gICAgc2V0KGNoYXJDb2RlLCBfdmFsdWUpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRvVWludDgoX3ZhbHVlKTtcclxuICAgICAgICBpZiAoY2hhckNvZGUgPj0gMCAmJiBjaGFyQ29kZSA8IDI1Nikge1xyXG4gICAgICAgICAgICB0aGlzLl9hc2NpaU1hcFtjaGFyQ29kZV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQoY2hhckNvZGUsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQoY2hhckNvZGUpIHtcclxuICAgICAgICBpZiAoY2hhckNvZGUgPj0gMCAmJiBjaGFyQ29kZSA8IDI1Nikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXNjaWlNYXBbY2hhckNvZGVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9tYXAuZ2V0KGNoYXJDb2RlKSB8fCB0aGlzLl9kZWZhdWx0VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuX2FzY2lpTWFwLmZpbGwodGhpcy5fZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICB0aGlzLl9tYXAuY2xlYXIoKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyU2V0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2FjdHVhbCA9IG5ldyBDaGFyYWN0ZXJDbGFzc2lmaWVyKDAgLyogQm9vbGVhbi5GYWxzZSAqLyk7XHJcbiAgICB9XHJcbiAgICBhZGQoY2hhckNvZGUpIHtcclxuICAgICAgICB0aGlzLl9hY3R1YWwuc2V0KGNoYXJDb2RlLCAxIC8qIEJvb2xlYW4uVHJ1ZSAqLyk7XHJcbiAgICB9XHJcbiAgICBoYXMoY2hhckNvZGUpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuX2FjdHVhbC5nZXQoY2hhckNvZGUpID09PSAxIC8qIEJvb2xlYW4uVHJ1ZSAqLyk7XHJcbiAgICB9XHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0dWFsLmNsZWFyKCk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineRange: () => (/* binding */ LineRange),\n/* harmony export */   LineRangeSet: () => (/* binding */ LineRangeSet)\n/* harmony export */ });\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/arraysFind.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n/**\r\n * A range of lines (1-based).\r\n */\r\nclass LineRange {\r\n    static fromRangeInclusive(range) {\r\n        return new LineRange(range.startLineNumber, range.endLineNumber + 1);\r\n    }\r\n    /**\r\n     * @param lineRanges An array of sorted line ranges.\r\n     */\r\n    static joinMany(lineRanges) {\r\n        if (lineRanges.length === 0) {\r\n            return [];\r\n        }\r\n        let result = new LineRangeSet(lineRanges[0].slice());\r\n        for (let i = 1; i < lineRanges.length; i++) {\r\n            result = result.getUnion(new LineRangeSet(lineRanges[i].slice()));\r\n        }\r\n        return result.ranges;\r\n    }\r\n    static join(lineRanges) {\r\n        if (lineRanges.length === 0) {\r\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('lineRanges cannot be empty');\r\n        }\r\n        let startLineNumber = lineRanges[0].startLineNumber;\r\n        let endLineNumberExclusive = lineRanges[0].endLineNumberExclusive;\r\n        for (let i = 1; i < lineRanges.length; i++) {\r\n            startLineNumber = Math.min(startLineNumber, lineRanges[i].startLineNumber);\r\n            endLineNumberExclusive = Math.max(endLineNumberExclusive, lineRanges[i].endLineNumberExclusive);\r\n        }\r\n        return new LineRange(startLineNumber, endLineNumberExclusive);\r\n    }\r\n    static ofLength(startLineNumber, length) {\r\n        return new LineRange(startLineNumber, startLineNumber + length);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    static deserialize(lineRange) {\r\n        return new LineRange(lineRange[0], lineRange[1]);\r\n    }\r\n    constructor(startLineNumber, endLineNumberExclusive) {\r\n        if (startLineNumber > endLineNumberExclusive) {\r\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`startLineNumber ${startLineNumber} cannot be after endLineNumberExclusive ${endLineNumberExclusive}`);\r\n        }\r\n        this.startLineNumber = startLineNumber;\r\n        this.endLineNumberExclusive = endLineNumberExclusive;\r\n    }\r\n    /**\r\n     * Indicates if this line range contains the given line number.\r\n     */\r\n    contains(lineNumber) {\r\n        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\r\n    }\r\n    /**\r\n     * Indicates if this line range is empty.\r\n     */\r\n    get isEmpty() {\r\n        return this.startLineNumber === this.endLineNumberExclusive;\r\n    }\r\n    /**\r\n     * Moves this line range by the given offset of line numbers.\r\n     */\r\n    delta(offset) {\r\n        return new LineRange(this.startLineNumber + offset, this.endLineNumberExclusive + offset);\r\n    }\r\n    deltaLength(offset) {\r\n        return new LineRange(this.startLineNumber, this.endLineNumberExclusive + offset);\r\n    }\r\n    /**\r\n     * The number of lines this line range spans.\r\n     */\r\n    get length() {\r\n        return this.endLineNumberExclusive - this.startLineNumber;\r\n    }\r\n    /**\r\n     * Creates a line range that combines this and the given line range.\r\n     */\r\n    join(other) {\r\n        return new LineRange(Math.min(this.startLineNumber, other.startLineNumber), Math.max(this.endLineNumberExclusive, other.endLineNumberExclusive));\r\n    }\r\n    toString() {\r\n        return `[${this.startLineNumber},${this.endLineNumberExclusive})`;\r\n    }\r\n    /**\r\n     * The resulting range is empty if the ranges do not intersect, but touch.\r\n     * If the ranges don't even touch, the result is undefined.\r\n     */\r\n    intersect(other) {\r\n        const startLineNumber = Math.max(this.startLineNumber, other.startLineNumber);\r\n        const endLineNumberExclusive = Math.min(this.endLineNumberExclusive, other.endLineNumberExclusive);\r\n        if (startLineNumber <= endLineNumberExclusive) {\r\n            return new LineRange(startLineNumber, endLineNumberExclusive);\r\n        }\r\n        return undefined;\r\n    }\r\n    intersectsStrict(other) {\r\n        return this.startLineNumber < other.endLineNumberExclusive && other.startLineNumber < this.endLineNumberExclusive;\r\n    }\r\n    overlapOrTouch(other) {\r\n        return this.startLineNumber <= other.endLineNumberExclusive && other.startLineNumber <= this.endLineNumberExclusive;\r\n    }\r\n    equals(b) {\r\n        return this.startLineNumber === b.startLineNumber && this.endLineNumberExclusive === b.endLineNumberExclusive;\r\n    }\r\n    toInclusiveRange() {\r\n        if (this.isEmpty) {\r\n            return null;\r\n        }\r\n        return new _range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER);\r\n    }\r\n    /**\r\n     * @deprecated Using this function is discouraged because it might lead to bugs: The end position is not guaranteed to be a valid position!\r\n    */\r\n    toExclusiveRange() {\r\n        return new _range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.startLineNumber, 1, this.endLineNumberExclusive, 1);\r\n    }\r\n    mapToLineArray(f) {\r\n        const result = [];\r\n        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\r\n            result.push(f(lineNumber));\r\n        }\r\n        return result;\r\n    }\r\n    forEach(f) {\r\n        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\r\n            f(lineNumber);\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    serialize() {\r\n        return [this.startLineNumber, this.endLineNumberExclusive];\r\n    }\r\n    includes(lineNumber) {\r\n        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\r\n    }\r\n    /**\r\n     * Converts this 1-based line range to a 0-based offset range (subtracts 1!).\r\n     * @internal\r\n     */\r\n    toOffsetRange() {\r\n        return new _offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(this.startLineNumber - 1, this.endLineNumberExclusive - 1);\r\n    }\r\n}\r\nclass LineRangeSet {\r\n    constructor(\r\n    /**\r\n     * Sorted by start line number.\r\n     * No two line ranges are touching or intersecting.\r\n     */\r\n    _normalizedRanges = []) {\r\n        this._normalizedRanges = _normalizedRanges;\r\n    }\r\n    get ranges() {\r\n        return this._normalizedRanges;\r\n    }\r\n    addRange(range) {\r\n        if (range.length === 0) {\r\n            return;\r\n        }\r\n        // Idea: Find joinRange such that:\r\n        // replaceRange = _normalizedRanges.replaceRange(joinRange, range.joinAll(joinRange.map(idx => this._normalizedRanges[idx])))\r\n        // idx of first element that touches range or that is after range\r\n        const joinRangeStartIdx = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findFirstIdxMonotonousOrArrLen)(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\r\n        // idx of element after { last element that touches range or that is before range }\r\n        const joinRangeEndIdxExclusive = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastIdxMonotonous)(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\r\n        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\r\n            // If there is no element that touches range, then joinRangeStartIdx === joinRangeEndIdxExclusive and that value is the index of the element after range\r\n            this._normalizedRanges.splice(joinRangeStartIdx, 0, range);\r\n        }\r\n        else if (joinRangeStartIdx === joinRangeEndIdxExclusive - 1) {\r\n            // Else, there is an element that touches range and in this case it is both the first and last element. Thus we can replace it\r\n            const joinRange = this._normalizedRanges[joinRangeStartIdx];\r\n            this._normalizedRanges[joinRangeStartIdx] = joinRange.join(range);\r\n        }\r\n        else {\r\n            // First and last element are different - we need to replace the entire range\r\n            const joinRange = this._normalizedRanges[joinRangeStartIdx].join(this._normalizedRanges[joinRangeEndIdxExclusive - 1]).join(range);\r\n            this._normalizedRanges.splice(joinRangeStartIdx, joinRangeEndIdxExclusive - joinRangeStartIdx, joinRange);\r\n        }\r\n    }\r\n    contains(lineNumber) {\r\n        const rangeThatStartsBeforeEnd = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(this._normalizedRanges, r => r.startLineNumber <= lineNumber);\r\n        return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > lineNumber;\r\n    }\r\n    intersects(range) {\r\n        const rangeThatStartsBeforeEnd = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(this._normalizedRanges, r => r.startLineNumber < range.endLineNumberExclusive);\r\n        return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > range.startLineNumber;\r\n    }\r\n    getUnion(other) {\r\n        if (this._normalizedRanges.length === 0) {\r\n            return other;\r\n        }\r\n        if (other._normalizedRanges.length === 0) {\r\n            return this;\r\n        }\r\n        const result = [];\r\n        let i1 = 0;\r\n        let i2 = 0;\r\n        let current = null;\r\n        while (i1 < this._normalizedRanges.length || i2 < other._normalizedRanges.length) {\r\n            let next = null;\r\n            if (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\r\n                const lineRange1 = this._normalizedRanges[i1];\r\n                const lineRange2 = other._normalizedRanges[i2];\r\n                if (lineRange1.startLineNumber < lineRange2.startLineNumber) {\r\n                    next = lineRange1;\r\n                    i1++;\r\n                }\r\n                else {\r\n                    next = lineRange2;\r\n                    i2++;\r\n                }\r\n            }\r\n            else if (i1 < this._normalizedRanges.length) {\r\n                next = this._normalizedRanges[i1];\r\n                i1++;\r\n            }\r\n            else {\r\n                next = other._normalizedRanges[i2];\r\n                i2++;\r\n            }\r\n            if (current === null) {\r\n                current = next;\r\n            }\r\n            else {\r\n                if (current.endLineNumberExclusive >= next.startLineNumber) {\r\n                    // merge\r\n                    current = new LineRange(current.startLineNumber, Math.max(current.endLineNumberExclusive, next.endLineNumberExclusive));\r\n                }\r\n                else {\r\n                    // push\r\n                    result.push(current);\r\n                    current = next;\r\n                }\r\n            }\r\n        }\r\n        if (current !== null) {\r\n            result.push(current);\r\n        }\r\n        return new LineRangeSet(result);\r\n    }\r\n    /**\r\n     * Subtracts all ranges in this set from `range` and returns the result.\r\n     */\r\n    subtractFrom(range) {\r\n        // idx of first element that touches range or that is after range\r\n        const joinRangeStartIdx = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findFirstIdxMonotonousOrArrLen)(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\r\n        // idx of element after { last element that touches range or that is before range }\r\n        const joinRangeEndIdxExclusive = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastIdxMonotonous)(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\r\n        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\r\n            return new LineRangeSet([range]);\r\n        }\r\n        const result = [];\r\n        let startLineNumber = range.startLineNumber;\r\n        for (let i = joinRangeStartIdx; i < joinRangeEndIdxExclusive; i++) {\r\n            const r = this._normalizedRanges[i];\r\n            if (r.startLineNumber > startLineNumber) {\r\n                result.push(new LineRange(startLineNumber, r.startLineNumber));\r\n            }\r\n            startLineNumber = r.endLineNumberExclusive;\r\n        }\r\n        if (startLineNumber < range.endLineNumberExclusive) {\r\n            result.push(new LineRange(startLineNumber, range.endLineNumberExclusive));\r\n        }\r\n        return new LineRangeSet(result);\r\n    }\r\n    toString() {\r\n        return this._normalizedRanges.map(r => r.toString()).join(', ');\r\n    }\r\n    getIntersection(other) {\r\n        const result = [];\r\n        let i1 = 0;\r\n        let i2 = 0;\r\n        while (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\r\n            const r1 = this._normalizedRanges[i1];\r\n            const r2 = other._normalizedRanges[i2];\r\n            const i = r1.intersect(r2);\r\n            if (i && !i.isEmpty) {\r\n                result.push(i);\r\n            }\r\n            if (r1.endLineNumberExclusive < r2.endLineNumberExclusive) {\r\n                i1++;\r\n            }\r\n            else {\r\n                i2++;\r\n            }\r\n        }\r\n        return new LineRangeSet(result);\r\n    }\r\n    getWithDelta(value) {\r\n        return new LineRangeSet(this._normalizedRanges.map(r => r.delta(value)));\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OffsetRange: () => (/* binding */ OffsetRange),\n/* harmony export */   OffsetRangeSet: () => (/* binding */ OffsetRangeSet)\n/* harmony export */ });\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * A range of offsets (0-based).\r\n*/\r\nclass OffsetRange {\r\n    static addRange(range, sortedRanges) {\r\n        let i = 0;\r\n        while (i < sortedRanges.length && sortedRanges[i].endExclusive < range.start) {\r\n            i++;\r\n        }\r\n        let j = i;\r\n        while (j < sortedRanges.length && sortedRanges[j].start <= range.endExclusive) {\r\n            j++;\r\n        }\r\n        if (i === j) {\r\n            sortedRanges.splice(i, 0, range);\r\n        }\r\n        else {\r\n            const start = Math.min(range.start, sortedRanges[i].start);\r\n            const end = Math.max(range.endExclusive, sortedRanges[j - 1].endExclusive);\r\n            sortedRanges.splice(i, j - i, new OffsetRange(start, end));\r\n        }\r\n    }\r\n    static tryCreate(start, endExclusive) {\r\n        if (start > endExclusive) {\r\n            return undefined;\r\n        }\r\n        return new OffsetRange(start, endExclusive);\r\n    }\r\n    static ofLength(length) {\r\n        return new OffsetRange(0, length);\r\n    }\r\n    static ofStartAndLength(start, length) {\r\n        return new OffsetRange(start, start + length);\r\n    }\r\n    constructor(start, endExclusive) {\r\n        this.start = start;\r\n        this.endExclusive = endExclusive;\r\n        if (start > endExclusive) {\r\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid range: ${this.toString()}`);\r\n        }\r\n    }\r\n    get isEmpty() {\r\n        return this.start === this.endExclusive;\r\n    }\r\n    delta(offset) {\r\n        return new OffsetRange(this.start + offset, this.endExclusive + offset);\r\n    }\r\n    deltaStart(offset) {\r\n        return new OffsetRange(this.start + offset, this.endExclusive);\r\n    }\r\n    deltaEnd(offset) {\r\n        return new OffsetRange(this.start, this.endExclusive + offset);\r\n    }\r\n    get length() {\r\n        return this.endExclusive - this.start;\r\n    }\r\n    toString() {\r\n        return `[${this.start}, ${this.endExclusive})`;\r\n    }\r\n    contains(offset) {\r\n        return this.start <= offset && offset < this.endExclusive;\r\n    }\r\n    /**\r\n     * for all numbers n: range1.contains(n) or range2.contains(n) => range1.join(range2).contains(n)\r\n     * The joined range is the smallest range that contains both ranges.\r\n     */\r\n    join(other) {\r\n        return new OffsetRange(Math.min(this.start, other.start), Math.max(this.endExclusive, other.endExclusive));\r\n    }\r\n    /**\r\n     * for all numbers n: range1.contains(n) and range2.contains(n) <=> range1.intersect(range2).contains(n)\r\n     *\r\n     * The resulting range is empty if the ranges do not intersect, but touch.\r\n     * If the ranges don't even touch, the result is undefined.\r\n     */\r\n    intersect(other) {\r\n        const start = Math.max(this.start, other.start);\r\n        const end = Math.min(this.endExclusive, other.endExclusive);\r\n        if (start <= end) {\r\n            return new OffsetRange(start, end);\r\n        }\r\n        return undefined;\r\n    }\r\n    intersects(other) {\r\n        const start = Math.max(this.start, other.start);\r\n        const end = Math.min(this.endExclusive, other.endExclusive);\r\n        return start < end;\r\n    }\r\n    isBefore(other) {\r\n        return this.endExclusive <= other.start;\r\n    }\r\n    isAfter(other) {\r\n        return this.start >= other.endExclusive;\r\n    }\r\n    slice(arr) {\r\n        return arr.slice(this.start, this.endExclusive);\r\n    }\r\n    substring(str) {\r\n        return str.substring(this.start, this.endExclusive);\r\n    }\r\n    /**\r\n     * Returns the given value if it is contained in this instance, otherwise the closest value that is contained.\r\n     * The range must not be empty.\r\n     */\r\n    clip(value) {\r\n        if (this.isEmpty) {\r\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\r\n        }\r\n        return Math.max(this.start, Math.min(this.endExclusive - 1, value));\r\n    }\r\n    /**\r\n     * Returns `r := value + k * length` such that `r` is contained in this range.\r\n     * The range must not be empty.\r\n     *\r\n     * E.g. `[5, 10).clipCyclic(10) === 5`, `[5, 10).clipCyclic(11) === 6` and `[5, 10).clipCyclic(4) === 9`.\r\n     */\r\n    clipCyclic(value) {\r\n        if (this.isEmpty) {\r\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\r\n        }\r\n        if (value < this.start) {\r\n            return this.endExclusive - ((this.start - value) % this.length);\r\n        }\r\n        if (value >= this.endExclusive) {\r\n            return this.start + ((value - this.start) % this.length);\r\n        }\r\n        return value;\r\n    }\r\n    forEach(f) {\r\n        for (let i = this.start; i < this.endExclusive; i++) {\r\n            f(i);\r\n        }\r\n    }\r\n}\r\nclass OffsetRangeSet {\r\n    constructor() {\r\n        this._sortedRanges = [];\r\n    }\r\n    addRange(range) {\r\n        let i = 0;\r\n        while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive < range.start) {\r\n            i++;\r\n        }\r\n        let j = i;\r\n        while (j < this._sortedRanges.length && this._sortedRanges[j].start <= range.endExclusive) {\r\n            j++;\r\n        }\r\n        if (i === j) {\r\n            this._sortedRanges.splice(i, 0, range);\r\n        }\r\n        else {\r\n            const start = Math.min(range.start, this._sortedRanges[i].start);\r\n            const end = Math.max(range.endExclusive, this._sortedRanges[j - 1].endExclusive);\r\n            this._sortedRanges.splice(i, j - i, new OffsetRange(start, end));\r\n        }\r\n    }\r\n    toString() {\r\n        return this._sortedRanges.map(r => r.toString()).join(', ');\r\n    }\r\n    /**\r\n     * Returns of there is a value that is contained in this instance and the given range.\r\n     */\r\n    intersectsStrict(other) {\r\n        // TODO use binary search\r\n        let i = 0;\r\n        while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive <= other.start) {\r\n            i++;\r\n        }\r\n        return i < this._sortedRanges.length && this._sortedRanges[i].start < other.endExclusive;\r\n    }\r\n    intersectWithRange(other) {\r\n        // TODO use binary search + slice\r\n        const result = new OffsetRangeSet();\r\n        for (const range of this._sortedRanges) {\r\n            const intersection = range.intersect(other);\r\n            if (intersection) {\r\n                result.addRange(intersection);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    intersectWithRangeLength(other) {\r\n        return this.intersectWithRange(other).length;\r\n    }\r\n    get length() {\r\n        return this._sortedRanges.reduce((prev, cur) => prev + cur.length, 0);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL29mZnNldFJhbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ29FO0FBQ3BFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0VBQWtCLG1CQUFtQixnQkFBZ0I7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFdBQVcsSUFBSSxrQkFBa0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNFQUFrQiw0QkFBNEIsZ0JBQWdCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0VBQWtCLDRCQUE0QixnQkFBZ0I7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsdUJBQXVCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS9vZmZzZXRSYW5nZS5qcz9lZmYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyBCdWdJbmRpY2F0aW5nRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9lcnJvcnMuanMnO1xyXG4vKipcclxuICogQSByYW5nZSBvZiBvZmZzZXRzICgwLWJhc2VkKS5cclxuKi9cclxuZXhwb3J0IGNsYXNzIE9mZnNldFJhbmdlIHtcclxuICAgIHN0YXRpYyBhZGRSYW5nZShyYW5nZSwgc29ydGVkUmFuZ2VzKSB7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpIDwgc29ydGVkUmFuZ2VzLmxlbmd0aCAmJiBzb3J0ZWRSYW5nZXNbaV0uZW5kRXhjbHVzaXZlIDwgcmFuZ2Uuc3RhcnQpIHtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaiA9IGk7XHJcbiAgICAgICAgd2hpbGUgKGogPCBzb3J0ZWRSYW5nZXMubGVuZ3RoICYmIHNvcnRlZFJhbmdlc1tqXS5zdGFydCA8PSByYW5nZS5lbmRFeGNsdXNpdmUpIHtcclxuICAgICAgICAgICAgaisrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaSA9PT0gaikge1xyXG4gICAgICAgICAgICBzb3J0ZWRSYW5nZXMuc3BsaWNlKGksIDAsIHJhbmdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5taW4ocmFuZ2Uuc3RhcnQsIHNvcnRlZFJhbmdlc1tpXS5zdGFydCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IE1hdGgubWF4KHJhbmdlLmVuZEV4Y2x1c2l2ZSwgc29ydGVkUmFuZ2VzW2ogLSAxXS5lbmRFeGNsdXNpdmUpO1xyXG4gICAgICAgICAgICBzb3J0ZWRSYW5nZXMuc3BsaWNlKGksIGogLSBpLCBuZXcgT2Zmc2V0UmFuZ2Uoc3RhcnQsIGVuZCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyB0cnlDcmVhdGUoc3RhcnQsIGVuZEV4Y2x1c2l2ZSkge1xyXG4gICAgICAgIGlmIChzdGFydCA+IGVuZEV4Y2x1c2l2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKHN0YXJ0LCBlbmRFeGNsdXNpdmUpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIG9mTGVuZ3RoKGxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgT2Zmc2V0UmFuZ2UoMCwgbGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBvZlN0YXJ0QW5kTGVuZ3RoKHN0YXJ0LCBsZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKHN0YXJ0LCBzdGFydCArIGxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvcihzdGFydCwgZW5kRXhjbHVzaXZlKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xyXG4gICAgICAgIHRoaXMuZW5kRXhjbHVzaXZlID0gZW5kRXhjbHVzaXZlO1xyXG4gICAgICAgIGlmIChzdGFydCA+IGVuZEV4Y2x1c2l2ZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQnVnSW5kaWNhdGluZ0Vycm9yKGBJbnZhbGlkIHJhbmdlOiAke3RoaXMudG9TdHJpbmcoKX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgaXNFbXB0eSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGFydCA9PT0gdGhpcy5lbmRFeGNsdXNpdmU7XHJcbiAgICB9XHJcbiAgICBkZWx0YShvZmZzZXQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKHRoaXMuc3RhcnQgKyBvZmZzZXQsIHRoaXMuZW5kRXhjbHVzaXZlICsgb2Zmc2V0KTtcclxuICAgIH1cclxuICAgIGRlbHRhU3RhcnQob2Zmc2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRSYW5nZSh0aGlzLnN0YXJ0ICsgb2Zmc2V0LCB0aGlzLmVuZEV4Y2x1c2l2ZSk7XHJcbiAgICB9XHJcbiAgICBkZWx0YUVuZChvZmZzZXQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKHRoaXMuc3RhcnQsIHRoaXMuZW5kRXhjbHVzaXZlICsgb2Zmc2V0KTtcclxuICAgIH1cclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5kRXhjbHVzaXZlIC0gdGhpcy5zdGFydDtcclxuICAgIH1cclxuICAgIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiBgWyR7dGhpcy5zdGFydH0sICR7dGhpcy5lbmRFeGNsdXNpdmV9KWA7XHJcbiAgICB9XHJcbiAgICBjb250YWlucyhvZmZzZXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGFydCA8PSBvZmZzZXQgJiYgb2Zmc2V0IDwgdGhpcy5lbmRFeGNsdXNpdmU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGZvciBhbGwgbnVtYmVycyBuOiByYW5nZTEuY29udGFpbnMobikgb3IgcmFuZ2UyLmNvbnRhaW5zKG4pID0+IHJhbmdlMS5qb2luKHJhbmdlMikuY29udGFpbnMobilcclxuICAgICAqIFRoZSBqb2luZWQgcmFuZ2UgaXMgdGhlIHNtYWxsZXN0IHJhbmdlIHRoYXQgY29udGFpbnMgYm90aCByYW5nZXMuXHJcbiAgICAgKi9cclxuICAgIGpvaW4ob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9mZnNldFJhbmdlKE1hdGgubWluKHRoaXMuc3RhcnQsIG90aGVyLnN0YXJ0KSwgTWF0aC5tYXgodGhpcy5lbmRFeGNsdXNpdmUsIG90aGVyLmVuZEV4Y2x1c2l2ZSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBmb3IgYWxsIG51bWJlcnMgbjogcmFuZ2UxLmNvbnRhaW5zKG4pIGFuZCByYW5nZTIuY29udGFpbnMobikgPD0+IHJhbmdlMS5pbnRlcnNlY3QocmFuZ2UyKS5jb250YWlucyhuKVxyXG4gICAgICpcclxuICAgICAqIFRoZSByZXN1bHRpbmcgcmFuZ2UgaXMgZW1wdHkgaWYgdGhlIHJhbmdlcyBkbyBub3QgaW50ZXJzZWN0LCBidXQgdG91Y2guXHJcbiAgICAgKiBJZiB0aGUgcmFuZ2VzIGRvbid0IGV2ZW4gdG91Y2gsIHRoZSByZXN1bHQgaXMgdW5kZWZpbmVkLlxyXG4gICAgICovXHJcbiAgICBpbnRlcnNlY3Qob3RoZXIpIHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IE1hdGgubWF4KHRoaXMuc3RhcnQsIG90aGVyLnN0YXJ0KTtcclxuICAgICAgICBjb25zdCBlbmQgPSBNYXRoLm1pbih0aGlzLmVuZEV4Y2x1c2l2ZSwgb3RoZXIuZW5kRXhjbHVzaXZlKTtcclxuICAgICAgICBpZiAoc3RhcnQgPD0gZW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgT2Zmc2V0UmFuZ2Uoc3RhcnQsIGVuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBpbnRlcnNlY3RzKG90aGVyKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBNYXRoLm1heCh0aGlzLnN0YXJ0LCBvdGhlci5zdGFydCk7XHJcbiAgICAgICAgY29uc3QgZW5kID0gTWF0aC5taW4odGhpcy5lbmRFeGNsdXNpdmUsIG90aGVyLmVuZEV4Y2x1c2l2ZSk7XHJcbiAgICAgICAgcmV0dXJuIHN0YXJ0IDwgZW5kO1xyXG4gICAgfVxyXG4gICAgaXNCZWZvcmUob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbmRFeGNsdXNpdmUgPD0gb3RoZXIuc3RhcnQ7XHJcbiAgICB9XHJcbiAgICBpc0FmdGVyKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnQgPj0gb3RoZXIuZW5kRXhjbHVzaXZlO1xyXG4gICAgfVxyXG4gICAgc2xpY2UoYXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIGFyci5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZEV4Y2x1c2l2ZSk7XHJcbiAgICB9XHJcbiAgICBzdWJzdHJpbmcoc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcodGhpcy5zdGFydCwgdGhpcy5lbmRFeGNsdXNpdmUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBnaXZlbiB2YWx1ZSBpZiBpdCBpcyBjb250YWluZWQgaW4gdGhpcyBpbnN0YW5jZSwgb3RoZXJ3aXNlIHRoZSBjbG9zZXN0IHZhbHVlIHRoYXQgaXMgY29udGFpbmVkLlxyXG4gICAgICogVGhlIHJhbmdlIG11c3Qgbm90IGJlIGVtcHR5LlxyXG4gICAgICovXHJcbiAgICBjbGlwKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQnVnSW5kaWNhdGluZ0Vycm9yKGBJbnZhbGlkIGNsaXBwaW5nIHJhbmdlOiAke3RoaXMudG9TdHJpbmcoKX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHRoaXMuc3RhcnQsIE1hdGgubWluKHRoaXMuZW5kRXhjbHVzaXZlIC0gMSwgdmFsdWUpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBgciA6PSB2YWx1ZSArIGsgKiBsZW5ndGhgIHN1Y2ggdGhhdCBgcmAgaXMgY29udGFpbmVkIGluIHRoaXMgcmFuZ2UuXHJcbiAgICAgKiBUaGUgcmFuZ2UgbXVzdCBub3QgYmUgZW1wdHkuXHJcbiAgICAgKlxyXG4gICAgICogRS5nLiBgWzUsIDEwKS5jbGlwQ3ljbGljKDEwKSA9PT0gNWAsIGBbNSwgMTApLmNsaXBDeWNsaWMoMTEpID09PSA2YCBhbmQgYFs1LCAxMCkuY2xpcEN5Y2xpYyg0KSA9PT0gOWAuXHJcbiAgICAgKi9cclxuICAgIGNsaXBDeWNsaWModmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoYEludmFsaWQgY2xpcHBpbmcgcmFuZ2U6ICR7dGhpcy50b1N0cmluZygpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgPCB0aGlzLnN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVuZEV4Y2x1c2l2ZSAtICgodGhpcy5zdGFydCAtIHZhbHVlKSAlIHRoaXMubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlID49IHRoaXMuZW5kRXhjbHVzaXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0ICsgKCh2YWx1ZSAtIHRoaXMuc3RhcnQpICUgdGhpcy5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBmb3JFYWNoKGYpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGFydDsgaSA8IHRoaXMuZW5kRXhjbHVzaXZlOyBpKyspIHtcclxuICAgICAgICAgICAgZihpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIE9mZnNldFJhbmdlU2V0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX3NvcnRlZFJhbmdlcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgYWRkUmFuZ2UocmFuZ2UpIHtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLl9zb3J0ZWRSYW5nZXMubGVuZ3RoICYmIHRoaXMuX3NvcnRlZFJhbmdlc1tpXS5lbmRFeGNsdXNpdmUgPCByYW5nZS5zdGFydCkge1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBqID0gaTtcclxuICAgICAgICB3aGlsZSAoaiA8IHRoaXMuX3NvcnRlZFJhbmdlcy5sZW5ndGggJiYgdGhpcy5fc29ydGVkUmFuZ2VzW2pdLnN0YXJ0IDw9IHJhbmdlLmVuZEV4Y2x1c2l2ZSkge1xyXG4gICAgICAgICAgICBqKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpID09PSBqKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NvcnRlZFJhbmdlcy5zcGxpY2UoaSwgMCwgcmFuZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBNYXRoLm1pbihyYW5nZS5zdGFydCwgdGhpcy5fc29ydGVkUmFuZ2VzW2ldLnN0YXJ0KTtcclxuICAgICAgICAgICAgY29uc3QgZW5kID0gTWF0aC5tYXgocmFuZ2UuZW5kRXhjbHVzaXZlLCB0aGlzLl9zb3J0ZWRSYW5nZXNbaiAtIDFdLmVuZEV4Y2x1c2l2ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3NvcnRlZFJhbmdlcy5zcGxpY2UoaSwgaiAtIGksIG5ldyBPZmZzZXRSYW5nZShzdGFydCwgZW5kKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvcnRlZFJhbmdlcy5tYXAociA9PiByLnRvU3RyaW5nKCkpLmpvaW4oJywgJyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgb2YgdGhlcmUgaXMgYSB2YWx1ZSB0aGF0IGlzIGNvbnRhaW5lZCBpbiB0aGlzIGluc3RhbmNlIGFuZCB0aGUgZ2l2ZW4gcmFuZ2UuXHJcbiAgICAgKi9cclxuICAgIGludGVyc2VjdHNTdHJpY3Qob3RoZXIpIHtcclxuICAgICAgICAvLyBUT0RPIHVzZSBiaW5hcnkgc2VhcmNoXHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpIDwgdGhpcy5fc29ydGVkUmFuZ2VzLmxlbmd0aCAmJiB0aGlzLl9zb3J0ZWRSYW5nZXNbaV0uZW5kRXhjbHVzaXZlIDw9IG90aGVyLnN0YXJ0KSB7XHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGkgPCB0aGlzLl9zb3J0ZWRSYW5nZXMubGVuZ3RoICYmIHRoaXMuX3NvcnRlZFJhbmdlc1tpXS5zdGFydCA8IG90aGVyLmVuZEV4Y2x1c2l2ZTtcclxuICAgIH1cclxuICAgIGludGVyc2VjdFdpdGhSYW5nZShvdGhlcikge1xyXG4gICAgICAgIC8vIFRPRE8gdXNlIGJpbmFyeSBzZWFyY2ggKyBzbGljZVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBPZmZzZXRSYW5nZVNldCgpO1xyXG4gICAgICAgIGZvciAoY29uc3QgcmFuZ2Ugb2YgdGhpcy5fc29ydGVkUmFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IHJhbmdlLmludGVyc2VjdChvdGhlcik7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5hZGRSYW5nZShpbnRlcnNlY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBpbnRlcnNlY3RXaXRoUmFuZ2VMZW5ndGgob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3RXaXRoUmFuZ2Uob3RoZXIpLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvcnRlZFJhbmdlcy5yZWR1Y2UoKHByZXYsIGN1cikgPT4gcHJldiArIGN1ci5sZW5ndGgsIDApO1xyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/position.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Position: () => (/* binding */ Position)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * A position in the editor.\r\n */\r\nclass Position {\r\n    constructor(lineNumber, column) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n    }\r\n    /**\r\n     * Create a new position from this position.\r\n     *\r\n     * @param newLineNumber new line number\r\n     * @param newColumn new column\r\n     */\r\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\r\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\r\n            return this;\r\n        }\r\n        else {\r\n            return new Position(newLineNumber, newColumn);\r\n        }\r\n    }\r\n    /**\r\n     * Derive a new position from this position.\r\n     *\r\n     * @param deltaLineNumber line number delta\r\n     * @param deltaColumn column delta\r\n     */\r\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\r\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\r\n    }\r\n    /**\r\n     * Test if this position equals other position\r\n     */\r\n    equals(other) {\r\n        return Position.equals(this, other);\r\n    }\r\n    /**\r\n     * Test if position `a` equals position `b`\r\n     */\r\n    static equals(a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        return (!!a &&\r\n            !!b &&\r\n            a.lineNumber === b.lineNumber &&\r\n            a.column === b.column);\r\n    }\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    isBefore(other) {\r\n        return Position.isBefore(this, other);\r\n    }\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    static isBefore(a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column < b.column;\r\n    }\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    isBeforeOrEqual(other) {\r\n        return Position.isBeforeOrEqual(this, other);\r\n    }\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    static isBeforeOrEqual(a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column <= b.column;\r\n    }\r\n    /**\r\n     * A function that compares positions, useful for sorting\r\n     */\r\n    static compare(a, b) {\r\n        const aLineNumber = a.lineNumber | 0;\r\n        const bLineNumber = b.lineNumber | 0;\r\n        if (aLineNumber === bLineNumber) {\r\n            const aColumn = a.column | 0;\r\n            const bColumn = b.column | 0;\r\n            return aColumn - bColumn;\r\n        }\r\n        return aLineNumber - bLineNumber;\r\n    }\r\n    /**\r\n     * Clone this position.\r\n     */\r\n    clone() {\r\n        return new Position(this.lineNumber, this.column);\r\n    }\r\n    /**\r\n     * Convert to a human-readable representation.\r\n     */\r\n    toString() {\r\n        return '(' + this.lineNumber + ',' + this.column + ')';\r\n    }\r\n    // ---\r\n    /**\r\n     * Create a `Position` from an `IPosition`.\r\n     */\r\n    static lift(pos) {\r\n        return new Position(pos.lineNumber, pos.column);\r\n    }\r\n    /**\r\n     * Test if `obj` is an `IPosition`.\r\n     */\r\n    static isIPosition(obj) {\r\n        return (obj\r\n            && (typeof obj.lineNumber === 'number')\r\n            && (typeof obj.column === 'number'));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            lineNumber: this.lineNumber,\r\n            column: this.column\r\n        };\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3Bvc2l0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS9wb3NpdGlvbi5qcz83MDYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG4vKipcclxuICogQSBwb3NpdGlvbiBpbiB0aGUgZWRpdG9yLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBvc2l0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGxpbmVOdW1iZXIsIGNvbHVtbikge1xyXG4gICAgICAgIHRoaXMubGluZU51bWJlciA9IGxpbmVOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBwb3NpdGlvbiBmcm9tIHRoaXMgcG9zaXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5ld0xpbmVOdW1iZXIgbmV3IGxpbmUgbnVtYmVyXHJcbiAgICAgKiBAcGFyYW0gbmV3Q29sdW1uIG5ldyBjb2x1bW5cclxuICAgICAqL1xyXG4gICAgd2l0aChuZXdMaW5lTnVtYmVyID0gdGhpcy5saW5lTnVtYmVyLCBuZXdDb2x1bW4gPSB0aGlzLmNvbHVtbikge1xyXG4gICAgICAgIGlmIChuZXdMaW5lTnVtYmVyID09PSB0aGlzLmxpbmVOdW1iZXIgJiYgbmV3Q29sdW1uID09PSB0aGlzLmNvbHVtbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24obmV3TGluZU51bWJlciwgbmV3Q29sdW1uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERlcml2ZSBhIG5ldyBwb3NpdGlvbiBmcm9tIHRoaXMgcG9zaXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGRlbHRhTGluZU51bWJlciBsaW5lIG51bWJlciBkZWx0YVxyXG4gICAgICogQHBhcmFtIGRlbHRhQ29sdW1uIGNvbHVtbiBkZWx0YVxyXG4gICAgICovXHJcbiAgICBkZWx0YShkZWx0YUxpbmVOdW1iZXIgPSAwLCBkZWx0YUNvbHVtbiA9IDApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aXRoKHRoaXMubGluZU51bWJlciArIGRlbHRhTGluZU51bWJlciwgdGhpcy5jb2x1bW4gKyBkZWx0YUNvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgdGhpcyBwb3NpdGlvbiBlcXVhbHMgb3RoZXIgcG9zaXRpb25cclxuICAgICAqL1xyXG4gICAgZXF1YWxzKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIFBvc2l0aW9uLmVxdWFscyh0aGlzLCBvdGhlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgcG9zaXRpb24gYGFgIGVxdWFscyBwb3NpdGlvbiBgYmBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XHJcbiAgICAgICAgaWYgKCFhICYmICFiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKCEhYSAmJlxyXG4gICAgICAgICAgICAhIWIgJiZcclxuICAgICAgICAgICAgYS5saW5lTnVtYmVyID09PSBiLmxpbmVOdW1iZXIgJiZcclxuICAgICAgICAgICAgYS5jb2x1bW4gPT09IGIuY29sdW1uKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiB0aGlzIHBvc2l0aW9uIGlzIGJlZm9yZSBvdGhlciBwb3NpdGlvbi5cclxuICAgICAqIElmIHRoZSB0d28gcG9zaXRpb25zIGFyZSBlcXVhbCwgdGhlIHJlc3VsdCB3aWxsIGJlIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBpc0JlZm9yZShvdGhlcikge1xyXG4gICAgICAgIHJldHVybiBQb3NpdGlvbi5pc0JlZm9yZSh0aGlzLCBvdGhlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgcG9zaXRpb24gYGFgIGlzIGJlZm9yZSBwb3NpdGlvbiBgYmAuXHJcbiAgICAgKiBJZiB0aGUgdHdvIHBvc2l0aW9ucyBhcmUgZXF1YWwsIHRoZSByZXN1bHQgd2lsbCBiZSBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGlzQmVmb3JlKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5saW5lTnVtYmVyIDwgYi5saW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYi5saW5lTnVtYmVyIDwgYS5saW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGEuY29sdW1uIDwgYi5jb2x1bW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgdGhpcyBwb3NpdGlvbiBpcyBiZWZvcmUgb3RoZXIgcG9zaXRpb24uXHJcbiAgICAgKiBJZiB0aGUgdHdvIHBvc2l0aW9ucyBhcmUgZXF1YWwsIHRoZSByZXN1bHQgd2lsbCBiZSB0cnVlLlxyXG4gICAgICovXHJcbiAgICBpc0JlZm9yZU9yRXF1YWwob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gUG9zaXRpb24uaXNCZWZvcmVPckVxdWFsKHRoaXMsIG90aGVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdCBpZiBwb3NpdGlvbiBgYWAgaXMgYmVmb3JlIHBvc2l0aW9uIGBiYC5cclxuICAgICAqIElmIHRoZSB0d28gcG9zaXRpb25zIGFyZSBlcXVhbCwgdGhlIHJlc3VsdCB3aWxsIGJlIHRydWUuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0JlZm9yZU9yRXF1YWwoYSwgYikge1xyXG4gICAgICAgIGlmIChhLmxpbmVOdW1iZXIgPCBiLmxpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiLmxpbmVOdW1iZXIgPCBhLmxpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYS5jb2x1bW4gPD0gYi5jb2x1bW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBjb21wYXJlcyBwb3NpdGlvbnMsIHVzZWZ1bCBmb3Igc29ydGluZ1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY29tcGFyZShhLCBiKSB7XHJcbiAgICAgICAgY29uc3QgYUxpbmVOdW1iZXIgPSBhLmxpbmVOdW1iZXIgfCAwO1xyXG4gICAgICAgIGNvbnN0IGJMaW5lTnVtYmVyID0gYi5saW5lTnVtYmVyIHwgMDtcclxuICAgICAgICBpZiAoYUxpbmVOdW1iZXIgPT09IGJMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFDb2x1bW4gPSBhLmNvbHVtbiB8IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGJDb2x1bW4gPSBiLmNvbHVtbiB8IDA7XHJcbiAgICAgICAgICAgIHJldHVybiBhQ29sdW1uIC0gYkNvbHVtbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFMaW5lTnVtYmVyIC0gYkxpbmVOdW1iZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENsb25lIHRoaXMgcG9zaXRpb24uXHJcbiAgICAgKi9cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24odGhpcy5saW5lTnVtYmVyLCB0aGlzLmNvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnQgdG8gYSBodW1hbi1yZWFkYWJsZSByZXByZXNlbnRhdGlvbi5cclxuICAgICAqL1xyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuICcoJyArIHRoaXMubGluZU51bWJlciArICcsJyArIHRoaXMuY29sdW1uICsgJyknO1xyXG4gICAgfVxyXG4gICAgLy8gLS0tXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIGBQb3NpdGlvbmAgZnJvbSBhbiBgSVBvc2l0aW9uYC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGxpZnQocG9zKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbihwb3MubGluZU51bWJlciwgcG9zLmNvbHVtbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRlc3QgaWYgYG9iamAgaXMgYW4gYElQb3NpdGlvbmAuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0lQb3NpdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gKG9ialxyXG4gICAgICAgICAgICAmJiAodHlwZW9mIG9iai5saW5lTnVtYmVyID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgJiYgKHR5cGVvZiBvYmouY29sdW1uID09PSAnbnVtYmVyJykpO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcclxuICAgICAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PositionOffsetTransformer: () => (/* binding */ PositionOffsetTransformer)\n/* harmony export */ });\n/* harmony import */ var _offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _textLength_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./textLength.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js\");\n\r\n\r\nclass PositionOffsetTransformer {\r\n    constructor(text) {\r\n        this.text = text;\r\n        this.lineStartOffsetByLineIdx = [];\r\n        this.lineStartOffsetByLineIdx.push(0);\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (text.charAt(i) === '\\n') {\r\n                this.lineStartOffsetByLineIdx.push(i + 1);\r\n            }\r\n        }\r\n    }\r\n    getOffset(position) {\r\n        return this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1;\r\n    }\r\n    getOffsetRange(range) {\r\n        return new _offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(this.getOffset(range.getStartPosition()), this.getOffset(range.getEndPosition()));\r\n    }\r\n    get textLength() {\r\n        const lineIdx = this.lineStartOffsetByLineIdx.length - 1;\r\n        return new _textLength_js__WEBPACK_IMPORTED_MODULE_1__.TextLength(lineIdx, this.text.length - this.lineStartOffsetByLineIdx[lineIdx]);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3Bvc2l0aW9uVG9PZmZzZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ0Y7QUFDdEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHdEQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzREFBVTtBQUM3QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS9wb3NpdGlvblRvT2Zmc2V0LmpzPzliNzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2Zmc2V0UmFuZ2UgfSBmcm9tICcuL29mZnNldFJhbmdlLmpzJztcclxuaW1wb3J0IHsgVGV4dExlbmd0aCB9IGZyb20gJy4vdGV4dExlbmd0aC5qcyc7XHJcbmV4cG9ydCBjbGFzcyBQb3NpdGlvbk9mZnNldFRyYW5zZm9ybWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHRleHQpIHtcclxuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xyXG4gICAgICAgIHRoaXMubGluZVN0YXJ0T2Zmc2V0QnlMaW5lSWR4ID0gW107XHJcbiAgICAgICAgdGhpcy5saW5lU3RhcnRPZmZzZXRCeUxpbmVJZHgucHVzaCgwKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRleHQuY2hhckF0KGkpID09PSAnXFxuJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lU3RhcnRPZmZzZXRCeUxpbmVJZHgucHVzaChpICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRPZmZzZXQocG9zaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saW5lU3RhcnRPZmZzZXRCeUxpbmVJZHhbcG9zaXRpb24ubGluZU51bWJlciAtIDFdICsgcG9zaXRpb24uY29sdW1uIC0gMTtcclxuICAgIH1cclxuICAgIGdldE9mZnNldFJhbmdlKHJhbmdlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPZmZzZXRSYW5nZSh0aGlzLmdldE9mZnNldChyYW5nZS5nZXRTdGFydFBvc2l0aW9uKCkpLCB0aGlzLmdldE9mZnNldChyYW5nZS5nZXRFbmRQb3NpdGlvbigpKSk7XHJcbiAgICB9XHJcbiAgICBnZXQgdGV4dExlbmd0aCgpIHtcclxuICAgICAgICBjb25zdCBsaW5lSWR4ID0gdGhpcy5saW5lU3RhcnRPZmZzZXRCeUxpbmVJZHgubGVuZ3RoIC0gMTtcclxuICAgICAgICByZXR1cm4gbmV3IFRleHRMZW5ndGgobGluZUlkeCwgdGhpcy50ZXh0Lmxlbmd0aCAtIHRoaXMubGluZVN0YXJ0T2Zmc2V0QnlMaW5lSWR4W2xpbmVJZHhdKTtcclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Range: () => (/* binding */ Range)\n/* harmony export */ });\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\r\n */\r\nclass Range {\r\n    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {\r\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\r\n            this.startLineNumber = endLineNumber;\r\n            this.startColumn = endColumn;\r\n            this.endLineNumber = startLineNumber;\r\n            this.endColumn = startColumn;\r\n        }\r\n        else {\r\n            this.startLineNumber = startLineNumber;\r\n            this.startColumn = startColumn;\r\n            this.endLineNumber = endLineNumber;\r\n            this.endColumn = endColumn;\r\n        }\r\n    }\r\n    /**\r\n     * Test if this range is empty.\r\n     */\r\n    isEmpty() {\r\n        return Range.isEmpty(this);\r\n    }\r\n    /**\r\n     * Test if `range` is empty.\r\n     */\r\n    static isEmpty(range) {\r\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\r\n    }\r\n    /**\r\n     * Test if position is in this range. If the position is at the edges, will return true.\r\n     */\r\n    containsPosition(position) {\r\n        return Range.containsPosition(this, position);\r\n    }\r\n    /**\r\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\r\n     */\r\n    static containsPosition(range, position) {\r\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Test if `position` is in `range`. If the position is at the edges, will return false.\r\n     * @internal\r\n     */\r\n    static strictContainsPosition(range, position) {\r\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Test if range is in this range. If the range is equal to this range, will return true.\r\n     */\r\n    containsRange(range) {\r\n        return Range.containsRange(this, range);\r\n    }\r\n    /**\r\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\r\n     */\r\n    static containsRange(range, otherRange) {\r\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\r\n            return false;\r\n        }\r\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\r\n     */\r\n    strictContainsRange(range) {\r\n        return Range.strictContainsRange(this, range);\r\n    }\r\n    /**\r\n     * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.\r\n     */\r\n    static strictContainsRange(range, otherRange) {\r\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\r\n            return false;\r\n        }\r\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * A reunion of the two ranges.\r\n     * The smallest position will be used as the start point, and the largest one as the end point.\r\n     */\r\n    plusRange(range) {\r\n        return Range.plusRange(this, range);\r\n    }\r\n    /**\r\n     * A reunion of the two ranges.\r\n     * The smallest position will be used as the start point, and the largest one as the end point.\r\n     */\r\n    static plusRange(a, b) {\r\n        let startLineNumber;\r\n        let startColumn;\r\n        let endLineNumber;\r\n        let endColumn;\r\n        if (b.startLineNumber < a.startLineNumber) {\r\n            startLineNumber = b.startLineNumber;\r\n            startColumn = b.startColumn;\r\n        }\r\n        else if (b.startLineNumber === a.startLineNumber) {\r\n            startLineNumber = b.startLineNumber;\r\n            startColumn = Math.min(b.startColumn, a.startColumn);\r\n        }\r\n        else {\r\n            startLineNumber = a.startLineNumber;\r\n            startColumn = a.startColumn;\r\n        }\r\n        if (b.endLineNumber > a.endLineNumber) {\r\n            endLineNumber = b.endLineNumber;\r\n            endColumn = b.endColumn;\r\n        }\r\n        else if (b.endLineNumber === a.endLineNumber) {\r\n            endLineNumber = b.endLineNumber;\r\n            endColumn = Math.max(b.endColumn, a.endColumn);\r\n        }\r\n        else {\r\n            endLineNumber = a.endLineNumber;\r\n            endColumn = a.endColumn;\r\n        }\r\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    }\r\n    /**\r\n     * A intersection of the two ranges.\r\n     */\r\n    intersectRanges(range) {\r\n        return Range.intersectRanges(this, range);\r\n    }\r\n    /**\r\n     * A intersection of the two ranges.\r\n     */\r\n    static intersectRanges(a, b) {\r\n        let resultStartLineNumber = a.startLineNumber;\r\n        let resultStartColumn = a.startColumn;\r\n        let resultEndLineNumber = a.endLineNumber;\r\n        let resultEndColumn = a.endColumn;\r\n        const otherStartLineNumber = b.startLineNumber;\r\n        const otherStartColumn = b.startColumn;\r\n        const otherEndLineNumber = b.endLineNumber;\r\n        const otherEndColumn = b.endColumn;\r\n        if (resultStartLineNumber < otherStartLineNumber) {\r\n            resultStartLineNumber = otherStartLineNumber;\r\n            resultStartColumn = otherStartColumn;\r\n        }\r\n        else if (resultStartLineNumber === otherStartLineNumber) {\r\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\r\n        }\r\n        if (resultEndLineNumber > otherEndLineNumber) {\r\n            resultEndLineNumber = otherEndLineNumber;\r\n            resultEndColumn = otherEndColumn;\r\n        }\r\n        else if (resultEndLineNumber === otherEndLineNumber) {\r\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\r\n        }\r\n        // Check if selection is now empty\r\n        if (resultStartLineNumber > resultEndLineNumber) {\r\n            return null;\r\n        }\r\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\r\n            return null;\r\n        }\r\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\r\n    }\r\n    /**\r\n     * Test if this range equals other.\r\n     */\r\n    equalsRange(other) {\r\n        return Range.equalsRange(this, other);\r\n    }\r\n    /**\r\n     * Test if range `a` equals `b`.\r\n     */\r\n    static equalsRange(a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        return (!!a &&\r\n            !!b &&\r\n            a.startLineNumber === b.startLineNumber &&\r\n            a.startColumn === b.startColumn &&\r\n            a.endLineNumber === b.endLineNumber &&\r\n            a.endColumn === b.endColumn);\r\n    }\r\n    /**\r\n     * Return the end position (which will be after or equal to the start position)\r\n     */\r\n    getEndPosition() {\r\n        return Range.getEndPosition(this);\r\n    }\r\n    /**\r\n     * Return the end position (which will be after or equal to the start position)\r\n     */\r\n    static getEndPosition(range) {\r\n        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(range.endLineNumber, range.endColumn);\r\n    }\r\n    /**\r\n     * Return the start position (which will be before or equal to the end position)\r\n     */\r\n    getStartPosition() {\r\n        return Range.getStartPosition(this);\r\n    }\r\n    /**\r\n     * Return the start position (which will be before or equal to the end position)\r\n     */\r\n    static getStartPosition(range) {\r\n        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(range.startLineNumber, range.startColumn);\r\n    }\r\n    /**\r\n     * Transform to a user presentable string representation.\r\n     */\r\n    toString() {\r\n        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\r\n    }\r\n    /**\r\n     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\r\n     */\r\n    setEndPosition(endLineNumber, endColumn) {\r\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\r\n    }\r\n    /**\r\n     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\r\n     */\r\n    setStartPosition(startLineNumber, startColumn) {\r\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\r\n    }\r\n    /**\r\n     * Create a new empty range using this range's start position.\r\n     */\r\n    collapseToStart() {\r\n        return Range.collapseToStart(this);\r\n    }\r\n    /**\r\n     * Create a new empty range using this range's start position.\r\n     */\r\n    static collapseToStart(range) {\r\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\r\n    }\r\n    /**\r\n     * Create a new empty range using this range's end position.\r\n     */\r\n    collapseToEnd() {\r\n        return Range.collapseToEnd(this);\r\n    }\r\n    /**\r\n     * Create a new empty range using this range's end position.\r\n     */\r\n    static collapseToEnd(range) {\r\n        return new Range(range.endLineNumber, range.endColumn, range.endLineNumber, range.endColumn);\r\n    }\r\n    /**\r\n     * Moves the range by the given amount of lines.\r\n     */\r\n    delta(lineCount) {\r\n        return new Range(this.startLineNumber + lineCount, this.startColumn, this.endLineNumber + lineCount, this.endColumn);\r\n    }\r\n    // ---\r\n    static fromPositions(start, end = start) {\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    }\r\n    static lift(range) {\r\n        if (!range) {\r\n            return null;\r\n        }\r\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n    }\r\n    /**\r\n     * Test if `obj` is an `IRange`.\r\n     */\r\n    static isIRange(obj) {\r\n        return (obj\r\n            && (typeof obj.startLineNumber === 'number')\r\n            && (typeof obj.startColumn === 'number')\r\n            && (typeof obj.endLineNumber === 'number')\r\n            && (typeof obj.endColumn === 'number'));\r\n    }\r\n    /**\r\n     * Test if the two ranges are touching in any way.\r\n     */\r\n    static areIntersectingOrTouching(a, b) {\r\n        // Check if `a` is before `b`\r\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\r\n            return false;\r\n        }\r\n        // Check if `b` is before `a`\r\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\r\n            return false;\r\n        }\r\n        // These ranges must intersect\r\n        return true;\r\n    }\r\n    /**\r\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\r\n     */\r\n    static areIntersecting(a, b) {\r\n        // Check if `a` is before `b`\r\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\r\n            return false;\r\n        }\r\n        // Check if `b` is before `a`\r\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\r\n            return false;\r\n        }\r\n        // These ranges must intersect\r\n        return true;\r\n    }\r\n    /**\r\n     * A function that compares ranges, useful for sorting ranges\r\n     * It will first compare ranges on the startPosition and then on the endPosition\r\n     */\r\n    static compareRangesUsingStarts(a, b) {\r\n        if (a && b) {\r\n            const aStartLineNumber = a.startLineNumber | 0;\r\n            const bStartLineNumber = b.startLineNumber | 0;\r\n            if (aStartLineNumber === bStartLineNumber) {\r\n                const aStartColumn = a.startColumn | 0;\r\n                const bStartColumn = b.startColumn | 0;\r\n                if (aStartColumn === bStartColumn) {\r\n                    const aEndLineNumber = a.endLineNumber | 0;\r\n                    const bEndLineNumber = b.endLineNumber | 0;\r\n                    if (aEndLineNumber === bEndLineNumber) {\r\n                        const aEndColumn = a.endColumn | 0;\r\n                        const bEndColumn = b.endColumn | 0;\r\n                        return aEndColumn - bEndColumn;\r\n                    }\r\n                    return aEndLineNumber - bEndLineNumber;\r\n                }\r\n                return aStartColumn - bStartColumn;\r\n            }\r\n            return aStartLineNumber - bStartLineNumber;\r\n        }\r\n        const aExists = (a ? 1 : 0);\r\n        const bExists = (b ? 1 : 0);\r\n        return aExists - bExists;\r\n    }\r\n    /**\r\n     * A function that compares ranges, useful for sorting ranges\r\n     * It will first compare ranges on the endPosition and then on the startPosition\r\n     */\r\n    static compareRangesUsingEnds(a, b) {\r\n        if (a.endLineNumber === b.endLineNumber) {\r\n            if (a.endColumn === b.endColumn) {\r\n                if (a.startLineNumber === b.startLineNumber) {\r\n                    return a.startColumn - b.startColumn;\r\n                }\r\n                return a.startLineNumber - b.startLineNumber;\r\n            }\r\n            return a.endColumn - b.endColumn;\r\n        }\r\n        return a.endLineNumber - b.endLineNumber;\r\n    }\r\n    /**\r\n     * Test if the range spans multiple lines.\r\n     */\r\n    static spansMultipleLines(range) {\r\n        return range.endLineNumber > range.startLineNumber;\r\n    }\r\n    toJSON() {\r\n        return this;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Selection: () => (/* binding */ Selection)\n/* harmony export */ });\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n/**\r\n * A selection in the editor.\r\n * The selection is a range that has an orientation.\r\n */\r\nclass Selection extends _range_js__WEBPACK_IMPORTED_MODULE_1__.Range {\r\n    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\r\n        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\r\n        this.selectionStartLineNumber = selectionStartLineNumber;\r\n        this.selectionStartColumn = selectionStartColumn;\r\n        this.positionLineNumber = positionLineNumber;\r\n        this.positionColumn = positionColumn;\r\n    }\r\n    /**\r\n     * Transform to a human-readable representation.\r\n     */\r\n    toString() {\r\n        return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\r\n    }\r\n    /**\r\n     * Test if equals other selection.\r\n     */\r\n    equalsSelection(other) {\r\n        return (Selection.selectionsEqual(this, other));\r\n    }\r\n    /**\r\n     * Test if the two selections are equal.\r\n     */\r\n    static selectionsEqual(a, b) {\r\n        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\r\n            a.selectionStartColumn === b.selectionStartColumn &&\r\n            a.positionLineNumber === b.positionLineNumber &&\r\n            a.positionColumn === b.positionColumn);\r\n    }\r\n    /**\r\n     * Get directions (LTR or RTL).\r\n     */\r\n    getDirection() {\r\n        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\r\n            return 0 /* SelectionDirection.LTR */;\r\n        }\r\n        return 1 /* SelectionDirection.RTL */;\r\n    }\r\n    /**\r\n     * Create a new selection with a different `positionLineNumber` and `positionColumn`.\r\n     */\r\n    setEndPosition(endLineNumber, endColumn) {\r\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\r\n            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\r\n        }\r\n        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\r\n    }\r\n    /**\r\n     * Get the position at `positionLineNumber` and `positionColumn`.\r\n     */\r\n    getPosition() {\r\n        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(this.positionLineNumber, this.positionColumn);\r\n    }\r\n    /**\r\n     * Get the position at the start of the selection.\r\n    */\r\n    getSelectionStart() {\r\n        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(this.selectionStartLineNumber, this.selectionStartColumn);\r\n    }\r\n    /**\r\n     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\r\n     */\r\n    setStartPosition(startLineNumber, startColumn) {\r\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\r\n            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\r\n        }\r\n        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\r\n    }\r\n    // ----\r\n    /**\r\n     * Create a `Selection` from one or two positions\r\n     */\r\n    static fromPositions(start, end = start) {\r\n        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    }\r\n    /**\r\n     * Creates a `Selection` from a range, given a direction.\r\n     */\r\n    static fromRange(range, direction) {\r\n        if (direction === 0 /* SelectionDirection.LTR */) {\r\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n        }\r\n        else {\r\n            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\r\n        }\r\n    }\r\n    /**\r\n     * Create a `Selection` from an `ISelection`.\r\n     */\r\n    static liftSelection(sel) {\r\n        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\r\n    }\r\n    /**\r\n     * `a` equals `b`.\r\n     */\r\n    static selectionsArrEqual(a, b) {\r\n        if (a && !b || !a && b) {\r\n            return false;\r\n        }\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        if (a.length !== b.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0, len = a.length; i < len; i++) {\r\n            if (!this.selectionsEqual(a[i], b[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Test if `obj` is an `ISelection`.\r\n     */\r\n    static isISelection(obj) {\r\n        return (obj\r\n            && (typeof obj.selectionStartLineNumber === 'number')\r\n            && (typeof obj.selectionStartColumn === 'number')\r\n            && (typeof obj.positionLineNumber === 'number')\r\n            && (typeof obj.positionColumn === 'number'));\r\n    }\r\n    /**\r\n     * Create with a direction.\r\n     */\r\n    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\r\n        if (direction === 0 /* SelectionDirection.LTR */) {\r\n            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\r\n        }\r\n        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractText: () => (/* binding */ AbstractText),\n/* harmony export */   SingleTextEdit: () => (/* binding */ SingleTextEdit),\n/* harmony export */   StringText: () => (/* binding */ StringText),\n/* harmony export */   TextEdit: () => (/* binding */ TextEdit)\n/* harmony export */ });\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _positionToOffset_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./positionToOffset.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/positionToOffset.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _textLength_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./textLength.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TextEdit {\r\n    constructor(edits) {\r\n        this.edits = edits;\r\n        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.assertFn)(() => (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.checkAdjacentItems)(edits, (a, b) => a.range.getEndPosition().isBeforeOrEqual(b.range.getStartPosition())));\r\n    }\r\n    apply(text) {\r\n        let result = '';\r\n        let lastEditEnd = new _position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1);\r\n        for (const edit of this.edits) {\r\n            const editRange = edit.range;\r\n            const editStart = editRange.getStartPosition();\r\n            const editEnd = editRange.getEndPosition();\r\n            const r = rangeFromPositions(lastEditEnd, editStart);\r\n            if (!r.isEmpty()) {\r\n                result += text.getValueOfRange(r);\r\n            }\r\n            result += edit.text;\r\n            lastEditEnd = editEnd;\r\n        }\r\n        const r = rangeFromPositions(lastEditEnd, text.endPositionExclusive);\r\n        if (!r.isEmpty()) {\r\n            result += text.getValueOfRange(r);\r\n        }\r\n        return result;\r\n    }\r\n    applyToString(str) {\r\n        const strText = new StringText(str);\r\n        return this.apply(strText);\r\n    }\r\n    getNewRanges() {\r\n        const newRanges = [];\r\n        let previousEditEndLineNumber = 0;\r\n        let lineOffset = 0;\r\n        let columnOffset = 0;\r\n        for (const edit of this.edits) {\r\n            const textLength = _textLength_js__WEBPACK_IMPORTED_MODULE_5__.TextLength.ofText(edit.text);\r\n            const newRangeStart = _position_js__WEBPACK_IMPORTED_MODULE_2__.Position.lift({\r\n                lineNumber: edit.range.startLineNumber + lineOffset,\r\n                column: edit.range.startColumn + (edit.range.startLineNumber === previousEditEndLineNumber ? columnOffset : 0)\r\n            });\r\n            const newRange = textLength.createRange(newRangeStart);\r\n            newRanges.push(newRange);\r\n            lineOffset = newRange.endLineNumber - edit.range.endLineNumber;\r\n            columnOffset = newRange.endColumn - edit.range.endColumn;\r\n            previousEditEndLineNumber = edit.range.endLineNumber;\r\n        }\r\n        return newRanges;\r\n    }\r\n}\r\nclass SingleTextEdit {\r\n    constructor(range, text) {\r\n        this.range = range;\r\n        this.text = text;\r\n    }\r\n}\r\nfunction rangeFromPositions(start, end) {\r\n    if (start.lineNumber === end.lineNumber && start.column === Number.MAX_SAFE_INTEGER) {\r\n        return _range_js__WEBPACK_IMPORTED_MODULE_4__.Range.fromPositions(end, end);\r\n    }\r\n    else if (!start.isBeforeOrEqual(end)) {\r\n        throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError('start must be before end');\r\n    }\r\n    return new _range_js__WEBPACK_IMPORTED_MODULE_4__.Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n}\r\nclass AbstractText {\r\n    get endPositionExclusive() {\r\n        return this.length.addToPosition(new _position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1));\r\n    }\r\n}\r\nclass StringText extends AbstractText {\r\n    constructor(value) {\r\n        super();\r\n        this.value = value;\r\n        this._t = new _positionToOffset_js__WEBPACK_IMPORTED_MODULE_3__.PositionOffsetTransformer(this.value);\r\n    }\r\n    getValueOfRange(range) {\r\n        return this._t.getOffsetRange(range).substring(this.value);\r\n    }\r\n    get length() {\r\n        return this._t.textLength;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3RleHRFZGl0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUM4RTtBQUNWO0FBQzNCO0FBQ3lCO0FBQy9CO0FBQ1U7QUFDdEM7QUFDUDtBQUNBO0FBQ0EsUUFBUSxnRUFBUSxPQUFPLDBFQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0RBQVE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHNEQUFVO0FBQ3pDLGtDQUFrQyxrREFBUTtBQUMxQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDRDQUFLO0FBQ3BCO0FBQ0E7QUFDQSxrQkFBa0Isc0VBQWtCO0FBQ3BDO0FBQ0EsZUFBZSw0Q0FBSztBQUNwQjtBQUNPO0FBQ1A7QUFDQSw2Q0FBNkMsa0RBQVE7QUFDckQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDJFQUF5QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS90ZXh0RWRpdC5qcz8wNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyBhc3NlcnRGbiwgY2hlY2tBZGphY2VudEl0ZW1zIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vYXNzZXJ0LmpzJztcclxuaW1wb3J0IHsgQnVnSW5kaWNhdGluZ0Vycm9yIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vZXJyb3JzLmpzJztcclxuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuL3Bvc2l0aW9uLmpzJztcclxuaW1wb3J0IHsgUG9zaXRpb25PZmZzZXRUcmFuc2Zvcm1lciB9IGZyb20gJy4vcG9zaXRpb25Ub09mZnNldC5qcyc7XHJcbmltcG9ydCB7IFJhbmdlIH0gZnJvbSAnLi9yYW5nZS5qcyc7XHJcbmltcG9ydCB7IFRleHRMZW5ndGggfSBmcm9tICcuL3RleHRMZW5ndGguanMnO1xyXG5leHBvcnQgY2xhc3MgVGV4dEVkaXQge1xyXG4gICAgY29uc3RydWN0b3IoZWRpdHMpIHtcclxuICAgICAgICB0aGlzLmVkaXRzID0gZWRpdHM7XHJcbiAgICAgICAgYXNzZXJ0Rm4oKCkgPT4gY2hlY2tBZGphY2VudEl0ZW1zKGVkaXRzLCAoYSwgYikgPT4gYS5yYW5nZS5nZXRFbmRQb3NpdGlvbigpLmlzQmVmb3JlT3JFcXVhbChiLnJhbmdlLmdldFN0YXJ0UG9zaXRpb24oKSkpKTtcclxuICAgIH1cclxuICAgIGFwcGx5KHRleHQpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICAgICAgbGV0IGxhc3RFZGl0RW5kID0gbmV3IFBvc2l0aW9uKDEsIDEpO1xyXG4gICAgICAgIGZvciAoY29uc3QgZWRpdCBvZiB0aGlzLmVkaXRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRSYW5nZSA9IGVkaXQucmFuZ2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRTdGFydCA9IGVkaXRSYW5nZS5nZXRTdGFydFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRFbmQgPSBlZGl0UmFuZ2UuZ2V0RW5kUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgY29uc3QgciA9IHJhbmdlRnJvbVBvc2l0aW9ucyhsYXN0RWRpdEVuZCwgZWRpdFN0YXJ0KTtcclxuICAgICAgICAgICAgaWYgKCFyLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHRleHQuZ2V0VmFsdWVPZlJhbmdlKHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdCArPSBlZGl0LnRleHQ7XHJcbiAgICAgICAgICAgIGxhc3RFZGl0RW5kID0gZWRpdEVuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgciA9IHJhbmdlRnJvbVBvc2l0aW9ucyhsYXN0RWRpdEVuZCwgdGV4dC5lbmRQb3NpdGlvbkV4Y2x1c2l2ZSk7XHJcbiAgICAgICAgaWYgKCFyLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gdGV4dC5nZXRWYWx1ZU9mUmFuZ2Uocik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBhcHBseVRvU3RyaW5nKHN0cikge1xyXG4gICAgICAgIGNvbnN0IHN0clRleHQgPSBuZXcgU3RyaW5nVGV4dChzdHIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHN0clRleHQpO1xyXG4gICAgfVxyXG4gICAgZ2V0TmV3UmFuZ2VzKCkge1xyXG4gICAgICAgIGNvbnN0IG5ld1JhbmdlcyA9IFtdO1xyXG4gICAgICAgIGxldCBwcmV2aW91c0VkaXRFbmRMaW5lTnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgbGluZU9mZnNldCA9IDA7XHJcbiAgICAgICAgbGV0IGNvbHVtbk9mZnNldCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBlZGl0IG9mIHRoaXMuZWRpdHMpIHtcclxuICAgICAgICAgICAgY29uc3QgdGV4dExlbmd0aCA9IFRleHRMZW5ndGgub2ZUZXh0KGVkaXQudGV4dCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1JhbmdlU3RhcnQgPSBQb3NpdGlvbi5saWZ0KHtcclxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGVkaXQucmFuZ2Uuc3RhcnRMaW5lTnVtYmVyICsgbGluZU9mZnNldCxcclxuICAgICAgICAgICAgICAgIGNvbHVtbjogZWRpdC5yYW5nZS5zdGFydENvbHVtbiArIChlZGl0LnJhbmdlLnN0YXJ0TGluZU51bWJlciA9PT0gcHJldmlvdXNFZGl0RW5kTGluZU51bWJlciA/IGNvbHVtbk9mZnNldCA6IDApXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdSYW5nZSA9IHRleHRMZW5ndGguY3JlYXRlUmFuZ2UobmV3UmFuZ2VTdGFydCk7XHJcbiAgICAgICAgICAgIG5ld1Jhbmdlcy5wdXNoKG5ld1JhbmdlKTtcclxuICAgICAgICAgICAgbGluZU9mZnNldCA9IG5ld1JhbmdlLmVuZExpbmVOdW1iZXIgLSBlZGl0LnJhbmdlLmVuZExpbmVOdW1iZXI7XHJcbiAgICAgICAgICAgIGNvbHVtbk9mZnNldCA9IG5ld1JhbmdlLmVuZENvbHVtbiAtIGVkaXQucmFuZ2UuZW5kQ29sdW1uO1xyXG4gICAgICAgICAgICBwcmV2aW91c0VkaXRFbmRMaW5lTnVtYmVyID0gZWRpdC5yYW5nZS5lbmRMaW5lTnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3UmFuZ2VzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBTaW5nbGVUZXh0RWRpdCB7XHJcbiAgICBjb25zdHJ1Y3RvcihyYW5nZSwgdGV4dCkge1xyXG4gICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZTtcclxuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJhbmdlRnJvbVBvc2l0aW9ucyhzdGFydCwgZW5kKSB7XHJcbiAgICBpZiAoc3RhcnQubGluZU51bWJlciA9PT0gZW5kLmxpbmVOdW1iZXIgJiYgc3RhcnQuY29sdW1uID09PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xyXG4gICAgICAgIHJldHVybiBSYW5nZS5mcm9tUG9zaXRpb25zKGVuZCwgZW5kKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCFzdGFydC5pc0JlZm9yZU9yRXF1YWwoZW5kKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBCdWdJbmRpY2F0aW5nRXJyb3IoJ3N0YXJ0IG11c3QgYmUgYmVmb3JlIGVuZCcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydC5saW5lTnVtYmVyLCBzdGFydC5jb2x1bW4sIGVuZC5saW5lTnVtYmVyLCBlbmQuY29sdW1uKTtcclxufVxyXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RUZXh0IHtcclxuICAgIGdldCBlbmRQb3NpdGlvbkV4Y2x1c2l2ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGguYWRkVG9Qb3NpdGlvbihuZXcgUG9zaXRpb24oMSwgMSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdUZXh0IGV4dGVuZHMgQWJzdHJhY3RUZXh0IHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fdCA9IG5ldyBQb3NpdGlvbk9mZnNldFRyYW5zZm9ybWVyKHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0VmFsdWVPZlJhbmdlKHJhbmdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QuZ2V0T2Zmc2V0UmFuZ2UocmFuZ2UpLnN1YnN0cmluZyh0aGlzLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3QudGV4dExlbmd0aDtcclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextLength: () => (/* binding */ TextLength)\n/* harmony export */ });\n/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n/**\r\n * Represents a non-negative length of text in terms of line and column count.\r\n*/\r\nclass TextLength {\r\n    static betweenPositions(position1, position2) {\r\n        if (position1.lineNumber === position2.lineNumber) {\r\n            return new TextLength(0, position2.column - position1.column);\r\n        }\r\n        else {\r\n            return new TextLength(position2.lineNumber - position1.lineNumber, position2.column - 1);\r\n        }\r\n    }\r\n    static ofRange(range) {\r\n        return TextLength.betweenPositions(range.getStartPosition(), range.getEndPosition());\r\n    }\r\n    static ofText(text) {\r\n        let line = 0;\r\n        let column = 0;\r\n        for (const c of text) {\r\n            if (c === '\\n') {\r\n                line++;\r\n                column = 0;\r\n            }\r\n            else {\r\n                column++;\r\n            }\r\n        }\r\n        return new TextLength(line, column);\r\n    }\r\n    constructor(lineCount, columnCount) {\r\n        this.lineCount = lineCount;\r\n        this.columnCount = columnCount;\r\n    }\r\n    isGreaterThanOrEqualTo(other) {\r\n        if (this.lineCount !== other.lineCount) {\r\n            return this.lineCount > other.lineCount;\r\n        }\r\n        return this.columnCount >= other.columnCount;\r\n    }\r\n    createRange(startPosition) {\r\n        if (this.lineCount === 0) {\r\n            return new _range_js__WEBPACK_IMPORTED_MODULE_1__.Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column + this.columnCount);\r\n        }\r\n        else {\r\n            return new _range_js__WEBPACK_IMPORTED_MODULE_1__.Range(startPosition.lineNumber, startPosition.column, startPosition.lineNumber + this.lineCount, this.columnCount + 1);\r\n        }\r\n    }\r\n    addToPosition(position) {\r\n        if (this.lineCount === 0) {\r\n            return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(position.lineNumber, position.column + this.columnCount);\r\n        }\r\n        else {\r\n            return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(position.lineNumber + this.lineCount, this.columnCount + 1);\r\n        }\r\n    }\r\n    toString() {\r\n        return `${this.lineCount},${this.columnCount}`;\r\n    }\r\n}\r\nTextLength.zero = new TextLength(0, 0);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3RleHRMZW5ndGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDeUM7QUFDTjtBQUNuQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDRDQUFLO0FBQzVCO0FBQ0E7QUFDQSx1QkFBdUIsNENBQUs7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0RBQVE7QUFDL0I7QUFDQTtBQUNBLHVCQUF1QixrREFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZUFBZSxHQUFHLGlCQUFpQjtBQUNyRDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3RleHRMZW5ndGguanM/YzgyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuL3Bvc2l0aW9uLmpzJztcclxuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICcuL3JhbmdlLmpzJztcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSBub24tbmVnYXRpdmUgbGVuZ3RoIG9mIHRleHQgaW4gdGVybXMgb2YgbGluZSBhbmQgY29sdW1uIGNvdW50LlxyXG4qL1xyXG5leHBvcnQgY2xhc3MgVGV4dExlbmd0aCB7XHJcbiAgICBzdGF0aWMgYmV0d2VlblBvc2l0aW9ucyhwb3NpdGlvbjEsIHBvc2l0aW9uMikge1xyXG4gICAgICAgIGlmIChwb3NpdGlvbjEubGluZU51bWJlciA9PT0gcG9zaXRpb24yLmxpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0TGVuZ3RoKDAsIHBvc2l0aW9uMi5jb2x1bW4gLSBwb3NpdGlvbjEuY29sdW1uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dExlbmd0aChwb3NpdGlvbjIubGluZU51bWJlciAtIHBvc2l0aW9uMS5saW5lTnVtYmVyLCBwb3NpdGlvbjIuY29sdW1uIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIG9mUmFuZ2UocmFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gVGV4dExlbmd0aC5iZXR3ZWVuUG9zaXRpb25zKHJhbmdlLmdldFN0YXJ0UG9zaXRpb24oKSwgcmFuZ2UuZ2V0RW5kUG9zaXRpb24oKSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgb2ZUZXh0KHRleHQpIHtcclxuICAgICAgICBsZXQgbGluZSA9IDA7XHJcbiAgICAgICAgbGV0IGNvbHVtbiA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBjIG9mIHRleHQpIHtcclxuICAgICAgICAgICAgaWYgKGMgPT09ICdcXG4nKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lKys7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29sdW1uKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0TGVuZ3RoKGxpbmUsIGNvbHVtbik7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvcihsaW5lQ291bnQsIGNvbHVtbkNvdW50KSB7XHJcbiAgICAgICAgdGhpcy5saW5lQ291bnQgPSBsaW5lQ291bnQ7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5Db3VudCA9IGNvbHVtbkNvdW50O1xyXG4gICAgfVxyXG4gICAgaXNHcmVhdGVyVGhhbk9yRXF1YWxUbyhvdGhlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmxpbmVDb3VudCAhPT0gb3RoZXIubGluZUNvdW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpbmVDb3VudCA+IG90aGVyLmxpbmVDb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1uQ291bnQgPj0gb3RoZXIuY29sdW1uQ291bnQ7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVSYW5nZShzdGFydFBvc2l0aW9uKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGluZUNvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRQb3NpdGlvbi5saW5lTnVtYmVyLCBzdGFydFBvc2l0aW9uLmNvbHVtbiwgc3RhcnRQb3NpdGlvbi5saW5lTnVtYmVyLCBzdGFydFBvc2l0aW9uLmNvbHVtbiArIHRoaXMuY29sdW1uQ291bnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydFBvc2l0aW9uLmxpbmVOdW1iZXIsIHN0YXJ0UG9zaXRpb24uY29sdW1uLCBzdGFydFBvc2l0aW9uLmxpbmVOdW1iZXIgKyB0aGlzLmxpbmVDb3VudCwgdGhpcy5jb2x1bW5Db3VudCArIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFkZFRvUG9zaXRpb24ocG9zaXRpb24pIHtcclxuICAgICAgICBpZiAodGhpcy5saW5lQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb3NpdGlvbihwb3NpdGlvbi5saW5lTnVtYmVyLCBwb3NpdGlvbi5jb2x1bW4gKyB0aGlzLmNvbHVtbkNvdW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9zaXRpb24ocG9zaXRpb24ubGluZU51bWJlciArIHRoaXMubGluZUNvdW50LCB0aGlzLmNvbHVtbkNvdW50ICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMubGluZUNvdW50fSwke3RoaXMuY29sdW1uQ291bnR9YDtcclxuICAgIH1cclxufVxyXG5UZXh0TGVuZ3RoLnplcm8gPSBuZXcgVGV4dExlbmd0aCgwLCAwKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/textLength.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WordCharacterClassifier: () => (/* binding */ WordCharacterClassifier),\n/* harmony export */   getMapForWordSeparators: () => (/* binding */ getMapForWordSeparators)\n/* harmony export */ });\n/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/map.js */ \"./node_modules/monaco-editor/esm/vs/base/common/map.js\");\n/* harmony import */ var _characterClassifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./characterClassifier.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\nclass WordCharacterClassifier extends _characterClassifier_js__WEBPACK_IMPORTED_MODULE_1__.CharacterClassifier {\r\n    constructor(wordSeparators, intlSegmenterLocales) {\r\n        super(0 /* WordCharacterClass.Regular */);\r\n        this._segmenter = null;\r\n        this._cachedLine = null;\r\n        this._cachedSegments = [];\r\n        this.intlSegmenterLocales = intlSegmenterLocales;\r\n        if (this.intlSegmenterLocales.length > 0) {\r\n            this._segmenter = new Intl.Segmenter(this.intlSegmenterLocales, { granularity: 'word' });\r\n        }\r\n        else {\r\n            this._segmenter = null;\r\n        }\r\n        for (let i = 0, len = wordSeparators.length; i < len; i++) {\r\n            this.set(wordSeparators.charCodeAt(i), 2 /* WordCharacterClass.WordSeparator */);\r\n        }\r\n        this.set(32 /* CharCode.Space */, 1 /* WordCharacterClass.Whitespace */);\r\n        this.set(9 /* CharCode.Tab */, 1 /* WordCharacterClass.Whitespace */);\r\n    }\r\n    findPrevIntlWordBeforeOrAtOffset(line, offset) {\r\n        let candidate = null;\r\n        for (const segment of this._getIntlSegmenterWordsOnLine(line)) {\r\n            if (segment.index > offset) {\r\n                break;\r\n            }\r\n            candidate = segment;\r\n        }\r\n        return candidate;\r\n    }\r\n    findNextIntlWordAtOrAfterOffset(lineContent, offset) {\r\n        for (const segment of this._getIntlSegmenterWordsOnLine(lineContent)) {\r\n            if (segment.index < offset) {\r\n                continue;\r\n            }\r\n            return segment;\r\n        }\r\n        return null;\r\n    }\r\n    _getIntlSegmenterWordsOnLine(line) {\r\n        if (!this._segmenter) {\r\n            return [];\r\n        }\r\n        // Check if the line has changed from the previous call\r\n        if (this._cachedLine === line) {\r\n            return this._cachedSegments;\r\n        }\r\n        // Update the cache with the new line\r\n        this._cachedLine = line;\r\n        this._cachedSegments = this._filterWordSegments(this._segmenter.segment(line));\r\n        return this._cachedSegments;\r\n    }\r\n    _filterWordSegments(segments) {\r\n        const result = [];\r\n        for (const segment of segments) {\r\n            if (this._isWordLike(segment)) {\r\n                result.push(segment);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    _isWordLike(segment) {\r\n        if (segment.isWordLike) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nconst wordClassifierCache = new _base_common_map_js__WEBPACK_IMPORTED_MODULE_0__.LRUCache(10);\r\nfunction getMapForWordSeparators(wordSeparators, intlSegmenterLocales) {\r\n    const key = `${wordSeparators}/${intlSegmenterLocales.join(',')}`;\r\n    let result = wordClassifierCache.get(key);\r\n    if (!result) {\r\n        result = new WordCharacterClassifier(wordSeparators, intlSegmenterLocales);\r\n        wordClassifierCache.set(key, result);\r\n    }\r\n    return result;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3dvcmRDaGFyYWN0ZXJDbGFzc2lmaWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUN1RDtBQUNRO0FBQ3hELHNDQUFzQyx3RUFBbUI7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUscUJBQXFCO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELFNBQVM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx5REFBUTtBQUNqQztBQUNQLG1CQUFtQixlQUFlLEdBQUcsK0JBQStCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS93b3JkQ2hhcmFjdGVyQ2xhc3NpZmllci5qcz81NjRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyBMUlVDYWNoZSB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL21hcC5qcyc7XHJcbmltcG9ydCB7IENoYXJhY3RlckNsYXNzaWZpZXIgfSBmcm9tICcuL2NoYXJhY3RlckNsYXNzaWZpZXIuanMnO1xyXG5leHBvcnQgY2xhc3MgV29yZENoYXJhY3RlckNsYXNzaWZpZXIgZXh0ZW5kcyBDaGFyYWN0ZXJDbGFzc2lmaWVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHdvcmRTZXBhcmF0b3JzLCBpbnRsU2VnbWVudGVyTG9jYWxlcykge1xyXG4gICAgICAgIHN1cGVyKDAgLyogV29yZENoYXJhY3RlckNsYXNzLlJlZ3VsYXIgKi8pO1xyXG4gICAgICAgIHRoaXMuX3NlZ21lbnRlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY2FjaGVkTGluZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY2FjaGVkU2VnbWVudHMgPSBbXTtcclxuICAgICAgICB0aGlzLmludGxTZWdtZW50ZXJMb2NhbGVzID0gaW50bFNlZ21lbnRlckxvY2FsZXM7XHJcbiAgICAgICAgaWYgKHRoaXMuaW50bFNlZ21lbnRlckxvY2FsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZWdtZW50ZXIgPSBuZXcgSW50bC5TZWdtZW50ZXIodGhpcy5pbnRsU2VnbWVudGVyTG9jYWxlcywgeyBncmFudWxhcml0eTogJ3dvcmQnIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VnbWVudGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHdvcmRTZXBhcmF0b3JzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KHdvcmRTZXBhcmF0b3JzLmNoYXJDb2RlQXQoaSksIDIgLyogV29yZENoYXJhY3RlckNsYXNzLldvcmRTZXBhcmF0b3IgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldCgzMiAvKiBDaGFyQ29kZS5TcGFjZSAqLywgMSAvKiBXb3JkQ2hhcmFjdGVyQ2xhc3MuV2hpdGVzcGFjZSAqLyk7XHJcbiAgICAgICAgdGhpcy5zZXQoOSAvKiBDaGFyQ29kZS5UYWIgKi8sIDEgLyogV29yZENoYXJhY3RlckNsYXNzLldoaXRlc3BhY2UgKi8pO1xyXG4gICAgfVxyXG4gICAgZmluZFByZXZJbnRsV29yZEJlZm9yZU9yQXRPZmZzZXQobGluZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IG51bGw7XHJcbiAgICAgICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHRoaXMuX2dldEludGxTZWdtZW50ZXJXb3Jkc09uTGluZShsaW5lKSkge1xyXG4gICAgICAgICAgICBpZiAoc2VnbWVudC5pbmRleCA+IG9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FuZGlkYXRlID0gc2VnbWVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZTtcclxuICAgIH1cclxuICAgIGZpbmROZXh0SW50bFdvcmRBdE9yQWZ0ZXJPZmZzZXQobGluZUNvbnRlbnQsIG9mZnNldCkge1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiB0aGlzLl9nZXRJbnRsU2VnbWVudGVyV29yZHNPbkxpbmUobGluZUNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWdtZW50LmluZGV4IDwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2VnbWVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBfZ2V0SW50bFNlZ21lbnRlcldvcmRzT25MaW5lKGxpbmUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3NlZ21lbnRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBsaW5lIGhhcyBjaGFuZ2VkIGZyb20gdGhlIHByZXZpb3VzIGNhbGxcclxuICAgICAgICBpZiAodGhpcy5fY2FjaGVkTGluZSA9PT0gbGluZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkU2VnbWVudHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgY2FjaGUgd2l0aCB0aGUgbmV3IGxpbmVcclxuICAgICAgICB0aGlzLl9jYWNoZWRMaW5lID0gbGluZTtcclxuICAgICAgICB0aGlzLl9jYWNoZWRTZWdtZW50cyA9IHRoaXMuX2ZpbHRlcldvcmRTZWdtZW50cyh0aGlzLl9zZWdtZW50ZXIuc2VnbWVudChsaW5lKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFNlZ21lbnRzO1xyXG4gICAgfVxyXG4gICAgX2ZpbHRlcldvcmRTZWdtZW50cyhzZWdtZW50cykge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNXb3JkTGlrZShzZWdtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc2VnbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIF9pc1dvcmRMaWtlKHNlZ21lbnQpIHtcclxuICAgICAgICBpZiAoc2VnbWVudC5pc1dvcmRMaWtlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuY29uc3Qgd29yZENsYXNzaWZpZXJDYWNoZSA9IG5ldyBMUlVDYWNoZSgxMCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXBGb3JXb3JkU2VwYXJhdG9ycyh3b3JkU2VwYXJhdG9ycywgaW50bFNlZ21lbnRlckxvY2FsZXMpIHtcclxuICAgIGNvbnN0IGtleSA9IGAke3dvcmRTZXBhcmF0b3JzfS8ke2ludGxTZWdtZW50ZXJMb2NhbGVzLmpvaW4oJywnKX1gO1xyXG4gICAgbGV0IHJlc3VsdCA9IHdvcmRDbGFzc2lmaWVyQ2FjaGUuZ2V0KGtleSk7XHJcbiAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgIHJlc3VsdCA9IG5ldyBXb3JkQ2hhcmFjdGVyQ2xhc3NpZmllcih3b3JkU2VwYXJhdG9ycywgaW50bFNlZ21lbnRlckxvY2FsZXMpO1xyXG4gICAgICAgIHdvcmRDbGFzc2lmaWVyQ2FjaGUuc2V0KGtleSwgcmVzdWx0KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_WORD_REGEXP: () => (/* binding */ DEFAULT_WORD_REGEXP),\n/* harmony export */   USUAL_WORD_SEPARATORS: () => (/* binding */ USUAL_WORD_SEPARATORS),\n/* harmony export */   ensureValidWordDefinition: () => (/* binding */ ensureValidWordDefinition),\n/* harmony export */   getWordAtText: () => (/* binding */ getWordAtText)\n/* harmony export */ });\n/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/iterator.js */ \"./node_modules/monaco-editor/esm/vs/base/common/iterator.js\");\n/* harmony import */ var _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/linkedList.js */ \"./node_modules/monaco-editor/esm/vs/base/common/linkedList.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\nconst USUAL_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?';\r\n/**\r\n * Create a word definition regular expression based on default word separators.\r\n * Optionally provide allowed separators that should be included in words.\r\n *\r\n * The default would look like this:\r\n * /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\r\n */\r\nfunction createWordRegExp(allowInWords = '') {\r\n    let source = '(-?\\\\d*\\\\.\\\\d\\\\w*)|([^';\r\n    for (const sep of USUAL_WORD_SEPARATORS) {\r\n        if (allowInWords.indexOf(sep) >= 0) {\r\n            continue;\r\n        }\r\n        source += '\\\\' + sep;\r\n    }\r\n    source += '\\\\s]+)';\r\n    return new RegExp(source, 'g');\r\n}\r\n// catches numbers (including floating numbers) in the first group, and alphanum in the second\r\nconst DEFAULT_WORD_REGEXP = createWordRegExp();\r\nfunction ensureValidWordDefinition(wordDefinition) {\r\n    let result = DEFAULT_WORD_REGEXP;\r\n    if (wordDefinition && (wordDefinition instanceof RegExp)) {\r\n        if (!wordDefinition.global) {\r\n            let flags = 'g';\r\n            if (wordDefinition.ignoreCase) {\r\n                flags += 'i';\r\n            }\r\n            if (wordDefinition.multiline) {\r\n                flags += 'm';\r\n            }\r\n            if (wordDefinition.unicode) {\r\n                flags += 'u';\r\n            }\r\n            result = new RegExp(wordDefinition.source, flags);\r\n        }\r\n        else {\r\n            result = wordDefinition;\r\n        }\r\n    }\r\n    result.lastIndex = 0;\r\n    return result;\r\n}\r\nconst _defaultConfig = new _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_1__.LinkedList();\r\n_defaultConfig.unshift({\r\n    maxLen: 1000,\r\n    windowSize: 15,\r\n    timeBudget: 150\r\n});\r\nfunction getWordAtText(column, wordDefinition, text, textOffset, config) {\r\n    // Ensure the regex has the 'g' flag, otherwise this will loop forever\r\n    wordDefinition = ensureValidWordDefinition(wordDefinition);\r\n    if (!config) {\r\n        config = _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_0__.Iterable.first(_defaultConfig);\r\n    }\r\n    if (text.length > config.maxLen) {\r\n        // don't throw strings that long at the regexp\r\n        // but use a sub-string in which a word must occur\r\n        let start = column - config.maxLen / 2;\r\n        if (start < 0) {\r\n            start = 0;\r\n        }\r\n        else {\r\n            textOffset += start;\r\n        }\r\n        text = text.substring(start, column + config.maxLen / 2);\r\n        return getWordAtText(column, wordDefinition, text, textOffset, config);\r\n    }\r\n    const t1 = Date.now();\r\n    const pos = column - 1 - textOffset;\r\n    let prevRegexIndex = -1;\r\n    let match = null;\r\n    for (let i = 1;; i++) {\r\n        // check time budget\r\n        if (Date.now() - t1 >= config.timeBudget) {\r\n            break;\r\n        }\r\n        // reset the index at which the regexp should start matching, also know where it\r\n        // should stop so that subsequent search don't repeat previous searches\r\n        const regexIndex = pos - config.windowSize * i;\r\n        wordDefinition.lastIndex = Math.max(0, regexIndex);\r\n        const thisMatch = _findRegexMatchEnclosingPosition(wordDefinition, text, pos, prevRegexIndex);\r\n        if (!thisMatch && match) {\r\n            // stop: we have something\r\n            break;\r\n        }\r\n        match = thisMatch;\r\n        // stop: searched at start\r\n        if (regexIndex <= 0) {\r\n            break;\r\n        }\r\n        prevRegexIndex = regexIndex;\r\n    }\r\n    if (match) {\r\n        const result = {\r\n            word: match[0],\r\n            startColumn: textOffset + 1 + match.index,\r\n            endColumn: textOffset + 1 + match.index + match[0].length\r\n        };\r\n        wordDefinition.lastIndex = 0;\r\n        return result;\r\n    }\r\n    return null;\r\n}\r\nfunction _findRegexMatchEnclosingPosition(wordDefinition, text, pos, stopPos) {\r\n    let match;\r\n    while (match = wordDefinition.exec(text)) {\r\n        const matchIndex = match.index || 0;\r\n        if (matchIndex <= pos && wordDefinition.lastIndex >= pos) {\r\n            return match;\r\n        }\r\n        else if (stopPos > 0 && matchIndex > stopPos) {\r\n            return null;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9jb3JlL3dvcmRIZWxwZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDNEQ7QUFDSTtBQUN6RCxnREFBZ0QsRUFBRSxJQUFJO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsSUFBSSxNQUFNO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDQTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGtFQUFVO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNNO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhEQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vY29yZS93b3JkSGVscGVyLmpzPzg3OWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCB7IEl0ZXJhYmxlIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vaXRlcmF0b3IuanMnO1xyXG5pbXBvcnQgeyBMaW5rZWRMaXN0IH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24vbGlua2VkTGlzdC5qcyc7XHJcbmV4cG9ydCBjb25zdCBVU1VBTF9XT1JEX1NFUEFSQVRPUlMgPSAnYH4hQCMkJV4mKigpLT0rW3tdfVxcXFx8OzpcXCdcIiwuPD4vPyc7XHJcbi8qKlxyXG4gKiBDcmVhdGUgYSB3b3JkIGRlZmluaXRpb24gcmVndWxhciBleHByZXNzaW9uIGJhc2VkIG9uIGRlZmF1bHQgd29yZCBzZXBhcmF0b3JzLlxyXG4gKiBPcHRpb25hbGx5IHByb3ZpZGUgYWxsb3dlZCBzZXBhcmF0b3JzIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHdvcmRzLlxyXG4gKlxyXG4gKiBUaGUgZGVmYXVsdCB3b3VsZCBsb29rIGxpa2UgdGhpczpcclxuICogLygtP1xcZCpcXC5cXGRcXHcqKXwoW15cXGBcXH5cXCFcXEBcXCNcXCRcXCVcXF5cXCZcXCpcXChcXClcXC1cXD1cXCtcXFtcXHtcXF1cXH1cXFxcXFx8XFw7XFw6XFwnXFxcIlxcLFxcLlxcPFxcPlxcL1xcP1xcc10rKS9nXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVXb3JkUmVnRXhwKGFsbG93SW5Xb3JkcyA9ICcnKSB7XHJcbiAgICBsZXQgc291cmNlID0gJygtP1xcXFxkKlxcXFwuXFxcXGRcXFxcdyopfChbXic7XHJcbiAgICBmb3IgKGNvbnN0IHNlcCBvZiBVU1VBTF9XT1JEX1NFUEFSQVRPUlMpIHtcclxuICAgICAgICBpZiAoYWxsb3dJbldvcmRzLmluZGV4T2Yoc2VwKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzb3VyY2UgKz0gJ1xcXFwnICsgc2VwO1xyXG4gICAgfVxyXG4gICAgc291cmNlICs9ICdcXFxcc10rKSc7XHJcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzb3VyY2UsICdnJyk7XHJcbn1cclxuLy8gY2F0Y2hlcyBudW1iZXJzIChpbmNsdWRpbmcgZmxvYXRpbmcgbnVtYmVycykgaW4gdGhlIGZpcnN0IGdyb3VwLCBhbmQgYWxwaGFudW0gaW4gdGhlIHNlY29uZFxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9XT1JEX1JFR0VYUCA9IGNyZWF0ZVdvcmRSZWdFeHAoKTtcclxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVZhbGlkV29yZERlZmluaXRpb24od29yZERlZmluaXRpb24pIHtcclxuICAgIGxldCByZXN1bHQgPSBERUZBVUxUX1dPUkRfUkVHRVhQO1xyXG4gICAgaWYgKHdvcmREZWZpbml0aW9uICYmICh3b3JkRGVmaW5pdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcclxuICAgICAgICBpZiAoIXdvcmREZWZpbml0aW9uLmdsb2JhbCkge1xyXG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSAnZyc7XHJcbiAgICAgICAgICAgIGlmICh3b3JkRGVmaW5pdGlvbi5pZ25vcmVDYXNlKSB7XHJcbiAgICAgICAgICAgICAgICBmbGFncyArPSAnaSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHdvcmREZWZpbml0aW9uLm11bHRpbGluZSkge1xyXG4gICAgICAgICAgICAgICAgZmxhZ3MgKz0gJ20nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh3b3JkRGVmaW5pdGlvbi51bmljb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBmbGFncyArPSAndSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFJlZ0V4cCh3b3JkRGVmaW5pdGlvbi5zb3VyY2UsIGZsYWdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHdvcmREZWZpbml0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlc3VsdC5sYXN0SW5kZXggPSAwO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5jb25zdCBfZGVmYXVsdENvbmZpZyA9IG5ldyBMaW5rZWRMaXN0KCk7XHJcbl9kZWZhdWx0Q29uZmlnLnVuc2hpZnQoe1xyXG4gICAgbWF4TGVuOiAxMDAwLFxyXG4gICAgd2luZG93U2l6ZTogMTUsXHJcbiAgICB0aW1lQnVkZ2V0OiAxNTBcclxufSk7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXb3JkQXRUZXh0KGNvbHVtbiwgd29yZERlZmluaXRpb24sIHRleHQsIHRleHRPZmZzZXQsIGNvbmZpZykge1xyXG4gICAgLy8gRW5zdXJlIHRoZSByZWdleCBoYXMgdGhlICdnJyBmbGFnLCBvdGhlcndpc2UgdGhpcyB3aWxsIGxvb3AgZm9yZXZlclxyXG4gICAgd29yZERlZmluaXRpb24gPSBlbnN1cmVWYWxpZFdvcmREZWZpbml0aW9uKHdvcmREZWZpbml0aW9uKTtcclxuICAgIGlmICghY29uZmlnKSB7XHJcbiAgICAgICAgY29uZmlnID0gSXRlcmFibGUuZmlyc3QoX2RlZmF1bHRDb25maWcpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRleHQubGVuZ3RoID4gY29uZmlnLm1heExlbikge1xyXG4gICAgICAgIC8vIGRvbid0IHRocm93IHN0cmluZ3MgdGhhdCBsb25nIGF0IHRoZSByZWdleHBcclxuICAgICAgICAvLyBidXQgdXNlIGEgc3ViLXN0cmluZyBpbiB3aGljaCBhIHdvcmQgbXVzdCBvY2N1clxyXG4gICAgICAgIGxldCBzdGFydCA9IGNvbHVtbiAtIGNvbmZpZy5tYXhMZW4gLyAyO1xyXG4gICAgICAgIGlmIChzdGFydCA8IDApIHtcclxuICAgICAgICAgICAgc3RhcnQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGV4dE9mZnNldCArPSBzdGFydDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyaW5nKHN0YXJ0LCBjb2x1bW4gKyBjb25maWcubWF4TGVuIC8gMik7XHJcbiAgICAgICAgcmV0dXJuIGdldFdvcmRBdFRleHQoY29sdW1uLCB3b3JkRGVmaW5pdGlvbiwgdGV4dCwgdGV4dE9mZnNldCwgY29uZmlnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHQxID0gRGF0ZS5ub3coKTtcclxuICAgIGNvbnN0IHBvcyA9IGNvbHVtbiAtIDEgLSB0ZXh0T2Zmc2V0O1xyXG4gICAgbGV0IHByZXZSZWdleEluZGV4ID0gLTE7XHJcbiAgICBsZXQgbWF0Y2ggPSBudWxsO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7OyBpKyspIHtcclxuICAgICAgICAvLyBjaGVjayB0aW1lIGJ1ZGdldFxyXG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gdDEgPj0gY29uZmlnLnRpbWVCdWRnZXQpIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlc2V0IHRoZSBpbmRleCBhdCB3aGljaCB0aGUgcmVnZXhwIHNob3VsZCBzdGFydCBtYXRjaGluZywgYWxzbyBrbm93IHdoZXJlIGl0XHJcbiAgICAgICAgLy8gc2hvdWxkIHN0b3Agc28gdGhhdCBzdWJzZXF1ZW50IHNlYXJjaCBkb24ndCByZXBlYXQgcHJldmlvdXMgc2VhcmNoZXNcclxuICAgICAgICBjb25zdCByZWdleEluZGV4ID0gcG9zIC0gY29uZmlnLndpbmRvd1NpemUgKiBpO1xyXG4gICAgICAgIHdvcmREZWZpbml0aW9uLmxhc3RJbmRleCA9IE1hdGgubWF4KDAsIHJlZ2V4SW5kZXgpO1xyXG4gICAgICAgIGNvbnN0IHRoaXNNYXRjaCA9IF9maW5kUmVnZXhNYXRjaEVuY2xvc2luZ1Bvc2l0aW9uKHdvcmREZWZpbml0aW9uLCB0ZXh0LCBwb3MsIHByZXZSZWdleEluZGV4KTtcclxuICAgICAgICBpZiAoIXRoaXNNYXRjaCAmJiBtYXRjaCkge1xyXG4gICAgICAgICAgICAvLyBzdG9wOiB3ZSBoYXZlIHNvbWV0aGluZ1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgbWF0Y2ggPSB0aGlzTWF0Y2g7XHJcbiAgICAgICAgLy8gc3RvcDogc2VhcmNoZWQgYXQgc3RhcnRcclxuICAgICAgICBpZiAocmVnZXhJbmRleCA8PSAwKSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcmV2UmVnZXhJbmRleCA9IHJlZ2V4SW5kZXg7XHJcbiAgICB9XHJcbiAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIHdvcmQ6IG1hdGNoWzBdLFxyXG4gICAgICAgICAgICBzdGFydENvbHVtbjogdGV4dE9mZnNldCArIDEgKyBtYXRjaC5pbmRleCxcclxuICAgICAgICAgICAgZW5kQ29sdW1uOiB0ZXh0T2Zmc2V0ICsgMSArIG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXHJcbiAgICAgICAgfTtcclxuICAgICAgICB3b3JkRGVmaW5pdGlvbi5sYXN0SW5kZXggPSAwO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5mdW5jdGlvbiBfZmluZFJlZ2V4TWF0Y2hFbmNsb3NpbmdQb3NpdGlvbih3b3JkRGVmaW5pdGlvbiwgdGV4dCwgcG9zLCBzdG9wUG9zKSB7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICB3aGlsZSAobWF0Y2ggPSB3b3JkRGVmaW5pdGlvbi5leGVjKHRleHQpKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2hJbmRleCA9IG1hdGNoLmluZGV4IHx8IDA7XHJcbiAgICAgICAgaWYgKG1hdGNoSW5kZXggPD0gcG9zICYmIHdvcmREZWZpbml0aW9uLmxhc3RJbmRleCA+PSBwb3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzdG9wUG9zID4gMCAmJiBtYXRjaEluZGV4ID4gc3RvcFBvcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateTimeout: () => (/* binding */ DateTimeout),\n/* harmony export */   DiffAlgorithmResult: () => (/* binding */ DiffAlgorithmResult),\n/* harmony export */   InfiniteTimeout: () => (/* binding */ InfiniteTimeout),\n/* harmony export */   OffsetPair: () => (/* binding */ OffsetPair),\n/* harmony export */   SequenceDiff: () => (/* binding */ SequenceDiff)\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\nclass DiffAlgorithmResult {\r\n    static trivial(seq1, seq2) {\r\n        return new DiffAlgorithmResult([new SequenceDiff(_core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq1.length), _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq2.length))], false);\r\n    }\r\n    static trivialTimedOut(seq1, seq2) {\r\n        return new DiffAlgorithmResult([new SequenceDiff(_core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq1.length), _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq2.length))], true);\r\n    }\r\n    constructor(diffs, \r\n    /**\r\n     * Indicates if the time out was reached.\r\n     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\r\n     */\r\n    hitTimeout) {\r\n        this.diffs = diffs;\r\n        this.hitTimeout = hitTimeout;\r\n    }\r\n}\r\nclass SequenceDiff {\r\n    static invert(sequenceDiffs, doc1Length) {\r\n        const result = [];\r\n        (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.forEachAdjacent)(sequenceDiffs, (a, b) => {\r\n            result.push(SequenceDiff.fromOffsetPairs(a ? a.getEndExclusives() : OffsetPair.zero, b ? b.getStarts() : new OffsetPair(doc1Length, (a ? a.seq2Range.endExclusive - a.seq1Range.endExclusive : 0) + doc1Length)));\r\n        });\r\n        return result;\r\n    }\r\n    static fromOffsetPairs(start, endExclusive) {\r\n        return new SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange(start.offset1, endExclusive.offset1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange(start.offset2, endExclusive.offset2));\r\n    }\r\n    constructor(seq1Range, seq2Range) {\r\n        this.seq1Range = seq1Range;\r\n        this.seq2Range = seq2Range;\r\n    }\r\n    swap() {\r\n        return new SequenceDiff(this.seq2Range, this.seq1Range);\r\n    }\r\n    toString() {\r\n        return `${this.seq1Range} <-> ${this.seq2Range}`;\r\n    }\r\n    join(other) {\r\n        return new SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));\r\n    }\r\n    delta(offset) {\r\n        if (offset === 0) {\r\n            return this;\r\n        }\r\n        return new SequenceDiff(this.seq1Range.delta(offset), this.seq2Range.delta(offset));\r\n    }\r\n    deltaStart(offset) {\r\n        if (offset === 0) {\r\n            return this;\r\n        }\r\n        return new SequenceDiff(this.seq1Range.deltaStart(offset), this.seq2Range.deltaStart(offset));\r\n    }\r\n    deltaEnd(offset) {\r\n        if (offset === 0) {\r\n            return this;\r\n        }\r\n        return new SequenceDiff(this.seq1Range.deltaEnd(offset), this.seq2Range.deltaEnd(offset));\r\n    }\r\n    intersect(other) {\r\n        const i1 = this.seq1Range.intersect(other.seq1Range);\r\n        const i2 = this.seq2Range.intersect(other.seq2Range);\r\n        if (!i1 || !i2) {\r\n            return undefined;\r\n        }\r\n        return new SequenceDiff(i1, i2);\r\n    }\r\n    getStarts() {\r\n        return new OffsetPair(this.seq1Range.start, this.seq2Range.start);\r\n    }\r\n    getEndExclusives() {\r\n        return new OffsetPair(this.seq1Range.endExclusive, this.seq2Range.endExclusive);\r\n    }\r\n}\r\nclass OffsetPair {\r\n    constructor(offset1, offset2) {\r\n        this.offset1 = offset1;\r\n        this.offset2 = offset2;\r\n    }\r\n    toString() {\r\n        return `${this.offset1} <-> ${this.offset2}`;\r\n    }\r\n    delta(offset) {\r\n        if (offset === 0) {\r\n            return this;\r\n        }\r\n        return new OffsetPair(this.offset1 + offset, this.offset2 + offset);\r\n    }\r\n    equals(other) {\r\n        return this.offset1 === other.offset1 && this.offset2 === other.offset2;\r\n    }\r\n}\r\nOffsetPair.zero = new OffsetPair(0, 0);\r\nOffsetPair.max = new OffsetPair(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\nclass InfiniteTimeout {\r\n    isValid() {\r\n        return true;\r\n    }\r\n}\r\nInfiniteTimeout.instance = new InfiniteTimeout();\r\nclass DateTimeout {\r\n    constructor(timeout) {\r\n        this.timeout = timeout;\r\n        this.startTime = Date.now();\r\n        this.valid = true;\r\n        if (timeout <= 0) {\r\n            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError('timeout must be positive');\r\n        }\r\n    }\r\n    // Recommendation: Set a log-point `{this.disable()}` in the body\r\n    isValid() {\r\n        const valid = Date.now() - this.startTime < this.timeout;\r\n        if (!valid && this.valid) {\r\n            this.valid = false; // timeout reached\r\n            // eslint-disable-next-line no-debugger\r\n            debugger; // WARNING: Most likely debugging caused the timeout. Call `this.disable()` to continue without timing out.\r\n        }\r\n        return this.valid;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DynamicProgrammingDiffing: () => (/* binding */ DynamicProgrammingDiffing)\n/* harmony export */ });\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n/**\r\n * A O(MN) diffing algorithm that supports a score function.\r\n * The algorithm can be improved by processing the 2d array diagonally.\r\n*/\r\nclass DynamicProgrammingDiffing {\r\n    compute(sequence1, sequence2, timeout = _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.InfiniteTimeout.instance, equalityScore) {\r\n        if (sequence1.length === 0 || sequence2.length === 0) {\r\n            return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivial(sequence1, sequence2);\r\n        }\r\n        /**\r\n         * lcsLengths.get(i, j): Length of the longest common subsequence of sequence1.substring(0, i + 1) and sequence2.substring(0, j + 1).\r\n         */\r\n        const lcsLengths = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);\r\n        const directions = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);\r\n        const lengths = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);\r\n        // ==== Initializing lcsLengths ====\r\n        for (let s1 = 0; s1 < sequence1.length; s1++) {\r\n            for (let s2 = 0; s2 < sequence2.length; s2++) {\r\n                if (!timeout.isValid()) {\r\n                    return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivialTimedOut(sequence1, sequence2);\r\n                }\r\n                const horizontalLen = s1 === 0 ? 0 : lcsLengths.get(s1 - 1, s2);\r\n                const verticalLen = s2 === 0 ? 0 : lcsLengths.get(s1, s2 - 1);\r\n                let extendedSeqScore;\r\n                if (sequence1.getElement(s1) === sequence2.getElement(s2)) {\r\n                    if (s1 === 0 || s2 === 0) {\r\n                        extendedSeqScore = 0;\r\n                    }\r\n                    else {\r\n                        extendedSeqScore = lcsLengths.get(s1 - 1, s2 - 1);\r\n                    }\r\n                    if (s1 > 0 && s2 > 0 && directions.get(s1 - 1, s2 - 1) === 3) {\r\n                        // Prefer consecutive diagonals\r\n                        extendedSeqScore += lengths.get(s1 - 1, s2 - 1);\r\n                    }\r\n                    extendedSeqScore += (equalityScore ? equalityScore(s1, s2) : 1);\r\n                }\r\n                else {\r\n                    extendedSeqScore = -1;\r\n                }\r\n                const newValue = Math.max(horizontalLen, verticalLen, extendedSeqScore);\r\n                if (newValue === extendedSeqScore) {\r\n                    // Prefer diagonals\r\n                    const prevLen = s1 > 0 && s2 > 0 ? lengths.get(s1 - 1, s2 - 1) : 0;\r\n                    lengths.set(s1, s2, prevLen + 1);\r\n                    directions.set(s1, s2, 3);\r\n                }\r\n                else if (newValue === horizontalLen) {\r\n                    lengths.set(s1, s2, 0);\r\n                    directions.set(s1, s2, 1);\r\n                }\r\n                else if (newValue === verticalLen) {\r\n                    lengths.set(s1, s2, 0);\r\n                    directions.set(s1, s2, 2);\r\n                }\r\n                lcsLengths.set(s1, s2, newValue);\r\n            }\r\n        }\r\n        // ==== Backtracking ====\r\n        const result = [];\r\n        let lastAligningPosS1 = sequence1.length;\r\n        let lastAligningPosS2 = sequence2.length;\r\n        function reportDecreasingAligningPositions(s1, s2) {\r\n            if (s1 + 1 !== lastAligningPosS1 || s2 + 1 !== lastAligningPosS2) {\r\n                result.push(new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(s1 + 1, lastAligningPosS1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(s2 + 1, lastAligningPosS2)));\r\n            }\r\n            lastAligningPosS1 = s1;\r\n            lastAligningPosS2 = s2;\r\n        }\r\n        let s1 = sequence1.length - 1;\r\n        let s2 = sequence2.length - 1;\r\n        while (s1 >= 0 && s2 >= 0) {\r\n            if (directions.get(s1, s2) === 3) {\r\n                reportDecreasingAligningPositions(s1, s2);\r\n                s1--;\r\n                s2--;\r\n            }\r\n            else {\r\n                if (directions.get(s1, s2) === 1) {\r\n                    s1--;\r\n                }\r\n                else {\r\n                    s2--;\r\n                }\r\n            }\r\n        }\r\n        reportDecreasingAligningPositions(-1, -1);\r\n        result.reverse();\r\n        return new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult(result, false);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9hbGdvcml0aG1zL2R5bmFtaWNQcm9ncmFtbWluZ0RpZmZpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQzJEO0FBQzZCO0FBQ2xEO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw0Q0FBNEMsOERBQWU7QUFDM0Q7QUFDQSxtQkFBbUIsa0VBQW1CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDhDQUFPO0FBQ3RDLCtCQUErQiw4Q0FBTztBQUN0Qyw0QkFBNEIsOENBQU87QUFDbkM7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hELDZCQUE2Qix1QkFBdUI7QUFDcEQ7QUFDQSwyQkFBMkIsa0VBQW1CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMkRBQVksS0FBSyw2REFBVyxpQ0FBaUMsNkRBQVc7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrRUFBbUI7QUFDdEM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2FsZ29yaXRobXMvZHluYW1pY1Byb2dyYW1taW5nRGlmZmluZy5qcz8xZWI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyBPZmZzZXRSYW5nZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvb2Zmc2V0UmFuZ2UuanMnO1xyXG5pbXBvcnQgeyBTZXF1ZW5jZURpZmYsIEluZmluaXRlVGltZW91dCwgRGlmZkFsZ29yaXRobVJlc3VsdCB9IGZyb20gJy4vZGlmZkFsZ29yaXRobS5qcyc7XHJcbmltcG9ydCB7IEFycmF5MkQgfSBmcm9tICcuLi91dGlscy5qcyc7XHJcbi8qKlxyXG4gKiBBIE8oTU4pIGRpZmZpbmcgYWxnb3JpdGhtIHRoYXQgc3VwcG9ydHMgYSBzY29yZSBmdW5jdGlvbi5cclxuICogVGhlIGFsZ29yaXRobSBjYW4gYmUgaW1wcm92ZWQgYnkgcHJvY2Vzc2luZyB0aGUgMmQgYXJyYXkgZGlhZ29uYWxseS5cclxuKi9cclxuZXhwb3J0IGNsYXNzIER5bmFtaWNQcm9ncmFtbWluZ0RpZmZpbmcge1xyXG4gICAgY29tcHV0ZShzZXF1ZW5jZTEsIHNlcXVlbmNlMiwgdGltZW91dCA9IEluZmluaXRlVGltZW91dC5pbnN0YW5jZSwgZXF1YWxpdHlTY29yZSkge1xyXG4gICAgICAgIGlmIChzZXF1ZW5jZTEubGVuZ3RoID09PSAwIHx8IHNlcXVlbmNlMi5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIERpZmZBbGdvcml0aG1SZXN1bHQudHJpdmlhbChzZXF1ZW5jZTEsIHNlcXVlbmNlMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGxjc0xlbmd0aHMuZ2V0KGksIGopOiBMZW5ndGggb2YgdGhlIGxvbmdlc3QgY29tbW9uIHN1YnNlcXVlbmNlIG9mIHNlcXVlbmNlMS5zdWJzdHJpbmcoMCwgaSArIDEpIGFuZCBzZXF1ZW5jZTIuc3Vic3RyaW5nKDAsIGogKyAxKS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBsY3NMZW5ndGhzID0gbmV3IEFycmF5MkQoc2VxdWVuY2UxLmxlbmd0aCwgc2VxdWVuY2UyLmxlbmd0aCk7XHJcbiAgICAgICAgY29uc3QgZGlyZWN0aW9ucyA9IG5ldyBBcnJheTJEKHNlcXVlbmNlMS5sZW5ndGgsIHNlcXVlbmNlMi5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IGxlbmd0aHMgPSBuZXcgQXJyYXkyRChzZXF1ZW5jZTEubGVuZ3RoLCBzZXF1ZW5jZTIubGVuZ3RoKTtcclxuICAgICAgICAvLyA9PT09IEluaXRpYWxpemluZyBsY3NMZW5ndGhzID09PT1cclxuICAgICAgICBmb3IgKGxldCBzMSA9IDA7IHMxIDwgc2VxdWVuY2UxLmxlbmd0aDsgczErKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBzMiA9IDA7IHMyIDwgc2VxdWVuY2UyLmxlbmd0aDsgczIrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aW1lb3V0LmlzVmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBEaWZmQWxnb3JpdGhtUmVzdWx0LnRyaXZpYWxUaW1lZE91dChzZXF1ZW5jZTEsIHNlcXVlbmNlMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBob3Jpem9udGFsTGVuID0gczEgPT09IDAgPyAwIDogbGNzTGVuZ3Rocy5nZXQoczEgLSAxLCBzMik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbExlbiA9IHMyID09PSAwID8gMCA6IGxjc0xlbmd0aHMuZ2V0KHMxLCBzMiAtIDEpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGV4dGVuZGVkU2VxU2NvcmU7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VxdWVuY2UxLmdldEVsZW1lbnQoczEpID09PSBzZXF1ZW5jZTIuZ2V0RWxlbWVudChzMikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoczEgPT09IDAgfHwgczIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRTZXFTY29yZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFNlcVNjb3JlID0gbGNzTGVuZ3Rocy5nZXQoczEgLSAxLCBzMiAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoczEgPiAwICYmIHMyID4gMCAmJiBkaXJlY3Rpb25zLmdldChzMSAtIDEsIHMyIC0gMSkgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJlZmVyIGNvbnNlY3V0aXZlIGRpYWdvbmFsc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFNlcVNjb3JlICs9IGxlbmd0aHMuZ2V0KHMxIC0gMSwgczIgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRTZXFTY29yZSArPSAoZXF1YWxpdHlTY29yZSA/IGVxdWFsaXR5U2NvcmUoczEsIHMyKSA6IDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRTZXFTY29yZSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBNYXRoLm1heChob3Jpem9udGFsTGVuLCB2ZXJ0aWNhbExlbiwgZXh0ZW5kZWRTZXFTY29yZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IGV4dGVuZGVkU2VxU2NvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBQcmVmZXIgZGlhZ29uYWxzXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldkxlbiA9IHMxID4gMCAmJiBzMiA+IDAgPyBsZW5ndGhzLmdldChzMSAtIDEsIHMyIC0gMSkgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aHMuc2V0KHMxLCBzMiwgcHJldkxlbiArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuc2V0KHMxLCBzMiwgMyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXdWYWx1ZSA9PT0gaG9yaXpvbnRhbExlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aHMuc2V0KHMxLCBzMiwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9ucy5zZXQoczEsIHMyLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5ld1ZhbHVlID09PSB2ZXJ0aWNhbExlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aHMuc2V0KHMxLCBzMiwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9ucy5zZXQoczEsIHMyLCAyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxjc0xlbmd0aHMuc2V0KHMxLCBzMiwgbmV3VmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vID09PT0gQmFja3RyYWNraW5nID09PT1cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICBsZXQgbGFzdEFsaWduaW5nUG9zUzEgPSBzZXF1ZW5jZTEubGVuZ3RoO1xyXG4gICAgICAgIGxldCBsYXN0QWxpZ25pbmdQb3NTMiA9IHNlcXVlbmNlMi5sZW5ndGg7XHJcbiAgICAgICAgZnVuY3Rpb24gcmVwb3J0RGVjcmVhc2luZ0FsaWduaW5nUG9zaXRpb25zKHMxLCBzMikge1xyXG4gICAgICAgICAgICBpZiAoczEgKyAxICE9PSBsYXN0QWxpZ25pbmdQb3NTMSB8fCBzMiArIDEgIT09IGxhc3RBbGlnbmluZ1Bvc1MyKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXcgU2VxdWVuY2VEaWZmKG5ldyBPZmZzZXRSYW5nZShzMSArIDEsIGxhc3RBbGlnbmluZ1Bvc1MxKSwgbmV3IE9mZnNldFJhbmdlKHMyICsgMSwgbGFzdEFsaWduaW5nUG9zUzIpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGFzdEFsaWduaW5nUG9zUzEgPSBzMTtcclxuICAgICAgICAgICAgbGFzdEFsaWduaW5nUG9zUzIgPSBzMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHMxID0gc2VxdWVuY2UxLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgbGV0IHMyID0gc2VxdWVuY2UyLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgd2hpbGUgKHMxID49IDAgJiYgczIgPj0gMCkge1xyXG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9ucy5nZXQoczEsIHMyKSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgcmVwb3J0RGVjcmVhc2luZ0FsaWduaW5nUG9zaXRpb25zKHMxLCBzMik7XHJcbiAgICAgICAgICAgICAgICBzMS0tO1xyXG4gICAgICAgICAgICAgICAgczItLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb25zLmdldChzMSwgczIpID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgczEtLTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHMyLS07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmVwb3J0RGVjcmVhc2luZ0FsaWduaW5nUG9zaXRpb25zKC0xLCAtMSk7XHJcbiAgICAgICAgcmVzdWx0LnJldmVyc2UoKTtcclxuICAgICAgICByZXR1cm4gbmV3IERpZmZBbGdvcml0aG1SZXN1bHQocmVzdWx0LCBmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MyersDiffAlgorithm: () => (/* binding */ MyersDiffAlgorithm)\n/* harmony export */ });\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n/**\r\n * An O(ND) diff algorithm that has a quadratic space worst-case complexity.\r\n*/\r\nclass MyersDiffAlgorithm {\r\n    compute(seq1, seq2, timeout = _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.InfiniteTimeout.instance) {\r\n        // These are common special cases.\r\n        // The early return improves performance dramatically.\r\n        if (seq1.length === 0 || seq2.length === 0) {\r\n            return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivial(seq1, seq2);\r\n        }\r\n        const seqX = seq1; // Text on the x axis\r\n        const seqY = seq2; // Text on the y axis\r\n        function getXAfterSnake(x, y) {\r\n            while (x < seqX.length && y < seqY.length && seqX.getElement(x) === seqY.getElement(y)) {\r\n                x++;\r\n                y++;\r\n            }\r\n            return x;\r\n        }\r\n        let d = 0;\r\n        // V[k]: X value of longest d-line that ends in diagonal k.\r\n        // d-line: path from (0,0) to (x,y) that uses exactly d non-diagonals.\r\n        // diagonal k: Set of points (x,y) with x-y = k.\r\n        // k=1 -> (1,0),(2,1)\r\n        const V = new FastInt32Array();\r\n        V.set(0, getXAfterSnake(0, 0));\r\n        const paths = new FastArrayNegativeIndices();\r\n        paths.set(0, V.get(0) === 0 ? null : new SnakePath(null, 0, 0, V.get(0)));\r\n        let k = 0;\r\n        loop: while (true) {\r\n            d++;\r\n            if (!timeout.isValid()) {\r\n                return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivialTimedOut(seqX, seqY);\r\n            }\r\n            // The paper has `for (k = -d; k <= d; k += 2)`, but we can ignore diagonals that cannot influence the result.\r\n            const lowerBound = -Math.min(d, seqY.length + (d % 2));\r\n            const upperBound = Math.min(d, seqX.length + (d % 2));\r\n            for (k = lowerBound; k <= upperBound; k += 2) {\r\n                let step = 0;\r\n                // We can use the X values of (d-1)-lines to compute X value of the longest d-lines.\r\n                const maxXofDLineTop = k === upperBound ? -1 : V.get(k + 1); // We take a vertical non-diagonal (add a symbol in seqX)\r\n                const maxXofDLineLeft = k === lowerBound ? -1 : V.get(k - 1) + 1; // We take a horizontal non-diagonal (+1 x) (delete a symbol in seqX)\r\n                step++;\r\n                const x = Math.min(Math.max(maxXofDLineTop, maxXofDLineLeft), seqX.length);\r\n                const y = x - k;\r\n                step++;\r\n                if (x > seqX.length || y > seqY.length) {\r\n                    // This diagonal is irrelevant for the result.\r\n                    // TODO: Don't pay the cost for this in the next iteration.\r\n                    continue;\r\n                }\r\n                const newMaxX = getXAfterSnake(x, y);\r\n                V.set(k, newMaxX);\r\n                const lastPath = x === maxXofDLineTop ? paths.get(k + 1) : paths.get(k - 1);\r\n                paths.set(k, newMaxX !== x ? new SnakePath(lastPath, x, y, newMaxX - x) : lastPath);\r\n                if (V.get(k) === seqX.length && V.get(k) - k === seqY.length) {\r\n                    break loop;\r\n                }\r\n            }\r\n        }\r\n        let path = paths.get(k);\r\n        const result = [];\r\n        let lastAligningPosS1 = seqX.length;\r\n        let lastAligningPosS2 = seqY.length;\r\n        while (true) {\r\n            const endX = path ? path.x + path.length : 0;\r\n            const endY = path ? path.y + path.length : 0;\r\n            if (endX !== lastAligningPosS1 || endY !== lastAligningPosS2) {\r\n                result.push(new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(endX, lastAligningPosS1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(endY, lastAligningPosS2)));\r\n            }\r\n            if (!path) {\r\n                break;\r\n            }\r\n            lastAligningPosS1 = path.x;\r\n            lastAligningPosS2 = path.y;\r\n            path = path.prev;\r\n        }\r\n        result.reverse();\r\n        return new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult(result, false);\r\n    }\r\n}\r\nclass SnakePath {\r\n    constructor(prev, x, y, length) {\r\n        this.prev = prev;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.length = length;\r\n    }\r\n}\r\n/**\r\n * An array that supports fast negative indices.\r\n*/\r\nclass FastInt32Array {\r\n    constructor() {\r\n        this.positiveArr = new Int32Array(10);\r\n        this.negativeArr = new Int32Array(10);\r\n    }\r\n    get(idx) {\r\n        if (idx < 0) {\r\n            idx = -idx - 1;\r\n            return this.negativeArr[idx];\r\n        }\r\n        else {\r\n            return this.positiveArr[idx];\r\n        }\r\n    }\r\n    set(idx, value) {\r\n        if (idx < 0) {\r\n            idx = -idx - 1;\r\n            if (idx >= this.negativeArr.length) {\r\n                const arr = this.negativeArr;\r\n                this.negativeArr = new Int32Array(arr.length * 2);\r\n                this.negativeArr.set(arr);\r\n            }\r\n            this.negativeArr[idx] = value;\r\n        }\r\n        else {\r\n            if (idx >= this.positiveArr.length) {\r\n                const arr = this.positiveArr;\r\n                this.positiveArr = new Int32Array(arr.length * 2);\r\n                this.positiveArr.set(arr);\r\n            }\r\n            this.positiveArr[idx] = value;\r\n        }\r\n    }\r\n}\r\n/**\r\n * An array that supports fast negative indices.\r\n*/\r\nclass FastArrayNegativeIndices {\r\n    constructor() {\r\n        this.positiveArr = [];\r\n        this.negativeArr = [];\r\n    }\r\n    get(idx) {\r\n        if (idx < 0) {\r\n            idx = -idx - 1;\r\n            return this.negativeArr[idx];\r\n        }\r\n        else {\r\n            return this.positiveArr[idx];\r\n        }\r\n    }\r\n    set(idx, value) {\r\n        if (idx < 0) {\r\n            idx = -idx - 1;\r\n            this.negativeArr[idx] = value;\r\n        }\r\n        else {\r\n            this.positiveArr[idx] = value;\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeMovedLines: () => (/* binding */ computeMovedLines)\n/* harmony export */ });\n/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rangeMapping.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\");\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/arraysFind.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\");\n/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/map.js */ \"./node_modules/monaco-editor/esm/vs/base/common/map.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./linesSliceCharSequence.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\");\n/* harmony import */ var _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./algorithms/myersDiffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout) {\r\n    let { moves, excludedChanges } = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout);\r\n    if (!timeout.isValid()) {\r\n        return [];\r\n    }\r\n    const filteredChanges = changes.filter(c => !excludedChanges.has(c));\r\n    const unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);\r\n    (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.pushMany)(moves, unchangedMoves);\r\n    moves = joinCloseConsecutiveMoves(moves);\r\n    // Ignore too short moves\r\n    moves = moves.filter(current => {\r\n        const lines = current.original.toOffsetRange().slice(originalLines).map(l => l.trim());\r\n        const originalText = lines.join('\\n');\r\n        return originalText.length >= 15 && countWhere(lines, l => l.length >= 2) >= 2;\r\n    });\r\n    moves = removeMovesInSameDiff(changes, moves);\r\n    return moves;\r\n}\r\nfunction countWhere(arr, predicate) {\r\n    let count = 0;\r\n    for (const t of arr) {\r\n        if (predicate(t)) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}\r\nfunction computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout) {\r\n    const moves = [];\r\n    const deletions = changes\r\n        .filter(c => c.modified.isEmpty && c.original.length >= 3)\r\n        .map(d => new _utils_js__WEBPACK_IMPORTED_MODULE_8__.LineRangeFragment(d.original, originalLines, d));\r\n    const insertions = new Set(changes\r\n        .filter(c => c.original.isEmpty && c.modified.length >= 3)\r\n        .map(d => new _utils_js__WEBPACK_IMPORTED_MODULE_8__.LineRangeFragment(d.modified, modifiedLines, d)));\r\n    const excludedChanges = new Set();\r\n    for (const deletion of deletions) {\r\n        let highestSimilarity = -1;\r\n        let best;\r\n        for (const insertion of insertions) {\r\n            const similarity = deletion.computeSimilarity(insertion);\r\n            if (similarity > highestSimilarity) {\r\n                highestSimilarity = similarity;\r\n                best = insertion;\r\n            }\r\n        }\r\n        if (highestSimilarity > 0.90 && best) {\r\n            insertions.delete(best);\r\n            moves.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(deletion.range, best.range));\r\n            excludedChanges.add(deletion.source);\r\n            excludedChanges.add(best.source);\r\n        }\r\n        if (!timeout.isValid()) {\r\n            return { moves, excludedChanges };\r\n        }\r\n    }\r\n    return { moves, excludedChanges };\r\n}\r\nfunction computeUnchangedMoves(changes, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout) {\r\n    const moves = [];\r\n    const original3LineHashes = new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.SetMap();\r\n    for (const change of changes) {\r\n        for (let i = change.original.startLineNumber; i < change.original.endLineNumberExclusive - 2; i++) {\r\n            const key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;\r\n            original3LineHashes.add(key, { range: new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(i, i + 3) });\r\n        }\r\n    }\r\n    const possibleMappings = [];\r\n    changes.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(c => c.modified.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));\r\n    for (const change of changes) {\r\n        let lastMappings = [];\r\n        for (let i = change.modified.startLineNumber; i < change.modified.endLineNumberExclusive - 2; i++) {\r\n            const key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;\r\n            const currentModifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(i, i + 3);\r\n            const nextMappings = [];\r\n            original3LineHashes.forEach(key, ({ range }) => {\r\n                for (const lastMapping of lastMappings) {\r\n                    // does this match extend some last match?\r\n                    if (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive &&\r\n                        lastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {\r\n                        lastMapping.originalLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);\r\n                        lastMapping.modifiedLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);\r\n                        nextMappings.push(lastMapping);\r\n                        return;\r\n                    }\r\n                }\r\n                const mapping = {\r\n                    modifiedLineRange: currentModifiedRange,\r\n                    originalLineRange: range,\r\n                };\r\n                possibleMappings.push(mapping);\r\n                nextMappings.push(mapping);\r\n            });\r\n            lastMappings = nextMappings;\r\n        }\r\n        if (!timeout.isValid()) {\r\n            return [];\r\n        }\r\n    }\r\n    possibleMappings.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.reverseOrder)((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.modifiedLineRange.length, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator)));\r\n    const modifiedSet = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRangeSet();\r\n    const originalSet = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRangeSet();\r\n    for (const mapping of possibleMappings) {\r\n        const diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;\r\n        const modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);\r\n        const originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);\r\n        const modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);\r\n        for (const s of modifiedIntersectedSections.ranges) {\r\n            if (s.length < 3) {\r\n                continue;\r\n            }\r\n            const modifiedLineRange = s;\r\n            const originalLineRange = s.delta(-diffOrigToMod);\r\n            moves.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(originalLineRange, modifiedLineRange));\r\n            modifiedSet.addRange(modifiedLineRange);\r\n            originalSet.addRange(originalLineRange);\r\n        }\r\n    }\r\n    moves.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.original.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));\r\n    const monotonousChanges = new _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.MonotonousArray(changes);\r\n    for (let i = 0; i < moves.length; i++) {\r\n        const move = moves[i];\r\n        const firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber <= move.original.startLineNumber);\r\n        const firstTouchingChangeMod = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber <= move.modified.startLineNumber);\r\n        const linesAbove = Math.max(move.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber, move.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber);\r\n        const lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber < move.original.endLineNumberExclusive);\r\n        const lastTouchingChangeMod = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber < move.modified.endLineNumberExclusive);\r\n        const linesBelow = Math.max(lastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive, lastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive);\r\n        let extendToTop;\r\n        for (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {\r\n            const origLine = move.original.startLineNumber - extendToTop - 1;\r\n            const modLine = move.modified.startLineNumber - extendToTop - 1;\r\n            if (origLine > originalLines.length || modLine > modifiedLines.length) {\r\n                break;\r\n            }\r\n            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\r\n                break;\r\n            }\r\n            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\r\n                break;\r\n            }\r\n        }\r\n        if (extendToTop > 0) {\r\n            originalSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));\r\n            modifiedSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));\r\n        }\r\n        let extendToBottom;\r\n        for (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\r\n            const origLine = move.original.endLineNumberExclusive + extendToBottom;\r\n            const modLine = move.modified.endLineNumberExclusive + extendToBottom;\r\n            if (origLine > originalLines.length || modLine > modifiedLines.length) {\r\n                break;\r\n            }\r\n            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\r\n                break;\r\n            }\r\n            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\r\n                break;\r\n            }\r\n        }\r\n        if (extendToBottom > 0) {\r\n            originalSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\r\n            modifiedSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\r\n        }\r\n        if (extendToTop > 0 || extendToBottom > 0) {\r\n            moves[i] = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom));\r\n        }\r\n    }\r\n    return moves;\r\n}\r\nfunction areLinesSimilar(line1, line2, timeout) {\r\n    if (line1.trim() === line2.trim()) {\r\n        return true;\r\n    }\r\n    if (line1.length > 300 && line2.length > 300) {\r\n        return false;\r\n    }\r\n    const myersDiffingAlgorithm = new _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_9__.MyersDiffAlgorithm();\r\n    const result = myersDiffingAlgorithm.compute(new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__.LinesSliceCharSequence([line1], new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__.OffsetRange(0, 1), false), new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__.LinesSliceCharSequence([line2], new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__.OffsetRange(0, 1), false), timeout);\r\n    let commonNonSpaceCharCount = 0;\r\n    const inverted = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_0__.SequenceDiff.invert(result.diffs, line1.length);\r\n    for (const seq of inverted) {\r\n        seq.seq1Range.forEach(idx => {\r\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isSpace)(line1.charCodeAt(idx))) {\r\n                commonNonSpaceCharCount++;\r\n            }\r\n        });\r\n    }\r\n    function countNonWsChars(str) {\r\n        let count = 0;\r\n        for (let i = 0; i < line1.length; i++) {\r\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isSpace)(str.charCodeAt(i))) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    const longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);\r\n    const r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;\r\n    return r;\r\n}\r\nfunction joinCloseConsecutiveMoves(moves) {\r\n    if (moves.length === 0) {\r\n        return moves;\r\n    }\r\n    moves.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.original.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));\r\n    const result = [moves[0]];\r\n    for (let i = 1; i < moves.length; i++) {\r\n        const last = result[result.length - 1];\r\n        const current = moves[i];\r\n        const originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;\r\n        const modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;\r\n        const currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;\r\n        if (currentMoveAfterLast && originalDist + modifiedDist <= 2) {\r\n            result[result.length - 1] = last.join(current);\r\n            continue;\r\n        }\r\n        result.push(current);\r\n    }\r\n    return result;\r\n}\r\nfunction removeMovesInSameDiff(changes, moves) {\r\n    const changesMonotonous = new _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.MonotonousArray(changes);\r\n    moves = moves.filter(m => {\r\n        const diffBeforeEndOfMoveOriginal = changesMonotonous.findLastMonotonous(c => c.original.startLineNumber < m.original.endLineNumberExclusive)\r\n            || new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(1, 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(1, 1));\r\n        const diffBeforeEndOfMoveModified = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber < m.modified.endLineNumberExclusive);\r\n        const differentDiffs = diffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;\r\n        return differentDiffs;\r\n    });\r\n    return moves;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLinesDiffComputer: () => (/* binding */ DefaultLinesDiffComputer),\n/* harmony export */   getLineRangeMapping: () => (/* binding */ getLineRangeMapping),\n/* harmony export */   lineRangeMappingFromRangeMappings: () => (/* binding */ lineRangeMappingFromRangeMappings)\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/* harmony import */ var _algorithms_dynamicProgrammingDiffing_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./algorithms/dynamicProgrammingDiffing.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js\");\n/* harmony import */ var _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./algorithms/myersDiffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js\");\n/* harmony import */ var _computeMovedLines_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./computeMovedLines.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js\");\n/* harmony import */ var _heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./heuristicSequenceOptimizations.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js\");\n/* harmony import */ var _lineSequence_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lineSequence.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js\");\n/* harmony import */ var _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./linesSliceCharSequence.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js\");\n/* harmony import */ var _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../linesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js\");\n/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../rangeMapping.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass DefaultLinesDiffComputer {\r\n    constructor() {\r\n        this.dynamicProgrammingDiffing = new _algorithms_dynamicProgrammingDiffing_js__WEBPACK_IMPORTED_MODULE_6__.DynamicProgrammingDiffing();\r\n        this.myersDiffingAlgorithm = new _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_7__.MyersDiffAlgorithm();\r\n    }\r\n    computeDiff(originalLines, modifiedLines, options) {\r\n        if (originalLines.length <= 1 && (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.equals)(originalLines, modifiedLines, (a, b) => a === b)) {\r\n            return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.LinesDiff([], [], false);\r\n        }\r\n        if (originalLines.length === 1 && originalLines[0].length === 0 || modifiedLines.length === 1 && modifiedLines[0].length === 0) {\r\n            return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.LinesDiff([\r\n                new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.DetailedLineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(1, originalLines.length + 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(1, modifiedLines.length + 1), [\r\n                    new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(1, 1, originalLines.length, originalLines[originalLines.length - 1].length + 1), new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(1, 1, modifiedLines.length, modifiedLines[modifiedLines.length - 1].length + 1))\r\n                ])\r\n            ], [], false);\r\n        }\r\n        const timeout = options.maxComputationTimeMs === 0 ? _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.InfiniteTimeout.instance : new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.DateTimeout(options.maxComputationTimeMs);\r\n        const considerWhitespaceChanges = !options.ignoreTrimWhitespace;\r\n        const perfectHashes = new Map();\r\n        function getOrCreateHash(text) {\r\n            let hash = perfectHashes.get(text);\r\n            if (hash === undefined) {\r\n                hash = perfectHashes.size;\r\n                perfectHashes.set(text, hash);\r\n            }\r\n            return hash;\r\n        }\r\n        const originalLinesHashes = originalLines.map((l) => getOrCreateHash(l.trim()));\r\n        const modifiedLinesHashes = modifiedLines.map((l) => getOrCreateHash(l.trim()));\r\n        const sequence1 = new _lineSequence_js__WEBPACK_IMPORTED_MODULE_10__.LineSequence(originalLinesHashes, originalLines);\r\n        const sequence2 = new _lineSequence_js__WEBPACK_IMPORTED_MODULE_10__.LineSequence(modifiedLinesHashes, modifiedLines);\r\n        const lineAlignmentResult = (() => {\r\n            if (sequence1.length + sequence2.length < 1700) {\r\n                // Use the improved algorithm for small files\r\n                return this.dynamicProgrammingDiffing.compute(sequence1, sequence2, timeout, (offset1, offset2) => originalLines[offset1] === modifiedLines[offset2]\r\n                    ? modifiedLines[offset2].length === 0\r\n                        ? 0.1\r\n                        : 1 + Math.log(1 + modifiedLines[offset2].length)\r\n                    : 0.99);\r\n            }\r\n            return this.myersDiffingAlgorithm.compute(sequence1, sequence2, timeout);\r\n        })();\r\n        let lineAlignments = lineAlignmentResult.diffs;\r\n        let hitTimeout = lineAlignmentResult.hitTimeout;\r\n        lineAlignments = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.optimizeSequenceDiffs)(sequence1, sequence2, lineAlignments);\r\n        lineAlignments = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeVeryShortMatchingLinesBetweenDiffs)(sequence1, sequence2, lineAlignments);\r\n        const alignments = [];\r\n        const scanForWhitespaceChanges = (equalLinesCount) => {\r\n            if (!considerWhitespaceChanges) {\r\n                return;\r\n            }\r\n            for (let i = 0; i < equalLinesCount; i++) {\r\n                const seq1Offset = seq1LastStart + i;\r\n                const seq2Offset = seq2LastStart + i;\r\n                if (originalLines[seq1Offset] !== modifiedLines[seq2Offset]) {\r\n                    // This is because of whitespace changes, diff these lines\r\n                    const characterDiffs = this.refineDiff(originalLines, modifiedLines, new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__.OffsetRange(seq1Offset, seq1Offset + 1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__.OffsetRange(seq2Offset, seq2Offset + 1)), timeout, considerWhitespaceChanges);\r\n                    for (const a of characterDiffs.mappings) {\r\n                        alignments.push(a);\r\n                    }\r\n                    if (characterDiffs.hitTimeout) {\r\n                        hitTimeout = true;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        let seq1LastStart = 0;\r\n        let seq2LastStart = 0;\r\n        for (const diff of lineAlignments) {\r\n            (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => diff.seq1Range.start - seq1LastStart === diff.seq2Range.start - seq2LastStart);\r\n            const equalLinesCount = diff.seq1Range.start - seq1LastStart;\r\n            scanForWhitespaceChanges(equalLinesCount);\r\n            seq1LastStart = diff.seq1Range.endExclusive;\r\n            seq2LastStart = diff.seq2Range.endExclusive;\r\n            const characterDiffs = this.refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges);\r\n            if (characterDiffs.hitTimeout) {\r\n                hitTimeout = true;\r\n            }\r\n            for (const a of characterDiffs.mappings) {\r\n                alignments.push(a);\r\n            }\r\n        }\r\n        scanForWhitespaceChanges(originalLines.length - seq1LastStart);\r\n        const changes = lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines);\r\n        let moves = [];\r\n        if (options.computeMoves) {\r\n            moves = this.computeMoves(changes, originalLines, modifiedLines, originalLinesHashes, modifiedLinesHashes, timeout, considerWhitespaceChanges);\r\n        }\r\n        // Make sure all ranges are valid\r\n        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => {\r\n            function validatePosition(pos, lines) {\r\n                if (pos.lineNumber < 1 || pos.lineNumber > lines.length) {\r\n                    return false;\r\n                }\r\n                const line = lines[pos.lineNumber - 1];\r\n                if (pos.column < 1 || pos.column > line.length + 1) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n            function validateRange(range, lines) {\r\n                if (range.startLineNumber < 1 || range.startLineNumber > lines.length + 1) {\r\n                    return false;\r\n                }\r\n                if (range.endLineNumberExclusive < 1 || range.endLineNumberExclusive > lines.length + 1) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n            for (const c of changes) {\r\n                if (!c.innerChanges) {\r\n                    return false;\r\n                }\r\n                for (const ic of c.innerChanges) {\r\n                    const valid = validatePosition(ic.modifiedRange.getStartPosition(), modifiedLines) && validatePosition(ic.modifiedRange.getEndPosition(), modifiedLines) &&\r\n                        validatePosition(ic.originalRange.getStartPosition(), originalLines) && validatePosition(ic.originalRange.getEndPosition(), originalLines);\r\n                    if (!valid) {\r\n                        return false;\r\n                    }\r\n                }\r\n                if (!validateRange(c.modified, modifiedLines) || !validateRange(c.original, originalLines)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n        return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.LinesDiff(changes, moves, hitTimeout);\r\n    }\r\n    computeMoves(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout, considerWhitespaceChanges) {\r\n        const moves = (0,_computeMovedLines_js__WEBPACK_IMPORTED_MODULE_8__.computeMovedLines)(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout);\r\n        const movesWithDiffs = moves.map(m => {\r\n            const moveChanges = this.refineDiff(originalLines, modifiedLines, new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.SequenceDiff(m.original.toOffsetRange(), m.modified.toOffsetRange()), timeout, considerWhitespaceChanges);\r\n            const mappings = lineRangeMappingFromRangeMappings(moveChanges.mappings, originalLines, modifiedLines, true);\r\n            return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_12__.MovedText(m, mappings);\r\n        });\r\n        return movesWithDiffs;\r\n    }\r\n    refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges) {\r\n        const slice1 = new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_11__.LinesSliceCharSequence(originalLines, diff.seq1Range, considerWhitespaceChanges);\r\n        const slice2 = new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_11__.LinesSliceCharSequence(modifiedLines, diff.seq2Range, considerWhitespaceChanges);\r\n        const diffResult = slice1.length + slice2.length < 500\r\n            ? this.dynamicProgrammingDiffing.compute(slice1, slice2, timeout)\r\n            : this.myersDiffingAlgorithm.compute(slice1, slice2, timeout);\r\n        let diffs = diffResult.diffs;\r\n        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.optimizeSequenceDiffs)(slice1, slice2, diffs);\r\n        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.extendDiffsToEntireWordIfAppropriate)(slice1, slice2, diffs);\r\n        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeShortMatches)(slice1, slice2, diffs);\r\n        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeVeryShortMatchingTextBetweenLongDiffs)(slice1, slice2, diffs);\r\n        const result = diffs.map((d) => new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.RangeMapping(slice1.translateRange(d.seq1Range), slice2.translateRange(d.seq2Range)));\r\n        // Assert: result applied on original should be the same as diff applied to original\r\n        return {\r\n            mappings: result,\r\n            hitTimeout: diffResult.hitTimeout,\r\n        };\r\n    }\r\n}\r\nfunction lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines, dontAssertStartLine = false) {\r\n    const changes = [];\r\n    for (const g of (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.groupAdjacentBy)(alignments.map(a => getLineRangeMapping(a, originalLines, modifiedLines)), (a1, a2) => a1.original.overlapOrTouch(a2.original)\r\n        || a1.modified.overlapOrTouch(a2.modified))) {\r\n        const first = g[0];\r\n        const last = g[g.length - 1];\r\n        changes.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.DetailedLineRangeMapping(first.original.join(last.original), first.modified.join(last.modified), g.map(a => a.innerChanges[0])));\r\n    }\r\n    (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => {\r\n        if (!dontAssertStartLine && changes.length > 0) {\r\n            if (changes[0].modified.startLineNumber !== changes[0].original.startLineNumber) {\r\n                return false;\r\n            }\r\n            if (modifiedLines.length - changes[changes.length - 1].modified.endLineNumberExclusive !== originalLines.length - changes[changes.length - 1].original.endLineNumberExclusive) {\r\n                return false;\r\n            }\r\n        }\r\n        return (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.checkAdjacentItems)(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\r\n            // There has to be an unchanged line in between (otherwise both diffs should have been joined)\r\n            m1.original.endLineNumberExclusive < m2.original.startLineNumber &&\r\n            m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);\r\n    });\r\n    return changes;\r\n}\r\nfunction getLineRangeMapping(rangeMapping, originalLines, modifiedLines) {\r\n    let lineStartDelta = 0;\r\n    let lineEndDelta = 0;\r\n    // rangeMapping describes the edit that replaces `rangeMapping.originalRange` with `newText := getText(modifiedLines, rangeMapping.modifiedRange)`.\r\n    // original: ]xxx \\n <- this line is not modified\r\n    // modified: ]xx  \\n\r\n    if (rangeMapping.modifiedRange.endColumn === 1 && rangeMapping.originalRange.endColumn === 1\r\n        && rangeMapping.originalRange.startLineNumber + lineStartDelta <= rangeMapping.originalRange.endLineNumber\r\n        && rangeMapping.modifiedRange.startLineNumber + lineStartDelta <= rangeMapping.modifiedRange.endLineNumber) {\r\n        // We can only do this if the range is not empty yet\r\n        lineEndDelta = -1;\r\n    }\r\n    // original: xxx[ \\n <- this line is not modified\r\n    // modified: xxx[ \\n\r\n    if (rangeMapping.modifiedRange.startColumn - 1 >= modifiedLines[rangeMapping.modifiedRange.startLineNumber - 1].length\r\n        && rangeMapping.originalRange.startColumn - 1 >= originalLines[rangeMapping.originalRange.startLineNumber - 1].length\r\n        && rangeMapping.originalRange.startLineNumber <= rangeMapping.originalRange.endLineNumber + lineEndDelta\r\n        && rangeMapping.modifiedRange.startLineNumber <= rangeMapping.modifiedRange.endLineNumber + lineEndDelta) {\r\n        // We can only do this if the range is not empty yet\r\n        lineStartDelta = 1;\r\n    }\r\n    const originalLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(rangeMapping.originalRange.startLineNumber + lineStartDelta, rangeMapping.originalRange.endLineNumber + 1 + lineEndDelta);\r\n    const modifiedLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(rangeMapping.modifiedRange.startLineNumber + lineStartDelta, rangeMapping.modifiedRange.endLineNumber + 1 + lineEndDelta);\r\n    return new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_13__.DetailedLineRangeMapping(originalLineRange, modifiedLineRange, [rangeMapping]);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extendDiffsToEntireWordIfAppropriate: () => (/* binding */ extendDiffsToEntireWordIfAppropriate),\n/* harmony export */   optimizeSequenceDiffs: () => (/* binding */ optimizeSequenceDiffs),\n/* harmony export */   removeShortMatches: () => (/* binding */ removeShortMatches),\n/* harmony export */   removeVeryShortMatchingLinesBetweenDiffs: () => (/* binding */ removeVeryShortMatchingLinesBetweenDiffs),\n/* harmony export */   removeVeryShortMatchingTextBetweenLongDiffs: () => (/* binding */ removeVeryShortMatchingTextBetweenLongDiffs)\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\nfunction optimizeSequenceDiffs(sequence1, sequence2, sequenceDiffs) {\r\n    let result = sequenceDiffs;\r\n    result = joinSequenceDiffsByShifting(sequence1, sequence2, result);\r\n    // Sometimes, calling this function twice improves the result.\r\n    // Uncomment the second invocation and run the tests to see the difference.\r\n    result = joinSequenceDiffsByShifting(sequence1, sequence2, result);\r\n    result = shiftSequenceDiffs(sequence1, sequence2, result);\r\n    return result;\r\n}\r\n/**\r\n * This function fixes issues like this:\r\n * ```\r\n * import { Baz, Bar } from \"foo\";\r\n * ```\r\n * <->\r\n * ```\r\n * import { Baz, Bar, Foo } from \"foo\";\r\n * ```\r\n * Computed diff: [ {Add \",\" after Bar}, {Add \"Foo \" after space} }\r\n * Improved diff: [{Add \", Foo\" after Bar}]\r\n */\r\nfunction joinSequenceDiffsByShifting(sequence1, sequence2, sequenceDiffs) {\r\n    if (sequenceDiffs.length === 0) {\r\n        return sequenceDiffs;\r\n    }\r\n    const result = [];\r\n    result.push(sequenceDiffs[0]);\r\n    // First move them all to the left as much as possible and join them if possible\r\n    for (let i = 1; i < sequenceDiffs.length; i++) {\r\n        const prevResult = result[result.length - 1];\r\n        let cur = sequenceDiffs[i];\r\n        if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {\r\n            const length = cur.seq1Range.start - prevResult.seq1Range.endExclusive;\r\n            let d;\r\n            for (d = 1; d <= length; d++) {\r\n                if (sequence1.getElement(cur.seq1Range.start - d) !== sequence1.getElement(cur.seq1Range.endExclusive - d) ||\r\n                    sequence2.getElement(cur.seq2Range.start - d) !== sequence2.getElement(cur.seq2Range.endExclusive - d)) {\r\n                    break;\r\n                }\r\n            }\r\n            d--;\r\n            if (d === length) {\r\n                // Merge previous and current diff\r\n                result[result.length - 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevResult.seq1Range.start, cur.seq1Range.endExclusive - length), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevResult.seq2Range.start, cur.seq2Range.endExclusive - length));\r\n                continue;\r\n            }\r\n            cur = cur.delta(-d);\r\n        }\r\n        result.push(cur);\r\n    }\r\n    const result2 = [];\r\n    // Then move them all to the right and join them again if possible\r\n    for (let i = 0; i < result.length - 1; i++) {\r\n        const nextResult = result[i + 1];\r\n        let cur = result[i];\r\n        if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {\r\n            const length = nextResult.seq1Range.start - cur.seq1Range.endExclusive;\r\n            let d;\r\n            for (d = 0; d < length; d++) {\r\n                if (!sequence1.isStronglyEqual(cur.seq1Range.start + d, cur.seq1Range.endExclusive + d) ||\r\n                    !sequence2.isStronglyEqual(cur.seq2Range.start + d, cur.seq2Range.endExclusive + d)) {\r\n                    break;\r\n                }\r\n            }\r\n            if (d === length) {\r\n                // Merge previous and current diff, write to result!\r\n                result[i + 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq1Range.start + length, nextResult.seq1Range.endExclusive), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq2Range.start + length, nextResult.seq2Range.endExclusive));\r\n                continue;\r\n            }\r\n            if (d > 0) {\r\n                cur = cur.delta(d);\r\n            }\r\n        }\r\n        result2.push(cur);\r\n    }\r\n    if (result.length > 0) {\r\n        result2.push(result[result.length - 1]);\r\n    }\r\n    return result2;\r\n}\r\n// align character level diffs at whitespace characters\r\n// import { IBar } from \"foo\";\r\n// import { I[Arr, I]Bar } from \"foo\";\r\n// ->\r\n// import { [IArr, ]IBar } from \"foo\";\r\n// import { ITransaction, observableValue, transaction } from 'vs/base/common/observable';\r\n// import { ITransaction, observable[FromEvent, observable]Value, transaction } from 'vs/base/common/observable';\r\n// ->\r\n// import { ITransaction, [observableFromEvent, ]observableValue, transaction } from 'vs/base/common/observable';\r\n// collectBrackets(level + 1, levelPerBracketType);\r\n// collectBrackets(level + 1, levelPerBracket[ + 1, levelPerBracket]Type);\r\n// ->\r\n// collectBrackets(level + 1, [levelPerBracket + 1, ]levelPerBracketType);\r\nfunction shiftSequenceDiffs(sequence1, sequence2, sequenceDiffs) {\r\n    if (!sequence1.getBoundaryScore || !sequence2.getBoundaryScore) {\r\n        return sequenceDiffs;\r\n    }\r\n    for (let i = 0; i < sequenceDiffs.length; i++) {\r\n        const prevDiff = (i > 0 ? sequenceDiffs[i - 1] : undefined);\r\n        const diff = sequenceDiffs[i];\r\n        const nextDiff = (i + 1 < sequenceDiffs.length ? sequenceDiffs[i + 1] : undefined);\r\n        const seq1ValidRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevDiff ? prevDiff.seq1Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq1Range.start - 1 : sequence1.length);\r\n        const seq2ValidRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevDiff ? prevDiff.seq2Range.endExclusive + 1 : 0, nextDiff ? nextDiff.seq2Range.start - 1 : sequence2.length);\r\n        if (diff.seq1Range.isEmpty) {\r\n            sequenceDiffs[i] = shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange);\r\n        }\r\n        else if (diff.seq2Range.isEmpty) {\r\n            sequenceDiffs[i] = shiftDiffToBetterPosition(diff.swap(), sequence2, sequence1, seq2ValidRange, seq1ValidRange).swap();\r\n        }\r\n    }\r\n    return sequenceDiffs;\r\n}\r\nfunction shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange) {\r\n    const maxShiftLimit = 100; // To prevent performance issues\r\n    // don't touch previous or next!\r\n    let deltaBefore = 1;\r\n    while (diff.seq1Range.start - deltaBefore >= seq1ValidRange.start &&\r\n        diff.seq2Range.start - deltaBefore >= seq2ValidRange.start &&\r\n        sequence2.isStronglyEqual(diff.seq2Range.start - deltaBefore, diff.seq2Range.endExclusive - deltaBefore) && deltaBefore < maxShiftLimit) {\r\n        deltaBefore++;\r\n    }\r\n    deltaBefore--;\r\n    let deltaAfter = 0;\r\n    while (diff.seq1Range.start + deltaAfter < seq1ValidRange.endExclusive &&\r\n        diff.seq2Range.endExclusive + deltaAfter < seq2ValidRange.endExclusive &&\r\n        sequence2.isStronglyEqual(diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter) && deltaAfter < maxShiftLimit) {\r\n        deltaAfter++;\r\n    }\r\n    if (deltaBefore === 0 && deltaAfter === 0) {\r\n        return diff;\r\n    }\r\n    // Visualize `[sequence1.text, diff.seq1Range.start + deltaAfter]`\r\n    // and `[sequence2.text, diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter]`\r\n    let bestDelta = 0;\r\n    let bestScore = -1;\r\n    // find best scored delta\r\n    for (let delta = -deltaBefore; delta <= deltaAfter; delta++) {\r\n        const seq2OffsetStart = diff.seq2Range.start + delta;\r\n        const seq2OffsetEndExclusive = diff.seq2Range.endExclusive + delta;\r\n        const seq1Offset = diff.seq1Range.start + delta;\r\n        const score = sequence1.getBoundaryScore(seq1Offset) + sequence2.getBoundaryScore(seq2OffsetStart) + sequence2.getBoundaryScore(seq2OffsetEndExclusive);\r\n        if (score > bestScore) {\r\n            bestScore = score;\r\n            bestDelta = delta;\r\n        }\r\n    }\r\n    return diff.delta(bestDelta);\r\n}\r\nfunction removeShortMatches(sequence1, sequence2, sequenceDiffs) {\r\n    const result = [];\r\n    for (const s of sequenceDiffs) {\r\n        const last = result[result.length - 1];\r\n        if (!last) {\r\n            result.push(s);\r\n            continue;\r\n        }\r\n        if (s.seq1Range.start - last.seq1Range.endExclusive <= 2 || s.seq2Range.start - last.seq2Range.endExclusive <= 2) {\r\n            result[result.length - 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(last.seq1Range.join(s.seq1Range), last.seq2Range.join(s.seq2Range));\r\n        }\r\n        else {\r\n            result.push(s);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction extendDiffsToEntireWordIfAppropriate(sequence1, sequence2, sequenceDiffs) {\r\n    const equalMappings = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff.invert(sequenceDiffs, sequence1.length);\r\n    const additional = [];\r\n    let lastPoint = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair(0, 0);\r\n    function scanWord(pair, equalMapping) {\r\n        if (pair.offset1 < lastPoint.offset1 || pair.offset2 < lastPoint.offset2) {\r\n            return;\r\n        }\r\n        const w1 = sequence1.findWordContaining(pair.offset1);\r\n        const w2 = sequence2.findWordContaining(pair.offset2);\r\n        if (!w1 || !w2) {\r\n            return;\r\n        }\r\n        let w = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(w1, w2);\r\n        const equalPart = w.intersect(equalMapping);\r\n        let equalChars1 = equalPart.seq1Range.length;\r\n        let equalChars2 = equalPart.seq2Range.length;\r\n        // The words do not touch previous equals mappings, as we would have processed them already.\r\n        // But they might touch the next ones.\r\n        while (equalMappings.length > 0) {\r\n            const next = equalMappings[0];\r\n            const intersects = next.seq1Range.intersects(w.seq1Range) || next.seq2Range.intersects(w.seq2Range);\r\n            if (!intersects) {\r\n                break;\r\n            }\r\n            const v1 = sequence1.findWordContaining(next.seq1Range.start);\r\n            const v2 = sequence2.findWordContaining(next.seq2Range.start);\r\n            // Because there is an intersection, we know that the words are not empty.\r\n            const v = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(v1, v2);\r\n            const equalPart = v.intersect(next);\r\n            equalChars1 += equalPart.seq1Range.length;\r\n            equalChars2 += equalPart.seq2Range.length;\r\n            w = w.join(v);\r\n            if (w.seq1Range.endExclusive >= next.seq1Range.endExclusive) {\r\n                // The word extends beyond the next equal mapping.\r\n                equalMappings.shift();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (equalChars1 + equalChars2 < (w.seq1Range.length + w.seq2Range.length) * 2 / 3) {\r\n            additional.push(w);\r\n        }\r\n        lastPoint = w.getEndExclusives();\r\n    }\r\n    while (equalMappings.length > 0) {\r\n        const next = equalMappings.shift();\r\n        if (next.seq1Range.isEmpty) {\r\n            continue;\r\n        }\r\n        scanWord(next.getStarts(), next);\r\n        // The equal parts are not empty, so -1 gives us a character that is equal in both parts.\r\n        scanWord(next.getEndExclusives().delta(-1), next);\r\n    }\r\n    const merged = mergeSequenceDiffs(sequenceDiffs, additional);\r\n    return merged;\r\n}\r\nfunction mergeSequenceDiffs(sequenceDiffs1, sequenceDiffs2) {\r\n    const result = [];\r\n    while (sequenceDiffs1.length > 0 || sequenceDiffs2.length > 0) {\r\n        const sd1 = sequenceDiffs1[0];\r\n        const sd2 = sequenceDiffs2[0];\r\n        let next;\r\n        if (sd1 && (!sd2 || sd1.seq1Range.start < sd2.seq1Range.start)) {\r\n            next = sequenceDiffs1.shift();\r\n        }\r\n        else {\r\n            next = sequenceDiffs2.shift();\r\n        }\r\n        if (result.length > 0 && result[result.length - 1].seq1Range.endExclusive >= next.seq1Range.start) {\r\n            result[result.length - 1] = result[result.length - 1].join(next);\r\n        }\r\n        else {\r\n            result.push(next);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction removeVeryShortMatchingLinesBetweenDiffs(sequence1, _sequence2, sequenceDiffs) {\r\n    let diffs = sequenceDiffs;\r\n    if (diffs.length === 0) {\r\n        return diffs;\r\n    }\r\n    let counter = 0;\r\n    let shouldRepeat;\r\n    do {\r\n        shouldRepeat = false;\r\n        const result = [\r\n            diffs[0]\r\n        ];\r\n        for (let i = 1; i < diffs.length; i++) {\r\n            const cur = diffs[i];\r\n            const lastResult = result[result.length - 1];\r\n            function shouldJoinDiffs(before, after) {\r\n                const unchangedRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);\r\n                const unchangedText = sequence1.getText(unchangedRange);\r\n                const unchangedTextWithoutWs = unchangedText.replace(/\\s/g, '');\r\n                if (unchangedTextWithoutWs.length <= 4\r\n                    && (before.seq1Range.length + before.seq2Range.length > 5 || after.seq1Range.length + after.seq2Range.length > 5)) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            const shouldJoin = shouldJoinDiffs(lastResult, cur);\r\n            if (shouldJoin) {\r\n                shouldRepeat = true;\r\n                result[result.length - 1] = result[result.length - 1].join(cur);\r\n            }\r\n            else {\r\n                result.push(cur);\r\n            }\r\n        }\r\n        diffs = result;\r\n    } while (counter++ < 10 && shouldRepeat);\r\n    return diffs;\r\n}\r\nfunction removeVeryShortMatchingTextBetweenLongDiffs(sequence1, sequence2, sequenceDiffs) {\r\n    let diffs = sequenceDiffs;\r\n    if (diffs.length === 0) {\r\n        return diffs;\r\n    }\r\n    let counter = 0;\r\n    let shouldRepeat;\r\n    do {\r\n        shouldRepeat = false;\r\n        const result = [\r\n            diffs[0]\r\n        ];\r\n        for (let i = 1; i < diffs.length; i++) {\r\n            const cur = diffs[i];\r\n            const lastResult = result[result.length - 1];\r\n            function shouldJoinDiffs(before, after) {\r\n                const unchangedRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);\r\n                const unchangedLineCount = sequence1.countLinesIn(unchangedRange);\r\n                if (unchangedLineCount > 5 || unchangedRange.length > 500) {\r\n                    return false;\r\n                }\r\n                const unchangedText = sequence1.getText(unchangedRange).trim();\r\n                if (unchangedText.length > 20 || unchangedText.split(/\\r\\n|\\r|\\n/).length > 1) {\r\n                    return false;\r\n                }\r\n                const beforeLineCount1 = sequence1.countLinesIn(before.seq1Range);\r\n                const beforeSeq1Length = before.seq1Range.length;\r\n                const beforeLineCount2 = sequence2.countLinesIn(before.seq2Range);\r\n                const beforeSeq2Length = before.seq2Range.length;\r\n                const afterLineCount1 = sequence1.countLinesIn(after.seq1Range);\r\n                const afterSeq1Length = after.seq1Range.length;\r\n                const afterLineCount2 = sequence2.countLinesIn(after.seq2Range);\r\n                const afterSeq2Length = after.seq2Range.length;\r\n                // TODO: Maybe a neural net can be used to derive the result from these numbers\r\n                const max = 2 * 40 + 50;\r\n                function cap(v) {\r\n                    return Math.min(v, max);\r\n                }\r\n                if (Math.pow(Math.pow(cap(beforeLineCount1 * 40 + beforeSeq1Length), 1.5) + Math.pow(cap(beforeLineCount2 * 40 + beforeSeq2Length), 1.5), 1.5)\r\n                    + Math.pow(Math.pow(cap(afterLineCount1 * 40 + afterSeq1Length), 1.5) + Math.pow(cap(afterLineCount2 * 40 + afterSeq2Length), 1.5), 1.5) > ((max ** 1.5) ** 1.5) * 1.3) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            const shouldJoin = shouldJoinDiffs(lastResult, cur);\r\n            if (shouldJoin) {\r\n                shouldRepeat = true;\r\n                result[result.length - 1] = result[result.length - 1].join(cur);\r\n            }\r\n            else {\r\n                result.push(cur);\r\n            }\r\n        }\r\n        diffs = result;\r\n    } while (counter++ < 10 && shouldRepeat);\r\n    const newDiffs = [];\r\n    // Remove short suffixes/prefixes\r\n    (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.forEachWithNeighbors)(diffs, (prev, cur, next) => {\r\n        let newDiff = cur;\r\n        function shouldMarkAsChanged(text) {\r\n            return text.length > 0 && text.trim().length <= 3 && cur.seq1Range.length + cur.seq2Range.length > 100;\r\n        }\r\n        const fullRange1 = sequence1.extendToFullLines(cur.seq1Range);\r\n        const prefix = sequence1.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(fullRange1.start, cur.seq1Range.start));\r\n        if (shouldMarkAsChanged(prefix)) {\r\n            newDiff = newDiff.deltaStart(-prefix.length);\r\n        }\r\n        const suffix = sequence1.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq1Range.endExclusive, fullRange1.endExclusive));\r\n        if (shouldMarkAsChanged(suffix)) {\r\n            newDiff = newDiff.deltaEnd(suffix.length);\r\n        }\r\n        const availableSpace = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff.fromOffsetPairs(prev ? prev.getEndExclusives() : _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair.zero, next ? next.getStarts() : _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair.max);\r\n        const result = newDiff.intersect(availableSpace);\r\n        if (newDiffs.length > 0 && result.getStarts().equals(newDiffs[newDiffs.length - 1].getEndExclusives())) {\r\n            newDiffs[newDiffs.length - 1] = newDiffs[newDiffs.length - 1].join(result);\r\n        }\r\n        else {\r\n            newDiffs.push(result);\r\n        }\r\n    });\r\n    return newDiffs;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineSequence: () => (/* binding */ LineSequence)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nclass LineSequence {\r\n    constructor(trimmedHash, lines) {\r\n        this.trimmedHash = trimmedHash;\r\n        this.lines = lines;\r\n    }\r\n    getElement(offset) {\r\n        return this.trimmedHash[offset];\r\n    }\r\n    get length() {\r\n        return this.trimmedHash.length;\r\n    }\r\n    getBoundaryScore(length) {\r\n        const indentationBefore = length === 0 ? 0 : getIndentation(this.lines[length - 1]);\r\n        const indentationAfter = length === this.lines.length ? 0 : getIndentation(this.lines[length]);\r\n        return 1000 - (indentationBefore + indentationAfter);\r\n    }\r\n    getText(range) {\r\n        return this.lines.slice(range.start, range.endExclusive).join('\\n');\r\n    }\r\n    isStronglyEqual(offset1, offset2) {\r\n        return this.lines[offset1] === this.lines[offset2];\r\n    }\r\n}\r\nfunction getIndentation(str) {\r\n    let i = 0;\r\n    while (i < str.length && (str.charCodeAt(i) === 32 /* CharCode.Space */ || str.charCodeAt(i) === 9 /* CharCode.Tab */)) {\r\n        i++;\r\n    }\r\n    return i;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci9saW5lU2VxdWVuY2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vZGlmZi9kZWZhdWx0TGluZXNEaWZmQ29tcHV0ZXIvbGluZVNlcXVlbmNlLmpzP2I1NzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmV4cG9ydCBjbGFzcyBMaW5lU2VxdWVuY2Uge1xyXG4gICAgY29uc3RydWN0b3IodHJpbW1lZEhhc2gsIGxpbmVzKSB7XHJcbiAgICAgICAgdGhpcy50cmltbWVkSGFzaCA9IHRyaW1tZWRIYXNoO1xyXG4gICAgICAgIHRoaXMubGluZXMgPSBsaW5lcztcclxuICAgIH1cclxuICAgIGdldEVsZW1lbnQob2Zmc2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpbW1lZEhhc2hbb2Zmc2V0XTtcclxuICAgIH1cclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpbW1lZEhhc2gubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgZ2V0Qm91bmRhcnlTY29yZShsZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBpbmRlbnRhdGlvbkJlZm9yZSA9IGxlbmd0aCA9PT0gMCA/IDAgOiBnZXRJbmRlbnRhdGlvbih0aGlzLmxpbmVzW2xlbmd0aCAtIDFdKTtcclxuICAgICAgICBjb25zdCBpbmRlbnRhdGlvbkFmdGVyID0gbGVuZ3RoID09PSB0aGlzLmxpbmVzLmxlbmd0aCA/IDAgOiBnZXRJbmRlbnRhdGlvbih0aGlzLmxpbmVzW2xlbmd0aF0pO1xyXG4gICAgICAgIHJldHVybiAxMDAwIC0gKGluZGVudGF0aW9uQmVmb3JlICsgaW5kZW50YXRpb25BZnRlcik7XHJcbiAgICB9XHJcbiAgICBnZXRUZXh0KHJhbmdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGluZXMuc2xpY2UocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZEV4Y2x1c2l2ZSkuam9pbignXFxuJyk7XHJcbiAgICB9XHJcbiAgICBpc1N0cm9uZ2x5RXF1YWwob2Zmc2V0MSwgb2Zmc2V0Mikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVzW29mZnNldDFdID09PSB0aGlzLmxpbmVzW29mZnNldDJdO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldEluZGVudGF0aW9uKHN0cikge1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgd2hpbGUgKGkgPCBzdHIubGVuZ3RoICYmIChzdHIuY2hhckNvZGVBdChpKSA9PT0gMzIgLyogQ2hhckNvZGUuU3BhY2UgKi8gfHwgc3RyLmNoYXJDb2RlQXQoaSkgPT09IDkgLyogQ2hhckNvZGUuVGFiICovKSkge1xyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuICAgIHJldHVybiBpO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinesSliceCharSequence: () => (/* binding */ LinesSliceCharSequence)\n/* harmony export */ });\n/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arraysFind.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js\");\n/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/offsetRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\nclass LinesSliceCharSequence {\r\n    constructor(lines, lineRange, considerWhitespaceChanges) {\r\n        // This slice has to have lineRange.length many \\n! (otherwise diffing against an empty slice will be problematic)\r\n        // (Unless it covers the entire document, in that case the other slice also has to cover the entire document ands it's okay)\r\n        this.lines = lines;\r\n        this.considerWhitespaceChanges = considerWhitespaceChanges;\r\n        this.elements = [];\r\n        this.firstCharOffsetByLine = [];\r\n        // To account for trimming\r\n        this.additionalOffsetByLine = [];\r\n        // If the slice covers the end, but does not start at the beginning, we include just the \\n of the previous line.\r\n        let trimFirstLineFully = false;\r\n        if (lineRange.start > 0 && lineRange.endExclusive >= lines.length) {\r\n            lineRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lineRange.start - 1, lineRange.endExclusive);\r\n            trimFirstLineFully = true;\r\n        }\r\n        this.lineRange = lineRange;\r\n        this.firstCharOffsetByLine[0] = 0;\r\n        for (let i = this.lineRange.start; i < this.lineRange.endExclusive; i++) {\r\n            let line = lines[i];\r\n            let offset = 0;\r\n            if (trimFirstLineFully) {\r\n                offset = line.length;\r\n                line = '';\r\n                trimFirstLineFully = false;\r\n            }\r\n            else if (!considerWhitespaceChanges) {\r\n                const trimmedStartLine = line.trimStart();\r\n                offset = line.length - trimmedStartLine.length;\r\n                line = trimmedStartLine.trimEnd();\r\n            }\r\n            this.additionalOffsetByLine.push(offset);\r\n            for (let i = 0; i < line.length; i++) {\r\n                this.elements.push(line.charCodeAt(i));\r\n            }\r\n            // Don't add an \\n that does not exist in the document.\r\n            if (i < lines.length - 1) {\r\n                this.elements.push('\\n'.charCodeAt(0));\r\n                this.firstCharOffsetByLine[i - this.lineRange.start + 1] = this.elements.length;\r\n            }\r\n        }\r\n        // To account for the last line\r\n        this.additionalOffsetByLine.push(0);\r\n    }\r\n    toString() {\r\n        return `Slice: \"${this.text}\"`;\r\n    }\r\n    get text() {\r\n        return this.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(0, this.length));\r\n    }\r\n    getText(range) {\r\n        return this.elements.slice(range.start, range.endExclusive).map(e => String.fromCharCode(e)).join('');\r\n    }\r\n    getElement(offset) {\r\n        return this.elements[offset];\r\n    }\r\n    get length() {\r\n        return this.elements.length;\r\n    }\r\n    getBoundaryScore(length) {\r\n        //   a   b   c   ,           d   e   f\r\n        // 11  0   0   12  15  6   13  0   0   11\r\n        const prevCategory = getCategory(length > 0 ? this.elements[length - 1] : -1);\r\n        const nextCategory = getCategory(length < this.elements.length ? this.elements[length] : -1);\r\n        if (prevCategory === 7 /* CharBoundaryCategory.LineBreakCR */ && nextCategory === 8 /* CharBoundaryCategory.LineBreakLF */) {\r\n            // don't break between \\r and \\n\r\n            return 0;\r\n        }\r\n        if (prevCategory === 8 /* CharBoundaryCategory.LineBreakLF */) {\r\n            // prefer the linebreak before the change\r\n            return 150;\r\n        }\r\n        let score = 0;\r\n        if (prevCategory !== nextCategory) {\r\n            score += 10;\r\n            if (prevCategory === 0 /* CharBoundaryCategory.WordLower */ && nextCategory === 1 /* CharBoundaryCategory.WordUpper */) {\r\n                score += 1;\r\n            }\r\n        }\r\n        score += getCategoryBoundaryScore(prevCategory);\r\n        score += getCategoryBoundaryScore(nextCategory);\r\n        return score;\r\n    }\r\n    translateOffset(offset) {\r\n        // find smallest i, so that lineBreakOffsets[i] <= offset using binary search\r\n        if (this.lineRange.isEmpty) {\r\n            return new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(this.lineRange.start + 1, 1);\r\n        }\r\n        const i = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findLastIdxMonotonous)(this.firstCharOffsetByLine, (value) => value <= offset);\r\n        return new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(this.lineRange.start + i + 1, offset - this.firstCharOffsetByLine[i] + this.additionalOffsetByLine[i] + 1);\r\n    }\r\n    translateRange(range) {\r\n        return _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.fromPositions(this.translateOffset(range.start), this.translateOffset(range.endExclusive));\r\n    }\r\n    /**\r\n     * Finds the word that contains the character at the given offset\r\n     */\r\n    findWordContaining(offset) {\r\n        if (offset < 0 || offset >= this.elements.length) {\r\n            return undefined;\r\n        }\r\n        if (!isWordChar(this.elements[offset])) {\r\n            return undefined;\r\n        }\r\n        // find start\r\n        let start = offset;\r\n        while (start > 0 && isWordChar(this.elements[start - 1])) {\r\n            start--;\r\n        }\r\n        // find end\r\n        let end = offset;\r\n        while (end < this.elements.length && isWordChar(this.elements[end])) {\r\n            end++;\r\n        }\r\n        return new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(start, end);\r\n    }\r\n    countLinesIn(range) {\r\n        return this.translateOffset(range.endExclusive).lineNumber - this.translateOffset(range.start).lineNumber;\r\n    }\r\n    isStronglyEqual(offset1, offset2) {\r\n        return this.elements[offset1] === this.elements[offset2];\r\n    }\r\n    extendToFullLines(range) {\r\n        var _a, _b;\r\n        const start = (_a = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findLastMonotonous)(this.firstCharOffsetByLine, x => x <= range.start)) !== null && _a !== void 0 ? _a : 0;\r\n        const end = (_b = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findFirstMonotonous)(this.firstCharOffsetByLine, x => range.endExclusive <= x)) !== null && _b !== void 0 ? _b : this.elements.length;\r\n        return new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(start, end);\r\n    }\r\n}\r\nfunction isWordChar(charCode) {\r\n    return charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */\r\n        || charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */\r\n        || charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */;\r\n}\r\nconst score = {\r\n    [0 /* CharBoundaryCategory.WordLower */]: 0,\r\n    [1 /* CharBoundaryCategory.WordUpper */]: 0,\r\n    [2 /* CharBoundaryCategory.WordNumber */]: 0,\r\n    [3 /* CharBoundaryCategory.End */]: 10,\r\n    [4 /* CharBoundaryCategory.Other */]: 2,\r\n    [5 /* CharBoundaryCategory.Separator */]: 30,\r\n    [6 /* CharBoundaryCategory.Space */]: 3,\r\n    [7 /* CharBoundaryCategory.LineBreakCR */]: 10,\r\n    [8 /* CharBoundaryCategory.LineBreakLF */]: 10,\r\n};\r\nfunction getCategoryBoundaryScore(category) {\r\n    return score[category];\r\n}\r\nfunction getCategory(charCode) {\r\n    if (charCode === 10 /* CharCode.LineFeed */) {\r\n        return 8 /* CharBoundaryCategory.LineBreakLF */;\r\n    }\r\n    else if (charCode === 13 /* CharCode.CarriageReturn */) {\r\n        return 7 /* CharBoundaryCategory.LineBreakCR */;\r\n    }\r\n    else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isSpace)(charCode)) {\r\n        return 6 /* CharBoundaryCategory.Space */;\r\n    }\r\n    else if (charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */) {\r\n        return 0 /* CharBoundaryCategory.WordLower */;\r\n    }\r\n    else if (charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */) {\r\n        return 1 /* CharBoundaryCategory.WordUpper */;\r\n    }\r\n    else if (charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */) {\r\n        return 2 /* CharBoundaryCategory.WordNumber */;\r\n    }\r\n    else if (charCode === -1) {\r\n        return 3 /* CharBoundaryCategory.End */;\r\n    }\r\n    else if (charCode === 44 /* CharCode.Comma */ || charCode === 59 /* CharCode.Semicolon */) {\r\n        return 5 /* CharBoundaryCategory.Separator */;\r\n    }\r\n    else {\r\n        return 4 /* CharBoundaryCategory.Other */;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Array2D: () => (/* binding */ Array2D),\n/* harmony export */   LineRangeFragment: () => (/* binding */ LineRangeFragment),\n/* harmony export */   isSpace: () => (/* binding */ isSpace)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nclass Array2D {\r\n    constructor(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.array = [];\r\n        this.array = new Array(width * height);\r\n    }\r\n    get(x, y) {\r\n        return this.array[x + y * this.width];\r\n    }\r\n    set(x, y, value) {\r\n        this.array[x + y * this.width] = value;\r\n    }\r\n}\r\nfunction isSpace(charCode) {\r\n    return charCode === 32 /* CharCode.Space */ || charCode === 9 /* CharCode.Tab */;\r\n}\r\nclass LineRangeFragment {\r\n    static getKey(chr) {\r\n        let key = this.chrKeys.get(chr);\r\n        if (key === undefined) {\r\n            key = this.chrKeys.size;\r\n            this.chrKeys.set(chr, key);\r\n        }\r\n        return key;\r\n    }\r\n    constructor(range, lines, source) {\r\n        this.range = range;\r\n        this.lines = lines;\r\n        this.source = source;\r\n        this.histogram = [];\r\n        let counter = 0;\r\n        for (let i = range.startLineNumber - 1; i < range.endLineNumberExclusive - 1; i++) {\r\n            const line = lines[i];\r\n            for (let j = 0; j < line.length; j++) {\r\n                counter++;\r\n                const chr = line[j];\r\n                const key = LineRangeFragment.getKey(chr);\r\n                this.histogram[key] = (this.histogram[key] || 0) + 1;\r\n            }\r\n            counter++;\r\n            const key = LineRangeFragment.getKey('\\n');\r\n            this.histogram[key] = (this.histogram[key] || 0) + 1;\r\n        }\r\n        this.totalCount = counter;\r\n    }\r\n    computeSimilarity(other) {\r\n        var _a, _b;\r\n        let sumDifferences = 0;\r\n        const maxLength = Math.max(this.histogram.length, other.histogram.length);\r\n        for (let i = 0; i < maxLength; i++) {\r\n            sumDifferences += Math.abs(((_a = this.histogram[i]) !== null && _a !== void 0 ? _a : 0) - ((_b = other.histogram[i]) !== null && _b !== void 0 ? _b : 0));\r\n        }\r\n        return 1 - (sumDifferences / (this.totalCount + other.totalCount));\r\n    }\r\n}\r\nLineRangeFragment.chrKeys = new Map();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsc0NBQXNDO0FBQ3RGO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZUFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci91dGlscy5qcz9jNDJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5leHBvcnQgY2xhc3MgQXJyYXkyRCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuYXJyYXkgPSBbXTtcclxuICAgICAgICB0aGlzLmFycmF5ID0gbmV3IEFycmF5KHdpZHRoICogaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGdldCh4LCB5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXlbeCArIHkgKiB0aGlzLndpZHRoXTtcclxuICAgIH1cclxuICAgIHNldCh4LCB5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuYXJyYXlbeCArIHkgKiB0aGlzLndpZHRoXSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc1NwYWNlKGNoYXJDb2RlKSB7XHJcbiAgICByZXR1cm4gY2hhckNvZGUgPT09IDMyIC8qIENoYXJDb2RlLlNwYWNlICovIHx8IGNoYXJDb2RlID09PSA5IC8qIENoYXJDb2RlLlRhYiAqLztcclxufVxyXG5leHBvcnQgY2xhc3MgTGluZVJhbmdlRnJhZ21lbnQge1xyXG4gICAgc3RhdGljIGdldEtleShjaHIpIHtcclxuICAgICAgICBsZXQga2V5ID0gdGhpcy5jaHJLZXlzLmdldChjaHIpO1xyXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBrZXkgPSB0aGlzLmNocktleXMuc2l6ZTtcclxuICAgICAgICAgICAgdGhpcy5jaHJLZXlzLnNldChjaHIsIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvcihyYW5nZSwgbGluZXMsIHNvdXJjZSkge1xyXG4gICAgICAgIHRoaXMucmFuZ2UgPSByYW5nZTtcclxuICAgICAgICB0aGlzLmxpbmVzID0gbGluZXM7XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgdGhpcy5oaXN0b2dyYW0gPSBbXTtcclxuICAgICAgICBsZXQgY291bnRlciA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHJhbmdlLnN0YXJ0TGluZU51bWJlciAtIDE7IGkgPCByYW5nZS5lbmRMaW5lTnVtYmVyRXhjbHVzaXZlIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaW5lLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudGVyKys7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaHIgPSBsaW5lW2pdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gTGluZVJhbmdlRnJhZ21lbnQuZ2V0S2V5KGNocik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3RvZ3JhbVtrZXldID0gKHRoaXMuaGlzdG9ncmFtW2tleV0gfHwgMCkgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvdW50ZXIrKztcclxuICAgICAgICAgICAgY29uc3Qga2V5ID0gTGluZVJhbmdlRnJhZ21lbnQuZ2V0S2V5KCdcXG4nKTtcclxuICAgICAgICAgICAgdGhpcy5oaXN0b2dyYW1ba2V5XSA9ICh0aGlzLmhpc3RvZ3JhbVtrZXldIHx8IDApICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50b3RhbENvdW50ID0gY291bnRlcjtcclxuICAgIH1cclxuICAgIGNvbXB1dGVTaW1pbGFyaXR5KG90aGVyKSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYjtcclxuICAgICAgICBsZXQgc3VtRGlmZmVyZW5jZXMgPSAwO1xyXG4gICAgICAgIGNvbnN0IG1heExlbmd0aCA9IE1hdGgubWF4KHRoaXMuaGlzdG9ncmFtLmxlbmd0aCwgb3RoZXIuaGlzdG9ncmFtLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXhMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzdW1EaWZmZXJlbmNlcyArPSBNYXRoLmFicygoKF9hID0gdGhpcy5oaXN0b2dyYW1baV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApIC0gKChfYiA9IG90aGVyLmhpc3RvZ3JhbVtpXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMSAtIChzdW1EaWZmZXJlbmNlcyAvICh0aGlzLnRvdGFsQ291bnQgKyBvdGhlci50b3RhbENvdW50KSk7XHJcbiAgICB9XHJcbn1cclxuTGluZVJhbmdlRnJhZ21lbnQuY2hyS2V5cyA9IG5ldyBNYXAoKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiffComputer: () => (/* binding */ DiffComputer),\n/* harmony export */   LegacyLinesDiffComputer: () => (/* binding */ LegacyLinesDiffComputer)\n/* harmony export */ });\n/* harmony import */ var _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/diff/diff.js */ \"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\");\n/* harmony import */ var _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./linesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js\");\n/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rangeMapping.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\");\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\r\nclass LegacyLinesDiffComputer {\r\n    computeDiff(originalLines, modifiedLines, options) {\r\n        var _a;\r\n        const diffComputer = new DiffComputer(originalLines, modifiedLines, {\r\n            maxComputationTime: options.maxComputationTimeMs,\r\n            shouldIgnoreTrimWhitespace: options.ignoreTrimWhitespace,\r\n            shouldComputeCharChanges: true,\r\n            shouldMakePrettyDiff: true,\r\n            shouldPostProcessCharChanges: true,\r\n        });\r\n        const result = diffComputer.computeDiff();\r\n        const changes = [];\r\n        let lastChange = null;\r\n        for (const c of result.changes) {\r\n            let originalRange;\r\n            if (c.originalEndLineNumber === 0) {\r\n                // Insertion\r\n                originalRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.originalStartLineNumber + 1, c.originalStartLineNumber + 1);\r\n            }\r\n            else {\r\n                originalRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.originalStartLineNumber, c.originalEndLineNumber + 1);\r\n            }\r\n            let modifiedRange;\r\n            if (c.modifiedEndLineNumber === 0) {\r\n                // Deletion\r\n                modifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.modifiedStartLineNumber + 1, c.modifiedStartLineNumber + 1);\r\n            }\r\n            else {\r\n                modifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.modifiedStartLineNumber, c.modifiedEndLineNumber + 1);\r\n            }\r\n            let change = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.DetailedLineRangeMapping(originalRange, modifiedRange, (_a = c.charChanges) === null || _a === void 0 ? void 0 : _a.map(c => new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(c.originalStartLineNumber, c.originalStartColumn, c.originalEndLineNumber, c.originalEndColumn), new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(c.modifiedStartLineNumber, c.modifiedStartColumn, c.modifiedEndLineNumber, c.modifiedEndColumn))));\r\n            if (lastChange) {\r\n                if (lastChange.modified.endLineNumberExclusive === change.modified.startLineNumber\r\n                    || lastChange.original.endLineNumberExclusive === change.original.startLineNumber) {\r\n                    // join touching diffs. Probably moving diffs up/down in the algorithm causes touching diffs.\r\n                    change = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.DetailedLineRangeMapping(lastChange.original.join(change.original), lastChange.modified.join(change.modified), lastChange.innerChanges && change.innerChanges ?\r\n                        lastChange.innerChanges.concat(change.innerChanges) : undefined);\r\n                    changes.pop();\r\n                }\r\n            }\r\n            changes.push(change);\r\n            lastChange = change;\r\n        }\r\n        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__.assertFn)(() => {\r\n            return (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__.checkAdjacentItems)(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\r\n                // There has to be an unchanged line in between (otherwise both diffs should have been joined)\r\n                m1.original.endLineNumberExclusive < m2.original.startLineNumber &&\r\n                m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);\r\n        });\r\n        return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__.LinesDiff(changes, [], result.quitEarly);\r\n    }\r\n}\r\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\r\n    const diffAlgo = new _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__.LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\r\n    return diffAlgo.ComputeDiff(pretty);\r\n}\r\nclass LineSequence {\r\n    constructor(lines) {\r\n        const startColumns = [];\r\n        const endColumns = [];\r\n        for (let i = 0, length = lines.length; i < length; i++) {\r\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\r\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\r\n        }\r\n        this.lines = lines;\r\n        this._startColumns = startColumns;\r\n        this._endColumns = endColumns;\r\n    }\r\n    getElements() {\r\n        const elements = [];\r\n        for (let i = 0, len = this.lines.length; i < len; i++) {\r\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\r\n        }\r\n        return elements;\r\n    }\r\n    getStrictElement(index) {\r\n        return this.lines[index];\r\n    }\r\n    getStartLineNumber(i) {\r\n        return i + 1;\r\n    }\r\n    getEndLineNumber(i) {\r\n        return i + 1;\r\n    }\r\n    createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {\r\n        const charCodes = [];\r\n        const lineNumbers = [];\r\n        const columns = [];\r\n        let len = 0;\r\n        for (let index = startIndex; index <= endIndex; index++) {\r\n            const lineContent = this.lines[index];\r\n            const startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\r\n            const endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\r\n            for (let col = startColumn; col < endColumn; col++) {\r\n                charCodes[len] = lineContent.charCodeAt(col - 1);\r\n                lineNumbers[len] = index + 1;\r\n                columns[len] = col;\r\n                len++;\r\n            }\r\n            if (!shouldIgnoreTrimWhitespace && index < endIndex) {\r\n                // Add \\n if trim whitespace is not ignored\r\n                charCodes[len] = 10 /* CharCode.LineFeed */;\r\n                lineNumbers[len] = index + 1;\r\n                columns[len] = lineContent.length + 1;\r\n                len++;\r\n            }\r\n        }\r\n        return new CharSequence(charCodes, lineNumbers, columns);\r\n    }\r\n}\r\nclass CharSequence {\r\n    constructor(charCodes, lineNumbers, columns) {\r\n        this._charCodes = charCodes;\r\n        this._lineNumbers = lineNumbers;\r\n        this._columns = columns;\r\n    }\r\n    toString() {\r\n        return ('[' + this._charCodes.map((s, idx) => (s === 10 /* CharCode.LineFeed */ ? '\\\\n' : String.fromCharCode(s)) + `-(${this._lineNumbers[idx]},${this._columns[idx]})`).join(', ') + ']');\r\n    }\r\n    _assertIndex(index, arr) {\r\n        if (index < 0 || index >= arr.length) {\r\n            throw new Error(`Illegal index`);\r\n        }\r\n    }\r\n    getElements() {\r\n        return this._charCodes;\r\n    }\r\n    getStartLineNumber(i) {\r\n        if (i > 0 && i === this._lineNumbers.length) {\r\n            // the start line number of the element after the last element\r\n            // is the end line number of the last element\r\n            return this.getEndLineNumber(i - 1);\r\n        }\r\n        this._assertIndex(i, this._lineNumbers);\r\n        return this._lineNumbers[i];\r\n    }\r\n    getEndLineNumber(i) {\r\n        if (i === -1) {\r\n            // the end line number of the element before the first element\r\n            // is the start line number of the first element\r\n            return this.getStartLineNumber(i + 1);\r\n        }\r\n        this._assertIndex(i, this._lineNumbers);\r\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\r\n            return this._lineNumbers[i] + 1;\r\n        }\r\n        return this._lineNumbers[i];\r\n    }\r\n    getStartColumn(i) {\r\n        if (i > 0 && i === this._columns.length) {\r\n            // the start column of the element after the last element\r\n            // is the end column of the last element\r\n            return this.getEndColumn(i - 1);\r\n        }\r\n        this._assertIndex(i, this._columns);\r\n        return this._columns[i];\r\n    }\r\n    getEndColumn(i) {\r\n        if (i === -1) {\r\n            // the end column of the element before the first element\r\n            // is the start column of the first element\r\n            return this.getStartColumn(i + 1);\r\n        }\r\n        this._assertIndex(i, this._columns);\r\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\r\n            return 1;\r\n        }\r\n        return this._columns[i] + 1;\r\n    }\r\n}\r\nclass CharChange {\r\n    constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\r\n        this.originalStartLineNumber = originalStartLineNumber;\r\n        this.originalStartColumn = originalStartColumn;\r\n        this.originalEndLineNumber = originalEndLineNumber;\r\n        this.originalEndColumn = originalEndColumn;\r\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\r\n        this.modifiedStartColumn = modifiedStartColumn;\r\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\r\n        this.modifiedEndColumn = modifiedEndColumn;\r\n    }\r\n    static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {\r\n        const originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\r\n        const originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\r\n        const originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\r\n        const originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\r\n        const modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\r\n        const modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\r\n        const modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n        const modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\r\n    }\r\n}\r\nfunction postProcessCharChanges(rawChanges) {\r\n    if (rawChanges.length <= 1) {\r\n        return rawChanges;\r\n    }\r\n    const result = [rawChanges[0]];\r\n    let prevChange = result[0];\r\n    for (let i = 1, len = rawChanges.length; i < len; i++) {\r\n        const currChange = rawChanges[i];\r\n        const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\r\n        const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\r\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\r\n        const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\r\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\r\n            // Merge the current change into the previous one\r\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\r\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\r\n        }\r\n        else {\r\n            // Add the current change\r\n            result.push(currChange);\r\n            prevChange = currChange;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nclass LineChange {\r\n    constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\r\n        this.originalStartLineNumber = originalStartLineNumber;\r\n        this.originalEndLineNumber = originalEndLineNumber;\r\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\r\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\r\n        this.charChanges = charChanges;\r\n    }\r\n    static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\r\n        let originalStartLineNumber;\r\n        let originalEndLineNumber;\r\n        let modifiedStartLineNumber;\r\n        let modifiedEndLineNumber;\r\n        let charChanges = undefined;\r\n        if (diffChange.originalLength === 0) {\r\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\r\n            originalEndLineNumber = 0;\r\n        }\r\n        else {\r\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\r\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\r\n        }\r\n        if (diffChange.modifiedLength === 0) {\r\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\r\n            modifiedEndLineNumber = 0;\r\n        }\r\n        else {\r\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\r\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n        }\r\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\r\n            // Compute character changes for diff chunks of at most 20 lines...\r\n            const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\r\n            const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n            if (originalCharSequence.getElements().length > 0 && modifiedCharSequence.getElements().length > 0) {\r\n                let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\r\n                if (shouldPostProcessCharChanges) {\r\n                    rawChanges = postProcessCharChanges(rawChanges);\r\n                }\r\n                charChanges = [];\r\n                for (let i = 0, length = rawChanges.length; i < length; i++) {\r\n                    charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\r\n                }\r\n            }\r\n        }\r\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\r\n    }\r\n}\r\nclass DiffComputer {\r\n    constructor(originalLines, modifiedLines, opts) {\r\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\r\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\r\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\r\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\r\n        this.originalLines = originalLines;\r\n        this.modifiedLines = modifiedLines;\r\n        this.original = new LineSequence(originalLines);\r\n        this.modified = new LineSequence(modifiedLines);\r\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\r\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\r\n    }\r\n    computeDiff() {\r\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\r\n            // empty original => fast path\r\n            if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\r\n                return {\r\n                    quitEarly: false,\r\n                    changes: []\r\n                };\r\n            }\r\n            return {\r\n                quitEarly: false,\r\n                changes: [{\r\n                        originalStartLineNumber: 1,\r\n                        originalEndLineNumber: 1,\r\n                        modifiedStartLineNumber: 1,\r\n                        modifiedEndLineNumber: this.modified.lines.length,\r\n                        charChanges: undefined\r\n                    }]\r\n            };\r\n        }\r\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\r\n            // empty modified => fast path\r\n            return {\r\n                quitEarly: false,\r\n                changes: [{\r\n                        originalStartLineNumber: 1,\r\n                        originalEndLineNumber: this.original.lines.length,\r\n                        modifiedStartLineNumber: 1,\r\n                        modifiedEndLineNumber: 1,\r\n                        charChanges: undefined\r\n                    }]\r\n            };\r\n        }\r\n        const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\r\n        const rawChanges = diffResult.changes;\r\n        const quitEarly = diffResult.quitEarly;\r\n        // The diff is always computed with ignoring trim whitespace\r\n        // This ensures we get the prettiest diff\r\n        if (this.shouldIgnoreTrimWhitespace) {\r\n            const lineChanges = [];\r\n            for (let i = 0, length = rawChanges.length; i < length; i++) {\r\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\r\n            }\r\n            return {\r\n                quitEarly: quitEarly,\r\n                changes: lineChanges\r\n            };\r\n        }\r\n        // Need to post-process and introduce changes where the trim whitespace is different\r\n        // Note that we are looping starting at -1 to also cover the lines before the first change\r\n        const result = [];\r\n        let originalLineIndex = 0;\r\n        let modifiedLineIndex = 0;\r\n        for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\r\n            const nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\r\n            const originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\r\n            const modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\r\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\r\n                const originalLine = this.originalLines[originalLineIndex];\r\n                const modifiedLine = this.modifiedLines[modifiedLineIndex];\r\n                if (originalLine !== modifiedLine) {\r\n                    // These lines differ only in trim whitespace\r\n                    // Check the leading whitespace\r\n                    {\r\n                        let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\r\n                        let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\r\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\r\n                            const originalChar = originalLine.charCodeAt(originalStartColumn - 2);\r\n                            const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\r\n                            if (originalChar !== modifiedChar) {\r\n                                break;\r\n                            }\r\n                            originalStartColumn--;\r\n                            modifiedStartColumn--;\r\n                        }\r\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\r\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\r\n                        }\r\n                    }\r\n                    // Check the trailing whitespace\r\n                    {\r\n                        let originalEndColumn = getLastNonBlankColumn(originalLine, 1);\r\n                        let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\r\n                        const originalMaxColumn = originalLine.length + 1;\r\n                        const modifiedMaxColumn = modifiedLine.length + 1;\r\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\r\n                            const originalChar = originalLine.charCodeAt(originalEndColumn - 1);\r\n                            const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\r\n                            if (originalChar !== modifiedChar) {\r\n                                break;\r\n                            }\r\n                            originalEndColumn++;\r\n                            modifiedEndColumn++;\r\n                        }\r\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\r\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\r\n                        }\r\n                    }\r\n                }\r\n                originalLineIndex++;\r\n                modifiedLineIndex++;\r\n            }\r\n            if (nextChange) {\r\n                // Emit the actual change\r\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\r\n                originalLineIndex += nextChange.originalLength;\r\n                modifiedLineIndex += nextChange.modifiedLength;\r\n            }\r\n        }\r\n        return {\r\n            quitEarly: quitEarly,\r\n            changes: result\r\n        };\r\n    }\r\n    _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\r\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\r\n            // Merged into previous\r\n            return;\r\n        }\r\n        let charChanges = undefined;\r\n        if (this.shouldComputeCharChanges) {\r\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\r\n        }\r\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\r\n    }\r\n    _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\r\n        const len = result.length;\r\n        if (len === 0) {\r\n            return false;\r\n        }\r\n        const prevChange = result[len - 1];\r\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\r\n            // Don't merge with inserts/deletes\r\n            return false;\r\n        }\r\n        if (prevChange.originalEndLineNumber === originalLineNumber && prevChange.modifiedEndLineNumber === modifiedLineNumber) {\r\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\r\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\r\n            }\r\n            return true;\r\n        }\r\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\r\n            prevChange.originalEndLineNumber = originalLineNumber;\r\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\r\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\r\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nfunction getFirstNonBlankColumn(txt, defaultValue) {\r\n    const r = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.firstNonWhitespaceIndex(txt);\r\n    if (r === -1) {\r\n        return defaultValue;\r\n    }\r\n    return r + 1;\r\n}\r\nfunction getLastNonBlankColumn(txt, defaultValue) {\r\n    const r = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.lastNonWhitespaceIndex(txt);\r\n    if (r === -1) {\r\n        return defaultValue;\r\n    }\r\n    return r + 2;\r\n}\r\nfunction createContinueProcessingPredicate(maximumRuntime) {\r\n    if (maximumRuntime === 0) {\r\n        return () => true;\r\n    }\r\n    const startTime = Date.now();\r\n    return () => {\r\n        return Date.now() - startTime < maximumRuntime;\r\n    };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinesDiff: () => (/* binding */ LinesDiff),\n/* harmony export */   MovedText: () => (/* binding */ MovedText)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nclass LinesDiff {\r\n    constructor(changes, \r\n    /**\r\n     * Sorted by original line ranges.\r\n     * The original line ranges and the modified line ranges must be disjoint (but can be touching).\r\n     */\r\n    moves, \r\n    /**\r\n     * Indicates if the time out was reached.\r\n     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\r\n     */\r\n    hitTimeout) {\r\n        this.changes = changes;\r\n        this.moves = moves;\r\n        this.hitTimeout = hitTimeout;\r\n    }\r\n}\r\nclass MovedText {\r\n    constructor(lineRangeMapping, changes) {\r\n        this.lineRangeMapping = lineRangeMapping;\r\n        this.changes = changes;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2xpbmVzRGlmZkNvbXB1dGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vZGlmZi9saW5lc0RpZmZDb21wdXRlci5qcz84ZjAwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5leHBvcnQgY2xhc3MgTGluZXNEaWZmIHtcclxuICAgIGNvbnN0cnVjdG9yKGNoYW5nZXMsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBTb3J0ZWQgYnkgb3JpZ2luYWwgbGluZSByYW5nZXMuXHJcbiAgICAgKiBUaGUgb3JpZ2luYWwgbGluZSByYW5nZXMgYW5kIHRoZSBtb2RpZmllZCBsaW5lIHJhbmdlcyBtdXN0IGJlIGRpc2pvaW50IChidXQgY2FuIGJlIHRvdWNoaW5nKS5cclxuICAgICAqL1xyXG4gICAgbW92ZXMsIFxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHRpbWUgb3V0IHdhcyByZWFjaGVkLlxyXG4gICAgICogSW4gdGhhdCBjYXNlLCB0aGUgZGlmZnMgbWlnaHQgYmUgYW4gYXBwcm94aW1hdGlvbiBhbmQgdGhlIHVzZXIgc2hvdWxkIGJlIGFza2VkIHRvIHJlcnVuIHRoZSBkaWZmIHdpdGggbW9yZSB0aW1lLlxyXG4gICAgICovXHJcbiAgICBoaXRUaW1lb3V0KSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VzID0gY2hhbmdlcztcclxuICAgICAgICB0aGlzLm1vdmVzID0gbW92ZXM7XHJcbiAgICAgICAgdGhpcy5oaXRUaW1lb3V0ID0gaGl0VGltZW91dDtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgTW92ZWRUZXh0IHtcclxuICAgIGNvbnN0cnVjdG9yKGxpbmVSYW5nZU1hcHBpbmcsIGNoYW5nZXMpIHtcclxuICAgICAgICB0aGlzLmxpbmVSYW5nZU1hcHBpbmcgPSBsaW5lUmFuZ2VNYXBwaW5nO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IGNoYW5nZXM7XHJcbiAgICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   linesDiffComputers: () => (/* binding */ linesDiffComputers)\n/* harmony export */ });\n/* harmony import */ var _legacyLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legacyLinesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js\");\n/* harmony import */ var _defaultLinesDiffComputer_defaultLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultLinesDiffComputer/defaultLinesDiffComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\nconst linesDiffComputers = {\r\n    getLegacy: () => new _legacyLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_0__.LegacyLinesDiffComputer(),\r\n    getDefault: () => new _defaultLinesDiffComputer_defaultLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__.DefaultLinesDiffComputer(),\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9kaWZmL2xpbmVzRGlmZkNvbXB1dGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUN1RTtBQUMyQjtBQUMzRjtBQUNQLHlCQUF5QixnRkFBdUI7QUFDaEQsMEJBQTBCLDJHQUF3QjtBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2RpZmYvbGluZXNEaWZmQ29tcHV0ZXJzLmpzPzBiODMiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCB7IExlZ2FjeUxpbmVzRGlmZkNvbXB1dGVyIH0gZnJvbSAnLi9sZWdhY3lMaW5lc0RpZmZDb21wdXRlci5qcyc7XHJcbmltcG9ydCB7IERlZmF1bHRMaW5lc0RpZmZDb21wdXRlciB9IGZyb20gJy4vZGVmYXVsdExpbmVzRGlmZkNvbXB1dGVyL2RlZmF1bHRMaW5lc0RpZmZDb21wdXRlci5qcyc7XHJcbmV4cG9ydCBjb25zdCBsaW5lc0RpZmZDb21wdXRlcnMgPSB7XHJcbiAgICBnZXRMZWdhY3k6ICgpID0+IG5ldyBMZWdhY3lMaW5lc0RpZmZDb21wdXRlcigpLFxyXG4gICAgZ2V0RGVmYXVsdDogKCkgPT4gbmV3IERlZmF1bHRMaW5lc0RpZmZDb21wdXRlcigpLFxyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DetailedLineRangeMapping: () => (/* binding */ DetailedLineRangeMapping),\n/* harmony export */   LineRangeMapping: () => (/* binding */ LineRangeMapping),\n/* harmony export */   RangeMapping: () => (/* binding */ RangeMapping)\n/* harmony export */ });\n/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ \"./node_modules/monaco-editor/esm/vs/base/common/errors.js\");\n/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/lineRange.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _core_textEdit_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/textEdit.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/textEdit.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n/**\r\n * Maps a line range in the original text model to a line range in the modified text model.\r\n */\r\nclass LineRangeMapping {\r\n    static inverse(mapping, originalLineCount, modifiedLineCount) {\r\n        const result = [];\r\n        let lastOriginalEndLineNumber = 1;\r\n        let lastModifiedEndLineNumber = 1;\r\n        for (const m of mapping) {\r\n            const r = new LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastOriginalEndLineNumber, m.original.startLineNumber), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber));\r\n            if (!r.modified.isEmpty) {\r\n                result.push(r);\r\n            }\r\n            lastOriginalEndLineNumber = m.original.endLineNumberExclusive;\r\n            lastModifiedEndLineNumber = m.modified.endLineNumberExclusive;\r\n        }\r\n        const r = new LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1));\r\n        if (!r.modified.isEmpty) {\r\n            result.push(r);\r\n        }\r\n        return result;\r\n    }\r\n    static clip(mapping, originalRange, modifiedRange) {\r\n        const result = [];\r\n        for (const m of mapping) {\r\n            const original = m.original.intersect(originalRange);\r\n            const modified = m.modified.intersect(modifiedRange);\r\n            if (original && !original.isEmpty && modified && !modified.isEmpty) {\r\n                result.push(new LineRangeMapping(original, modified));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    constructor(originalRange, modifiedRange) {\r\n        this.original = originalRange;\r\n        this.modified = modifiedRange;\r\n    }\r\n    toString() {\r\n        return `{${this.original.toString()}->${this.modified.toString()}}`;\r\n    }\r\n    flip() {\r\n        return new LineRangeMapping(this.modified, this.original);\r\n    }\r\n    join(other) {\r\n        return new LineRangeMapping(this.original.join(other.original), this.modified.join(other.modified));\r\n    }\r\n    /**\r\n     * This method assumes that the LineRangeMapping describes a valid diff!\r\n     * I.e. if one range is empty, the other range cannot be the entire document.\r\n     * It avoids various problems when the line range points to non-existing line-numbers.\r\n    */\r\n    toRangeMapping() {\r\n        const origInclusiveRange = this.original.toInclusiveRange();\r\n        const modInclusiveRange = this.modified.toInclusiveRange();\r\n        if (origInclusiveRange && modInclusiveRange) {\r\n            return new RangeMapping(origInclusiveRange, modInclusiveRange);\r\n        }\r\n        else if (this.original.startLineNumber === 1 || this.modified.startLineNumber === 1) {\r\n            if (!(this.modified.startLineNumber === 1 && this.original.startLineNumber === 1)) {\r\n                // If one line range starts at 1, the other one must start at 1 as well.\r\n                throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('not a valid diff');\r\n            }\r\n            // Because one range is empty and both ranges start at line 1, none of the ranges can cover all lines.\r\n            // Thus, `endLineNumberExclusive` is a valid line number.\r\n            return new RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));\r\n        }\r\n        else {\r\n            // We can assume here that both startLineNumbers are greater than 1.\r\n            return new RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.original.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.modified.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Maps a line range in the original text model to a line range in the modified text model.\r\n * Also contains inner range mappings.\r\n */\r\nclass DetailedLineRangeMapping extends LineRangeMapping {\r\n    static fromRangeMappings(rangeMappings) {\r\n        const originalRange = _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.join(rangeMappings.map(r => _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.fromRangeInclusive(r.originalRange)));\r\n        const modifiedRange = _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.join(rangeMappings.map(r => _core_lineRange_js__WEBPACK_IMPORTED_MODULE_1__.LineRange.fromRangeInclusive(r.modifiedRange)));\r\n        return new DetailedLineRangeMapping(originalRange, modifiedRange, rangeMappings);\r\n    }\r\n    constructor(originalRange, modifiedRange, innerChanges) {\r\n        super(originalRange, modifiedRange);\r\n        this.innerChanges = innerChanges;\r\n    }\r\n    flip() {\r\n        var _a;\r\n        return new DetailedLineRangeMapping(this.modified, this.original, (_a = this.innerChanges) === null || _a === void 0 ? void 0 : _a.map(c => c.flip()));\r\n    }\r\n    withInnerChangesFromLineRanges() {\r\n        return new DetailedLineRangeMapping(this.original, this.modified, [this.toRangeMapping()]);\r\n    }\r\n}\r\n/**\r\n * Maps a range in the original text model to a range in the modified text model.\r\n */\r\nclass RangeMapping {\r\n    constructor(originalRange, modifiedRange) {\r\n        this.originalRange = originalRange;\r\n        this.modifiedRange = modifiedRange;\r\n    }\r\n    toString() {\r\n        return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\r\n    }\r\n    flip() {\r\n        return new RangeMapping(this.modifiedRange, this.originalRange);\r\n    }\r\n    /**\r\n     * Creates a single text edit that describes the change from the original to the modified text.\r\n    */\r\n    toTextEdit(modified) {\r\n        const newText = modified.getValueOfRange(this.modifiedRange);\r\n        return new _core_textEdit_js__WEBPACK_IMPORTED_MODULE_3__.SingleTextEdit(this.originalRange, newText);\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Command: () => (/* binding */ Command),\n/* harmony export */   CompletionItemKinds: () => (/* binding */ CompletionItemKinds),\n/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),\n/* harmony export */   DocumentPasteTriggerKind: () => (/* binding */ DocumentPasteTriggerKind),\n/* harmony export */   EncodedTokenizationResult: () => (/* binding */ EncodedTokenizationResult),\n/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),\n/* harmony export */   HoverVerbosityAction: () => (/* binding */ HoverVerbosityAction),\n/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),\n/* harmony export */   InlineCompletionTriggerKind: () => (/* binding */ InlineCompletionTriggerKind),\n/* harmony export */   InlineEditTriggerKind: () => (/* binding */ InlineEditTriggerKind),\n/* harmony export */   LazyTokenizationSupport: () => (/* binding */ LazyTokenizationSupport),\n/* harmony export */   NewSymbolNameTag: () => (/* binding */ NewSymbolNameTag),\n/* harmony export */   NewSymbolNameTriggerKind: () => (/* binding */ NewSymbolNameTriggerKind),\n/* harmony export */   SelectedSuggestionInfo: () => (/* binding */ SelectedSuggestionInfo),\n/* harmony export */   SignatureHelpTriggerKind: () => (/* binding */ SignatureHelpTriggerKind),\n/* harmony export */   SymbolKinds: () => (/* binding */ SymbolKinds),\n/* harmony export */   TextEdit: () => (/* binding */ TextEdit),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   TokenizationRegistry: () => (/* binding */ TokenizationRegistry),\n/* harmony export */   TokenizationResult: () => (/* binding */ TokenizationResult),\n/* harmony export */   getAriaLabelForSymbol: () => (/* binding */ getAriaLabelForSymbol),\n/* harmony export */   isLocationLink: () => (/* binding */ isLocationLink),\n/* harmony export */   symbolKindNames: () => (/* binding */ symbolKindNames)\n/* harmony export */ });\n/* harmony import */ var _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/codicons.js */ \"./node_modules/monaco-editor/esm/vs/base/common/codicons.js\");\n/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/uri.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uri.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _tokenizationRegistry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tokenizationRegistry.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js\");\n/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../nls.js */ \"./node_modules/monaco-editor/esm/vs/nls.js\");\n\r\n\r\n\r\n\r\n\r\nclass Token {\r\n    constructor(offset, type, language) {\r\n        this.offset = offset;\r\n        this.type = type;\r\n        this.language = language;\r\n        this._tokenBrand = undefined;\r\n    }\r\n    toString() {\r\n        return '(' + this.offset + ', ' + this.type + ')';\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass TokenizationResult {\r\n    constructor(tokens, endState) {\r\n        this.tokens = tokens;\r\n        this.endState = endState;\r\n        this._tokenizationResultBrand = undefined;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass EncodedTokenizationResult {\r\n    constructor(\r\n    /**\r\n     * The tokens in binary format. Each token occupies two array indices. For token i:\r\n     *  - at offset 2*i => startIndex\r\n     *  - at offset 2*i + 1 => metadata\r\n     *\r\n     */\r\n    tokens, endState) {\r\n        this.tokens = tokens;\r\n        this.endState = endState;\r\n        this._encodedTokenizationResultBrand = undefined;\r\n    }\r\n}\r\nvar HoverVerbosityAction;\r\n(function (HoverVerbosityAction) {\r\n    /**\r\n     * Increase the verbosity of the hover\r\n     */\r\n    HoverVerbosityAction[HoverVerbosityAction[\"Increase\"] = 0] = \"Increase\";\r\n    /**\r\n     * Decrease the verbosity of the hover\r\n     */\r\n    HoverVerbosityAction[HoverVerbosityAction[\"Decrease\"] = 1] = \"Decrease\";\r\n})(HoverVerbosityAction || (HoverVerbosityAction = {}));\r\n/**\r\n * @internal\r\n */\r\nvar CompletionItemKinds;\r\n(function (CompletionItemKinds) {\r\n    const byKind = new Map();\r\n    byKind.set(0 /* CompletionItemKind.Method */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolMethod);\r\n    byKind.set(1 /* CompletionItemKind.Function */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFunction);\r\n    byKind.set(2 /* CompletionItemKind.Constructor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstructor);\r\n    byKind.set(3 /* CompletionItemKind.Field */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolField);\r\n    byKind.set(4 /* CompletionItemKind.Variable */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolVariable);\r\n    byKind.set(5 /* CompletionItemKind.Class */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolClass);\r\n    byKind.set(6 /* CompletionItemKind.Struct */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolStruct);\r\n    byKind.set(7 /* CompletionItemKind.Interface */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolInterface);\r\n    byKind.set(8 /* CompletionItemKind.Module */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolModule);\r\n    byKind.set(9 /* CompletionItemKind.Property */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty);\r\n    byKind.set(10 /* CompletionItemKind.Event */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEvent);\r\n    byKind.set(11 /* CompletionItemKind.Operator */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolOperator);\r\n    byKind.set(12 /* CompletionItemKind.Unit */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolUnit);\r\n    byKind.set(13 /* CompletionItemKind.Value */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolValue);\r\n    byKind.set(15 /* CompletionItemKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);\r\n    byKind.set(14 /* CompletionItemKind.Constant */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstant);\r\n    byKind.set(15 /* CompletionItemKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);\r\n    byKind.set(16 /* CompletionItemKind.EnumMember */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnumMember);\r\n    byKind.set(17 /* CompletionItemKind.Keyword */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolKeyword);\r\n    byKind.set(27 /* CompletionItemKind.Snippet */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolSnippet);\r\n    byKind.set(18 /* CompletionItemKind.Text */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolText);\r\n    byKind.set(19 /* CompletionItemKind.Color */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolColor);\r\n    byKind.set(20 /* CompletionItemKind.File */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFile);\r\n    byKind.set(21 /* CompletionItemKind.Reference */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolReference);\r\n    byKind.set(22 /* CompletionItemKind.Customcolor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolCustomColor);\r\n    byKind.set(23 /* CompletionItemKind.Folder */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFolder);\r\n    byKind.set(24 /* CompletionItemKind.TypeParameter */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolTypeParameter);\r\n    byKind.set(25 /* CompletionItemKind.User */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.account);\r\n    byKind.set(26 /* CompletionItemKind.Issue */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.issues);\r\n    /**\r\n     * @internal\r\n     */\r\n    function toIcon(kind) {\r\n        let codicon = byKind.get(kind);\r\n        if (!codicon) {\r\n            console.info('No codicon found for CompletionItemKind ' + kind);\r\n            codicon = _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty;\r\n        }\r\n        return codicon;\r\n    }\r\n    CompletionItemKinds.toIcon = toIcon;\r\n    const data = new Map();\r\n    data.set('method', 0 /* CompletionItemKind.Method */);\r\n    data.set('function', 1 /* CompletionItemKind.Function */);\r\n    data.set('constructor', 2 /* CompletionItemKind.Constructor */);\r\n    data.set('field', 3 /* CompletionItemKind.Field */);\r\n    data.set('variable', 4 /* CompletionItemKind.Variable */);\r\n    data.set('class', 5 /* CompletionItemKind.Class */);\r\n    data.set('struct', 6 /* CompletionItemKind.Struct */);\r\n    data.set('interface', 7 /* CompletionItemKind.Interface */);\r\n    data.set('module', 8 /* CompletionItemKind.Module */);\r\n    data.set('property', 9 /* CompletionItemKind.Property */);\r\n    data.set('event', 10 /* CompletionItemKind.Event */);\r\n    data.set('operator', 11 /* CompletionItemKind.Operator */);\r\n    data.set('unit', 12 /* CompletionItemKind.Unit */);\r\n    data.set('value', 13 /* CompletionItemKind.Value */);\r\n    data.set('constant', 14 /* CompletionItemKind.Constant */);\r\n    data.set('enum', 15 /* CompletionItemKind.Enum */);\r\n    data.set('enum-member', 16 /* CompletionItemKind.EnumMember */);\r\n    data.set('enumMember', 16 /* CompletionItemKind.EnumMember */);\r\n    data.set('keyword', 17 /* CompletionItemKind.Keyword */);\r\n    data.set('snippet', 27 /* CompletionItemKind.Snippet */);\r\n    data.set('text', 18 /* CompletionItemKind.Text */);\r\n    data.set('color', 19 /* CompletionItemKind.Color */);\r\n    data.set('file', 20 /* CompletionItemKind.File */);\r\n    data.set('reference', 21 /* CompletionItemKind.Reference */);\r\n    data.set('customcolor', 22 /* CompletionItemKind.Customcolor */);\r\n    data.set('folder', 23 /* CompletionItemKind.Folder */);\r\n    data.set('type-parameter', 24 /* CompletionItemKind.TypeParameter */);\r\n    data.set('typeParameter', 24 /* CompletionItemKind.TypeParameter */);\r\n    data.set('account', 25 /* CompletionItemKind.User */);\r\n    data.set('issue', 26 /* CompletionItemKind.Issue */);\r\n    /**\r\n     * @internal\r\n     */\r\n    function fromString(value, strict) {\r\n        let res = data.get(value);\r\n        if (typeof res === 'undefined' && !strict) {\r\n            res = 9 /* CompletionItemKind.Property */;\r\n        }\r\n        return res;\r\n    }\r\n    CompletionItemKinds.fromString = fromString;\r\n})(CompletionItemKinds || (CompletionItemKinds = {}));\r\n/**\r\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\r\n */\r\nvar InlineCompletionTriggerKind;\r\n(function (InlineCompletionTriggerKind) {\r\n    /**\r\n     * Completion was triggered automatically while editing.\r\n     * It is sufficient to return a single completion item in this case.\r\n     */\r\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\r\n    /**\r\n     * Completion was triggered explicitly by a user gesture.\r\n     * Return multiple completion items to enable cycling through them.\r\n     */\r\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\r\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\r\nclass SelectedSuggestionInfo {\r\n    constructor(range, text, completionKind, isSnippetText) {\r\n        this.range = range;\r\n        this.text = text;\r\n        this.completionKind = completionKind;\r\n        this.isSnippetText = isSnippetText;\r\n    }\r\n    equals(other) {\r\n        return _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.lift(this.range).equalsRange(other.range)\r\n            && this.text === other.text\r\n            && this.completionKind === other.completionKind\r\n            && this.isSnippetText === other.isSnippetText;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nvar DocumentPasteTriggerKind;\r\n(function (DocumentPasteTriggerKind) {\r\n    DocumentPasteTriggerKind[DocumentPasteTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\r\n    DocumentPasteTriggerKind[DocumentPasteTriggerKind[\"PasteAs\"] = 1] = \"PasteAs\";\r\n})(DocumentPasteTriggerKind || (DocumentPasteTriggerKind = {}));\r\nvar SignatureHelpTriggerKind;\r\n(function (SignatureHelpTriggerKind) {\r\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\r\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\r\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\r\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\r\n/**\r\n * A document highlight kind.\r\n */\r\nvar DocumentHighlightKind;\r\n(function (DocumentHighlightKind) {\r\n    /**\r\n     * A textual occurrence.\r\n     */\r\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\r\n    /**\r\n     * Read-access of a symbol, like reading a variable.\r\n     */\r\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\r\n    /**\r\n     * Write-access of a symbol, like writing to a variable.\r\n     */\r\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\r\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\r\n/**\r\n * @internal\r\n */\r\nfunction isLocationLink(thing) {\r\n    return thing\r\n        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.isUri(thing.uri)\r\n        && _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.range)\r\n        && (_core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.originSelectionRange) || _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.targetSelectionRange));\r\n}\r\n/**\r\n * @internal\r\n */\r\nconst symbolKindNames = {\r\n    [17 /* SymbolKind.Array */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Array', \"array\"),\r\n    [16 /* SymbolKind.Boolean */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Boolean', \"boolean\"),\r\n    [4 /* SymbolKind.Class */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Class', \"class\"),\r\n    [13 /* SymbolKind.Constant */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Constant', \"constant\"),\r\n    [8 /* SymbolKind.Constructor */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Constructor', \"constructor\"),\r\n    [9 /* SymbolKind.Enum */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Enum', \"enumeration\"),\r\n    [21 /* SymbolKind.EnumMember */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('EnumMember', \"enumeration member\"),\r\n    [23 /* SymbolKind.Event */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Event', \"event\"),\r\n    [7 /* SymbolKind.Field */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Field', \"field\"),\r\n    [0 /* SymbolKind.File */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('File', \"file\"),\r\n    [11 /* SymbolKind.Function */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Function', \"function\"),\r\n    [10 /* SymbolKind.Interface */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Interface', \"interface\"),\r\n    [19 /* SymbolKind.Key */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Key', \"key\"),\r\n    [5 /* SymbolKind.Method */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Method', \"method\"),\r\n    [1 /* SymbolKind.Module */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Module', \"module\"),\r\n    [2 /* SymbolKind.Namespace */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Namespace', \"namespace\"),\r\n    [20 /* SymbolKind.Null */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Null', \"null\"),\r\n    [15 /* SymbolKind.Number */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Number', \"number\"),\r\n    [18 /* SymbolKind.Object */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Object', \"object\"),\r\n    [24 /* SymbolKind.Operator */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Operator', \"operator\"),\r\n    [3 /* SymbolKind.Package */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Package', \"package\"),\r\n    [6 /* SymbolKind.Property */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Property', \"property\"),\r\n    [14 /* SymbolKind.String */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('String', \"string\"),\r\n    [22 /* SymbolKind.Struct */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Struct', \"struct\"),\r\n    [25 /* SymbolKind.TypeParameter */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('TypeParameter', \"type parameter\"),\r\n    [12 /* SymbolKind.Variable */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Variable', \"variable\"),\r\n};\r\n/**\r\n * @internal\r\n */\r\nfunction getAriaLabelForSymbol(symbolName, kind) {\r\n    return (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('symbolAriaLabel', '{0} ({1})', symbolName, symbolKindNames[kind]);\r\n}\r\n/**\r\n * @internal\r\n */\r\nvar SymbolKinds;\r\n(function (SymbolKinds) {\r\n    const byKind = new Map();\r\n    byKind.set(0 /* SymbolKind.File */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFile);\r\n    byKind.set(1 /* SymbolKind.Module */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolModule);\r\n    byKind.set(2 /* SymbolKind.Namespace */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNamespace);\r\n    byKind.set(3 /* SymbolKind.Package */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolPackage);\r\n    byKind.set(4 /* SymbolKind.Class */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolClass);\r\n    byKind.set(5 /* SymbolKind.Method */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolMethod);\r\n    byKind.set(6 /* SymbolKind.Property */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty);\r\n    byKind.set(7 /* SymbolKind.Field */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolField);\r\n    byKind.set(8 /* SymbolKind.Constructor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstructor);\r\n    byKind.set(9 /* SymbolKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);\r\n    byKind.set(10 /* SymbolKind.Interface */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolInterface);\r\n    byKind.set(11 /* SymbolKind.Function */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFunction);\r\n    byKind.set(12 /* SymbolKind.Variable */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolVariable);\r\n    byKind.set(13 /* SymbolKind.Constant */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstant);\r\n    byKind.set(14 /* SymbolKind.String */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolString);\r\n    byKind.set(15 /* SymbolKind.Number */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNumber);\r\n    byKind.set(16 /* SymbolKind.Boolean */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolBoolean);\r\n    byKind.set(17 /* SymbolKind.Array */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolArray);\r\n    byKind.set(18 /* SymbolKind.Object */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolObject);\r\n    byKind.set(19 /* SymbolKind.Key */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolKey);\r\n    byKind.set(20 /* SymbolKind.Null */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNull);\r\n    byKind.set(21 /* SymbolKind.EnumMember */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnumMember);\r\n    byKind.set(22 /* SymbolKind.Struct */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolStruct);\r\n    byKind.set(23 /* SymbolKind.Event */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEvent);\r\n    byKind.set(24 /* SymbolKind.Operator */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolOperator);\r\n    byKind.set(25 /* SymbolKind.TypeParameter */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolTypeParameter);\r\n    /**\r\n     * @internal\r\n     */\r\n    function toIcon(kind) {\r\n        let icon = byKind.get(kind);\r\n        if (!icon) {\r\n            console.info('No codicon found for SymbolKind ' + kind);\r\n            icon = _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty;\r\n        }\r\n        return icon;\r\n    }\r\n    SymbolKinds.toIcon = toIcon;\r\n})(SymbolKinds || (SymbolKinds = {}));\r\n/** @internal */\r\nclass TextEdit {\r\n}\r\nclass FoldingRangeKind {\r\n    /**\r\n     * Returns a {@link FoldingRangeKind} for the given value.\r\n     *\r\n     * @param value of the kind.\r\n     */\r\n    static fromValue(value) {\r\n        switch (value) {\r\n            case 'comment': return FoldingRangeKind.Comment;\r\n            case 'imports': return FoldingRangeKind.Imports;\r\n            case 'region': return FoldingRangeKind.Region;\r\n        }\r\n        return new FoldingRangeKind(value);\r\n    }\r\n    /**\r\n     * Creates a new {@link FoldingRangeKind}.\r\n     *\r\n     * @param value of the kind.\r\n     */\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n}\r\n/**\r\n * Kind for folding range representing a comment. The value of the kind is 'comment'.\r\n */\r\nFoldingRangeKind.Comment = new FoldingRangeKind('comment');\r\n/**\r\n * Kind for folding range representing a import. The value of the kind is 'imports'.\r\n */\r\nFoldingRangeKind.Imports = new FoldingRangeKind('imports');\r\n/**\r\n * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\r\n * The value of the kind is 'region'.\r\n */\r\nFoldingRangeKind.Region = new FoldingRangeKind('region');\r\nvar NewSymbolNameTag;\r\n(function (NewSymbolNameTag) {\r\n    NewSymbolNameTag[NewSymbolNameTag[\"AIGenerated\"] = 1] = \"AIGenerated\";\r\n})(NewSymbolNameTag || (NewSymbolNameTag = {}));\r\nvar NewSymbolNameTriggerKind;\r\n(function (NewSymbolNameTriggerKind) {\r\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\r\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\r\n})(NewSymbolNameTriggerKind || (NewSymbolNameTriggerKind = {}));\r\n/**\r\n * @internal\r\n */\r\nvar Command;\r\n(function (Command) {\r\n    /**\r\n     * @internal\r\n     */\r\n    function is(obj) {\r\n        if (!obj || typeof obj !== 'object') {\r\n            return false;\r\n        }\r\n        return typeof obj.id === 'string' &&\r\n            typeof obj.title === 'string';\r\n    }\r\n    Command.is = is;\r\n})(Command || (Command = {}));\r\nvar InlayHintKind;\r\n(function (InlayHintKind) {\r\n    InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\r\n    InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\r\n})(InlayHintKind || (InlayHintKind = {}));\r\n/**\r\n * @internal\r\n */\r\nclass LazyTokenizationSupport {\r\n    constructor(createSupport) {\r\n        this.createSupport = createSupport;\r\n        this._tokenizationSupport = null;\r\n    }\r\n    dispose() {\r\n        if (this._tokenizationSupport) {\r\n            this._tokenizationSupport.then((support) => {\r\n                if (support) {\r\n                    support.dispose();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    get tokenizationSupport() {\r\n        if (!this._tokenizationSupport) {\r\n            this._tokenizationSupport = this.createSupport();\r\n        }\r\n        return this._tokenizationSupport;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nconst TokenizationRegistry = new _tokenizationRegistry_js__WEBPACK_IMPORTED_MODULE_3__.TokenizationRegistry();\r\nvar InlineEditTriggerKind;\r\n(function (InlineEditTriggerKind) {\r\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\r\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\r\n})(InlineEditTriggerKind || (InlineEditTriggerKind = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeDefaultDocumentColors: () => (/* binding */ computeDefaultDocumentColors)\n/* harmony export */ });\n/* harmony import */ var _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/color.js */ \"./node_modules/monaco-editor/esm/vs/base/common/color.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nfunction _parseCaptureGroups(captureGroups) {\r\n    const values = [];\r\n    for (const captureGroup of captureGroups) {\r\n        const parsedNumber = Number(captureGroup);\r\n        if (parsedNumber || parsedNumber === 0 && captureGroup.replace(/\\s/g, '') !== '') {\r\n            values.push(parsedNumber);\r\n        }\r\n    }\r\n    return values;\r\n}\r\nfunction _toIColor(r, g, b, a) {\r\n    return {\r\n        red: r / 255,\r\n        blue: b / 255,\r\n        green: g / 255,\r\n        alpha: a\r\n    };\r\n}\r\nfunction _findRange(model, match) {\r\n    const index = match.index;\r\n    const length = match[0].length;\r\n    if (!index) {\r\n        return;\r\n    }\r\n    const startPosition = model.positionAt(index);\r\n    const range = {\r\n        startLineNumber: startPosition.lineNumber,\r\n        startColumn: startPosition.column,\r\n        endLineNumber: startPosition.lineNumber,\r\n        endColumn: startPosition.column + length\r\n    };\r\n    return range;\r\n}\r\nfunction _findHexColorInformation(range, hexValue) {\r\n    if (!range) {\r\n        return;\r\n    }\r\n    const parsedHexColor = _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.Color.Format.CSS.parseHex(hexValue);\r\n    if (!parsedHexColor) {\r\n        return;\r\n    }\r\n    return {\r\n        range: range,\r\n        color: _toIColor(parsedHexColor.rgba.r, parsedHexColor.rgba.g, parsedHexColor.rgba.b, parsedHexColor.rgba.a)\r\n    };\r\n}\r\nfunction _findRGBColorInformation(range, matches, isAlpha) {\r\n    if (!range || matches.length !== 1) {\r\n        return;\r\n    }\r\n    const match = matches[0];\r\n    const captureGroups = match.values();\r\n    const parsedRegex = _parseCaptureGroups(captureGroups);\r\n    return {\r\n        range: range,\r\n        color: _toIColor(parsedRegex[0], parsedRegex[1], parsedRegex[2], isAlpha ? parsedRegex[3] : 1)\r\n    };\r\n}\r\nfunction _findHSLColorInformation(range, matches, isAlpha) {\r\n    if (!range || matches.length !== 1) {\r\n        return;\r\n    }\r\n    const match = matches[0];\r\n    const captureGroups = match.values();\r\n    const parsedRegex = _parseCaptureGroups(captureGroups);\r\n    const colorEquivalent = new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.Color(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.HSLA(parsedRegex[0], parsedRegex[1] / 100, parsedRegex[2] / 100, isAlpha ? parsedRegex[3] : 1));\r\n    return {\r\n        range: range,\r\n        color: _toIColor(colorEquivalent.rgba.r, colorEquivalent.rgba.g, colorEquivalent.rgba.b, colorEquivalent.rgba.a)\r\n    };\r\n}\r\nfunction _findMatches(model, regex) {\r\n    if (typeof model === 'string') {\r\n        return [...model.matchAll(regex)];\r\n    }\r\n    else {\r\n        return model.findMatches(regex);\r\n    }\r\n}\r\nfunction computeColors(model) {\r\n    const result = [];\r\n    // Early validation for RGB and HSL\r\n    const initialValidationRegex = /\\b(rgb|rgba|hsl|hsla)(\\([0-9\\s,.\\%]*\\))|(#)([A-Fa-f0-9]{3})\\b|(#)([A-Fa-f0-9]{4})\\b|(#)([A-Fa-f0-9]{6})\\b|(#)([A-Fa-f0-9]{8})\\b/gm;\r\n    const initialValidationMatches = _findMatches(model, initialValidationRegex);\r\n    // Potential colors have been found, validate the parameters\r\n    if (initialValidationMatches.length > 0) {\r\n        for (const initialMatch of initialValidationMatches) {\r\n            const initialCaptureGroups = initialMatch.filter(captureGroup => captureGroup !== undefined);\r\n            const colorScheme = initialCaptureGroups[1];\r\n            const colorParameters = initialCaptureGroups[2];\r\n            if (!colorParameters) {\r\n                continue;\r\n            }\r\n            let colorInformation;\r\n            if (colorScheme === 'rgb') {\r\n                const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*\\)$/gm;\r\n                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\r\n            }\r\n            else if (colorScheme === 'rgba') {\r\n                const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\r\n                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\r\n            }\r\n            else if (colorScheme === 'hsl') {\r\n                const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*\\)$/gm;\r\n                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\r\n            }\r\n            else if (colorScheme === 'hsla') {\r\n                const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\r\n                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\r\n            }\r\n            else if (colorScheme === '#') {\r\n                colorInformation = _findHexColorInformation(_findRange(model, initialMatch), colorScheme + colorParameters);\r\n            }\r\n            if (colorInformation) {\r\n                result.push(colorInformation);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Returns an array of all default document colors in the provided document\r\n */\r\nfunction computeDefaultDocumentColors(model) {\r\n    if (!model || typeof model.getValue !== 'function' || typeof model.positionAt !== 'function') {\r\n        // Unknown caller!\r\n        return [];\r\n    }\r\n    return computeColors(model);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinkComputer: () => (/* binding */ LinkComputer),\n/* harmony export */   StateMachine: () => (/* binding */ StateMachine),\n/* harmony export */   computeLinks: () => (/* binding */ computeLinks)\n/* harmony export */ });\n/* harmony import */ var _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/characterClassifier.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nclass Uint8Matrix {\r\n    constructor(rows, cols, defaultValue) {\r\n        const data = new Uint8Array(rows * cols);\r\n        for (let i = 0, len = rows * cols; i < len; i++) {\r\n            data[i] = defaultValue;\r\n        }\r\n        this._data = data;\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n    }\r\n    get(row, col) {\r\n        return this._data[row * this.cols + col];\r\n    }\r\n    set(row, col, value) {\r\n        this._data[row * this.cols + col] = value;\r\n    }\r\n}\r\nclass StateMachine {\r\n    constructor(edges) {\r\n        let maxCharCode = 0;\r\n        let maxState = 0 /* State.Invalid */;\r\n        for (let i = 0, len = edges.length; i < len; i++) {\r\n            const [from, chCode, to] = edges[i];\r\n            if (chCode > maxCharCode) {\r\n                maxCharCode = chCode;\r\n            }\r\n            if (from > maxState) {\r\n                maxState = from;\r\n            }\r\n            if (to > maxState) {\r\n                maxState = to;\r\n            }\r\n        }\r\n        maxCharCode++;\r\n        maxState++;\r\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\r\n        for (let i = 0, len = edges.length; i < len; i++) {\r\n            const [from, chCode, to] = edges[i];\r\n            states.set(from, chCode, to);\r\n        }\r\n        this._states = states;\r\n        this._maxCharCode = maxCharCode;\r\n    }\r\n    nextState(currentState, chCode) {\r\n        if (chCode < 0 || chCode >= this._maxCharCode) {\r\n            return 0 /* State.Invalid */;\r\n        }\r\n        return this._states.get(currentState, chCode);\r\n    }\r\n}\r\n// State machine for http:// or https:// or file://\r\nlet _stateMachine = null;\r\nfunction getStateMachine() {\r\n    if (_stateMachine === null) {\r\n        _stateMachine = new StateMachine([\r\n            [1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */],\r\n            [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */],\r\n            [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */],\r\n            [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */],\r\n            [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */],\r\n            [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */],\r\n            [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */],\r\n            [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */],\r\n            [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */],\r\n            [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */],\r\n            [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */],\r\n            [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */],\r\n            [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\r\n            [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */],\r\n            [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */],\r\n            [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */],\r\n            [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */],\r\n            [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */],\r\n            [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */],\r\n            [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\r\n            [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */],\r\n            [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */],\r\n        ]);\r\n    }\r\n    return _stateMachine;\r\n}\r\nlet _classifier = null;\r\nfunction getClassifier() {\r\n    if (_classifier === null) {\r\n        _classifier = new _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__.CharacterClassifier(0 /* CharacterClass.None */);\r\n        // allow-any-unicode-next-line\r\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\r\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\r\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\r\n        }\r\n        const CANNOT_END_WITH_CHARACTERS = '.,;:';\r\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\r\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);\r\n        }\r\n    }\r\n    return _classifier;\r\n}\r\nclass LinkComputer {\r\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\r\n        // Do not allow to end link in certain characters...\r\n        let lastIncludedCharIndex = linkEndIndex - 1;\r\n        do {\r\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\r\n            const chClass = classifier.get(chCode);\r\n            if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\r\n                break;\r\n            }\r\n            lastIncludedCharIndex--;\r\n        } while (lastIncludedCharIndex > linkBeginIndex);\r\n        // Handle links enclosed in parens, square brackets and curlys.\r\n        if (linkBeginIndex > 0) {\r\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\r\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\r\n            if ((charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */)\r\n                || (charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */)\r\n                || (charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */)) {\r\n                // Do not end in ) if ( is before the link start\r\n                // Do not end in ] if [ is before the link start\r\n                // Do not end in } if { is before the link start\r\n                lastIncludedCharIndex--;\r\n            }\r\n        }\r\n        return {\r\n            range: {\r\n                startLineNumber: lineNumber,\r\n                startColumn: linkBeginIndex + 1,\r\n                endLineNumber: lineNumber,\r\n                endColumn: lastIncludedCharIndex + 2\r\n            },\r\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\r\n        };\r\n    }\r\n    static computeLinks(model, stateMachine = getStateMachine()) {\r\n        const classifier = getClassifier();\r\n        const result = [];\r\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\r\n            const line = model.getLineContent(i);\r\n            const len = line.length;\r\n            let j = 0;\r\n            let linkBeginIndex = 0;\r\n            let linkBeginChCode = 0;\r\n            let state = 1 /* State.Start */;\r\n            let hasOpenParens = false;\r\n            let hasOpenSquareBracket = false;\r\n            let inSquareBrackets = false;\r\n            let hasOpenCurlyBracket = false;\r\n            while (j < len) {\r\n                let resetStateMachine = false;\r\n                const chCode = line.charCodeAt(j);\r\n                if (state === 13 /* State.Accept */) {\r\n                    let chClass;\r\n                    switch (chCode) {\r\n                        case 40 /* CharCode.OpenParen */:\r\n                            hasOpenParens = true;\r\n                            chClass = 0 /* CharacterClass.None */;\r\n                            break;\r\n                        case 41 /* CharCode.CloseParen */:\r\n                            chClass = (hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\r\n                            break;\r\n                        case 91 /* CharCode.OpenSquareBracket */:\r\n                            inSquareBrackets = true;\r\n                            hasOpenSquareBracket = true;\r\n                            chClass = 0 /* CharacterClass.None */;\r\n                            break;\r\n                        case 93 /* CharCode.CloseSquareBracket */:\r\n                            inSquareBrackets = false;\r\n                            chClass = (hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\r\n                            break;\r\n                        case 123 /* CharCode.OpenCurlyBrace */:\r\n                            hasOpenCurlyBracket = true;\r\n                            chClass = 0 /* CharacterClass.None */;\r\n                            break;\r\n                        case 125 /* CharCode.CloseCurlyBrace */:\r\n                            chClass = (hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\r\n                            break;\r\n                        // The following three rules make it that ' or \" or ` are allowed inside links\r\n                        // only if the link is wrapped by some other quote character\r\n                        case 39 /* CharCode.SingleQuote */:\r\n                        case 34 /* CharCode.DoubleQuote */:\r\n                        case 96 /* CharCode.BackTick */:\r\n                            if (linkBeginChCode === chCode) {\r\n                                chClass = 1 /* CharacterClass.ForceTermination */;\r\n                            }\r\n                            else if (linkBeginChCode === 39 /* CharCode.SingleQuote */ || linkBeginChCode === 34 /* CharCode.DoubleQuote */ || linkBeginChCode === 96 /* CharCode.BackTick */) {\r\n                                chClass = 0 /* CharacterClass.None */;\r\n                            }\r\n                            else {\r\n                                chClass = 1 /* CharacterClass.ForceTermination */;\r\n                            }\r\n                            break;\r\n                        case 42 /* CharCode.Asterisk */:\r\n                            // `*` terminates a link if the link began with `*`\r\n                            chClass = (linkBeginChCode === 42 /* CharCode.Asterisk */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\r\n                            break;\r\n                        case 124 /* CharCode.Pipe */:\r\n                            // `|` terminates a link if the link began with `|`\r\n                            chClass = (linkBeginChCode === 124 /* CharCode.Pipe */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\r\n                            break;\r\n                        case 32 /* CharCode.Space */:\r\n                            // ` ` allow space in between [ and ]\r\n                            chClass = (inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\r\n                            break;\r\n                        default:\r\n                            chClass = classifier.get(chCode);\r\n                    }\r\n                    // Check if character terminates link\r\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\r\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\r\n                        resetStateMachine = true;\r\n                    }\r\n                }\r\n                else if (state === 12 /* State.End */) {\r\n                    let chClass;\r\n                    if (chCode === 91 /* CharCode.OpenSquareBracket */) {\r\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\r\n                        hasOpenSquareBracket = true;\r\n                        chClass = 0 /* CharacterClass.None */;\r\n                    }\r\n                    else {\r\n                        chClass = classifier.get(chCode);\r\n                    }\r\n                    // Check if character terminates link\r\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\r\n                        resetStateMachine = true;\r\n                    }\r\n                    else {\r\n                        state = 13 /* State.Accept */;\r\n                    }\r\n                }\r\n                else {\r\n                    state = stateMachine.nextState(state, chCode);\r\n                    if (state === 0 /* State.Invalid */) {\r\n                        resetStateMachine = true;\r\n                    }\r\n                }\r\n                if (resetStateMachine) {\r\n                    state = 1 /* State.Start */;\r\n                    hasOpenParens = false;\r\n                    hasOpenSquareBracket = false;\r\n                    hasOpenCurlyBracket = false;\r\n                    // Record where the link started\r\n                    linkBeginIndex = j + 1;\r\n                    linkBeginChCode = chCode;\r\n                }\r\n                j++;\r\n            }\r\n            if (state === 13 /* State.Accept */) {\r\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Returns an array of all links contains in the provided\r\n * document. *Note* that this operation is computational\r\n * expensive and should not run in the UI thread.\r\n */\r\nfunction computeLinks(model) {\r\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\r\n        // Unknown caller!\r\n        return [];\r\n    }\r\n    return LinkComputer.computeLinks(model);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasicInplaceReplace: () => (/* binding */ BasicInplaceReplace)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nclass BasicInplaceReplace {\r\n    constructor() {\r\n        this._defaultValueSet = [\r\n            ['true', 'false'],\r\n            ['True', 'False'],\r\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\r\n            ['public', 'protected', 'private'],\r\n        ];\r\n    }\r\n    navigateValueSet(range1, text1, range2, text2, up) {\r\n        if (range1 && text1) {\r\n            const result = this.doNavigateValueSet(text1, up);\r\n            if (result) {\r\n                return {\r\n                    range: range1,\r\n                    value: result\r\n                };\r\n            }\r\n        }\r\n        if (range2 && text2) {\r\n            const result = this.doNavigateValueSet(text2, up);\r\n            if (result) {\r\n                return {\r\n                    range: range2,\r\n                    value: result\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    doNavigateValueSet(text, up) {\r\n        const numberResult = this.numberReplace(text, up);\r\n        if (numberResult !== null) {\r\n            return numberResult;\r\n        }\r\n        return this.textReplace(text, up);\r\n    }\r\n    numberReplace(value, up) {\r\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\r\n        let n1 = Number(value);\r\n        const n2 = parseFloat(value);\r\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\r\n            if (n1 === 0 && !up) {\r\n                return null; // don't do negative\r\n                //\t\t\t} else if(n1 === 9 && up) {\r\n                //\t\t\t\treturn null; // don't insert 10 into a number\r\n            }\r\n            else {\r\n                n1 = Math.floor(n1 * precision);\r\n                n1 += up ? precision : -precision;\r\n                return String(n1 / precision);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    textReplace(value, up) {\r\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\r\n    }\r\n    valueSetsReplace(valueSets, value, up) {\r\n        let result = null;\r\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\r\n            result = this.valueSetReplace(valueSets[i], value, up);\r\n        }\r\n        return result;\r\n    }\r\n    valueSetReplace(valueSet, value, up) {\r\n        let idx = valueSet.indexOf(value);\r\n        if (idx >= 0) {\r\n            idx += up ? +1 : -1;\r\n            if (idx < 0) {\r\n                idx = valueSet.length - 1;\r\n            }\r\n            else {\r\n                idx %= valueSet.length;\r\n            }\r\n            return valueSet[idx];\r\n        }\r\n        return null;\r\n    }\r\n}\r\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9sYW5ndWFnZXMvc3VwcG9ydHMvaW5wbGFjZVJlcGxhY2VTdXBwb3J0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHVCQUF1QjtBQUN2QixtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCw0QkFBNEI7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL2xhbmd1YWdlcy9zdXBwb3J0cy9pbnBsYWNlUmVwbGFjZVN1cHBvcnQuanM/ZWY1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuZXhwb3J0IGNsYXNzIEJhc2ljSW5wbGFjZVJlcGxhY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlU2V0ID0gW1xyXG4gICAgICAgICAgICBbJ3RydWUnLCAnZmFsc2UnXSxcclxuICAgICAgICAgICAgWydUcnVlJywgJ0ZhbHNlJ10sXHJcbiAgICAgICAgICAgIFsnUHJpdmF0ZScsICdQdWJsaWMnLCAnRnJpZW5kJywgJ1JlYWRPbmx5JywgJ1BhcnRpYWwnLCAnUHJvdGVjdGVkJywgJ1dyaXRlT25seSddLFxyXG4gICAgICAgICAgICBbJ3B1YmxpYycsICdwcm90ZWN0ZWQnLCAncHJpdmF0ZSddLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBuYXZpZ2F0ZVZhbHVlU2V0KHJhbmdlMSwgdGV4dDEsIHJhbmdlMiwgdGV4dDIsIHVwKSB7XHJcbiAgICAgICAgaWYgKHJhbmdlMSAmJiB0ZXh0MSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmRvTmF2aWdhdGVWYWx1ZVNldCh0ZXh0MSwgdXApO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiByYW5nZTEsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmFuZ2UyICYmIHRleHQyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZG9OYXZpZ2F0ZVZhbHVlU2V0KHRleHQyLCB1cCk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHJhbmdlMixcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgZG9OYXZpZ2F0ZVZhbHVlU2V0KHRleHQsIHVwKSB7XHJcbiAgICAgICAgY29uc3QgbnVtYmVyUmVzdWx0ID0gdGhpcy5udW1iZXJSZXBsYWNlKHRleHQsIHVwKTtcclxuICAgICAgICBpZiAobnVtYmVyUmVzdWx0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnRleHRSZXBsYWNlKHRleHQsIHVwKTtcclxuICAgIH1cclxuICAgIG51bWJlclJlcGxhY2UodmFsdWUsIHVwKSB7XHJcbiAgICAgICAgY29uc3QgcHJlY2lzaW9uID0gTWF0aC5wb3coMTAsIHZhbHVlLmxlbmd0aCAtICh2YWx1ZS5sYXN0SW5kZXhPZignLicpICsgMSkpO1xyXG4gICAgICAgIGxldCBuMSA9IE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgY29uc3QgbjIgPSBwYXJzZUZsb2F0KHZhbHVlKTtcclxuICAgICAgICBpZiAoIWlzTmFOKG4xKSAmJiAhaXNOYU4objIpICYmIG4xID09PSBuMikge1xyXG4gICAgICAgICAgICBpZiAobjEgPT09IDAgJiYgIXVwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gZG9uJ3QgZG8gbmVnYXRpdmVcclxuICAgICAgICAgICAgICAgIC8vXHRcdFx0fSBlbHNlIGlmKG4xID09PSA5ICYmIHVwKSB7XHJcbiAgICAgICAgICAgICAgICAvL1x0XHRcdFx0cmV0dXJuIG51bGw7IC8vIGRvbid0IGluc2VydCAxMCBpbnRvIGEgbnVtYmVyXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuMSA9IE1hdGguZmxvb3IobjEgKiBwcmVjaXNpb24pO1xyXG4gICAgICAgICAgICAgICAgbjEgKz0gdXAgPyBwcmVjaXNpb24gOiAtcHJlY2lzaW9uO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhuMSAvIHByZWNpc2lvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICB0ZXh0UmVwbGFjZSh2YWx1ZSwgdXApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVNldHNSZXBsYWNlKHRoaXMuX2RlZmF1bHRWYWx1ZVNldCwgdmFsdWUsIHVwKTtcclxuICAgIH1cclxuICAgIHZhbHVlU2V0c1JlcGxhY2UodmFsdWVTZXRzLCB2YWx1ZSwgdXApIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmFsdWVTZXRzLmxlbmd0aDsgcmVzdWx0ID09PSBudWxsICYmIGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnZhbHVlU2V0UmVwbGFjZSh2YWx1ZVNldHNbaV0sIHZhbHVlLCB1cCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICB2YWx1ZVNldFJlcGxhY2UodmFsdWVTZXQsIHZhbHVlLCB1cCkge1xyXG4gICAgICAgIGxldCBpZHggPSB2YWx1ZVNldC5pbmRleE9mKHZhbHVlKTtcclxuICAgICAgICBpZiAoaWR4ID49IDApIHtcclxuICAgICAgICAgICAgaWR4ICs9IHVwID8gKzEgOiAtMTtcclxuICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcclxuICAgICAgICAgICAgICAgIGlkeCA9IHZhbHVlU2V0Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZHggJT0gdmFsdWVTZXQubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVNldFtpZHhdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG5CYXNpY0lucGxhY2VSZXBsYWNlLklOU1RBTkNFID0gbmV3IEJhc2ljSW5wbGFjZVJlcGxhY2UoKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApplyEditsResult: () => (/* binding */ ApplyEditsResult),\n/* harmony export */   FindMatch: () => (/* binding */ FindMatch),\n/* harmony export */   GlyphMarginLane: () => (/* binding */ GlyphMarginLane),\n/* harmony export */   InjectedTextCursorStops: () => (/* binding */ InjectedTextCursorStops),\n/* harmony export */   OverviewRulerLane: () => (/* binding */ OverviewRulerLane),\n/* harmony export */   SearchData: () => (/* binding */ SearchData),\n/* harmony export */   TextModelResolvedOptions: () => (/* binding */ TextModelResolvedOptions),\n/* harmony export */   ValidAnnotatedEditOperation: () => (/* binding */ ValidAnnotatedEditOperation),\n/* harmony export */   isITextSnapshot: () => (/* binding */ isITextSnapshot),\n/* harmony export */   shouldSynchronizeModel: () => (/* binding */ shouldSynchronizeModel)\n/* harmony export */ });\n/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/objects.js */ \"./node_modules/monaco-editor/esm/vs/base/common/objects.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Vertical Lane in the overview ruler of the editor.\r\n */\r\nvar OverviewRulerLane;\r\n(function (OverviewRulerLane) {\r\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\r\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\r\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\r\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\r\n})(OverviewRulerLane || (OverviewRulerLane = {}));\r\n/**\r\n * Vertical Lane in the glyph margin of the editor.\r\n */\r\nvar GlyphMarginLane;\r\n(function (GlyphMarginLane) {\r\n    GlyphMarginLane[GlyphMarginLane[\"Left\"] = 1] = \"Left\";\r\n    GlyphMarginLane[GlyphMarginLane[\"Center\"] = 2] = \"Center\";\r\n    GlyphMarginLane[GlyphMarginLane[\"Right\"] = 3] = \"Right\";\r\n})(GlyphMarginLane || (GlyphMarginLane = {}));\r\nvar InjectedTextCursorStops;\r\n(function (InjectedTextCursorStops) {\r\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\r\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\r\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\r\n    InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\r\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\r\nclass TextModelResolvedOptions {\r\n    get originalIndentSize() {\r\n        return this._indentSizeIsTabSize ? 'tabSize' : this.indentSize;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(src) {\r\n        this._textModelResolvedOptionsBrand = undefined;\r\n        this.tabSize = Math.max(1, src.tabSize | 0);\r\n        if (src.indentSize === 'tabSize') {\r\n            this.indentSize = this.tabSize;\r\n            this._indentSizeIsTabSize = true;\r\n        }\r\n        else {\r\n            this.indentSize = Math.max(1, src.indentSize | 0);\r\n            this._indentSizeIsTabSize = false;\r\n        }\r\n        this.insertSpaces = Boolean(src.insertSpaces);\r\n        this.defaultEOL = src.defaultEOL | 0;\r\n        this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\r\n        this.bracketPairColorizationOptions = src.bracketPairColorizationOptions;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    equals(other) {\r\n        return (this.tabSize === other.tabSize\r\n            && this._indentSizeIsTabSize === other._indentSizeIsTabSize\r\n            && this.indentSize === other.indentSize\r\n            && this.insertSpaces === other.insertSpaces\r\n            && this.defaultEOL === other.defaultEOL\r\n            && this.trimAutoWhitespace === other.trimAutoWhitespace\r\n            && (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__.equals)(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions));\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    createChangeEvent(newOpts) {\r\n        return {\r\n            tabSize: this.tabSize !== newOpts.tabSize,\r\n            indentSize: this.indentSize !== newOpts.indentSize,\r\n            insertSpaces: this.insertSpaces !== newOpts.insertSpaces,\r\n            trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\r\n        };\r\n    }\r\n}\r\nclass FindMatch {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(range, matches) {\r\n        this._findMatchBrand = undefined;\r\n        this.range = range;\r\n        this.matches = matches;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction isITextSnapshot(obj) {\r\n    return (obj && typeof obj.read === 'function');\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ValidAnnotatedEditOperation {\r\n    constructor(identifier, range, text, forceMoveMarkers, isAutoWhitespaceEdit, _isTracked) {\r\n        this.identifier = identifier;\r\n        this.range = range;\r\n        this.text = text;\r\n        this.forceMoveMarkers = forceMoveMarkers;\r\n        this.isAutoWhitespaceEdit = isAutoWhitespaceEdit;\r\n        this._isTracked = _isTracked;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass SearchData {\r\n    constructor(regex, wordSeparators, simpleSearch) {\r\n        this.regex = regex;\r\n        this.wordSeparators = wordSeparators;\r\n        this.simpleSearch = simpleSearch;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ApplyEditsResult {\r\n    constructor(reverseEdits, changes, trimAutoWhitespaceLineNumbers) {\r\n        this.reverseEdits = reverseEdits;\r\n        this.changes = changes;\r\n        this.trimAutoWhitespaceLineNumbers = trimAutoWhitespaceLineNumbers;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction shouldSynchronizeModel(model) {\r\n    return (!model.isTooLargeForSyncing() && !model.isForSimpleWidget);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MirrorTextModel: () => (/* binding */ MirrorTextModel)\n/* harmony export */ });\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _prefixSumComputer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prefixSumComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\nclass MirrorTextModel {\r\n    constructor(uri, lines, eol, versionId) {\r\n        this._uri = uri;\r\n        this._lines = lines;\r\n        this._eol = eol;\r\n        this._versionId = versionId;\r\n        this._lineStarts = null;\r\n        this._cachedTextValue = null;\r\n    }\r\n    dispose() {\r\n        this._lines.length = 0;\r\n    }\r\n    get version() {\r\n        return this._versionId;\r\n    }\r\n    getText() {\r\n        if (this._cachedTextValue === null) {\r\n            this._cachedTextValue = this._lines.join(this._eol);\r\n        }\r\n        return this._cachedTextValue;\r\n    }\r\n    onEvents(e) {\r\n        if (e.eol && e.eol !== this._eol) {\r\n            this._eol = e.eol;\r\n            this._lineStarts = null;\r\n        }\r\n        // Update my lines\r\n        const changes = e.changes;\r\n        for (const change of changes) {\r\n            this._acceptDeleteRange(change.range);\r\n            this._acceptInsertText(new _core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position(change.range.startLineNumber, change.range.startColumn), change.text);\r\n        }\r\n        this._versionId = e.versionId;\r\n        this._cachedTextValue = null;\r\n    }\r\n    _ensureLineStarts() {\r\n        if (!this._lineStarts) {\r\n            const eolLength = this._eol.length;\r\n            const linesLength = this._lines.length;\r\n            const lineStartValues = new Uint32Array(linesLength);\r\n            for (let i = 0; i < linesLength; i++) {\r\n                lineStartValues[i] = this._lines[i].length + eolLength;\r\n            }\r\n            this._lineStarts = new _prefixSumComputer_js__WEBPACK_IMPORTED_MODULE_2__.PrefixSumComputer(lineStartValues);\r\n        }\r\n    }\r\n    /**\r\n     * All changes to a line's text go through this method\r\n     */\r\n    _setLineText(lineIndex, newValue) {\r\n        this._lines[lineIndex] = newValue;\r\n        if (this._lineStarts) {\r\n            // update prefix sum\r\n            this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\r\n        }\r\n    }\r\n    _acceptDeleteRange(range) {\r\n        if (range.startLineNumber === range.endLineNumber) {\r\n            if (range.startColumn === range.endColumn) {\r\n                // Nothing to delete\r\n                return;\r\n            }\r\n            // Delete text on the affected line\r\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\r\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\r\n            return;\r\n        }\r\n        // Take remaining text on last line and append it to remaining text on first line\r\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\r\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\r\n        // Delete middle lines\r\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\r\n        if (this._lineStarts) {\r\n            // update prefix sum\r\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\r\n        }\r\n    }\r\n    _acceptInsertText(position, insertText) {\r\n        if (insertText.length === 0) {\r\n            // Nothing to insert\r\n            return;\r\n        }\r\n        const insertLines = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.splitLines)(insertText);\r\n        if (insertLines.length === 1) {\r\n            // Inserting text on one line\r\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\r\n                + insertLines[0]\r\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\r\n            return;\r\n        }\r\n        // Append overflowing text from first line to the end of text to insert\r\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\r\n        // Delete overflowing text from first line and insert text on first line\r\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\r\n            + insertLines[0]);\r\n        // Insert new lines & store lengths\r\n        const newLengths = new Uint32Array(insertLines.length - 1);\r\n        for (let i = 1; i < insertLines.length; i++) {\r\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\r\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\r\n        }\r\n        if (this._lineStarts) {\r\n            // update prefix sum\r\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConstantTimePrefixSumComputer: () => (/* binding */ ConstantTimePrefixSumComputer),\n/* harmony export */   PrefixSumComputer: () => (/* binding */ PrefixSumComputer),\n/* harmony export */   PrefixSumIndexOfResult: () => (/* binding */ PrefixSumIndexOfResult)\n/* harmony export */ });\n/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ \"./node_modules/monaco-editor/esm/vs/base/common/arrays.js\");\n/* harmony import */ var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uint.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uint.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\nclass PrefixSumComputer {\r\n    constructor(values) {\r\n        this.values = values;\r\n        this.prefixSum = new Uint32Array(values.length);\r\n        this.prefixSumValidIndex = new Int32Array(1);\r\n        this.prefixSumValidIndex[0] = -1;\r\n    }\r\n    insertValues(insertIndex, insertValues) {\r\n        insertIndex = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(insertIndex);\r\n        const oldValues = this.values;\r\n        const oldPrefixSum = this.prefixSum;\r\n        const insertValuesLen = insertValues.length;\r\n        if (insertValuesLen === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\r\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\r\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\r\n        this.values.set(insertValues, insertIndex);\r\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = insertIndex - 1;\r\n        }\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    }\r\n    setValue(index, value) {\r\n        index = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(index);\r\n        value = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(value);\r\n        if (this.values[index] === value) {\r\n            return false;\r\n        }\r\n        this.values[index] = value;\r\n        if (index - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = index - 1;\r\n        }\r\n        return true;\r\n    }\r\n    removeValues(startIndex, count) {\r\n        startIndex = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(startIndex);\r\n        count = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(count);\r\n        const oldValues = this.values;\r\n        const oldPrefixSum = this.prefixSum;\r\n        if (startIndex >= oldValues.length) {\r\n            return false;\r\n        }\r\n        const maxCount = oldValues.length - startIndex;\r\n        if (count >= maxCount) {\r\n            count = maxCount;\r\n        }\r\n        if (count === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length - count);\r\n        this.values.set(oldValues.subarray(0, startIndex), 0);\r\n        this.values.set(oldValues.subarray(startIndex + count), startIndex);\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = startIndex - 1;\r\n        }\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    }\r\n    getTotalSum() {\r\n        if (this.values.length === 0) {\r\n            return 0;\r\n        }\r\n        return this._getPrefixSum(this.values.length - 1);\r\n    }\r\n    /**\r\n     * Returns the sum of the first `index + 1` many items.\r\n     * @returns `SUM(0 <= j <= index, values[j])`.\r\n     */\r\n    getPrefixSum(index) {\r\n        if (index < 0) {\r\n            return 0;\r\n        }\r\n        index = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(index);\r\n        return this._getPrefixSum(index);\r\n    }\r\n    _getPrefixSum(index) {\r\n        if (index <= this.prefixSumValidIndex[0]) {\r\n            return this.prefixSum[index];\r\n        }\r\n        let startIndex = this.prefixSumValidIndex[0] + 1;\r\n        if (startIndex === 0) {\r\n            this.prefixSum[0] = this.values[0];\r\n            startIndex++;\r\n        }\r\n        if (index >= this.values.length) {\r\n            index = this.values.length - 1;\r\n        }\r\n        for (let i = startIndex; i <= index; i++) {\r\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\r\n        }\r\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\r\n        return this.prefixSum[index];\r\n    }\r\n    getIndexOf(sum) {\r\n        sum = Math.floor(sum);\r\n        // Compute all sums (to get a fully valid prefixSum)\r\n        this.getTotalSum();\r\n        let low = 0;\r\n        let high = this.values.length - 1;\r\n        let mid = 0;\r\n        let midStop = 0;\r\n        let midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            midStop = this.prefixSum[mid];\r\n            midStart = midStop - this.values[mid];\r\n            if (sum < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (sum >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return new PrefixSumIndexOfResult(mid, sum - midStart);\r\n    }\r\n}\r\n/**\r\n * {@link getIndexOf} has an amortized runtime complexity of O(1).\r\n *\r\n * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))\r\n*/\r\nclass ConstantTimePrefixSumComputer {\r\n    constructor(values) {\r\n        this._values = values;\r\n        this._isValid = false;\r\n        this._validEndIndex = -1;\r\n        this._prefixSum = [];\r\n        this._indexBySum = [];\r\n    }\r\n    /**\r\n     * @returns SUM(0 <= j < values.length, values[j])\r\n     */\r\n    getTotalSum() {\r\n        this._ensureValid();\r\n        return this._indexBySum.length;\r\n    }\r\n    /**\r\n     * Returns the sum of the first `count` many items.\r\n     * @returns `SUM(0 <= j < count, values[j])`.\r\n     */\r\n    getPrefixSum(count) {\r\n        this._ensureValid();\r\n        if (count === 0) {\r\n            return 0;\r\n        }\r\n        return this._prefixSum[count - 1];\r\n    }\r\n    /**\r\n     * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`\r\n     */\r\n    getIndexOf(sum) {\r\n        this._ensureValid();\r\n        const idx = this._indexBySum[sum];\r\n        const viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;\r\n        return new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);\r\n    }\r\n    removeValues(start, deleteCount) {\r\n        this._values.splice(start, deleteCount);\r\n        this._invalidate(start);\r\n    }\r\n    insertValues(insertIndex, insertArr) {\r\n        this._values = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.arrayInsert)(this._values, insertIndex, insertArr);\r\n        this._invalidate(insertIndex);\r\n    }\r\n    _invalidate(index) {\r\n        this._isValid = false;\r\n        this._validEndIndex = Math.min(this._validEndIndex, index - 1);\r\n    }\r\n    _ensureValid() {\r\n        if (this._isValid) {\r\n            return;\r\n        }\r\n        for (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {\r\n            const value = this._values[i];\r\n            const sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;\r\n            this._prefixSum[i] = sumAbove + value;\r\n            for (let j = 0; j < value; j++) {\r\n                this._indexBySum[sumAbove + j] = i;\r\n            }\r\n        }\r\n        // trim things\r\n        this._prefixSum.length = this._values.length;\r\n        this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1];\r\n        // mark as valid\r\n        this._isValid = true;\r\n        this._validEndIndex = this._values.length - 1;\r\n    }\r\n    setValue(index, value) {\r\n        if (this._values[index] === value) {\r\n            // no change\r\n            return;\r\n        }\r\n        this._values[index] = value;\r\n        this._invalidate(index);\r\n    }\r\n}\r\nclass PrefixSumIndexOfResult {\r\n    constructor(index, remainder) {\r\n        this.index = index;\r\n        this.remainder = remainder;\r\n        this._prefixSumIndexOfResultBrand = undefined;\r\n        this.index = index;\r\n        this.remainder = remainder;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchParams: () => (/* binding */ SearchParams),\n/* harmony export */   Searcher: () => (/* binding */ Searcher),\n/* harmony export */   TextModelSearch: () => (/* binding */ TextModelSearch),\n/* harmony export */   createFindMatch: () => (/* binding */ createFindMatch),\n/* harmony export */   isMultilineRegexSource: () => (/* binding */ isMultilineRegexSource),\n/* harmony export */   isValidMatch: () => (/* binding */ isValidMatch)\n/* harmony export */ });\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _core_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/wordCharacterClassifier.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\nconst LIMIT_FIND_COUNT = 999;\r\nclass SearchParams {\r\n    constructor(searchString, isRegex, matchCase, wordSeparators) {\r\n        this.searchString = searchString;\r\n        this.isRegex = isRegex;\r\n        this.matchCase = matchCase;\r\n        this.wordSeparators = wordSeparators;\r\n    }\r\n    parseSearchRequest() {\r\n        if (this.searchString === '') {\r\n            return null;\r\n        }\r\n        // Try to create a RegExp out of the params\r\n        let multiline;\r\n        if (this.isRegex) {\r\n            multiline = isMultilineRegexSource(this.searchString);\r\n        }\r\n        else {\r\n            multiline = (this.searchString.indexOf('\\n') >= 0);\r\n        }\r\n        let regex = null;\r\n        try {\r\n            regex = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.createRegExp(this.searchString, this.isRegex, {\r\n                matchCase: this.matchCase,\r\n                wholeWord: false,\r\n                multiline: multiline,\r\n                global: true,\r\n                unicode: true\r\n            });\r\n        }\r\n        catch (err) {\r\n            return null;\r\n        }\r\n        if (!regex) {\r\n            return null;\r\n        }\r\n        let canUseSimpleSearch = (!this.isRegex && !multiline);\r\n        if (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {\r\n            // casing might make a difference\r\n            canUseSimpleSearch = this.matchCase;\r\n        }\r\n        return new _model_js__WEBPACK_IMPORTED_MODULE_4__.SearchData(regex, this.wordSeparators ? (0,_core_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__.getMapForWordSeparators)(this.wordSeparators, []) : null, canUseSimpleSearch ? this.searchString : null);\r\n    }\r\n}\r\nfunction isMultilineRegexSource(searchString) {\r\n    if (!searchString || searchString.length === 0) {\r\n        return false;\r\n    }\r\n    for (let i = 0, len = searchString.length; i < len; i++) {\r\n        const chCode = searchString.charCodeAt(i);\r\n        if (chCode === 10 /* CharCode.LineFeed */) {\r\n            return true;\r\n        }\r\n        if (chCode === 92 /* CharCode.Backslash */) {\r\n            // move to next char\r\n            i++;\r\n            if (i >= len) {\r\n                // string ends with a \\\r\n                break;\r\n            }\r\n            const nextChCode = searchString.charCodeAt(i);\r\n            if (nextChCode === 110 /* CharCode.n */ || nextChCode === 114 /* CharCode.r */ || nextChCode === 87 /* CharCode.W */) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction createFindMatch(range, rawMatches, captureMatches) {\r\n    if (!captureMatches) {\r\n        return new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(range, null);\r\n    }\r\n    const matches = [];\r\n    for (let i = 0, len = rawMatches.length; i < len; i++) {\r\n        matches[i] = rawMatches[i];\r\n    }\r\n    return new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(range, matches);\r\n}\r\nclass LineFeedCounter {\r\n    constructor(text) {\r\n        const lineFeedsOffsets = [];\r\n        let lineFeedsOffsetsLen = 0;\r\n        for (let i = 0, textLen = text.length; i < textLen; i++) {\r\n            if (text.charCodeAt(i) === 10 /* CharCode.LineFeed */) {\r\n                lineFeedsOffsets[lineFeedsOffsetsLen++] = i;\r\n            }\r\n        }\r\n        this._lineFeedsOffsets = lineFeedsOffsets;\r\n    }\r\n    findLineFeedCountBeforeOffset(offset) {\r\n        const lineFeedsOffsets = this._lineFeedsOffsets;\r\n        let min = 0;\r\n        let max = lineFeedsOffsets.length - 1;\r\n        if (max === -1) {\r\n            // no line feeds\r\n            return 0;\r\n        }\r\n        if (offset <= lineFeedsOffsets[0]) {\r\n            // before first line feed\r\n            return 0;\r\n        }\r\n        while (min < max) {\r\n            const mid = min + ((max - min) / 2 >> 0);\r\n            if (lineFeedsOffsets[mid] >= offset) {\r\n                max = mid - 1;\r\n            }\r\n            else {\r\n                if (lineFeedsOffsets[mid + 1] >= offset) {\r\n                    // bingo!\r\n                    min = mid;\r\n                    max = mid;\r\n                }\r\n                else {\r\n                    min = mid + 1;\r\n                }\r\n            }\r\n        }\r\n        return min + 1;\r\n    }\r\n}\r\nclass TextModelSearch {\r\n    static findMatches(model, searchParams, searchRange, captureMatches, limitResultCount) {\r\n        const searchData = searchParams.parseSearchRequest();\r\n        if (!searchData) {\r\n            return [];\r\n        }\r\n        if (searchData.regex.multiline) {\r\n            return this._doFindMatchesMultiline(model, searchRange, new Searcher(searchData.wordSeparators, searchData.regex), captureMatches, limitResultCount);\r\n        }\r\n        return this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);\r\n    }\r\n    /**\r\n     * Multiline search always executes on the lines concatenated with \\n.\r\n     * We must therefore compensate for the count of \\n in case the model is CRLF\r\n     */\r\n    static _getMultilineMatchRange(model, deltaOffset, text, lfCounter, matchIndex, match0) {\r\n        let startOffset;\r\n        let lineFeedCountBeforeMatch = 0;\r\n        if (lfCounter) {\r\n            lineFeedCountBeforeMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex);\r\n            startOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \\r as there were \\n */;\r\n        }\r\n        else {\r\n            startOffset = deltaOffset + matchIndex;\r\n        }\r\n        let endOffset;\r\n        if (lfCounter) {\r\n            const lineFeedCountBeforeEndOfMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex + match0.length);\r\n            const lineFeedCountInMatch = lineFeedCountBeforeEndOfMatch - lineFeedCountBeforeMatch;\r\n            endOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \\r as there were \\n */;\r\n        }\r\n        else {\r\n            endOffset = startOffset + match0.length;\r\n        }\r\n        const startPosition = model.getPositionAt(startOffset);\r\n        const endPosition = model.getPositionAt(endOffset);\r\n        return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\r\n    }\r\n    static _doFindMatchesMultiline(model, searchRange, searcher, captureMatches, limitResultCount) {\r\n        const deltaOffset = model.getOffsetAt(searchRange.getStartPosition());\r\n        // We always execute multiline search over the lines joined with \\n\r\n        // This makes it that \\n will match the EOL for both CRLF and LF models\r\n        // We compensate for offset errors in `_getMultilineMatchRange`\r\n        const text = model.getValueInRange(searchRange, 1 /* EndOfLinePreference.LF */);\r\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\r\n        const result = [];\r\n        let counter = 0;\r\n        let m;\r\n        searcher.reset(0);\r\n        while ((m = searcher.next(text))) {\r\n            result[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\r\n            if (counter >= limitResultCount) {\r\n                return result;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    static _doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount) {\r\n        const result = [];\r\n        let resultLen = 0;\r\n        // Early case for a search range that starts & stops on the same line number\r\n        if (searchRange.startLineNumber === searchRange.endLineNumber) {\r\n            const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\r\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\r\n            return result;\r\n        }\r\n        // Collect results from first line\r\n        const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);\r\n        resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\r\n        // Collect results from middle lines\r\n        for (let lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {\r\n            resultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);\r\n        }\r\n        // Collect results from last line\r\n        if (resultLen < limitResultCount) {\r\n            const text = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);\r\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);\r\n        }\r\n        return result;\r\n    }\r\n    static _findMatchesInLine(searchData, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\r\n        const wordSeparators = searchData.wordSeparators;\r\n        if (!captureMatches && searchData.simpleSearch) {\r\n            const searchString = searchData.simpleSearch;\r\n            const searchStringLen = searchString.length;\r\n            const textLength = text.length;\r\n            let lastMatchIndex = -searchStringLen;\r\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\r\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\r\n                    result[resultLen++] = new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\r\n                    if (resultLen >= limitResultCount) {\r\n                        return resultLen;\r\n                    }\r\n                }\r\n            }\r\n            return resultLen;\r\n        }\r\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\r\n        let m;\r\n        // Reset regex to search from the beginning\r\n        searcher.reset(0);\r\n        do {\r\n            m = searcher.next(text);\r\n            if (m) {\r\n                result[resultLen++] = createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\r\n                if (resultLen >= limitResultCount) {\r\n                    return resultLen;\r\n                }\r\n            }\r\n        } while (m);\r\n        return resultLen;\r\n    }\r\n    static findNextMatch(model, searchParams, searchStart, captureMatches) {\r\n        const searchData = searchParams.parseSearchRequest();\r\n        if (!searchData) {\r\n            return null;\r\n        }\r\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\r\n        if (searchData.regex.multiline) {\r\n            return this._doFindNextMatchMultiline(model, searchStart, searcher, captureMatches);\r\n        }\r\n        return this._doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches);\r\n    }\r\n    static _doFindNextMatchMultiline(model, searchStart, searcher, captureMatches) {\r\n        const searchTextStart = new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(searchStart.lineNumber, 1);\r\n        const deltaOffset = model.getOffsetAt(searchTextStart);\r\n        const lineCount = model.getLineCount();\r\n        // We always execute multiline search over the lines joined with \\n\r\n        // This makes it that \\n will match the EOL for both CRLF and LF models\r\n        // We compensate for offset errors in `_getMultilineMatchRange`\r\n        const text = model.getValueInRange(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), 1 /* EndOfLinePreference.LF */);\r\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\r\n        searcher.reset(searchStart.column - 1);\r\n        const m = searcher.next(text);\r\n        if (m) {\r\n            return createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\r\n        }\r\n        if (searchStart.lineNumber !== 1 || searchStart.column !== 1) {\r\n            // Try again from the top\r\n            return this._doFindNextMatchMultiline(model, new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1), searcher, captureMatches);\r\n        }\r\n        return null;\r\n    }\r\n    static _doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches) {\r\n        const lineCount = model.getLineCount();\r\n        const startLineNumber = searchStart.lineNumber;\r\n        // Look in first line\r\n        const text = model.getLineContent(startLineNumber);\r\n        const r = this._findFirstMatchInLine(searcher, text, startLineNumber, searchStart.column, captureMatches);\r\n        if (r) {\r\n            return r;\r\n        }\r\n        for (let i = 1; i <= lineCount; i++) {\r\n            const lineIndex = (startLineNumber + i - 1) % lineCount;\r\n            const text = model.getLineContent(lineIndex + 1);\r\n            const r = this._findFirstMatchInLine(searcher, text, lineIndex + 1, 1, captureMatches);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    static _findFirstMatchInLine(searcher, text, lineNumber, fromColumn, captureMatches) {\r\n        // Set regex to search from column\r\n        searcher.reset(fromColumn - 1);\r\n        const m = searcher.next(text);\r\n        if (m) {\r\n            return createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\r\n        }\r\n        return null;\r\n    }\r\n    static findPreviousMatch(model, searchParams, searchStart, captureMatches) {\r\n        const searchData = searchParams.parseSearchRequest();\r\n        if (!searchData) {\r\n            return null;\r\n        }\r\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\r\n        if (searchData.regex.multiline) {\r\n            return this._doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches);\r\n        }\r\n        return this._doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches);\r\n    }\r\n    static _doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches) {\r\n        const matches = this._doFindMatchesMultiline(model, new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(1, 1, searchStart.lineNumber, searchStart.column), searcher, captureMatches, 10 * LIMIT_FIND_COUNT);\r\n        if (matches.length > 0) {\r\n            return matches[matches.length - 1];\r\n        }\r\n        const lineCount = model.getLineCount();\r\n        if (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {\r\n            // Try again with all content\r\n            return this._doFindPreviousMatchMultiline(model, new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(lineCount, model.getLineMaxColumn(lineCount)), searcher, captureMatches);\r\n        }\r\n        return null;\r\n    }\r\n    static _doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches) {\r\n        const lineCount = model.getLineCount();\r\n        const startLineNumber = searchStart.lineNumber;\r\n        // Look in first line\r\n        const text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);\r\n        const r = this._findLastMatchInLine(searcher, text, startLineNumber, captureMatches);\r\n        if (r) {\r\n            return r;\r\n        }\r\n        for (let i = 1; i <= lineCount; i++) {\r\n            const lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\r\n            const text = model.getLineContent(lineIndex + 1);\r\n            const r = this._findLastMatchInLine(searcher, text, lineIndex + 1, captureMatches);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    static _findLastMatchInLine(searcher, text, lineNumber, captureMatches) {\r\n        let bestResult = null;\r\n        let m;\r\n        searcher.reset(0);\r\n        while ((m = searcher.next(text))) {\r\n            bestResult = createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\r\n        }\r\n        return bestResult;\r\n    }\r\n}\r\nfunction leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\r\n    if (matchStartIndex === 0) {\r\n        // Match starts at start of string\r\n        return true;\r\n    }\r\n    const charBefore = text.charCodeAt(matchStartIndex - 1);\r\n    if (wordSeparators.get(charBefore) !== 0 /* WordCharacterClass.Regular */) {\r\n        // The character before the match is a word separator\r\n        return true;\r\n    }\r\n    if (charBefore === 13 /* CharCode.CarriageReturn */ || charBefore === 10 /* CharCode.LineFeed */) {\r\n        // The character before the match is line break or carriage return.\r\n        return true;\r\n    }\r\n    if (matchLength > 0) {\r\n        const firstCharInMatch = text.charCodeAt(matchStartIndex);\r\n        if (wordSeparators.get(firstCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\r\n            // The first character inside the match is a word separator\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\r\n    if (matchStartIndex + matchLength === textLength) {\r\n        // Match ends at end of string\r\n        return true;\r\n    }\r\n    const charAfter = text.charCodeAt(matchStartIndex + matchLength);\r\n    if (wordSeparators.get(charAfter) !== 0 /* WordCharacterClass.Regular */) {\r\n        // The character after the match is a word separator\r\n        return true;\r\n    }\r\n    if (charAfter === 13 /* CharCode.CarriageReturn */ || charAfter === 10 /* CharCode.LineFeed */) {\r\n        // The character after the match is line break or carriage return.\r\n        return true;\r\n    }\r\n    if (matchLength > 0) {\r\n        const lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);\r\n        if (wordSeparators.get(lastCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\r\n            // The last character in the match is a word separator\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction isValidMatch(wordSeparators, text, textLength, matchStartIndex, matchLength) {\r\n    return (leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength)\r\n        && rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength));\r\n}\r\nclass Searcher {\r\n    constructor(wordSeparators, searchRegex) {\r\n        this._wordSeparators = wordSeparators;\r\n        this._searchRegex = searchRegex;\r\n        this._prevMatchStartIndex = -1;\r\n        this._prevMatchLength = 0;\r\n    }\r\n    reset(lastIndex) {\r\n        this._searchRegex.lastIndex = lastIndex;\r\n        this._prevMatchStartIndex = -1;\r\n        this._prevMatchLength = 0;\r\n    }\r\n    next(text) {\r\n        const textLength = text.length;\r\n        let m;\r\n        do {\r\n            if (this._prevMatchStartIndex + this._prevMatchLength === textLength) {\r\n                // Reached the end of the line\r\n                return null;\r\n            }\r\n            m = this._searchRegex.exec(text);\r\n            if (!m) {\r\n                return null;\r\n            }\r\n            const matchStartIndex = m.index;\r\n            const matchLength = m[0].length;\r\n            if (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {\r\n                if (matchLength === 0) {\r\n                    // the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here\r\n                    // we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise\r\n                    if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 0xFFFF) {\r\n                        this._searchRegex.lastIndex += 2;\r\n                    }\r\n                    else {\r\n                        this._searchRegex.lastIndex += 1;\r\n                    }\r\n                    continue;\r\n                }\r\n                // Exit early if the regex matches the same range twice\r\n                return null;\r\n            }\r\n            this._prevMatchStartIndex = matchStartIndex;\r\n            this._prevMatchLength = matchLength;\r\n            if (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {\r\n                return m;\r\n            }\r\n        } while (m);\r\n        return null;\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyMod: () => (/* binding */ KeyMod),\n/* harmony export */   createMonacoBaseAPI: () => (/* binding */ createMonacoBaseAPI)\n/* harmony export */ });\n/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ \"./node_modules/monaco-editor/esm/vs/base/common/cancellation.js\");\n/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/* harmony import */ var _base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/keyCodes.js */ \"./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js\");\n/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/uri.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uri.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _core_selection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/selection.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js\");\n/* harmony import */ var _languages_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../languages.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages.js\");\n/* harmony import */ var _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../standalone/standaloneEnums.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KeyMod {\r\n    static chord(firstPart, secondPart) {\r\n        return (0,_base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__.KeyChord)(firstPart, secondPart);\r\n    }\r\n}\r\nKeyMod.CtrlCmd = 2048 /* ConstKeyMod.CtrlCmd */;\r\nKeyMod.Shift = 1024 /* ConstKeyMod.Shift */;\r\nKeyMod.Alt = 512 /* ConstKeyMod.Alt */;\r\nKeyMod.WinCtrl = 256 /* ConstKeyMod.WinCtrl */;\r\nfunction createMonacoBaseAPI() {\r\n    return {\r\n        editor: undefined, // undefined override expected here\r\n        languages: undefined, // undefined override expected here\r\n        CancellationTokenSource: _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource,\r\n        Emitter: _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter,\r\n        KeyCode: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.KeyCode,\r\n        KeyMod: KeyMod,\r\n        Position: _core_position_js__WEBPACK_IMPORTED_MODULE_4__.Position,\r\n        Range: _core_range_js__WEBPACK_IMPORTED_MODULE_5__.Range,\r\n        Selection: _core_selection_js__WEBPACK_IMPORTED_MODULE_6__.Selection,\r\n        SelectionDirection: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.SelectionDirection,\r\n        MarkerSeverity: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.MarkerSeverity,\r\n        MarkerTag: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.MarkerTag,\r\n        Uri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI,\r\n        Token: _languages_js__WEBPACK_IMPORTED_MODULE_7__.Token\r\n    };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy9lZGl0b3JCYXNlQXBpLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDK0U7QUFDdkI7QUFDSTtBQUNWO0FBQ0g7QUFDTjtBQUNRO0FBQ1Q7QUFDNEI7QUFDN0Q7QUFDUDtBQUNBLGVBQWUsa0VBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaUZBQXVCO0FBQ3hELGlCQUFpQiwwREFBTztBQUN4QixpQkFBaUIsbUVBQXVCO0FBQ3hDO0FBQ0Esa0JBQWtCLHVEQUFRO0FBQzFCLGVBQWUsaURBQUs7QUFDcEIsbUJBQW1CLHlEQUFTO0FBQzVCLDRCQUE0Qiw4RUFBa0M7QUFDOUQsd0JBQXdCLDBFQUE4QjtBQUN0RCxtQkFBbUIscUVBQXlCO0FBQzVDLGFBQWEsb0RBQUc7QUFDaEIsZUFBZSxnREFBSztBQUNwQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vc2VydmljZXMvZWRpdG9yQmFzZUFwaS5qcz80MjRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXHJcbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xyXG5pbXBvcnQgeyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL2Jhc2UvY29tbW9uL2NhbmNlbGxhdGlvbi5qcyc7XHJcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi9ldmVudC5qcyc7XHJcbmltcG9ydCB7IEtleUNob3JkIH0gZnJvbSAnLi4vLi4vLi4vYmFzZS9jb21tb24va2V5Q29kZXMuanMnO1xyXG5pbXBvcnQgeyBVUkkgfSBmcm9tICcuLi8uLi8uLi9iYXNlL2NvbW1vbi91cmkuanMnO1xyXG5pbXBvcnQgeyBQb3NpdGlvbiB9IGZyb20gJy4uL2NvcmUvcG9zaXRpb24uanMnO1xyXG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJy4uL2NvcmUvcmFuZ2UuanMnO1xyXG5pbXBvcnQgeyBTZWxlY3Rpb24gfSBmcm9tICcuLi9jb3JlL3NlbGVjdGlvbi5qcyc7XHJcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi4vbGFuZ3VhZ2VzLmpzJztcclxuaW1wb3J0ICogYXMgc3RhbmRhbG9uZUVudW1zIGZyb20gJy4uL3N0YW5kYWxvbmUvc3RhbmRhbG9uZUVudW1zLmpzJztcclxuZXhwb3J0IGNsYXNzIEtleU1vZCB7XHJcbiAgICBzdGF0aWMgY2hvcmQoZmlyc3RQYXJ0LCBzZWNvbmRQYXJ0KSB7XHJcbiAgICAgICAgcmV0dXJuIEtleUNob3JkKGZpcnN0UGFydCwgc2Vjb25kUGFydCk7XHJcbiAgICB9XHJcbn1cclxuS2V5TW9kLkN0cmxDbWQgPSAyMDQ4IC8qIENvbnN0S2V5TW9kLkN0cmxDbWQgKi87XHJcbktleU1vZC5TaGlmdCA9IDEwMjQgLyogQ29uc3RLZXlNb2QuU2hpZnQgKi87XHJcbktleU1vZC5BbHQgPSA1MTIgLyogQ29uc3RLZXlNb2QuQWx0ICovO1xyXG5LZXlNb2QuV2luQ3RybCA9IDI1NiAvKiBDb25zdEtleU1vZC5XaW5DdHJsICovO1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9uYWNvQmFzZUFQSSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZWRpdG9yOiB1bmRlZmluZWQsIC8vIHVuZGVmaW5lZCBvdmVycmlkZSBleHBlY3RlZCBoZXJlXHJcbiAgICAgICAgbGFuZ3VhZ2VzOiB1bmRlZmluZWQsIC8vIHVuZGVmaW5lZCBvdmVycmlkZSBleHBlY3RlZCBoZXJlXHJcbiAgICAgICAgQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2U6IENhbmNlbGxhdGlvblRva2VuU291cmNlLFxyXG4gICAgICAgIEVtaXR0ZXI6IEVtaXR0ZXIsXHJcbiAgICAgICAgS2V5Q29kZTogc3RhbmRhbG9uZUVudW1zLktleUNvZGUsXHJcbiAgICAgICAgS2V5TW9kOiBLZXlNb2QsXHJcbiAgICAgICAgUG9zaXRpb246IFBvc2l0aW9uLFxyXG4gICAgICAgIFJhbmdlOiBSYW5nZSxcclxuICAgICAgICBTZWxlY3Rpb246IFNlbGVjdGlvbixcclxuICAgICAgICBTZWxlY3Rpb25EaXJlY3Rpb246IHN0YW5kYWxvbmVFbnVtcy5TZWxlY3Rpb25EaXJlY3Rpb24sXHJcbiAgICAgICAgTWFya2VyU2V2ZXJpdHk6IHN0YW5kYWxvbmVFbnVtcy5NYXJrZXJTZXZlcml0eSxcclxuICAgICAgICBNYXJrZXJUYWc6IHN0YW5kYWxvbmVFbnVtcy5NYXJrZXJUYWcsXHJcbiAgICAgICAgVXJpOiBVUkksXHJcbiAgICAgICAgVG9rZW46IFRva2VuXHJcbiAgICB9O1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorSimpleWorker: () => (/* binding */ EditorSimpleWorker),\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/diff/diff.js */ \"./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js\");\n/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ \"./node_modules/monaco-editor/esm/vs/base/common/uri.js\");\n/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/position.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/position.js\");\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model/mirrorTextModel.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js\");\n/* harmony import */ var _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/wordHelper.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js\");\n/* harmony import */ var _languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../languages/linkComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js\");\n/* harmony import */ var _languages_supports_inplaceReplaceSupport_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../languages/supports/inplaceReplaceSupport.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js\");\n/* harmony import */ var _editorBaseApi_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./editorBaseApi.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js\");\n/* harmony import */ var _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/stopwatch.js */ \"./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js\");\n/* harmony import */ var _unicodeTextModelHighlighter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./unicodeTextModelHighlighter.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js\");\n/* harmony import */ var _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../diff/linesDiffComputers.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js\");\n/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/objects.js */ \"./node_modules/monaco-editor/esm/vs/base/common/objects.js\");\n/* harmony import */ var _languages_defaultDocumentColorsComputer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../languages/defaultDocumentColorsComputer.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js\");\n/* harmony import */ var _findSectionHeaders_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./findSectionHeaders.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nclass MirrorModel extends _model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_4__.MirrorTextModel {\r\n    get uri() {\r\n        return this._uri;\r\n    }\r\n    get eol() {\r\n        return this._eol;\r\n    }\r\n    getValue() {\r\n        return this.getText();\r\n    }\r\n    findMatches(regex) {\r\n        const matches = [];\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n            const offsetToAdd = this.offsetAt(new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(i + 1, 1));\r\n            const iteratorOverMatches = line.matchAll(regex);\r\n            for (const match of iteratorOverMatches) {\r\n                if (match.index || match.index === 0) {\r\n                    match.index = match.index + offsetToAdd;\r\n                }\r\n                matches.push(match);\r\n            }\r\n        }\r\n        return matches;\r\n    }\r\n    getLinesContent() {\r\n        return this._lines.slice(0);\r\n    }\r\n    getLineCount() {\r\n        return this._lines.length;\r\n    }\r\n    getLineContent(lineNumber) {\r\n        return this._lines[lineNumber - 1];\r\n    }\r\n    getWordAtPosition(position, wordDefinition) {\r\n        const wordAtText = (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__.getWordAtText)(position.column, (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__.ensureValidWordDefinition)(wordDefinition), this._lines[position.lineNumber - 1], 0);\r\n        if (wordAtText) {\r\n            return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\r\n        }\r\n        return null;\r\n    }\r\n    words(wordDefinition) {\r\n        const lines = this._lines;\r\n        const wordenize = this._wordenize.bind(this);\r\n        let lineNumber = 0;\r\n        let lineText = '';\r\n        let wordRangesIdx = 0;\r\n        let wordRanges = [];\r\n        return {\r\n            *[Symbol.iterator]() {\r\n                while (true) {\r\n                    if (wordRangesIdx < wordRanges.length) {\r\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\r\n                        wordRangesIdx += 1;\r\n                        yield value;\r\n                    }\r\n                    else {\r\n                        if (lineNumber < lines.length) {\r\n                            lineText = lines[lineNumber];\r\n                            wordRanges = wordenize(lineText, wordDefinition);\r\n                            wordRangesIdx = 0;\r\n                            lineNumber += 1;\r\n                        }\r\n                        else {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n    getLineWords(lineNumber, wordDefinition) {\r\n        const content = this._lines[lineNumber - 1];\r\n        const ranges = this._wordenize(content, wordDefinition);\r\n        const words = [];\r\n        for (const range of ranges) {\r\n            words.push({\r\n                word: content.substring(range.start, range.end),\r\n                startColumn: range.start + 1,\r\n                endColumn: range.end + 1\r\n            });\r\n        }\r\n        return words;\r\n    }\r\n    _wordenize(content, wordDefinition) {\r\n        const result = [];\r\n        let match;\r\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\r\n        while (match = wordDefinition.exec(content)) {\r\n            if (match[0].length === 0) {\r\n                // it did match the empty string\r\n                break;\r\n            }\r\n            result.push({ start: match.index, end: match.index + match[0].length });\r\n        }\r\n        return result;\r\n    }\r\n    getValueInRange(range) {\r\n        range = this._validateRange(range);\r\n        if (range.startLineNumber === range.endLineNumber) {\r\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\r\n        }\r\n        const lineEnding = this._eol;\r\n        const startLineIndex = range.startLineNumber - 1;\r\n        const endLineIndex = range.endLineNumber - 1;\r\n        const resultLines = [];\r\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\r\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\r\n            resultLines.push(this._lines[i]);\r\n        }\r\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\r\n        return resultLines.join(lineEnding);\r\n    }\r\n    offsetAt(position) {\r\n        position = this._validatePosition(position);\r\n        this._ensureLineStarts();\r\n        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\r\n    }\r\n    positionAt(offset) {\r\n        offset = Math.floor(offset);\r\n        offset = Math.max(0, offset);\r\n        this._ensureLineStarts();\r\n        const out = this._lineStarts.getIndexOf(offset);\r\n        const lineLength = this._lines[out.index].length;\r\n        // Ensure we return a valid position\r\n        return {\r\n            lineNumber: 1 + out.index,\r\n            column: 1 + Math.min(out.remainder, lineLength)\r\n        };\r\n    }\r\n    _validateRange(range) {\r\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\r\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\r\n        if (start.lineNumber !== range.startLineNumber\r\n            || start.column !== range.startColumn\r\n            || end.lineNumber !== range.endLineNumber\r\n            || end.column !== range.endColumn) {\r\n            return {\r\n                startLineNumber: start.lineNumber,\r\n                startColumn: start.column,\r\n                endLineNumber: end.lineNumber,\r\n                endColumn: end.column\r\n            };\r\n        }\r\n        return range;\r\n    }\r\n    _validatePosition(position) {\r\n        if (!_core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position.isIPosition(position)) {\r\n            throw new Error('bad position');\r\n        }\r\n        let { lineNumber, column } = position;\r\n        let hasChanged = false;\r\n        if (lineNumber < 1) {\r\n            lineNumber = 1;\r\n            column = 1;\r\n            hasChanged = true;\r\n        }\r\n        else if (lineNumber > this._lines.length) {\r\n            lineNumber = this._lines.length;\r\n            column = this._lines[lineNumber - 1].length + 1;\r\n            hasChanged = true;\r\n        }\r\n        else {\r\n            const maxCharacter = this._lines[lineNumber - 1].length + 1;\r\n            if (column < 1) {\r\n                column = 1;\r\n                hasChanged = true;\r\n            }\r\n            else if (column > maxCharacter) {\r\n                column = maxCharacter;\r\n                hasChanged = true;\r\n            }\r\n        }\r\n        if (!hasChanged) {\r\n            return position;\r\n        }\r\n        else {\r\n            return { lineNumber, column };\r\n        }\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass EditorSimpleWorker {\r\n    constructor(host, foreignModuleFactory) {\r\n        this._host = host;\r\n        this._models = Object.create(null);\r\n        this._foreignModuleFactory = foreignModuleFactory;\r\n        this._foreignModule = null;\r\n    }\r\n    dispose() {\r\n        this._models = Object.create(null);\r\n    }\r\n    _getModel(uri) {\r\n        return this._models[uri];\r\n    }\r\n    _getModels() {\r\n        const all = [];\r\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\r\n        return all;\r\n    }\r\n    acceptNewModel(data) {\r\n        this._models[data.url] = new MirrorModel(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.parse(data.url), data.lines, data.EOL, data.versionId);\r\n    }\r\n    acceptModelChanged(strURL, e) {\r\n        if (!this._models[strURL]) {\r\n            return;\r\n        }\r\n        const model = this._models[strURL];\r\n        model.onEvents(e);\r\n    }\r\n    acceptRemovedModel(strURL) {\r\n        if (!this._models[strURL]) {\r\n            return;\r\n        }\r\n        delete this._models[strURL];\r\n    }\r\n    async computeUnicodeHighlights(url, options, range) {\r\n        const model = this._getModel(url);\r\n        if (!model) {\r\n            return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\r\n        }\r\n        return _unicodeTextModelHighlighter_js__WEBPACK_IMPORTED_MODULE_10__.UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\r\n    }\r\n    async findSectionHeaders(url, options) {\r\n        const model = this._getModel(url);\r\n        if (!model) {\r\n            return [];\r\n        }\r\n        return (0,_findSectionHeaders_js__WEBPACK_IMPORTED_MODULE_14__.findSectionHeaders)(model, options);\r\n    }\r\n    // ---- BEGIN diff --------------------------------------------------------------------------\r\n    async computeDiff(originalUrl, modifiedUrl, options, algorithm) {\r\n        const original = this._getModel(originalUrl);\r\n        const modified = this._getModel(modifiedUrl);\r\n        if (!original || !modified) {\r\n            return null;\r\n        }\r\n        const result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\r\n        return result;\r\n    }\r\n    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\r\n        const diffAlgorithm = algorithm === 'advanced' ? _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__.linesDiffComputers.getDefault() : _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__.linesDiffComputers.getLegacy();\r\n        const originalLines = originalTextModel.getLinesContent();\r\n        const modifiedLines = modifiedTextModel.getLinesContent();\r\n        const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\r\n        const identical = (result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\r\n        function getLineChanges(changes) {\r\n            return changes.map(m => {\r\n                var _a;\r\n                return ([m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (_a = m.innerChanges) === null || _a === void 0 ? void 0 : _a.map(m => [\r\n                        m.originalRange.startLineNumber,\r\n                        m.originalRange.startColumn,\r\n                        m.originalRange.endLineNumber,\r\n                        m.originalRange.endColumn,\r\n                        m.modifiedRange.startLineNumber,\r\n                        m.modifiedRange.startColumn,\r\n                        m.modifiedRange.endLineNumber,\r\n                        m.modifiedRange.endColumn,\r\n                    ])]);\r\n            });\r\n        }\r\n        return {\r\n            identical,\r\n            quitEarly: result.hitTimeout,\r\n            changes: getLineChanges(result.changes),\r\n            moves: result.moves.map(m => ([\r\n                m.lineRangeMapping.original.startLineNumber,\r\n                m.lineRangeMapping.original.endLineNumberExclusive,\r\n                m.lineRangeMapping.modified.startLineNumber,\r\n                m.lineRangeMapping.modified.endLineNumberExclusive,\r\n                getLineChanges(m.changes)\r\n            ])),\r\n        };\r\n    }\r\n    static _modelsAreIdentical(original, modified) {\r\n        const originalLineCount = original.getLineCount();\r\n        const modifiedLineCount = modified.getLineCount();\r\n        if (originalLineCount !== modifiedLineCount) {\r\n            return false;\r\n        }\r\n        for (let line = 1; line <= originalLineCount; line++) {\r\n            const originalLine = original.getLineContent(line);\r\n            const modifiedLine = modified.getLineContent(line);\r\n            if (originalLine !== modifiedLine) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    async computeMoreMinimalEdits(modelUrl, edits, pretty) {\r\n        const model = this._getModel(modelUrl);\r\n        if (!model) {\r\n            return edits;\r\n        }\r\n        const result = [];\r\n        let lastEol = undefined;\r\n        edits = edits.slice(0).sort((a, b) => {\r\n            if (a.range && b.range) {\r\n                return _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.compareRangesUsingStarts(a.range, b.range);\r\n            }\r\n            // eol only changes should go to the end\r\n            const aRng = a.range ? 0 : 1;\r\n            const bRng = b.range ? 0 : 1;\r\n            return aRng - bRng;\r\n        });\r\n        // merge adjacent edits\r\n        let writeIndex = 0;\r\n        for (let readIndex = 1; readIndex < edits.length; readIndex++) {\r\n            if (_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getEndPosition(edits[writeIndex].range).equals(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getStartPosition(edits[readIndex].range))) {\r\n                edits[writeIndex].range = _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.fromPositions(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getStartPosition(edits[writeIndex].range), _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getEndPosition(edits[readIndex].range));\r\n                edits[writeIndex].text += edits[readIndex].text;\r\n            }\r\n            else {\r\n                writeIndex++;\r\n                edits[writeIndex] = edits[readIndex];\r\n            }\r\n        }\r\n        edits.length = writeIndex + 1;\r\n        for (let { range, text, eol } of edits) {\r\n            if (typeof eol === 'number') {\r\n                lastEol = eol;\r\n            }\r\n            if (_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.isEmpty(range) && !text) {\r\n                // empty change\r\n                continue;\r\n            }\r\n            const original = model.getValueInRange(range);\r\n            text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\r\n            if (original === text) {\r\n                // noop\r\n                continue;\r\n            }\r\n            // make sure diff won't take too long\r\n            if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\r\n                result.push({ range, text });\r\n                continue;\r\n            }\r\n            // compute diff between original and edit.text\r\n            const changes = (0,_base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__.stringDiff)(original, text, pretty);\r\n            const editOffset = model.offsetAt(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.lift(range).getStartPosition());\r\n            for (const change of changes) {\r\n                const start = model.positionAt(editOffset + change.originalStart);\r\n                const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\r\n                const newEdit = {\r\n                    text: text.substr(change.modifiedStart, change.modifiedLength),\r\n                    range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\r\n                };\r\n                if (model.getValueInRange(newEdit.range) !== newEdit.text) {\r\n                    result.push(newEdit);\r\n                }\r\n            }\r\n        }\r\n        if (typeof lastEol === 'number') {\r\n            result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\r\n        }\r\n        return result;\r\n    }\r\n    // ---- END minimal edits ---------------------------------------------------------------\r\n    async computeLinks(modelUrl) {\r\n        const model = this._getModel(modelUrl);\r\n        if (!model) {\r\n            return null;\r\n        }\r\n        return (0,_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.computeLinks)(model);\r\n    }\r\n    // --- BEGIN default document colors -----------------------------------------------------------\r\n    async computeDefaultDocumentColors(modelUrl) {\r\n        const model = this._getModel(modelUrl);\r\n        if (!model) {\r\n            return null;\r\n        }\r\n        return (0,_languages_defaultDocumentColorsComputer_js__WEBPACK_IMPORTED_MODULE_13__.computeDefaultDocumentColors)(model);\r\n    }\r\n    async textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\r\n        const sw = new _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_9__.StopWatch();\r\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\r\n        const seen = new Set();\r\n        outer: for (const url of modelUrls) {\r\n            const model = this._getModel(url);\r\n            if (!model) {\r\n                continue;\r\n            }\r\n            for (const word of model.words(wordDefRegExp)) {\r\n                if (word === leadingWord || !isNaN(Number(word))) {\r\n                    continue;\r\n                }\r\n                seen.add(word);\r\n                if (seen.size > EditorSimpleWorker._suggestionsLimit) {\r\n                    break outer;\r\n                }\r\n            }\r\n        }\r\n        return { words: Array.from(seen), duration: sw.elapsed() };\r\n    }\r\n    // ---- END suggest --------------------------------------------------------------------------\r\n    //#region -- word ranges --\r\n    async computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\r\n        const model = this._getModel(modelUrl);\r\n        if (!model) {\r\n            return Object.create(null);\r\n        }\r\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\r\n        const result = Object.create(null);\r\n        for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\r\n            const words = model.getLineWords(line, wordDefRegExp);\r\n            for (const word of words) {\r\n                if (!isNaN(Number(word.word))) {\r\n                    continue;\r\n                }\r\n                let array = result[word.word];\r\n                if (!array) {\r\n                    array = [];\r\n                    result[word.word] = array;\r\n                }\r\n                array.push({\r\n                    startLineNumber: line,\r\n                    startColumn: word.startColumn,\r\n                    endLineNumber: line,\r\n                    endColumn: word.endColumn\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    //#endregion\r\n    async navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\r\n        const model = this._getModel(modelUrl);\r\n        if (!model) {\r\n            return null;\r\n        }\r\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\r\n        if (range.startColumn === range.endColumn) {\r\n            range = {\r\n                startLineNumber: range.startLineNumber,\r\n                startColumn: range.startColumn,\r\n                endLineNumber: range.endLineNumber,\r\n                endColumn: range.endColumn + 1\r\n            };\r\n        }\r\n        const selectionText = model.getValueInRange(range);\r\n        const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\r\n        if (!wordRange) {\r\n            return null;\r\n        }\r\n        const word = model.getValueInRange(wordRange);\r\n        const result = _languages_supports_inplaceReplaceSupport_js__WEBPACK_IMPORTED_MODULE_7__.BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\r\n        return result;\r\n    }\r\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\r\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\r\n        const proxyMethodRequest = (method, args) => {\r\n            return this._host.fhr(method, args);\r\n        };\r\n        const foreignHost = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__.createProxyObject)(foreignHostMethods, proxyMethodRequest);\r\n        const ctx = {\r\n            host: foreignHost,\r\n            getMirrorModels: () => {\r\n                return this._getModels();\r\n            }\r\n        };\r\n        if (this._foreignModuleFactory) {\r\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\r\n            // static foreing module\r\n            return Promise.resolve((0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__.getAllMethodNames)(this._foreignModule));\r\n        }\r\n        // ESM-comment-begin\r\n        // \t\treturn new Promise<any>((resolve, reject) => {\r\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\r\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\r\n        // \r\n        // \t\t\t\tresolve(getAllMethodNames(this._foreignModule));\r\n        // \r\n        // \t\t\t}, reject);\r\n        // \t\t});\r\n        // ESM-comment-end\r\n        // ESM-uncomment-begin\r\n        return Promise.reject(new Error(`Unexpected usage`));\r\n        // ESM-uncomment-end\r\n    }\r\n    // foreign method request\r\n    fmr(method, args) {\r\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\r\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\r\n        }\r\n        try {\r\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n}\r\n// ---- END diff --------------------------------------------------------------------------\r\n// ---- BEGIN minimal edits ---------------------------------------------------------------\r\nEditorSimpleWorker._diffLimit = 100000;\r\n// ---- BEGIN suggest --------------------------------------------------------------------------\r\nEditorSimpleWorker._suggestionsLimit = 10000;\r\n/**\r\n * Called on the worker side\r\n * @internal\r\n */\r\nfunction create(host) {\r\n    return new EditorSimpleWorker(host, null);\r\n}\r\nif (typeof importScripts === 'function') {\r\n    // Running in a web worker\r\n    globalThis.monaco = (0,_editorBaseApi_js__WEBPACK_IMPORTED_MODULE_8__.createMonacoBaseAPI)();\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findSectionHeaders: () => (/* binding */ findSectionHeaders)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nconst markRegex = new RegExp('\\\\bMARK:\\\\s*(.*)$', 'd');\r\nconst trimDashesRegex = /^-+|-+$/g;\r\n/**\r\n * Find section headers in the model.\r\n *\r\n * @param model the text model to search in\r\n * @param options options to search with\r\n * @returns an array of section headers\r\n */\r\nfunction findSectionHeaders(model, options) {\r\n    var _a;\r\n    let headers = [];\r\n    if (options.findRegionSectionHeaders && ((_a = options.foldingRules) === null || _a === void 0 ? void 0 : _a.markers)) {\r\n        const regionHeaders = collectRegionHeaders(model, options);\r\n        headers = headers.concat(regionHeaders);\r\n    }\r\n    if (options.findMarkSectionHeaders) {\r\n        const markHeaders = collectMarkHeaders(model);\r\n        headers = headers.concat(markHeaders);\r\n    }\r\n    return headers;\r\n}\r\nfunction collectRegionHeaders(model, options) {\r\n    const regionHeaders = [];\r\n    const endLineNumber = model.getLineCount();\r\n    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\r\n        const lineContent = model.getLineContent(lineNumber);\r\n        const match = lineContent.match(options.foldingRules.markers.start);\r\n        if (match) {\r\n            const range = { startLineNumber: lineNumber, startColumn: match[0].length + 1, endLineNumber: lineNumber, endColumn: lineContent.length + 1 };\r\n            if (range.endColumn > range.startColumn) {\r\n                const sectionHeader = {\r\n                    range,\r\n                    ...getHeaderText(lineContent.substring(match[0].length)),\r\n                    shouldBeInComments: false\r\n                };\r\n                if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\r\n                    regionHeaders.push(sectionHeader);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return regionHeaders;\r\n}\r\nfunction collectMarkHeaders(model) {\r\n    const markHeaders = [];\r\n    const endLineNumber = model.getLineCount();\r\n    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\r\n        const lineContent = model.getLineContent(lineNumber);\r\n        addMarkHeaderIfFound(lineContent, lineNumber, markHeaders);\r\n    }\r\n    return markHeaders;\r\n}\r\nfunction addMarkHeaderIfFound(lineContent, lineNumber, sectionHeaders) {\r\n    markRegex.lastIndex = 0;\r\n    const match = markRegex.exec(lineContent);\r\n    if (match) {\r\n        const column = match.indices[1][0] + 1;\r\n        const endColumn = match.indices[1][1] + 1;\r\n        const range = { startLineNumber: lineNumber, startColumn: column, endLineNumber: lineNumber, endColumn: endColumn };\r\n        if (range.endColumn > range.startColumn) {\r\n            const sectionHeader = {\r\n                range,\r\n                ...getHeaderText(match[1]),\r\n                shouldBeInComments: true\r\n            };\r\n            if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\r\n                sectionHeaders.push(sectionHeader);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction getHeaderText(text) {\r\n    text = text.trim();\r\n    const hasSeparatorLine = text.startsWith('-');\r\n    text = text.replace(trimDashesRegex, '');\r\n    return { text, hasSeparatorLine };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy9maW5kU2VjdGlvbkhlYWRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNkJBQTZCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDZCQUE2QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9jb21tb24vc2VydmljZXMvZmluZFNlY3Rpb25IZWFkZXJzLmpzPzdjODEiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmNvbnN0IG1hcmtSZWdleCA9IG5ldyBSZWdFeHAoJ1xcXFxiTUFSSzpcXFxccyooLiopJCcsICdkJyk7XHJcbmNvbnN0IHRyaW1EYXNoZXNSZWdleCA9IC9eLSt8LSskL2c7XHJcbi8qKlxyXG4gKiBGaW5kIHNlY3Rpb24gaGVhZGVycyBpbiB0aGUgbW9kZWwuXHJcbiAqXHJcbiAqIEBwYXJhbSBtb2RlbCB0aGUgdGV4dCBtb2RlbCB0byBzZWFyY2ggaW5cclxuICogQHBhcmFtIG9wdGlvbnMgb3B0aW9ucyB0byBzZWFyY2ggd2l0aFxyXG4gKiBAcmV0dXJucyBhbiBhcnJheSBvZiBzZWN0aW9uIGhlYWRlcnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kU2VjdGlvbkhlYWRlcnMobW9kZWwsIG9wdGlvbnMpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGxldCBoZWFkZXJzID0gW107XHJcbiAgICBpZiAob3B0aW9ucy5maW5kUmVnaW9uU2VjdGlvbkhlYWRlcnMgJiYgKChfYSA9IG9wdGlvbnMuZm9sZGluZ1J1bGVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFya2VycykpIHtcclxuICAgICAgICBjb25zdCByZWdpb25IZWFkZXJzID0gY29sbGVjdFJlZ2lvbkhlYWRlcnMobW9kZWwsIG9wdGlvbnMpO1xyXG4gICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLmNvbmNhdChyZWdpb25IZWFkZXJzKTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLmZpbmRNYXJrU2VjdGlvbkhlYWRlcnMpIHtcclxuICAgICAgICBjb25zdCBtYXJrSGVhZGVycyA9IGNvbGxlY3RNYXJrSGVhZGVycyhtb2RlbCk7XHJcbiAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuY29uY2F0KG1hcmtIZWFkZXJzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBoZWFkZXJzO1xyXG59XHJcbmZ1bmN0aW9uIGNvbGxlY3RSZWdpb25IZWFkZXJzKG1vZGVsLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCByZWdpb25IZWFkZXJzID0gW107XHJcbiAgICBjb25zdCBlbmRMaW5lTnVtYmVyID0gbW9kZWwuZ2V0TGluZUNvdW50KCk7XHJcbiAgICBmb3IgKGxldCBsaW5lTnVtYmVyID0gMTsgbGluZU51bWJlciA8PSBlbmRMaW5lTnVtYmVyOyBsaW5lTnVtYmVyKyspIHtcclxuICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IG1vZGVsLmdldExpbmVDb250ZW50KGxpbmVOdW1iZXIpO1xyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gbGluZUNvbnRlbnQubWF0Y2gob3B0aW9ucy5mb2xkaW5nUnVsZXMubWFya2Vycy5zdGFydCk7XHJcbiAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0geyBzdGFydExpbmVOdW1iZXI6IGxpbmVOdW1iZXIsIHN0YXJ0Q29sdW1uOiBtYXRjaFswXS5sZW5ndGggKyAxLCBlbmRMaW5lTnVtYmVyOiBsaW5lTnVtYmVyLCBlbmRDb2x1bW46IGxpbmVDb250ZW50Lmxlbmd0aCArIDEgfTtcclxuICAgICAgICAgICAgaWYgKHJhbmdlLmVuZENvbHVtbiA+IHJhbmdlLnN0YXJ0Q29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWN0aW9uSGVhZGVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLFxyXG4gICAgICAgICAgICAgICAgICAgIC4uLmdldEhlYWRlclRleHQobGluZUNvbnRlbnQuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCkpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZEJlSW5Db21tZW50czogZmFsc2VcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VjdGlvbkhlYWRlci50ZXh0IHx8IHNlY3Rpb25IZWFkZXIuaGFzU2VwYXJhdG9yTGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbkhlYWRlcnMucHVzaChzZWN0aW9uSGVhZGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZWdpb25IZWFkZXJzO1xyXG59XHJcbmZ1bmN0aW9uIGNvbGxlY3RNYXJrSGVhZGVycyhtb2RlbCkge1xyXG4gICAgY29uc3QgbWFya0hlYWRlcnMgPSBbXTtcclxuICAgIGNvbnN0IGVuZExpbmVOdW1iZXIgPSBtb2RlbC5nZXRMaW5lQ291bnQoKTtcclxuICAgIGZvciAobGV0IGxpbmVOdW1iZXIgPSAxOyBsaW5lTnVtYmVyIDw9IGVuZExpbmVOdW1iZXI7IGxpbmVOdW1iZXIrKykge1xyXG4gICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gbW9kZWwuZ2V0TGluZUNvbnRlbnQobGluZU51bWJlcik7XHJcbiAgICAgICAgYWRkTWFya0hlYWRlcklmRm91bmQobGluZUNvbnRlbnQsIGxpbmVOdW1iZXIsIG1hcmtIZWFkZXJzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBtYXJrSGVhZGVycztcclxufVxyXG5mdW5jdGlvbiBhZGRNYXJrSGVhZGVySWZGb3VuZChsaW5lQ29udGVudCwgbGluZU51bWJlciwgc2VjdGlvbkhlYWRlcnMpIHtcclxuICAgIG1hcmtSZWdleC5sYXN0SW5kZXggPSAwO1xyXG4gICAgY29uc3QgbWF0Y2ggPSBtYXJrUmVnZXguZXhlYyhsaW5lQ29udGVudCk7XHJcbiAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICBjb25zdCBjb2x1bW4gPSBtYXRjaC5pbmRpY2VzWzFdWzBdICsgMTtcclxuICAgICAgICBjb25zdCBlbmRDb2x1bW4gPSBtYXRjaC5pbmRpY2VzWzFdWzFdICsgMTtcclxuICAgICAgICBjb25zdCByYW5nZSA9IHsgc3RhcnRMaW5lTnVtYmVyOiBsaW5lTnVtYmVyLCBzdGFydENvbHVtbjogY29sdW1uLCBlbmRMaW5lTnVtYmVyOiBsaW5lTnVtYmVyLCBlbmRDb2x1bW46IGVuZENvbHVtbiB9O1xyXG4gICAgICAgIGlmIChyYW5nZS5lbmRDb2x1bW4gPiByYW5nZS5zdGFydENvbHVtbikge1xyXG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uSGVhZGVyID0ge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgICAgICAgICAuLi5nZXRIZWFkZXJUZXh0KG1hdGNoWzFdKSxcclxuICAgICAgICAgICAgICAgIHNob3VsZEJlSW5Db21tZW50czogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoc2VjdGlvbkhlYWRlci50ZXh0IHx8IHNlY3Rpb25IZWFkZXIuaGFzU2VwYXJhdG9yTGluZSkge1xyXG4gICAgICAgICAgICAgICAgc2VjdGlvbkhlYWRlcnMucHVzaChzZWN0aW9uSGVhZGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRIZWFkZXJUZXh0KHRleHQpIHtcclxuICAgIHRleHQgPSB0ZXh0LnRyaW0oKTtcclxuICAgIGNvbnN0IGhhc1NlcGFyYXRvckxpbmUgPSB0ZXh0LnN0YXJ0c1dpdGgoJy0nKTtcclxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UodHJpbURhc2hlc1JlZ2V4LCAnJyk7XHJcbiAgICByZXR1cm4geyB0ZXh0LCBoYXNTZXBhcmF0b3JMaW5lIH07XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnicodeTextModelHighlighter: () => (/* binding */ UnicodeTextModelHighlighter)\n/* harmony export */ });\n/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/range.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/range.js\");\n/* harmony import */ var _model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/textModelSearch.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js\");\n/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/strings.js */ \"./node_modules/monaco-editor/esm/vs/base/common/strings.js\");\n/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/assert.js */ \"./node_modules/monaco-editor/esm/vs/base/common/assert.js\");\n/* harmony import */ var _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/wordHelper.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n\r\n\r\nclass UnicodeTextModelHighlighter {\r\n    static computeUnicodeHighlights(model, options, range) {\r\n        const startLine = range ? range.startLineNumber : 1;\r\n        const endLine = range ? range.endLineNumber : model.getLineCount();\r\n        const codePointHighlighter = new CodePointHighlighter(options);\r\n        const candidates = codePointHighlighter.getCandidateCodePoints();\r\n        let regex;\r\n        if (candidates === 'allNonBasicAscii') {\r\n            regex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\r\n        }\r\n        else {\r\n            regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\r\n        }\r\n        const searcher = new _model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_1__.Searcher(null, regex);\r\n        const ranges = [];\r\n        let hasMore = false;\r\n        let m;\r\n        let ambiguousCharacterCount = 0;\r\n        let invisibleCharacterCount = 0;\r\n        let nonBasicAsciiCharacterCount = 0;\r\n        forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\r\n            const lineContent = model.getLineContent(lineNumber);\r\n            const lineLength = lineContent.length;\r\n            // Reset regex to search from the beginning\r\n            searcher.reset(0);\r\n            do {\r\n                m = searcher.next(lineContent);\r\n                if (m) {\r\n                    let startIndex = m.index;\r\n                    let endIndex = m.index + m[0].length;\r\n                    // Extend range to entire code point\r\n                    if (startIndex > 0) {\r\n                        const charCodeBefore = lineContent.charCodeAt(startIndex - 1);\r\n                        if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isHighSurrogate(charCodeBefore)) {\r\n                            startIndex--;\r\n                        }\r\n                    }\r\n                    if (endIndex + 1 < lineLength) {\r\n                        const charCodeBefore = lineContent.charCodeAt(endIndex - 1);\r\n                        if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isHighSurrogate(charCodeBefore)) {\r\n                            endIndex++;\r\n                        }\r\n                    }\r\n                    const str = lineContent.substring(startIndex, endIndex);\r\n                    let word = (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.getWordAtText)(startIndex + 1, _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_WORD_REGEXP, lineContent, 0);\r\n                    if (word && word.endColumn <= startIndex + 1) {\r\n                        // The word does not include the problematic character, ignore the word\r\n                        word = null;\r\n                    }\r\n                    const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\r\n                    if (highlightReason !== 0 /* SimpleHighlightReason.None */) {\r\n                        if (highlightReason === 3 /* SimpleHighlightReason.Ambiguous */) {\r\n                            ambiguousCharacterCount++;\r\n                        }\r\n                        else if (highlightReason === 2 /* SimpleHighlightReason.Invisible */) {\r\n                            invisibleCharacterCount++;\r\n                        }\r\n                        else if (highlightReason === 1 /* SimpleHighlightReason.NonBasicASCII */) {\r\n                            nonBasicAsciiCharacterCount++;\r\n                        }\r\n                        else {\r\n                            (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__.assertNever)(highlightReason);\r\n                        }\r\n                        const MAX_RESULT_LENGTH = 1000;\r\n                        if (ranges.length >= MAX_RESULT_LENGTH) {\r\n                            hasMore = true;\r\n                            break forLoop;\r\n                        }\r\n                        ranges.push(new _core_range_js__WEBPACK_IMPORTED_MODULE_0__.Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\r\n                    }\r\n                }\r\n            } while (m);\r\n        }\r\n        return {\r\n            ranges,\r\n            hasMore,\r\n            ambiguousCharacterCount,\r\n            invisibleCharacterCount,\r\n            nonBasicAsciiCharacterCount\r\n        };\r\n    }\r\n    static computeUnicodeHighlightReason(char, options) {\r\n        const codePointHighlighter = new CodePointHighlighter(options);\r\n        const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\r\n        switch (reason) {\r\n            case 0 /* SimpleHighlightReason.None */:\r\n                return null;\r\n            case 2 /* SimpleHighlightReason.Invisible */:\r\n                return { kind: 1 /* UnicodeHighlighterReasonKind.Invisible */ };\r\n            case 3 /* SimpleHighlightReason.Ambiguous */: {\r\n                const codePoint = char.codePointAt(0);\r\n                const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);\r\n                const notAmbiguousInLocales = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getLocales().filter((l) => !_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getInstance(new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));\r\n                return { kind: 0 /* UnicodeHighlighterReasonKind.Ambiguous */, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };\r\n            }\r\n            case 1 /* SimpleHighlightReason.NonBasicASCII */:\r\n                return { kind: 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */ };\r\n        }\r\n    }\r\n}\r\nfunction buildRegExpCharClassExpr(codePoints, flags) {\r\n    const src = `[${_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.escapeRegExpCharacters(codePoints.map((i) => String.fromCodePoint(i)).join(''))}]`;\r\n    return src;\r\n}\r\nclass CodePointHighlighter {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.allowedCodePoints = new Set(options.allowedCodePoints);\r\n        this.ambiguousCharacters = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\r\n    }\r\n    getCandidateCodePoints() {\r\n        if (this.options.nonBasicASCII) {\r\n            return 'allNonBasicAscii';\r\n        }\r\n        const set = new Set();\r\n        if (this.options.invisibleCharacters) {\r\n            for (const cp of _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.codePoints) {\r\n                if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\r\n                    set.add(cp);\r\n                }\r\n            }\r\n        }\r\n        if (this.options.ambiguousCharacters) {\r\n            for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\r\n                set.add(cp);\r\n            }\r\n        }\r\n        for (const cp of this.allowedCodePoints) {\r\n            set.delete(cp);\r\n        }\r\n        return set;\r\n    }\r\n    shouldHighlightNonBasicASCII(character, wordContext) {\r\n        const codePoint = character.codePointAt(0);\r\n        if (this.allowedCodePoints.has(codePoint)) {\r\n            return 0 /* SimpleHighlightReason.None */;\r\n        }\r\n        if (this.options.nonBasicASCII) {\r\n            return 1 /* SimpleHighlightReason.NonBasicASCII */;\r\n        }\r\n        let hasBasicASCIICharacters = false;\r\n        let hasNonConfusableNonBasicAsciiCharacter = false;\r\n        if (wordContext) {\r\n            for (const char of wordContext) {\r\n                const codePoint = char.codePointAt(0);\r\n                const isBasicASCII = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isBasicASCII(char);\r\n                hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\r\n                if (!isBasicASCII &&\r\n                    !this.ambiguousCharacters.isAmbiguous(codePoint) &&\r\n                    !_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\r\n                    hasNonConfusableNonBasicAsciiCharacter = true;\r\n                }\r\n            }\r\n        }\r\n        if (\r\n        /* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\r\n            /* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter) {\r\n            return 0 /* SimpleHighlightReason.None */;\r\n        }\r\n        if (this.options.invisibleCharacters) {\r\n            // TODO check for emojis\r\n            if (!isAllowedInvisibleCharacter(character) && _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\r\n                return 2 /* SimpleHighlightReason.Invisible */;\r\n            }\r\n        }\r\n        if (this.options.ambiguousCharacters) {\r\n            if (this.ambiguousCharacters.isAmbiguous(codePoint)) {\r\n                return 3 /* SimpleHighlightReason.Ambiguous */;\r\n            }\r\n        }\r\n        return 0 /* SimpleHighlightReason.None */;\r\n    }\r\n}\r\nfunction isAllowedInvisibleCharacter(character) {\r\n    return character === ' ' || character === '\\n' || character === '\\t';\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessibilitySupport: () => (/* binding */ AccessibilitySupport),\n/* harmony export */   CodeActionTriggerType: () => (/* binding */ CodeActionTriggerType),\n/* harmony export */   CompletionItemInsertTextRule: () => (/* binding */ CompletionItemInsertTextRule),\n/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),\n/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),\n/* harmony export */   CompletionTriggerKind: () => (/* binding */ CompletionTriggerKind),\n/* harmony export */   ContentWidgetPositionPreference: () => (/* binding */ ContentWidgetPositionPreference),\n/* harmony export */   CursorChangeReason: () => (/* binding */ CursorChangeReason),\n/* harmony export */   DefaultEndOfLine: () => (/* binding */ DefaultEndOfLine),\n/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),\n/* harmony export */   EditorAutoIndentStrategy: () => (/* binding */ EditorAutoIndentStrategy),\n/* harmony export */   EditorOption: () => (/* binding */ EditorOption),\n/* harmony export */   EndOfLinePreference: () => (/* binding */ EndOfLinePreference),\n/* harmony export */   EndOfLineSequence: () => (/* binding */ EndOfLineSequence),\n/* harmony export */   GlyphMarginLane: () => (/* binding */ GlyphMarginLane),\n/* harmony export */   HoverVerbosityAction: () => (/* binding */ HoverVerbosityAction),\n/* harmony export */   IndentAction: () => (/* binding */ IndentAction),\n/* harmony export */   InjectedTextCursorStops: () => (/* binding */ InjectedTextCursorStops),\n/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),\n/* harmony export */   InlineCompletionTriggerKind: () => (/* binding */ InlineCompletionTriggerKind),\n/* harmony export */   InlineEditTriggerKind: () => (/* binding */ InlineEditTriggerKind),\n/* harmony export */   KeyCode: () => (/* binding */ KeyCode),\n/* harmony export */   MarkerSeverity: () => (/* binding */ MarkerSeverity),\n/* harmony export */   MarkerTag: () => (/* binding */ MarkerTag),\n/* harmony export */   MinimapPosition: () => (/* binding */ MinimapPosition),\n/* harmony export */   MinimapSectionHeaderStyle: () => (/* binding */ MinimapSectionHeaderStyle),\n/* harmony export */   MouseTargetType: () => (/* binding */ MouseTargetType),\n/* harmony export */   NewSymbolNameTag: () => (/* binding */ NewSymbolNameTag),\n/* harmony export */   NewSymbolNameTriggerKind: () => (/* binding */ NewSymbolNameTriggerKind),\n/* harmony export */   OverlayWidgetPositionPreference: () => (/* binding */ OverlayWidgetPositionPreference),\n/* harmony export */   OverviewRulerLane: () => (/* binding */ OverviewRulerLane),\n/* harmony export */   PartialAcceptTriggerKind: () => (/* binding */ PartialAcceptTriggerKind),\n/* harmony export */   PositionAffinity: () => (/* binding */ PositionAffinity),\n/* harmony export */   RenderLineNumbersType: () => (/* binding */ RenderLineNumbersType),\n/* harmony export */   RenderMinimap: () => (/* binding */ RenderMinimap),\n/* harmony export */   ScrollType: () => (/* binding */ ScrollType),\n/* harmony export */   ScrollbarVisibility: () => (/* binding */ ScrollbarVisibility),\n/* harmony export */   SelectionDirection: () => (/* binding */ SelectionDirection),\n/* harmony export */   ShowLightbulbIconMode: () => (/* binding */ ShowLightbulbIconMode),\n/* harmony export */   SignatureHelpTriggerKind: () => (/* binding */ SignatureHelpTriggerKind),\n/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),\n/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),\n/* harmony export */   TextEditorCursorBlinkingStyle: () => (/* binding */ TextEditorCursorBlinkingStyle),\n/* harmony export */   TextEditorCursorStyle: () => (/* binding */ TextEditorCursorStyle),\n/* harmony export */   TrackedRangeStickiness: () => (/* binding */ TrackedRangeStickiness),\n/* harmony export */   WrappingIndent: () => (/* binding */ WrappingIndent)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.\r\nvar AccessibilitySupport;\r\n(function (AccessibilitySupport) {\r\n    /**\r\n     * This should be the browser case where it is not known if a screen reader is attached or no.\r\n     */\r\n    AccessibilitySupport[AccessibilitySupport[\"Unknown\"] = 0] = \"Unknown\";\r\n    AccessibilitySupport[AccessibilitySupport[\"Disabled\"] = 1] = \"Disabled\";\r\n    AccessibilitySupport[AccessibilitySupport[\"Enabled\"] = 2] = \"Enabled\";\r\n})(AccessibilitySupport || (AccessibilitySupport = {}));\r\nvar CodeActionTriggerType;\r\n(function (CodeActionTriggerType) {\r\n    CodeActionTriggerType[CodeActionTriggerType[\"Invoke\"] = 1] = \"Invoke\";\r\n    CodeActionTriggerType[CodeActionTriggerType[\"Auto\"] = 2] = \"Auto\";\r\n})(CodeActionTriggerType || (CodeActionTriggerType = {}));\r\nvar CompletionItemInsertTextRule;\r\n(function (CompletionItemInsertTextRule) {\r\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Adjust whitespace/indentation of multiline insert texts to\r\n     * match the current line indentation.\r\n     */\r\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"KeepWhitespace\"] = 1] = \"KeepWhitespace\";\r\n    /**\r\n     * `insertText` is a snippet.\r\n     */\r\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"InsertAsSnippet\"] = 4] = \"InsertAsSnippet\";\r\n})(CompletionItemInsertTextRule || (CompletionItemInsertTextRule = {}));\r\nvar CompletionItemKind;\r\n(function (CompletionItemKind) {\r\n    CompletionItemKind[CompletionItemKind[\"Method\"] = 0] = \"Method\";\r\n    CompletionItemKind[CompletionItemKind[\"Function\"] = 1] = \"Function\";\r\n    CompletionItemKind[CompletionItemKind[\"Constructor\"] = 2] = \"Constructor\";\r\n    CompletionItemKind[CompletionItemKind[\"Field\"] = 3] = \"Field\";\r\n    CompletionItemKind[CompletionItemKind[\"Variable\"] = 4] = \"Variable\";\r\n    CompletionItemKind[CompletionItemKind[\"Class\"] = 5] = \"Class\";\r\n    CompletionItemKind[CompletionItemKind[\"Struct\"] = 6] = \"Struct\";\r\n    CompletionItemKind[CompletionItemKind[\"Interface\"] = 7] = \"Interface\";\r\n    CompletionItemKind[CompletionItemKind[\"Module\"] = 8] = \"Module\";\r\n    CompletionItemKind[CompletionItemKind[\"Property\"] = 9] = \"Property\";\r\n    CompletionItemKind[CompletionItemKind[\"Event\"] = 10] = \"Event\";\r\n    CompletionItemKind[CompletionItemKind[\"Operator\"] = 11] = \"Operator\";\r\n    CompletionItemKind[CompletionItemKind[\"Unit\"] = 12] = \"Unit\";\r\n    CompletionItemKind[CompletionItemKind[\"Value\"] = 13] = \"Value\";\r\n    CompletionItemKind[CompletionItemKind[\"Constant\"] = 14] = \"Constant\";\r\n    CompletionItemKind[CompletionItemKind[\"Enum\"] = 15] = \"Enum\";\r\n    CompletionItemKind[CompletionItemKind[\"EnumMember\"] = 16] = \"EnumMember\";\r\n    CompletionItemKind[CompletionItemKind[\"Keyword\"] = 17] = \"Keyword\";\r\n    CompletionItemKind[CompletionItemKind[\"Text\"] = 18] = \"Text\";\r\n    CompletionItemKind[CompletionItemKind[\"Color\"] = 19] = \"Color\";\r\n    CompletionItemKind[CompletionItemKind[\"File\"] = 20] = \"File\";\r\n    CompletionItemKind[CompletionItemKind[\"Reference\"] = 21] = \"Reference\";\r\n    CompletionItemKind[CompletionItemKind[\"Customcolor\"] = 22] = \"Customcolor\";\r\n    CompletionItemKind[CompletionItemKind[\"Folder\"] = 23] = \"Folder\";\r\n    CompletionItemKind[CompletionItemKind[\"TypeParameter\"] = 24] = \"TypeParameter\";\r\n    CompletionItemKind[CompletionItemKind[\"User\"] = 25] = \"User\";\r\n    CompletionItemKind[CompletionItemKind[\"Issue\"] = 26] = \"Issue\";\r\n    CompletionItemKind[CompletionItemKind[\"Snippet\"] = 27] = \"Snippet\";\r\n})(CompletionItemKind || (CompletionItemKind = {}));\r\nvar CompletionItemTag;\r\n(function (CompletionItemTag) {\r\n    CompletionItemTag[CompletionItemTag[\"Deprecated\"] = 1] = \"Deprecated\";\r\n})(CompletionItemTag || (CompletionItemTag = {}));\r\n/**\r\n * How a suggest provider was triggered.\r\n */\r\nvar CompletionTriggerKind;\r\n(function (CompletionTriggerKind) {\r\n    CompletionTriggerKind[CompletionTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\r\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerCharacter\"] = 1] = \"TriggerCharacter\";\r\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerForIncompleteCompletions\"] = 2] = \"TriggerForIncompleteCompletions\";\r\n})(CompletionTriggerKind || (CompletionTriggerKind = {}));\r\n/**\r\n * A positioning preference for rendering content widgets.\r\n */\r\nvar ContentWidgetPositionPreference;\r\n(function (ContentWidgetPositionPreference) {\r\n    /**\r\n     * Place the content widget exactly at a position\r\n     */\r\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"EXACT\"] = 0] = \"EXACT\";\r\n    /**\r\n     * Place the content widget above a position\r\n     */\r\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"ABOVE\"] = 1] = \"ABOVE\";\r\n    /**\r\n     * Place the content widget below a position\r\n     */\r\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"BELOW\"] = 2] = \"BELOW\";\r\n})(ContentWidgetPositionPreference || (ContentWidgetPositionPreference = {}));\r\n/**\r\n * Describes the reason the cursor has changed its position.\r\n */\r\nvar CursorChangeReason;\r\n(function (CursorChangeReason) {\r\n    /**\r\n     * Unknown or not set.\r\n     */\r\n    CursorChangeReason[CursorChangeReason[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * A `model.setValue()` was called.\r\n     */\r\n    CursorChangeReason[CursorChangeReason[\"ContentFlush\"] = 1] = \"ContentFlush\";\r\n    /**\r\n     * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.\r\n     */\r\n    CursorChangeReason[CursorChangeReason[\"RecoverFromMarkers\"] = 2] = \"RecoverFromMarkers\";\r\n    /**\r\n     * There was an explicit user gesture.\r\n     */\r\n    CursorChangeReason[CursorChangeReason[\"Explicit\"] = 3] = \"Explicit\";\r\n    /**\r\n     * There was a Paste.\r\n     */\r\n    CursorChangeReason[CursorChangeReason[\"Paste\"] = 4] = \"Paste\";\r\n    /**\r\n     * There was an Undo.\r\n     */\r\n    CursorChangeReason[CursorChangeReason[\"Undo\"] = 5] = \"Undo\";\r\n    /**\r\n     * There was a Redo.\r\n     */\r\n    CursorChangeReason[CursorChangeReason[\"Redo\"] = 6] = \"Redo\";\r\n})(CursorChangeReason || (CursorChangeReason = {}));\r\n/**\r\n * The default end of line to use when instantiating models.\r\n */\r\nvar DefaultEndOfLine;\r\n(function (DefaultEndOfLine) {\r\n    /**\r\n     * Use line feed (\\n) as the end of line character.\r\n     */\r\n    DefaultEndOfLine[DefaultEndOfLine[\"LF\"] = 1] = \"LF\";\r\n    /**\r\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\r\n     */\r\n    DefaultEndOfLine[DefaultEndOfLine[\"CRLF\"] = 2] = \"CRLF\";\r\n})(DefaultEndOfLine || (DefaultEndOfLine = {}));\r\n/**\r\n * A document highlight kind.\r\n */\r\nvar DocumentHighlightKind;\r\n(function (DocumentHighlightKind) {\r\n    /**\r\n     * A textual occurrence.\r\n     */\r\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\r\n    /**\r\n     * Read-access of a symbol, like reading a variable.\r\n     */\r\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\r\n    /**\r\n     * Write-access of a symbol, like writing to a variable.\r\n     */\r\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\r\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\r\n/**\r\n * Configuration options for auto indentation in the editor\r\n */\r\nvar EditorAutoIndentStrategy;\r\n(function (EditorAutoIndentStrategy) {\r\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"None\"] = 0] = \"None\";\r\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Keep\"] = 1] = \"Keep\";\r\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Brackets\"] = 2] = \"Brackets\";\r\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Advanced\"] = 3] = \"Advanced\";\r\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Full\"] = 4] = \"Full\";\r\n})(EditorAutoIndentStrategy || (EditorAutoIndentStrategy = {}));\r\nvar EditorOption;\r\n(function (EditorOption) {\r\n    EditorOption[EditorOption[\"acceptSuggestionOnCommitCharacter\"] = 0] = \"acceptSuggestionOnCommitCharacter\";\r\n    EditorOption[EditorOption[\"acceptSuggestionOnEnter\"] = 1] = \"acceptSuggestionOnEnter\";\r\n    EditorOption[EditorOption[\"accessibilitySupport\"] = 2] = \"accessibilitySupport\";\r\n    EditorOption[EditorOption[\"accessibilityPageSize\"] = 3] = \"accessibilityPageSize\";\r\n    EditorOption[EditorOption[\"ariaLabel\"] = 4] = \"ariaLabel\";\r\n    EditorOption[EditorOption[\"ariaRequired\"] = 5] = \"ariaRequired\";\r\n    EditorOption[EditorOption[\"autoClosingBrackets\"] = 6] = \"autoClosingBrackets\";\r\n    EditorOption[EditorOption[\"autoClosingComments\"] = 7] = \"autoClosingComments\";\r\n    EditorOption[EditorOption[\"screenReaderAnnounceInlineSuggestion\"] = 8] = \"screenReaderAnnounceInlineSuggestion\";\r\n    EditorOption[EditorOption[\"autoClosingDelete\"] = 9] = \"autoClosingDelete\";\r\n    EditorOption[EditorOption[\"autoClosingOvertype\"] = 10] = \"autoClosingOvertype\";\r\n    EditorOption[EditorOption[\"autoClosingQuotes\"] = 11] = \"autoClosingQuotes\";\r\n    EditorOption[EditorOption[\"autoIndent\"] = 12] = \"autoIndent\";\r\n    EditorOption[EditorOption[\"automaticLayout\"] = 13] = \"automaticLayout\";\r\n    EditorOption[EditorOption[\"autoSurround\"] = 14] = \"autoSurround\";\r\n    EditorOption[EditorOption[\"bracketPairColorization\"] = 15] = \"bracketPairColorization\";\r\n    EditorOption[EditorOption[\"guides\"] = 16] = \"guides\";\r\n    EditorOption[EditorOption[\"codeLens\"] = 17] = \"codeLens\";\r\n    EditorOption[EditorOption[\"codeLensFontFamily\"] = 18] = \"codeLensFontFamily\";\r\n    EditorOption[EditorOption[\"codeLensFontSize\"] = 19] = \"codeLensFontSize\";\r\n    EditorOption[EditorOption[\"colorDecorators\"] = 20] = \"colorDecorators\";\r\n    EditorOption[EditorOption[\"colorDecoratorsLimit\"] = 21] = \"colorDecoratorsLimit\";\r\n    EditorOption[EditorOption[\"columnSelection\"] = 22] = \"columnSelection\";\r\n    EditorOption[EditorOption[\"comments\"] = 23] = \"comments\";\r\n    EditorOption[EditorOption[\"contextmenu\"] = 24] = \"contextmenu\";\r\n    EditorOption[EditorOption[\"copyWithSyntaxHighlighting\"] = 25] = \"copyWithSyntaxHighlighting\";\r\n    EditorOption[EditorOption[\"cursorBlinking\"] = 26] = \"cursorBlinking\";\r\n    EditorOption[EditorOption[\"cursorSmoothCaretAnimation\"] = 27] = \"cursorSmoothCaretAnimation\";\r\n    EditorOption[EditorOption[\"cursorStyle\"] = 28] = \"cursorStyle\";\r\n    EditorOption[EditorOption[\"cursorSurroundingLines\"] = 29] = \"cursorSurroundingLines\";\r\n    EditorOption[EditorOption[\"cursorSurroundingLinesStyle\"] = 30] = \"cursorSurroundingLinesStyle\";\r\n    EditorOption[EditorOption[\"cursorWidth\"] = 31] = \"cursorWidth\";\r\n    EditorOption[EditorOption[\"disableLayerHinting\"] = 32] = \"disableLayerHinting\";\r\n    EditorOption[EditorOption[\"disableMonospaceOptimizations\"] = 33] = \"disableMonospaceOptimizations\";\r\n    EditorOption[EditorOption[\"domReadOnly\"] = 34] = \"domReadOnly\";\r\n    EditorOption[EditorOption[\"dragAndDrop\"] = 35] = \"dragAndDrop\";\r\n    EditorOption[EditorOption[\"dropIntoEditor\"] = 36] = \"dropIntoEditor\";\r\n    EditorOption[EditorOption[\"emptySelectionClipboard\"] = 37] = \"emptySelectionClipboard\";\r\n    EditorOption[EditorOption[\"experimentalWhitespaceRendering\"] = 38] = \"experimentalWhitespaceRendering\";\r\n    EditorOption[EditorOption[\"extraEditorClassName\"] = 39] = \"extraEditorClassName\";\r\n    EditorOption[EditorOption[\"fastScrollSensitivity\"] = 40] = \"fastScrollSensitivity\";\r\n    EditorOption[EditorOption[\"find\"] = 41] = \"find\";\r\n    EditorOption[EditorOption[\"fixedOverflowWidgets\"] = 42] = \"fixedOverflowWidgets\";\r\n    EditorOption[EditorOption[\"folding\"] = 43] = \"folding\";\r\n    EditorOption[EditorOption[\"foldingStrategy\"] = 44] = \"foldingStrategy\";\r\n    EditorOption[EditorOption[\"foldingHighlight\"] = 45] = \"foldingHighlight\";\r\n    EditorOption[EditorOption[\"foldingImportsByDefault\"] = 46] = \"foldingImportsByDefault\";\r\n    EditorOption[EditorOption[\"foldingMaximumRegions\"] = 47] = \"foldingMaximumRegions\";\r\n    EditorOption[EditorOption[\"unfoldOnClickAfterEndOfLine\"] = 48] = \"unfoldOnClickAfterEndOfLine\";\r\n    EditorOption[EditorOption[\"fontFamily\"] = 49] = \"fontFamily\";\r\n    EditorOption[EditorOption[\"fontInfo\"] = 50] = \"fontInfo\";\r\n    EditorOption[EditorOption[\"fontLigatures\"] = 51] = \"fontLigatures\";\r\n    EditorOption[EditorOption[\"fontSize\"] = 52] = \"fontSize\";\r\n    EditorOption[EditorOption[\"fontWeight\"] = 53] = \"fontWeight\";\r\n    EditorOption[EditorOption[\"fontVariations\"] = 54] = \"fontVariations\";\r\n    EditorOption[EditorOption[\"formatOnPaste\"] = 55] = \"formatOnPaste\";\r\n    EditorOption[EditorOption[\"formatOnType\"] = 56] = \"formatOnType\";\r\n    EditorOption[EditorOption[\"glyphMargin\"] = 57] = \"glyphMargin\";\r\n    EditorOption[EditorOption[\"gotoLocation\"] = 58] = \"gotoLocation\";\r\n    EditorOption[EditorOption[\"hideCursorInOverviewRuler\"] = 59] = \"hideCursorInOverviewRuler\";\r\n    EditorOption[EditorOption[\"hover\"] = 60] = \"hover\";\r\n    EditorOption[EditorOption[\"inDiffEditor\"] = 61] = \"inDiffEditor\";\r\n    EditorOption[EditorOption[\"inlineSuggest\"] = 62] = \"inlineSuggest\";\r\n    EditorOption[EditorOption[\"inlineEdit\"] = 63] = \"inlineEdit\";\r\n    EditorOption[EditorOption[\"letterSpacing\"] = 64] = \"letterSpacing\";\r\n    EditorOption[EditorOption[\"lightbulb\"] = 65] = \"lightbulb\";\r\n    EditorOption[EditorOption[\"lineDecorationsWidth\"] = 66] = \"lineDecorationsWidth\";\r\n    EditorOption[EditorOption[\"lineHeight\"] = 67] = \"lineHeight\";\r\n    EditorOption[EditorOption[\"lineNumbers\"] = 68] = \"lineNumbers\";\r\n    EditorOption[EditorOption[\"lineNumbersMinChars\"] = 69] = \"lineNumbersMinChars\";\r\n    EditorOption[EditorOption[\"linkedEditing\"] = 70] = \"linkedEditing\";\r\n    EditorOption[EditorOption[\"links\"] = 71] = \"links\";\r\n    EditorOption[EditorOption[\"matchBrackets\"] = 72] = \"matchBrackets\";\r\n    EditorOption[EditorOption[\"minimap\"] = 73] = \"minimap\";\r\n    EditorOption[EditorOption[\"mouseStyle\"] = 74] = \"mouseStyle\";\r\n    EditorOption[EditorOption[\"mouseWheelScrollSensitivity\"] = 75] = \"mouseWheelScrollSensitivity\";\r\n    EditorOption[EditorOption[\"mouseWheelZoom\"] = 76] = \"mouseWheelZoom\";\r\n    EditorOption[EditorOption[\"multiCursorMergeOverlapping\"] = 77] = \"multiCursorMergeOverlapping\";\r\n    EditorOption[EditorOption[\"multiCursorModifier\"] = 78] = \"multiCursorModifier\";\r\n    EditorOption[EditorOption[\"multiCursorPaste\"] = 79] = \"multiCursorPaste\";\r\n    EditorOption[EditorOption[\"multiCursorLimit\"] = 80] = \"multiCursorLimit\";\r\n    EditorOption[EditorOption[\"occurrencesHighlight\"] = 81] = \"occurrencesHighlight\";\r\n    EditorOption[EditorOption[\"overviewRulerBorder\"] = 82] = \"overviewRulerBorder\";\r\n    EditorOption[EditorOption[\"overviewRulerLanes\"] = 83] = \"overviewRulerLanes\";\r\n    EditorOption[EditorOption[\"padding\"] = 84] = \"padding\";\r\n    EditorOption[EditorOption[\"pasteAs\"] = 85] = \"pasteAs\";\r\n    EditorOption[EditorOption[\"parameterHints\"] = 86] = \"parameterHints\";\r\n    EditorOption[EditorOption[\"peekWidgetDefaultFocus\"] = 87] = \"peekWidgetDefaultFocus\";\r\n    EditorOption[EditorOption[\"definitionLinkOpensInPeek\"] = 88] = \"definitionLinkOpensInPeek\";\r\n    EditorOption[EditorOption[\"quickSuggestions\"] = 89] = \"quickSuggestions\";\r\n    EditorOption[EditorOption[\"quickSuggestionsDelay\"] = 90] = \"quickSuggestionsDelay\";\r\n    EditorOption[EditorOption[\"readOnly\"] = 91] = \"readOnly\";\r\n    EditorOption[EditorOption[\"readOnlyMessage\"] = 92] = \"readOnlyMessage\";\r\n    EditorOption[EditorOption[\"renameOnType\"] = 93] = \"renameOnType\";\r\n    EditorOption[EditorOption[\"renderControlCharacters\"] = 94] = \"renderControlCharacters\";\r\n    EditorOption[EditorOption[\"renderFinalNewline\"] = 95] = \"renderFinalNewline\";\r\n    EditorOption[EditorOption[\"renderLineHighlight\"] = 96] = \"renderLineHighlight\";\r\n    EditorOption[EditorOption[\"renderLineHighlightOnlyWhenFocus\"] = 97] = \"renderLineHighlightOnlyWhenFocus\";\r\n    EditorOption[EditorOption[\"renderValidationDecorations\"] = 98] = \"renderValidationDecorations\";\r\n    EditorOption[EditorOption[\"renderWhitespace\"] = 99] = \"renderWhitespace\";\r\n    EditorOption[EditorOption[\"revealHorizontalRightPadding\"] = 100] = \"revealHorizontalRightPadding\";\r\n    EditorOption[EditorOption[\"roundedSelection\"] = 101] = \"roundedSelection\";\r\n    EditorOption[EditorOption[\"rulers\"] = 102] = \"rulers\";\r\n    EditorOption[EditorOption[\"scrollbar\"] = 103] = \"scrollbar\";\r\n    EditorOption[EditorOption[\"scrollBeyondLastColumn\"] = 104] = \"scrollBeyondLastColumn\";\r\n    EditorOption[EditorOption[\"scrollBeyondLastLine\"] = 105] = \"scrollBeyondLastLine\";\r\n    EditorOption[EditorOption[\"scrollPredominantAxis\"] = 106] = \"scrollPredominantAxis\";\r\n    EditorOption[EditorOption[\"selectionClipboard\"] = 107] = \"selectionClipboard\";\r\n    EditorOption[EditorOption[\"selectionHighlight\"] = 108] = \"selectionHighlight\";\r\n    EditorOption[EditorOption[\"selectOnLineNumbers\"] = 109] = \"selectOnLineNumbers\";\r\n    EditorOption[EditorOption[\"showFoldingControls\"] = 110] = \"showFoldingControls\";\r\n    EditorOption[EditorOption[\"showUnused\"] = 111] = \"showUnused\";\r\n    EditorOption[EditorOption[\"snippetSuggestions\"] = 112] = \"snippetSuggestions\";\r\n    EditorOption[EditorOption[\"smartSelect\"] = 113] = \"smartSelect\";\r\n    EditorOption[EditorOption[\"smoothScrolling\"] = 114] = \"smoothScrolling\";\r\n    EditorOption[EditorOption[\"stickyScroll\"] = 115] = \"stickyScroll\";\r\n    EditorOption[EditorOption[\"stickyTabStops\"] = 116] = \"stickyTabStops\";\r\n    EditorOption[EditorOption[\"stopRenderingLineAfter\"] = 117] = \"stopRenderingLineAfter\";\r\n    EditorOption[EditorOption[\"suggest\"] = 118] = \"suggest\";\r\n    EditorOption[EditorOption[\"suggestFontSize\"] = 119] = \"suggestFontSize\";\r\n    EditorOption[EditorOption[\"suggestLineHeight\"] = 120] = \"suggestLineHeight\";\r\n    EditorOption[EditorOption[\"suggestOnTriggerCharacters\"] = 121] = \"suggestOnTriggerCharacters\";\r\n    EditorOption[EditorOption[\"suggestSelection\"] = 122] = \"suggestSelection\";\r\n    EditorOption[EditorOption[\"tabCompletion\"] = 123] = \"tabCompletion\";\r\n    EditorOption[EditorOption[\"tabIndex\"] = 124] = \"tabIndex\";\r\n    EditorOption[EditorOption[\"unicodeHighlighting\"] = 125] = \"unicodeHighlighting\";\r\n    EditorOption[EditorOption[\"unusualLineTerminators\"] = 126] = \"unusualLineTerminators\";\r\n    EditorOption[EditorOption[\"useShadowDOM\"] = 127] = \"useShadowDOM\";\r\n    EditorOption[EditorOption[\"useTabStops\"] = 128] = \"useTabStops\";\r\n    EditorOption[EditorOption[\"wordBreak\"] = 129] = \"wordBreak\";\r\n    EditorOption[EditorOption[\"wordSegmenterLocales\"] = 130] = \"wordSegmenterLocales\";\r\n    EditorOption[EditorOption[\"wordSeparators\"] = 131] = \"wordSeparators\";\r\n    EditorOption[EditorOption[\"wordWrap\"] = 132] = \"wordWrap\";\r\n    EditorOption[EditorOption[\"wordWrapBreakAfterCharacters\"] = 133] = \"wordWrapBreakAfterCharacters\";\r\n    EditorOption[EditorOption[\"wordWrapBreakBeforeCharacters\"] = 134] = \"wordWrapBreakBeforeCharacters\";\r\n    EditorOption[EditorOption[\"wordWrapColumn\"] = 135] = \"wordWrapColumn\";\r\n    EditorOption[EditorOption[\"wordWrapOverride1\"] = 136] = \"wordWrapOverride1\";\r\n    EditorOption[EditorOption[\"wordWrapOverride2\"] = 137] = \"wordWrapOverride2\";\r\n    EditorOption[EditorOption[\"wrappingIndent\"] = 138] = \"wrappingIndent\";\r\n    EditorOption[EditorOption[\"wrappingStrategy\"] = 139] = \"wrappingStrategy\";\r\n    EditorOption[EditorOption[\"showDeprecated\"] = 140] = \"showDeprecated\";\r\n    EditorOption[EditorOption[\"inlayHints\"] = 141] = \"inlayHints\";\r\n    EditorOption[EditorOption[\"editorClassName\"] = 142] = \"editorClassName\";\r\n    EditorOption[EditorOption[\"pixelRatio\"] = 143] = \"pixelRatio\";\r\n    EditorOption[EditorOption[\"tabFocusMode\"] = 144] = \"tabFocusMode\";\r\n    EditorOption[EditorOption[\"layoutInfo\"] = 145] = \"layoutInfo\";\r\n    EditorOption[EditorOption[\"wrappingInfo\"] = 146] = \"wrappingInfo\";\r\n    EditorOption[EditorOption[\"defaultColorDecorators\"] = 147] = \"defaultColorDecorators\";\r\n    EditorOption[EditorOption[\"colorDecoratorsActivatedOn\"] = 148] = \"colorDecoratorsActivatedOn\";\r\n    EditorOption[EditorOption[\"inlineCompletionsAccessibilityVerbose\"] = 149] = \"inlineCompletionsAccessibilityVerbose\";\r\n})(EditorOption || (EditorOption = {}));\r\n/**\r\n * End of line character preference.\r\n */\r\nvar EndOfLinePreference;\r\n(function (EndOfLinePreference) {\r\n    /**\r\n     * Use the end of line character identified in the text buffer.\r\n     */\r\n    EndOfLinePreference[EndOfLinePreference[\"TextDefined\"] = 0] = \"TextDefined\";\r\n    /**\r\n     * Use line feed (\\n) as the end of line character.\r\n     */\r\n    EndOfLinePreference[EndOfLinePreference[\"LF\"] = 1] = \"LF\";\r\n    /**\r\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\r\n     */\r\n    EndOfLinePreference[EndOfLinePreference[\"CRLF\"] = 2] = \"CRLF\";\r\n})(EndOfLinePreference || (EndOfLinePreference = {}));\r\n/**\r\n * End of line character preference.\r\n */\r\nvar EndOfLineSequence;\r\n(function (EndOfLineSequence) {\r\n    /**\r\n     * Use line feed (\\n) as the end of line character.\r\n     */\r\n    EndOfLineSequence[EndOfLineSequence[\"LF\"] = 0] = \"LF\";\r\n    /**\r\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\r\n     */\r\n    EndOfLineSequence[EndOfLineSequence[\"CRLF\"] = 1] = \"CRLF\";\r\n})(EndOfLineSequence || (EndOfLineSequence = {}));\r\n/**\r\n * Vertical Lane in the glyph margin of the editor.\r\n */\r\nvar GlyphMarginLane;\r\n(function (GlyphMarginLane) {\r\n    GlyphMarginLane[GlyphMarginLane[\"Left\"] = 1] = \"Left\";\r\n    GlyphMarginLane[GlyphMarginLane[\"Center\"] = 2] = \"Center\";\r\n    GlyphMarginLane[GlyphMarginLane[\"Right\"] = 3] = \"Right\";\r\n})(GlyphMarginLane || (GlyphMarginLane = {}));\r\nvar HoverVerbosityAction;\r\n(function (HoverVerbosityAction) {\r\n    /**\r\n     * Increase the verbosity of the hover\r\n     */\r\n    HoverVerbosityAction[HoverVerbosityAction[\"Increase\"] = 0] = \"Increase\";\r\n    /**\r\n     * Decrease the verbosity of the hover\r\n     */\r\n    HoverVerbosityAction[HoverVerbosityAction[\"Decrease\"] = 1] = \"Decrease\";\r\n})(HoverVerbosityAction || (HoverVerbosityAction = {}));\r\n/**\r\n * Describes what to do with the indentation when pressing Enter.\r\n */\r\nvar IndentAction;\r\n(function (IndentAction) {\r\n    /**\r\n     * Insert new line and copy the previous line's indentation.\r\n     */\r\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Insert new line and indent once (relative to the previous line's indentation).\r\n     */\r\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\r\n    /**\r\n     * Insert two new lines:\r\n     *  - the first one indented which will hold the cursor\r\n     *  - the second one at the same indentation level\r\n     */\r\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\r\n    /**\r\n     * Insert new line and outdent once (relative to the previous line's indentation).\r\n     */\r\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\r\n})(IndentAction || (IndentAction = {}));\r\nvar InjectedTextCursorStops;\r\n(function (InjectedTextCursorStops) {\r\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\r\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\r\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\r\n    InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\r\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\r\nvar InlayHintKind;\r\n(function (InlayHintKind) {\r\n    InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\r\n    InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\r\n})(InlayHintKind || (InlayHintKind = {}));\r\n/**\r\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\r\n */\r\nvar InlineCompletionTriggerKind;\r\n(function (InlineCompletionTriggerKind) {\r\n    /**\r\n     * Completion was triggered automatically while editing.\r\n     * It is sufficient to return a single completion item in this case.\r\n     */\r\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\r\n    /**\r\n     * Completion was triggered explicitly by a user gesture.\r\n     * Return multiple completion items to enable cycling through them.\r\n     */\r\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\r\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\r\nvar InlineEditTriggerKind;\r\n(function (InlineEditTriggerKind) {\r\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\r\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\r\n})(InlineEditTriggerKind || (InlineEditTriggerKind = {}));\r\n/**\r\n * Virtual Key Codes, the value does not hold any inherent meaning.\r\n * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\r\n * But these are \"more general\", as they should work across browsers & OS`s.\r\n */\r\nvar KeyCode;\r\n(function (KeyCode) {\r\n    KeyCode[KeyCode[\"DependsOnKbLayout\"] = -1] = \"DependsOnKbLayout\";\r\n    /**\r\n     * Placed first to cover the 0 value of the enum.\r\n     */\r\n    KeyCode[KeyCode[\"Unknown\"] = 0] = \"Unknown\";\r\n    KeyCode[KeyCode[\"Backspace\"] = 1] = \"Backspace\";\r\n    KeyCode[KeyCode[\"Tab\"] = 2] = \"Tab\";\r\n    KeyCode[KeyCode[\"Enter\"] = 3] = \"Enter\";\r\n    KeyCode[KeyCode[\"Shift\"] = 4] = \"Shift\";\r\n    KeyCode[KeyCode[\"Ctrl\"] = 5] = \"Ctrl\";\r\n    KeyCode[KeyCode[\"Alt\"] = 6] = \"Alt\";\r\n    KeyCode[KeyCode[\"PauseBreak\"] = 7] = \"PauseBreak\";\r\n    KeyCode[KeyCode[\"CapsLock\"] = 8] = \"CapsLock\";\r\n    KeyCode[KeyCode[\"Escape\"] = 9] = \"Escape\";\r\n    KeyCode[KeyCode[\"Space\"] = 10] = \"Space\";\r\n    KeyCode[KeyCode[\"PageUp\"] = 11] = \"PageUp\";\r\n    KeyCode[KeyCode[\"PageDown\"] = 12] = \"PageDown\";\r\n    KeyCode[KeyCode[\"End\"] = 13] = \"End\";\r\n    KeyCode[KeyCode[\"Home\"] = 14] = \"Home\";\r\n    KeyCode[KeyCode[\"LeftArrow\"] = 15] = \"LeftArrow\";\r\n    KeyCode[KeyCode[\"UpArrow\"] = 16] = \"UpArrow\";\r\n    KeyCode[KeyCode[\"RightArrow\"] = 17] = \"RightArrow\";\r\n    KeyCode[KeyCode[\"DownArrow\"] = 18] = \"DownArrow\";\r\n    KeyCode[KeyCode[\"Insert\"] = 19] = \"Insert\";\r\n    KeyCode[KeyCode[\"Delete\"] = 20] = \"Delete\";\r\n    KeyCode[KeyCode[\"Digit0\"] = 21] = \"Digit0\";\r\n    KeyCode[KeyCode[\"Digit1\"] = 22] = \"Digit1\";\r\n    KeyCode[KeyCode[\"Digit2\"] = 23] = \"Digit2\";\r\n    KeyCode[KeyCode[\"Digit3\"] = 24] = \"Digit3\";\r\n    KeyCode[KeyCode[\"Digit4\"] = 25] = \"Digit4\";\r\n    KeyCode[KeyCode[\"Digit5\"] = 26] = \"Digit5\";\r\n    KeyCode[KeyCode[\"Digit6\"] = 27] = \"Digit6\";\r\n    KeyCode[KeyCode[\"Digit7\"] = 28] = \"Digit7\";\r\n    KeyCode[KeyCode[\"Digit8\"] = 29] = \"Digit8\";\r\n    KeyCode[KeyCode[\"Digit9\"] = 30] = \"Digit9\";\r\n    KeyCode[KeyCode[\"KeyA\"] = 31] = \"KeyA\";\r\n    KeyCode[KeyCode[\"KeyB\"] = 32] = \"KeyB\";\r\n    KeyCode[KeyCode[\"KeyC\"] = 33] = \"KeyC\";\r\n    KeyCode[KeyCode[\"KeyD\"] = 34] = \"KeyD\";\r\n    KeyCode[KeyCode[\"KeyE\"] = 35] = \"KeyE\";\r\n    KeyCode[KeyCode[\"KeyF\"] = 36] = \"KeyF\";\r\n    KeyCode[KeyCode[\"KeyG\"] = 37] = \"KeyG\";\r\n    KeyCode[KeyCode[\"KeyH\"] = 38] = \"KeyH\";\r\n    KeyCode[KeyCode[\"KeyI\"] = 39] = \"KeyI\";\r\n    KeyCode[KeyCode[\"KeyJ\"] = 40] = \"KeyJ\";\r\n    KeyCode[KeyCode[\"KeyK\"] = 41] = \"KeyK\";\r\n    KeyCode[KeyCode[\"KeyL\"] = 42] = \"KeyL\";\r\n    KeyCode[KeyCode[\"KeyM\"] = 43] = \"KeyM\";\r\n    KeyCode[KeyCode[\"KeyN\"] = 44] = \"KeyN\";\r\n    KeyCode[KeyCode[\"KeyO\"] = 45] = \"KeyO\";\r\n    KeyCode[KeyCode[\"KeyP\"] = 46] = \"KeyP\";\r\n    KeyCode[KeyCode[\"KeyQ\"] = 47] = \"KeyQ\";\r\n    KeyCode[KeyCode[\"KeyR\"] = 48] = \"KeyR\";\r\n    KeyCode[KeyCode[\"KeyS\"] = 49] = \"KeyS\";\r\n    KeyCode[KeyCode[\"KeyT\"] = 50] = \"KeyT\";\r\n    KeyCode[KeyCode[\"KeyU\"] = 51] = \"KeyU\";\r\n    KeyCode[KeyCode[\"KeyV\"] = 52] = \"KeyV\";\r\n    KeyCode[KeyCode[\"KeyW\"] = 53] = \"KeyW\";\r\n    KeyCode[KeyCode[\"KeyX\"] = 54] = \"KeyX\";\r\n    KeyCode[KeyCode[\"KeyY\"] = 55] = \"KeyY\";\r\n    KeyCode[KeyCode[\"KeyZ\"] = 56] = \"KeyZ\";\r\n    KeyCode[KeyCode[\"Meta\"] = 57] = \"Meta\";\r\n    KeyCode[KeyCode[\"ContextMenu\"] = 58] = \"ContextMenu\";\r\n    KeyCode[KeyCode[\"F1\"] = 59] = \"F1\";\r\n    KeyCode[KeyCode[\"F2\"] = 60] = \"F2\";\r\n    KeyCode[KeyCode[\"F3\"] = 61] = \"F3\";\r\n    KeyCode[KeyCode[\"F4\"] = 62] = \"F4\";\r\n    KeyCode[KeyCode[\"F5\"] = 63] = \"F5\";\r\n    KeyCode[KeyCode[\"F6\"] = 64] = \"F6\";\r\n    KeyCode[KeyCode[\"F7\"] = 65] = \"F7\";\r\n    KeyCode[KeyCode[\"F8\"] = 66] = \"F8\";\r\n    KeyCode[KeyCode[\"F9\"] = 67] = \"F9\";\r\n    KeyCode[KeyCode[\"F10\"] = 68] = \"F10\";\r\n    KeyCode[KeyCode[\"F11\"] = 69] = \"F11\";\r\n    KeyCode[KeyCode[\"F12\"] = 70] = \"F12\";\r\n    KeyCode[KeyCode[\"F13\"] = 71] = \"F13\";\r\n    KeyCode[KeyCode[\"F14\"] = 72] = \"F14\";\r\n    KeyCode[KeyCode[\"F15\"] = 73] = \"F15\";\r\n    KeyCode[KeyCode[\"F16\"] = 74] = \"F16\";\r\n    KeyCode[KeyCode[\"F17\"] = 75] = \"F17\";\r\n    KeyCode[KeyCode[\"F18\"] = 76] = \"F18\";\r\n    KeyCode[KeyCode[\"F19\"] = 77] = \"F19\";\r\n    KeyCode[KeyCode[\"F20\"] = 78] = \"F20\";\r\n    KeyCode[KeyCode[\"F21\"] = 79] = \"F21\";\r\n    KeyCode[KeyCode[\"F22\"] = 80] = \"F22\";\r\n    KeyCode[KeyCode[\"F23\"] = 81] = \"F23\";\r\n    KeyCode[KeyCode[\"F24\"] = 82] = \"F24\";\r\n    KeyCode[KeyCode[\"NumLock\"] = 83] = \"NumLock\";\r\n    KeyCode[KeyCode[\"ScrollLock\"] = 84] = \"ScrollLock\";\r\n    /**\r\n     * Used for miscellaneous characters; it can vary by keyboard.\r\n     * For the US standard keyboard, the ';:' key\r\n     */\r\n    KeyCode[KeyCode[\"Semicolon\"] = 85] = \"Semicolon\";\r\n    /**\r\n     * For any country/region, the '+' key\r\n     * For the US standard keyboard, the '=+' key\r\n     */\r\n    KeyCode[KeyCode[\"Equal\"] = 86] = \"Equal\";\r\n    /**\r\n     * For any country/region, the ',' key\r\n     * For the US standard keyboard, the ',<' key\r\n     */\r\n    KeyCode[KeyCode[\"Comma\"] = 87] = \"Comma\";\r\n    /**\r\n     * For any country/region, the '-' key\r\n     * For the US standard keyboard, the '-_' key\r\n     */\r\n    KeyCode[KeyCode[\"Minus\"] = 88] = \"Minus\";\r\n    /**\r\n     * For any country/region, the '.' key\r\n     * For the US standard keyboard, the '.>' key\r\n     */\r\n    KeyCode[KeyCode[\"Period\"] = 89] = \"Period\";\r\n    /**\r\n     * Used for miscellaneous characters; it can vary by keyboard.\r\n     * For the US standard keyboard, the '/?' key\r\n     */\r\n    KeyCode[KeyCode[\"Slash\"] = 90] = \"Slash\";\r\n    /**\r\n     * Used for miscellaneous characters; it can vary by keyboard.\r\n     * For the US standard keyboard, the '`~' key\r\n     */\r\n    KeyCode[KeyCode[\"Backquote\"] = 91] = \"Backquote\";\r\n    /**\r\n     * Used for miscellaneous characters; it can vary by keyboard.\r\n     * For the US standard keyboard, the '[{' key\r\n     */\r\n    KeyCode[KeyCode[\"BracketLeft\"] = 92] = \"BracketLeft\";\r\n    /**\r\n     * Used for miscellaneous characters; it can vary by keyboard.\r\n     * For the US standard keyboard, the '\\|' key\r\n     */\r\n    KeyCode[KeyCode[\"Backslash\"] = 93] = \"Backslash\";\r\n    /**\r\n     * Used for miscellaneous characters; it can vary by keyboard.\r\n     * For the US standard keyboard, the ']}' key\r\n     */\r\n    KeyCode[KeyCode[\"BracketRight\"] = 94] = \"BracketRight\";\r\n    /**\r\n     * Used for miscellaneous characters; it can vary by keyboard.\r\n     * For the US standard keyboard, the ''\"' key\r\n     */\r\n    KeyCode[KeyCode[\"Quote\"] = 95] = \"Quote\";\r\n    /**\r\n     * Used for miscellaneous characters; it can vary by keyboard.\r\n     */\r\n    KeyCode[KeyCode[\"OEM_8\"] = 96] = \"OEM_8\";\r\n    /**\r\n     * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\r\n     */\r\n    KeyCode[KeyCode[\"IntlBackslash\"] = 97] = \"IntlBackslash\";\r\n    KeyCode[KeyCode[\"Numpad0\"] = 98] = \"Numpad0\";\r\n    KeyCode[KeyCode[\"Numpad1\"] = 99] = \"Numpad1\";\r\n    KeyCode[KeyCode[\"Numpad2\"] = 100] = \"Numpad2\";\r\n    KeyCode[KeyCode[\"Numpad3\"] = 101] = \"Numpad3\";\r\n    KeyCode[KeyCode[\"Numpad4\"] = 102] = \"Numpad4\";\r\n    KeyCode[KeyCode[\"Numpad5\"] = 103] = \"Numpad5\";\r\n    KeyCode[KeyCode[\"Numpad6\"] = 104] = \"Numpad6\";\r\n    KeyCode[KeyCode[\"Numpad7\"] = 105] = \"Numpad7\";\r\n    KeyCode[KeyCode[\"Numpad8\"] = 106] = \"Numpad8\";\r\n    KeyCode[KeyCode[\"Numpad9\"] = 107] = \"Numpad9\";\r\n    KeyCode[KeyCode[\"NumpadMultiply\"] = 108] = \"NumpadMultiply\";\r\n    KeyCode[KeyCode[\"NumpadAdd\"] = 109] = \"NumpadAdd\";\r\n    KeyCode[KeyCode[\"NUMPAD_SEPARATOR\"] = 110] = \"NUMPAD_SEPARATOR\";\r\n    KeyCode[KeyCode[\"NumpadSubtract\"] = 111] = \"NumpadSubtract\";\r\n    KeyCode[KeyCode[\"NumpadDecimal\"] = 112] = \"NumpadDecimal\";\r\n    KeyCode[KeyCode[\"NumpadDivide\"] = 113] = \"NumpadDivide\";\r\n    /**\r\n     * Cover all key codes when IME is processing input.\r\n     */\r\n    KeyCode[KeyCode[\"KEY_IN_COMPOSITION\"] = 114] = \"KEY_IN_COMPOSITION\";\r\n    KeyCode[KeyCode[\"ABNT_C1\"] = 115] = \"ABNT_C1\";\r\n    KeyCode[KeyCode[\"ABNT_C2\"] = 116] = \"ABNT_C2\";\r\n    KeyCode[KeyCode[\"AudioVolumeMute\"] = 117] = \"AudioVolumeMute\";\r\n    KeyCode[KeyCode[\"AudioVolumeUp\"] = 118] = \"AudioVolumeUp\";\r\n    KeyCode[KeyCode[\"AudioVolumeDown\"] = 119] = \"AudioVolumeDown\";\r\n    KeyCode[KeyCode[\"BrowserSearch\"] = 120] = \"BrowserSearch\";\r\n    KeyCode[KeyCode[\"BrowserHome\"] = 121] = \"BrowserHome\";\r\n    KeyCode[KeyCode[\"BrowserBack\"] = 122] = \"BrowserBack\";\r\n    KeyCode[KeyCode[\"BrowserForward\"] = 123] = \"BrowserForward\";\r\n    KeyCode[KeyCode[\"MediaTrackNext\"] = 124] = \"MediaTrackNext\";\r\n    KeyCode[KeyCode[\"MediaTrackPrevious\"] = 125] = \"MediaTrackPrevious\";\r\n    KeyCode[KeyCode[\"MediaStop\"] = 126] = \"MediaStop\";\r\n    KeyCode[KeyCode[\"MediaPlayPause\"] = 127] = \"MediaPlayPause\";\r\n    KeyCode[KeyCode[\"LaunchMediaPlayer\"] = 128] = \"LaunchMediaPlayer\";\r\n    KeyCode[KeyCode[\"LaunchMail\"] = 129] = \"LaunchMail\";\r\n    KeyCode[KeyCode[\"LaunchApp2\"] = 130] = \"LaunchApp2\";\r\n    /**\r\n     * VK_CLEAR, 0x0C, CLEAR key\r\n     */\r\n    KeyCode[KeyCode[\"Clear\"] = 131] = \"Clear\";\r\n    /**\r\n     * Placed last to cover the length of the enum.\r\n     * Please do not depend on this value!\r\n     */\r\n    KeyCode[KeyCode[\"MAX_VALUE\"] = 132] = \"MAX_VALUE\";\r\n})(KeyCode || (KeyCode = {}));\r\nvar MarkerSeverity;\r\n(function (MarkerSeverity) {\r\n    MarkerSeverity[MarkerSeverity[\"Hint\"] = 1] = \"Hint\";\r\n    MarkerSeverity[MarkerSeverity[\"Info\"] = 2] = \"Info\";\r\n    MarkerSeverity[MarkerSeverity[\"Warning\"] = 4] = \"Warning\";\r\n    MarkerSeverity[MarkerSeverity[\"Error\"] = 8] = \"Error\";\r\n})(MarkerSeverity || (MarkerSeverity = {}));\r\nvar MarkerTag;\r\n(function (MarkerTag) {\r\n    MarkerTag[MarkerTag[\"Unnecessary\"] = 1] = \"Unnecessary\";\r\n    MarkerTag[MarkerTag[\"Deprecated\"] = 2] = \"Deprecated\";\r\n})(MarkerTag || (MarkerTag = {}));\r\n/**\r\n * Position in the minimap to render the decoration.\r\n */\r\nvar MinimapPosition;\r\n(function (MinimapPosition) {\r\n    MinimapPosition[MinimapPosition[\"Inline\"] = 1] = \"Inline\";\r\n    MinimapPosition[MinimapPosition[\"Gutter\"] = 2] = \"Gutter\";\r\n})(MinimapPosition || (MinimapPosition = {}));\r\n/**\r\n * Section header style.\r\n */\r\nvar MinimapSectionHeaderStyle;\r\n(function (MinimapSectionHeaderStyle) {\r\n    MinimapSectionHeaderStyle[MinimapSectionHeaderStyle[\"Normal\"] = 1] = \"Normal\";\r\n    MinimapSectionHeaderStyle[MinimapSectionHeaderStyle[\"Underlined\"] = 2] = \"Underlined\";\r\n})(MinimapSectionHeaderStyle || (MinimapSectionHeaderStyle = {}));\r\n/**\r\n * Type of hit element with the mouse in the editor.\r\n */\r\nvar MouseTargetType;\r\n(function (MouseTargetType) {\r\n    /**\r\n     * Mouse is on top of an unknown element.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\r\n    /**\r\n     * Mouse is on top of the textarea used for input.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"TEXTAREA\"] = 1] = \"TEXTAREA\";\r\n    /**\r\n     * Mouse is on top of the glyph margin\r\n     */\r\n    MouseTargetType[MouseTargetType[\"GUTTER_GLYPH_MARGIN\"] = 2] = \"GUTTER_GLYPH_MARGIN\";\r\n    /**\r\n     * Mouse is on top of the line numbers\r\n     */\r\n    MouseTargetType[MouseTargetType[\"GUTTER_LINE_NUMBERS\"] = 3] = \"GUTTER_LINE_NUMBERS\";\r\n    /**\r\n     * Mouse is on top of the line decorations\r\n     */\r\n    MouseTargetType[MouseTargetType[\"GUTTER_LINE_DECORATIONS\"] = 4] = \"GUTTER_LINE_DECORATIONS\";\r\n    /**\r\n     * Mouse is on top of the whitespace left in the gutter by a view zone.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"GUTTER_VIEW_ZONE\"] = 5] = \"GUTTER_VIEW_ZONE\";\r\n    /**\r\n     * Mouse is on top of text in the content.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"CONTENT_TEXT\"] = 6] = \"CONTENT_TEXT\";\r\n    /**\r\n     * Mouse is on top of empty space in the content (e.g. after line text or below last line)\r\n     */\r\n    MouseTargetType[MouseTargetType[\"CONTENT_EMPTY\"] = 7] = \"CONTENT_EMPTY\";\r\n    /**\r\n     * Mouse is on top of a view zone in the content.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"CONTENT_VIEW_ZONE\"] = 8] = \"CONTENT_VIEW_ZONE\";\r\n    /**\r\n     * Mouse is on top of a content widget.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"CONTENT_WIDGET\"] = 9] = \"CONTENT_WIDGET\";\r\n    /**\r\n     * Mouse is on top of the decorations overview ruler.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"OVERVIEW_RULER\"] = 10] = \"OVERVIEW_RULER\";\r\n    /**\r\n     * Mouse is on top of a scrollbar.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"SCROLLBAR\"] = 11] = \"SCROLLBAR\";\r\n    /**\r\n     * Mouse is on top of an overlay widget.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"OVERLAY_WIDGET\"] = 12] = \"OVERLAY_WIDGET\";\r\n    /**\r\n     * Mouse is outside of the editor.\r\n     */\r\n    MouseTargetType[MouseTargetType[\"OUTSIDE_EDITOR\"] = 13] = \"OUTSIDE_EDITOR\";\r\n})(MouseTargetType || (MouseTargetType = {}));\r\nvar NewSymbolNameTag;\r\n(function (NewSymbolNameTag) {\r\n    NewSymbolNameTag[NewSymbolNameTag[\"AIGenerated\"] = 1] = \"AIGenerated\";\r\n})(NewSymbolNameTag || (NewSymbolNameTag = {}));\r\nvar NewSymbolNameTriggerKind;\r\n(function (NewSymbolNameTriggerKind) {\r\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\r\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\r\n})(NewSymbolNameTriggerKind || (NewSymbolNameTriggerKind = {}));\r\n/**\r\n * A positioning preference for rendering overlay widgets.\r\n */\r\nvar OverlayWidgetPositionPreference;\r\n(function (OverlayWidgetPositionPreference) {\r\n    /**\r\n     * Position the overlay widget in the top right corner\r\n     */\r\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_RIGHT_CORNER\"] = 0] = \"TOP_RIGHT_CORNER\";\r\n    /**\r\n     * Position the overlay widget in the bottom right corner\r\n     */\r\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"BOTTOM_RIGHT_CORNER\"] = 1] = \"BOTTOM_RIGHT_CORNER\";\r\n    /**\r\n     * Position the overlay widget in the top center\r\n     */\r\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\r\n})(OverlayWidgetPositionPreference || (OverlayWidgetPositionPreference = {}));\r\n/**\r\n * Vertical Lane in the overview ruler of the editor.\r\n */\r\nvar OverviewRulerLane;\r\n(function (OverviewRulerLane) {\r\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\r\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\r\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\r\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\r\n})(OverviewRulerLane || (OverviewRulerLane = {}));\r\n/**\r\n * How a partial acceptance was triggered.\r\n */\r\nvar PartialAcceptTriggerKind;\r\n(function (PartialAcceptTriggerKind) {\r\n    PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Word\"] = 0] = \"Word\";\r\n    PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Line\"] = 1] = \"Line\";\r\n    PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Suggest\"] = 2] = \"Suggest\";\r\n})(PartialAcceptTriggerKind || (PartialAcceptTriggerKind = {}));\r\nvar PositionAffinity;\r\n(function (PositionAffinity) {\r\n    /**\r\n     * Prefers the left most position.\r\n    */\r\n    PositionAffinity[PositionAffinity[\"Left\"] = 0] = \"Left\";\r\n    /**\r\n     * Prefers the right most position.\r\n    */\r\n    PositionAffinity[PositionAffinity[\"Right\"] = 1] = \"Right\";\r\n    /**\r\n     * No preference.\r\n    */\r\n    PositionAffinity[PositionAffinity[\"None\"] = 2] = \"None\";\r\n    /**\r\n     * If the given position is on injected text, prefers the position left of it.\r\n    */\r\n    PositionAffinity[PositionAffinity[\"LeftOfInjectedText\"] = 3] = \"LeftOfInjectedText\";\r\n    /**\r\n     * If the given position is on injected text, prefers the position right of it.\r\n    */\r\n    PositionAffinity[PositionAffinity[\"RightOfInjectedText\"] = 4] = \"RightOfInjectedText\";\r\n})(PositionAffinity || (PositionAffinity = {}));\r\nvar RenderLineNumbersType;\r\n(function (RenderLineNumbersType) {\r\n    RenderLineNumbersType[RenderLineNumbersType[\"Off\"] = 0] = \"Off\";\r\n    RenderLineNumbersType[RenderLineNumbersType[\"On\"] = 1] = \"On\";\r\n    RenderLineNumbersType[RenderLineNumbersType[\"Relative\"] = 2] = \"Relative\";\r\n    RenderLineNumbersType[RenderLineNumbersType[\"Interval\"] = 3] = \"Interval\";\r\n    RenderLineNumbersType[RenderLineNumbersType[\"Custom\"] = 4] = \"Custom\";\r\n})(RenderLineNumbersType || (RenderLineNumbersType = {}));\r\nvar RenderMinimap;\r\n(function (RenderMinimap) {\r\n    RenderMinimap[RenderMinimap[\"None\"] = 0] = \"None\";\r\n    RenderMinimap[RenderMinimap[\"Text\"] = 1] = \"Text\";\r\n    RenderMinimap[RenderMinimap[\"Blocks\"] = 2] = \"Blocks\";\r\n})(RenderMinimap || (RenderMinimap = {}));\r\nvar ScrollType;\r\n(function (ScrollType) {\r\n    ScrollType[ScrollType[\"Smooth\"] = 0] = \"Smooth\";\r\n    ScrollType[ScrollType[\"Immediate\"] = 1] = \"Immediate\";\r\n})(ScrollType || (ScrollType = {}));\r\nvar ScrollbarVisibility;\r\n(function (ScrollbarVisibility) {\r\n    ScrollbarVisibility[ScrollbarVisibility[\"Auto\"] = 1] = \"Auto\";\r\n    ScrollbarVisibility[ScrollbarVisibility[\"Hidden\"] = 2] = \"Hidden\";\r\n    ScrollbarVisibility[ScrollbarVisibility[\"Visible\"] = 3] = \"Visible\";\r\n})(ScrollbarVisibility || (ScrollbarVisibility = {}));\r\n/**\r\n * The direction of a selection.\r\n */\r\nvar SelectionDirection;\r\n(function (SelectionDirection) {\r\n    /**\r\n     * The selection starts above where it ends.\r\n     */\r\n    SelectionDirection[SelectionDirection[\"LTR\"] = 0] = \"LTR\";\r\n    /**\r\n     * The selection starts below where it ends.\r\n     */\r\n    SelectionDirection[SelectionDirection[\"RTL\"] = 1] = \"RTL\";\r\n})(SelectionDirection || (SelectionDirection = {}));\r\nvar ShowLightbulbIconMode;\r\n(function (ShowLightbulbIconMode) {\r\n    ShowLightbulbIconMode[\"Off\"] = \"off\";\r\n    ShowLightbulbIconMode[\"OnCode\"] = \"onCode\";\r\n    ShowLightbulbIconMode[\"On\"] = \"on\";\r\n})(ShowLightbulbIconMode || (ShowLightbulbIconMode = {}));\r\nvar SignatureHelpTriggerKind;\r\n(function (SignatureHelpTriggerKind) {\r\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\r\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\r\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\r\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\r\n/**\r\n * A symbol kind.\r\n */\r\nvar SymbolKind;\r\n(function (SymbolKind) {\r\n    SymbolKind[SymbolKind[\"File\"] = 0] = \"File\";\r\n    SymbolKind[SymbolKind[\"Module\"] = 1] = \"Module\";\r\n    SymbolKind[SymbolKind[\"Namespace\"] = 2] = \"Namespace\";\r\n    SymbolKind[SymbolKind[\"Package\"] = 3] = \"Package\";\r\n    SymbolKind[SymbolKind[\"Class\"] = 4] = \"Class\";\r\n    SymbolKind[SymbolKind[\"Method\"] = 5] = \"Method\";\r\n    SymbolKind[SymbolKind[\"Property\"] = 6] = \"Property\";\r\n    SymbolKind[SymbolKind[\"Field\"] = 7] = \"Field\";\r\n    SymbolKind[SymbolKind[\"Constructor\"] = 8] = \"Constructor\";\r\n    SymbolKind[SymbolKind[\"Enum\"] = 9] = \"Enum\";\r\n    SymbolKind[SymbolKind[\"Interface\"] = 10] = \"Interface\";\r\n    SymbolKind[SymbolKind[\"Function\"] = 11] = \"Function\";\r\n    SymbolKind[SymbolKind[\"Variable\"] = 12] = \"Variable\";\r\n    SymbolKind[SymbolKind[\"Constant\"] = 13] = \"Constant\";\r\n    SymbolKind[SymbolKind[\"String\"] = 14] = \"String\";\r\n    SymbolKind[SymbolKind[\"Number\"] = 15] = \"Number\";\r\n    SymbolKind[SymbolKind[\"Boolean\"] = 16] = \"Boolean\";\r\n    SymbolKind[SymbolKind[\"Array\"] = 17] = \"Array\";\r\n    SymbolKind[SymbolKind[\"Object\"] = 18] = \"Object\";\r\n    SymbolKind[SymbolKind[\"Key\"] = 19] = \"Key\";\r\n    SymbolKind[SymbolKind[\"Null\"] = 20] = \"Null\";\r\n    SymbolKind[SymbolKind[\"EnumMember\"] = 21] = \"EnumMember\";\r\n    SymbolKind[SymbolKind[\"Struct\"] = 22] = \"Struct\";\r\n    SymbolKind[SymbolKind[\"Event\"] = 23] = \"Event\";\r\n    SymbolKind[SymbolKind[\"Operator\"] = 24] = \"Operator\";\r\n    SymbolKind[SymbolKind[\"TypeParameter\"] = 25] = \"TypeParameter\";\r\n})(SymbolKind || (SymbolKind = {}));\r\nvar SymbolTag;\r\n(function (SymbolTag) {\r\n    SymbolTag[SymbolTag[\"Deprecated\"] = 1] = \"Deprecated\";\r\n})(SymbolTag || (SymbolTag = {}));\r\n/**\r\n * The kind of animation in which the editor's cursor should be rendered.\r\n */\r\nvar TextEditorCursorBlinkingStyle;\r\n(function (TextEditorCursorBlinkingStyle) {\r\n    /**\r\n     * Hidden\r\n     */\r\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Hidden\"] = 0] = \"Hidden\";\r\n    /**\r\n     * Blinking\r\n     */\r\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Blink\"] = 1] = \"Blink\";\r\n    /**\r\n     * Blinking with smooth fading\r\n     */\r\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Smooth\"] = 2] = \"Smooth\";\r\n    /**\r\n     * Blinking with prolonged filled state and smooth fading\r\n     */\r\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Phase\"] = 3] = \"Phase\";\r\n    /**\r\n     * Expand collapse animation on the y axis\r\n     */\r\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Expand\"] = 4] = \"Expand\";\r\n    /**\r\n     * No-Blinking\r\n     */\r\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Solid\"] = 5] = \"Solid\";\r\n})(TextEditorCursorBlinkingStyle || (TextEditorCursorBlinkingStyle = {}));\r\n/**\r\n * The style in which the editor's cursor should be rendered.\r\n */\r\nvar TextEditorCursorStyle;\r\n(function (TextEditorCursorStyle) {\r\n    /**\r\n     * As a vertical line (sitting between two characters).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\r\n    /**\r\n     * As a block (sitting on top of a character).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\r\n    /**\r\n     * As a horizontal line (sitting under a character).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\r\n    /**\r\n     * As a thin vertical line (sitting between two characters).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\r\n    /**\r\n     * As an outlined block (sitting on top of a character).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\r\n    /**\r\n     * As a thin horizontal line (sitting under a character).\r\n     */\r\n    TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\r\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\r\n/**\r\n * Describes the behavior of decorations when typing/editing near their edges.\r\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\r\n */\r\nvar TrackedRangeStickiness;\r\n(function (TrackedRangeStickiness) {\r\n    TrackedRangeStickiness[TrackedRangeStickiness[\"AlwaysGrowsWhenTypingAtEdges\"] = 0] = \"AlwaysGrowsWhenTypingAtEdges\";\r\n    TrackedRangeStickiness[TrackedRangeStickiness[\"NeverGrowsWhenTypingAtEdges\"] = 1] = \"NeverGrowsWhenTypingAtEdges\";\r\n    TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingBefore\"] = 2] = \"GrowsOnlyWhenTypingBefore\";\r\n    TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingAfter\"] = 3] = \"GrowsOnlyWhenTypingAfter\";\r\n})(TrackedRangeStickiness || (TrackedRangeStickiness = {}));\r\n/**\r\n * Describes how to indent wrapped lines.\r\n */\r\nvar WrappingIndent;\r\n(function (WrappingIndent) {\r\n    /**\r\n     * No indentation => wrapped lines begin at column 1.\r\n     */\r\n    WrappingIndent[WrappingIndent[\"None\"] = 0] = \"None\";\r\n    /**\r\n     * Same => wrapped lines get the same indentation as the parent.\r\n     */\r\n    WrappingIndent[WrappingIndent[\"Same\"] = 1] = \"Same\";\r\n    /**\r\n     * Indent => wrapped lines get +1 indentation toward the parent.\r\n     */\r\n    WrappingIndent[WrappingIndent[\"Indent\"] = 2] = \"Indent\";\r\n    /**\r\n     * DeepIndent => wrapped lines get +2 indentation toward the parent.\r\n     */\r\n    WrappingIndent[WrappingIndent[\"DeepIndent\"] = 3] = \"DeepIndent\";\r\n})(WrappingIndent || (WrappingIndent = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenizationRegistry: () => (/* binding */ TokenizationRegistry)\n/* harmony export */ });\n/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/event.js */ \"./node_modules/monaco-editor/esm/vs/base/common/event.js\");\n/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/lifecycle.js */ \"./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\nclass TokenizationRegistry {\r\n    constructor() {\r\n        this._tokenizationSupports = new Map();\r\n        this._factories = new Map();\r\n        this._onDidChange = new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter();\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._colorMap = null;\r\n    }\r\n    handleChange(languageIds) {\r\n        this._onDidChange.fire({\r\n            changedLanguages: languageIds,\r\n            changedColorMap: false\r\n        });\r\n    }\r\n    register(languageId, support) {\r\n        this._tokenizationSupports.set(languageId, support);\r\n        this.handleChange([languageId]);\r\n        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {\r\n            if (this._tokenizationSupports.get(languageId) !== support) {\r\n                return;\r\n            }\r\n            this._tokenizationSupports.delete(languageId);\r\n            this.handleChange([languageId]);\r\n        });\r\n    }\r\n    get(languageId) {\r\n        return this._tokenizationSupports.get(languageId) || null;\r\n    }\r\n    registerFactory(languageId, factory) {\r\n        var _a;\r\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\r\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\r\n        this._factories.set(languageId, myData);\r\n        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {\r\n            const v = this._factories.get(languageId);\r\n            if (!v || v !== myData) {\r\n                return;\r\n            }\r\n            this._factories.delete(languageId);\r\n            v.dispose();\r\n        });\r\n    }\r\n    async getOrCreate(languageId) {\r\n        // check first if the support is already set\r\n        const tokenizationSupport = this.get(languageId);\r\n        if (tokenizationSupport) {\r\n            return tokenizationSupport;\r\n        }\r\n        const factory = this._factories.get(languageId);\r\n        if (!factory || factory.isResolved) {\r\n            // no factory or factory.resolve already finished\r\n            return null;\r\n        }\r\n        await factory.resolve();\r\n        return this.get(languageId);\r\n    }\r\n    isResolved(languageId) {\r\n        const tokenizationSupport = this.get(languageId);\r\n        if (tokenizationSupport) {\r\n            return true;\r\n        }\r\n        const factory = this._factories.get(languageId);\r\n        if (!factory || factory.isResolved) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    setColorMap(colorMap) {\r\n        this._colorMap = colorMap;\r\n        this._onDidChange.fire({\r\n            changedLanguages: Array.from(this._tokenizationSupports.keys()),\r\n            changedColorMap: true\r\n        });\r\n    }\r\n    getColorMap() {\r\n        return this._colorMap;\r\n    }\r\n    getDefaultBackground() {\r\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\r\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\r\n        }\r\n        return null;\r\n    }\r\n}\r\nclass TokenizationSupportFactoryData extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {\r\n    get isResolved() {\r\n        return this._isResolved;\r\n    }\r\n    constructor(_registry, _languageId, _factory) {\r\n        super();\r\n        this._registry = _registry;\r\n        this._languageId = _languageId;\r\n        this._factory = _factory;\r\n        this._isDisposed = false;\r\n        this._resolvePromise = null;\r\n        this._isResolved = false;\r\n    }\r\n    dispose() {\r\n        this._isDisposed = true;\r\n        super.dispose();\r\n    }\r\n    async resolve() {\r\n        if (!this._resolvePromise) {\r\n            this._resolvePromise = this._create();\r\n        }\r\n        return this._resolvePromise;\r\n    }\r\n    async _create() {\r\n        const value = await this._factory.tokenizationSupport;\r\n        this._isResolved = true;\r\n        if (value && !this._isDisposed) {\r\n            this._register(this._registry.register(this._languageId, value));\r\n        }\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi90b2tlbml6YXRpb25SZWdpc3RyeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNxRDtBQUNxQjtBQUNuRTtBQUNQO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywwREFBTztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdUVBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVFQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGlFQUFVO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3Rva2VuaXphdGlvblJlZ2lzdHJ5LmpzPzRhNjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi8uLi9iYXNlL2NvbW1vbi9ldmVudC5qcyc7XHJcbmltcG9ydCB7IERpc3Bvc2FibGUsIHRvRGlzcG9zYWJsZSB9IGZyb20gJy4uLy4uL2Jhc2UvY29tbW9uL2xpZmVjeWNsZS5qcyc7XHJcbmV4cG9ydCBjbGFzcyBUb2tlbml6YXRpb25SZWdpc3RyeSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0cyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLl9mYWN0b3JpZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5fb25EaWRDaGFuZ2UgPSBuZXcgRW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25EaWRDaGFuZ2UgPSB0aGlzLl9vbkRpZENoYW5nZS5ldmVudDtcclxuICAgICAgICB0aGlzLl9jb2xvck1hcCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVDaGFuZ2UobGFuZ3VhZ2VJZHMpIHtcclxuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHtcclxuICAgICAgICAgICAgY2hhbmdlZExhbmd1YWdlczogbGFuZ3VhZ2VJZHMsXHJcbiAgICAgICAgICAgIGNoYW5nZWRDb2xvck1hcDogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyKGxhbmd1YWdlSWQsIHN1cHBvcnQpIHtcclxuICAgICAgICB0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0cy5zZXQobGFuZ3VhZ2VJZCwgc3VwcG9ydCk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoW2xhbmd1YWdlSWRdKTtcclxuICAgICAgICByZXR1cm4gdG9EaXNwb3NhYmxlKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3Rva2VuaXphdGlvblN1cHBvcnRzLmdldChsYW5ndWFnZUlkKSAhPT0gc3VwcG9ydCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuaXphdGlvblN1cHBvcnRzLmRlbGV0ZShsYW5ndWFnZUlkKTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoW2xhbmd1YWdlSWRdKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldChsYW5ndWFnZUlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuaXphdGlvblN1cHBvcnRzLmdldChsYW5ndWFnZUlkKSB8fCBudWxsO1xyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJGYWN0b3J5KGxhbmd1YWdlSWQsIGZhY3RvcnkpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy5fZmFjdG9yaWVzLmdldChsYW5ndWFnZUlkKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRpc3Bvc2UoKTtcclxuICAgICAgICBjb25zdCBteURhdGEgPSBuZXcgVG9rZW5pemF0aW9uU3VwcG9ydEZhY3RvcnlEYXRhKHRoaXMsIGxhbmd1YWdlSWQsIGZhY3RvcnkpO1xyXG4gICAgICAgIHRoaXMuX2ZhY3Rvcmllcy5zZXQobGFuZ3VhZ2VJZCwgbXlEYXRhKTtcclxuICAgICAgICByZXR1cm4gdG9EaXNwb3NhYmxlKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuX2ZhY3Rvcmllcy5nZXQobGFuZ3VhZ2VJZCk7XHJcbiAgICAgICAgICAgIGlmICghdiB8fCB2ICE9PSBteURhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9mYWN0b3JpZXMuZGVsZXRlKGxhbmd1YWdlSWQpO1xyXG4gICAgICAgICAgICB2LmRpc3Bvc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldE9yQ3JlYXRlKGxhbmd1YWdlSWQpIHtcclxuICAgICAgICAvLyBjaGVjayBmaXJzdCBpZiB0aGUgc3VwcG9ydCBpcyBhbHJlYWR5IHNldFxyXG4gICAgICAgIGNvbnN0IHRva2VuaXphdGlvblN1cHBvcnQgPSB0aGlzLmdldChsYW5ndWFnZUlkKTtcclxuICAgICAgICBpZiAodG9rZW5pemF0aW9uU3VwcG9ydCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdG9rZW5pemF0aW9uU3VwcG9ydDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuX2ZhY3Rvcmllcy5nZXQobGFuZ3VhZ2VJZCk7XHJcbiAgICAgICAgaWYgKCFmYWN0b3J5IHx8IGZhY3RvcnkuaXNSZXNvbHZlZCkge1xyXG4gICAgICAgICAgICAvLyBubyBmYWN0b3J5IG9yIGZhY3RvcnkucmVzb2x2ZSBhbHJlYWR5IGZpbmlzaGVkXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCBmYWN0b3J5LnJlc29sdmUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQobGFuZ3VhZ2VJZCk7XHJcbiAgICB9XHJcbiAgICBpc1Jlc29sdmVkKGxhbmd1YWdlSWQpIHtcclxuICAgICAgICBjb25zdCB0b2tlbml6YXRpb25TdXBwb3J0ID0gdGhpcy5nZXQobGFuZ3VhZ2VJZCk7XHJcbiAgICAgICAgaWYgKHRva2VuaXphdGlvblN1cHBvcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLl9mYWN0b3JpZXMuZ2V0KGxhbmd1YWdlSWQpO1xyXG4gICAgICAgIGlmICghZmFjdG9yeSB8fCBmYWN0b3J5LmlzUmVzb2x2ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHNldENvbG9yTWFwKGNvbG9yTWFwKSB7XHJcbiAgICAgICAgdGhpcy5fY29sb3JNYXAgPSBjb2xvck1hcDtcclxuICAgICAgICB0aGlzLl9vbkRpZENoYW5nZS5maXJlKHtcclxuICAgICAgICAgICAgY2hhbmdlZExhbmd1YWdlczogQXJyYXkuZnJvbSh0aGlzLl90b2tlbml6YXRpb25TdXBwb3J0cy5rZXlzKCkpLFxyXG4gICAgICAgICAgICBjaGFuZ2VkQ29sb3JNYXA6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldENvbG9yTWFwKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xvck1hcDtcclxuICAgIH1cclxuICAgIGdldERlZmF1bHRCYWNrZ3JvdW5kKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb2xvck1hcCAmJiB0aGlzLl9jb2xvck1hcC5sZW5ndGggPiAyIC8qIENvbG9ySWQuRGVmYXVsdEJhY2tncm91bmQgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yTWFwWzIgLyogQ29sb3JJZC5EZWZhdWx0QmFja2dyb3VuZCAqL107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFRva2VuaXphdGlvblN1cHBvcnRGYWN0b3J5RGF0YSBleHRlbmRzIERpc3Bvc2FibGUge1xyXG4gICAgZ2V0IGlzUmVzb2x2ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUmVzb2x2ZWQ7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvcihfcmVnaXN0cnksIF9sYW5ndWFnZUlkLCBfZmFjdG9yeSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5fcmVnaXN0cnkgPSBfcmVnaXN0cnk7XHJcbiAgICAgICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IF9sYW5ndWFnZUlkO1xyXG4gICAgICAgIHRoaXMuX2ZhY3RvcnkgPSBfZmFjdG9yeTtcclxuICAgICAgICB0aGlzLl9pc0Rpc3Bvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fcmVzb2x2ZVByb21pc2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2lzUmVzb2x2ZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IHRydWU7XHJcbiAgICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcmVzb2x2ZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3Jlc29sdmVQcm9taXNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVQcm9taXNlID0gdGhpcy5fY3JlYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlUHJvbWlzZTtcclxuICAgIH1cclxuICAgIGFzeW5jIF9jcmVhdGUoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCB0aGlzLl9mYWN0b3J5LnRva2VuaXphdGlvblN1cHBvcnQ7XHJcbiAgICAgICAgdGhpcy5faXNSZXNvbHZlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKHZhbHVlICYmICF0aGlzLl9pc0Rpc3Bvc2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyKHRoaXMuX3JlZ2lzdHJ5LnJlZ2lzdGVyKHRoaXMuX2xhbmd1YWdlSWQsIHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/editor.worker.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/editor.worker.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initialize: () => (/* binding */ initialize)\n/* harmony export */ });\n/* harmony import */ var _base_common_worker_simpleWorker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/common/worker/simpleWorker.js */ \"./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js\");\n/* harmony import */ var _common_services_editorSimpleWorker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/services/editorSimpleWorker.js */ \"./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js\");\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\n\r\nlet initialized = false;\r\nfunction initialize(foreignModule) {\r\n    if (initialized) {\r\n        return;\r\n    }\r\n    initialized = true;\r\n    const simpleWorker = new _base_common_worker_simpleWorker_js__WEBPACK_IMPORTED_MODULE_0__.SimpleWorkerServer((msg) => {\r\n        globalThis.postMessage(msg);\r\n    }, (host) => new _common_services_editorSimpleWorker_js__WEBPACK_IMPORTED_MODULE_1__.EditorSimpleWorker(host, foreignModule));\r\n    globalThis.onmessage = (e) => {\r\n        simpleWorker.onmessage(e.data);\r\n    };\r\n}\r\nglobalThis.onmessage = (e) => {\r\n    // Ignore first message in this case and initialize if not yet initialized\r\n    if (!initialized) {\r\n        initialize(null);\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2VkaXRvci53b3JrZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDMkU7QUFDRTtBQUM3RTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsbUZBQWtCO0FBQy9DO0FBQ0EsS0FBSyxnQkFBZ0Isc0ZBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2VkaXRvci9lZGl0b3Iud29ya2VyLmpzP2U1MDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cclxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbmltcG9ydCB7IFNpbXBsZVdvcmtlclNlcnZlciB9IGZyb20gJy4uL2Jhc2UvY29tbW9uL3dvcmtlci9zaW1wbGVXb3JrZXIuanMnO1xyXG5pbXBvcnQgeyBFZGl0b3JTaW1wbGVXb3JrZXIgfSBmcm9tICcuL2NvbW1vbi9zZXJ2aWNlcy9lZGl0b3JTaW1wbGVXb3JrZXIuanMnO1xyXG5sZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemUoZm9yZWlnbk1vZHVsZSkge1xyXG4gICAgaWYgKGluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgY29uc3Qgc2ltcGxlV29ya2VyID0gbmV3IFNpbXBsZVdvcmtlclNlcnZlcigobXNnKSA9PiB7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5wb3N0TWVzc2FnZShtc2cpO1xyXG4gICAgfSwgKGhvc3QpID0+IG5ldyBFZGl0b3JTaW1wbGVXb3JrZXIoaG9zdCwgZm9yZWlnbk1vZHVsZSkpO1xyXG4gICAgZ2xvYmFsVGhpcy5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNpbXBsZVdvcmtlci5vbm1lc3NhZ2UoZS5kYXRhKTtcclxuICAgIH07XHJcbn1cclxuZ2xvYmFsVGhpcy5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xyXG4gICAgLy8gSWdub3JlIGZpcnN0IG1lc3NhZ2UgaW4gdGhpcyBjYXNlIGFuZCBpbml0aWFsaXplIGlmIG5vdCB5ZXQgaW5pdGlhbGl6ZWRcclxuICAgIGlmICghaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICBpbml0aWFsaXplKG51bGwpO1xyXG4gICAgfVxyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/editor/editor.worker.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/language/json/json.worker.js":
/*!************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/language/json/json.worker.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _editor_editor_worker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../editor/editor.worker.js */ \"./node_modules/monaco-editor/esm/vs/editor/editor.worker.js\");\n/*!-----------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\r\n * Released under the MIT license\r\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\r\n *-----------------------------------------------------------------------------*/\r\n\r\n\r\n// src/language/json/json.worker.ts\r\n\r\n\r\n// node_modules/jsonc-parser/lib/esm/impl/scanner.js\r\nfunction createScanner(text, ignoreTrivia = false) {\r\n  const len = text.length;\r\n  let pos = 0, value = \"\", tokenOffset = 0, token = 16, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0;\r\n  function scanHexDigits(count, exact) {\r\n    let digits = 0;\r\n    let value2 = 0;\r\n    while (digits < count || !exact) {\r\n      let ch = text.charCodeAt(pos);\r\n      if (ch >= 48 && ch <= 57) {\r\n        value2 = value2 * 16 + ch - 48;\r\n      } else if (ch >= 65 && ch <= 70) {\r\n        value2 = value2 * 16 + ch - 65 + 10;\r\n      } else if (ch >= 97 && ch <= 102) {\r\n        value2 = value2 * 16 + ch - 97 + 10;\r\n      } else {\r\n        break;\r\n      }\r\n      pos++;\r\n      digits++;\r\n    }\r\n    if (digits < count) {\r\n      value2 = -1;\r\n    }\r\n    return value2;\r\n  }\r\n  function setPosition(newPosition) {\r\n    pos = newPosition;\r\n    value = \"\";\r\n    tokenOffset = 0;\r\n    token = 16;\r\n    scanError = 0;\r\n  }\r\n  function scanNumber() {\r\n    let start = pos;\r\n    if (text.charCodeAt(pos) === 48) {\r\n      pos++;\r\n    } else {\r\n      pos++;\r\n      while (pos < text.length && isDigit(text.charCodeAt(pos))) {\r\n        pos++;\r\n      }\r\n    }\r\n    if (pos < text.length && text.charCodeAt(pos) === 46) {\r\n      pos++;\r\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\r\n        pos++;\r\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\r\n          pos++;\r\n        }\r\n      } else {\r\n        scanError = 3;\r\n        return text.substring(start, pos);\r\n      }\r\n    }\r\n    let end = pos;\r\n    if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {\r\n      pos++;\r\n      if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {\r\n        pos++;\r\n      }\r\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\r\n        pos++;\r\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\r\n          pos++;\r\n        }\r\n        end = pos;\r\n      } else {\r\n        scanError = 3;\r\n      }\r\n    }\r\n    return text.substring(start, end);\r\n  }\r\n  function scanString() {\r\n    let result = \"\", start = pos;\r\n    while (true) {\r\n      if (pos >= len) {\r\n        result += text.substring(start, pos);\r\n        scanError = 2;\r\n        break;\r\n      }\r\n      const ch = text.charCodeAt(pos);\r\n      if (ch === 34) {\r\n        result += text.substring(start, pos);\r\n        pos++;\r\n        break;\r\n      }\r\n      if (ch === 92) {\r\n        result += text.substring(start, pos);\r\n        pos++;\r\n        if (pos >= len) {\r\n          scanError = 2;\r\n          break;\r\n        }\r\n        const ch2 = text.charCodeAt(pos++);\r\n        switch (ch2) {\r\n          case 34:\r\n            result += '\"';\r\n            break;\r\n          case 92:\r\n            result += \"\\\\\";\r\n            break;\r\n          case 47:\r\n            result += \"/\";\r\n            break;\r\n          case 98:\r\n            result += \"\\b\";\r\n            break;\r\n          case 102:\r\n            result += \"\\f\";\r\n            break;\r\n          case 110:\r\n            result += \"\\n\";\r\n            break;\r\n          case 114:\r\n            result += \"\\r\";\r\n            break;\r\n          case 116:\r\n            result += \"\t\";\r\n            break;\r\n          case 117:\r\n            const ch3 = scanHexDigits(4, true);\r\n            if (ch3 >= 0) {\r\n              result += String.fromCharCode(ch3);\r\n            } else {\r\n              scanError = 4;\r\n            }\r\n            break;\r\n          default:\r\n            scanError = 5;\r\n        }\r\n        start = pos;\r\n        continue;\r\n      }\r\n      if (ch >= 0 && ch <= 31) {\r\n        if (isLineBreak(ch)) {\r\n          result += text.substring(start, pos);\r\n          scanError = 2;\r\n          break;\r\n        } else {\r\n          scanError = 6;\r\n        }\r\n      }\r\n      pos++;\r\n    }\r\n    return result;\r\n  }\r\n  function scanNext() {\r\n    value = \"\";\r\n    scanError = 0;\r\n    tokenOffset = pos;\r\n    lineStartOffset = lineNumber;\r\n    prevTokenLineStartOffset = tokenLineStartOffset;\r\n    if (pos >= len) {\r\n      tokenOffset = len;\r\n      return token = 17;\r\n    }\r\n    let code = text.charCodeAt(pos);\r\n    if (isWhiteSpace(code)) {\r\n      do {\r\n        pos++;\r\n        value += String.fromCharCode(code);\r\n        code = text.charCodeAt(pos);\r\n      } while (isWhiteSpace(code));\r\n      return token = 15;\r\n    }\r\n    if (isLineBreak(code)) {\r\n      pos++;\r\n      value += String.fromCharCode(code);\r\n      if (code === 13 && text.charCodeAt(pos) === 10) {\r\n        pos++;\r\n        value += \"\\n\";\r\n      }\r\n      lineNumber++;\r\n      tokenLineStartOffset = pos;\r\n      return token = 14;\r\n    }\r\n    switch (code) {\r\n      case 123:\r\n        pos++;\r\n        return token = 1;\r\n      case 125:\r\n        pos++;\r\n        return token = 2;\r\n      case 91:\r\n        pos++;\r\n        return token = 3;\r\n      case 93:\r\n        pos++;\r\n        return token = 4;\r\n      case 58:\r\n        pos++;\r\n        return token = 6;\r\n      case 44:\r\n        pos++;\r\n        return token = 5;\r\n      case 34:\r\n        pos++;\r\n        value = scanString();\r\n        return token = 10;\r\n      case 47:\r\n        const start = pos - 1;\r\n        if (text.charCodeAt(pos + 1) === 47) {\r\n          pos += 2;\r\n          while (pos < len) {\r\n            if (isLineBreak(text.charCodeAt(pos))) {\r\n              break;\r\n            }\r\n            pos++;\r\n          }\r\n          value = text.substring(start, pos);\r\n          return token = 12;\r\n        }\r\n        if (text.charCodeAt(pos + 1) === 42) {\r\n          pos += 2;\r\n          const safeLength = len - 1;\r\n          let commentClosed = false;\r\n          while (pos < safeLength) {\r\n            const ch = text.charCodeAt(pos);\r\n            if (ch === 42 && text.charCodeAt(pos + 1) === 47) {\r\n              pos += 2;\r\n              commentClosed = true;\r\n              break;\r\n            }\r\n            pos++;\r\n            if (isLineBreak(ch)) {\r\n              if (ch === 13 && text.charCodeAt(pos) === 10) {\r\n                pos++;\r\n              }\r\n              lineNumber++;\r\n              tokenLineStartOffset = pos;\r\n            }\r\n          }\r\n          if (!commentClosed) {\r\n            pos++;\r\n            scanError = 1;\r\n          }\r\n          value = text.substring(start, pos);\r\n          return token = 13;\r\n        }\r\n        value += String.fromCharCode(code);\r\n        pos++;\r\n        return token = 16;\r\n      case 45:\r\n        value += String.fromCharCode(code);\r\n        pos++;\r\n        if (pos === len || !isDigit(text.charCodeAt(pos))) {\r\n          return token = 16;\r\n        }\r\n      case 48:\r\n      case 49:\r\n      case 50:\r\n      case 51:\r\n      case 52:\r\n      case 53:\r\n      case 54:\r\n      case 55:\r\n      case 56:\r\n      case 57:\r\n        value += scanNumber();\r\n        return token = 11;\r\n      default:\r\n        while (pos < len && isUnknownContentCharacter(code)) {\r\n          pos++;\r\n          code = text.charCodeAt(pos);\r\n        }\r\n        if (tokenOffset !== pos) {\r\n          value = text.substring(tokenOffset, pos);\r\n          switch (value) {\r\n            case \"true\":\r\n              return token = 8;\r\n            case \"false\":\r\n              return token = 9;\r\n            case \"null\":\r\n              return token = 7;\r\n          }\r\n          return token = 16;\r\n        }\r\n        value += String.fromCharCode(code);\r\n        pos++;\r\n        return token = 16;\r\n    }\r\n  }\r\n  function isUnknownContentCharacter(code) {\r\n    if (isWhiteSpace(code) || isLineBreak(code)) {\r\n      return false;\r\n    }\r\n    switch (code) {\r\n      case 125:\r\n      case 93:\r\n      case 123:\r\n      case 91:\r\n      case 34:\r\n      case 58:\r\n      case 44:\r\n      case 47:\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n  function scanNextNonTrivia() {\r\n    let result;\r\n    do {\r\n      result = scanNext();\r\n    } while (result >= 12 && result <= 15);\r\n    return result;\r\n  }\r\n  return {\r\n    setPosition,\r\n    getPosition: () => pos,\r\n    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\r\n    getToken: () => token,\r\n    getTokenValue: () => value,\r\n    getTokenOffset: () => tokenOffset,\r\n    getTokenLength: () => pos - tokenOffset,\r\n    getTokenStartLine: () => lineStartOffset,\r\n    getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,\r\n    getTokenError: () => scanError\r\n  };\r\n}\r\nfunction isWhiteSpace(ch) {\r\n  return ch === 32 || ch === 9;\r\n}\r\nfunction isLineBreak(ch) {\r\n  return ch === 10 || ch === 13;\r\n}\r\nfunction isDigit(ch) {\r\n  return ch >= 48 && ch <= 57;\r\n}\r\nvar CharacterCodes;\r\n(function(CharacterCodes2) {\r\n  CharacterCodes2[CharacterCodes2[\"lineFeed\"] = 10] = \"lineFeed\";\r\n  CharacterCodes2[CharacterCodes2[\"carriageReturn\"] = 13] = \"carriageReturn\";\r\n  CharacterCodes2[CharacterCodes2[\"space\"] = 32] = \"space\";\r\n  CharacterCodes2[CharacterCodes2[\"_0\"] = 48] = \"_0\";\r\n  CharacterCodes2[CharacterCodes2[\"_1\"] = 49] = \"_1\";\r\n  CharacterCodes2[CharacterCodes2[\"_2\"] = 50] = \"_2\";\r\n  CharacterCodes2[CharacterCodes2[\"_3\"] = 51] = \"_3\";\r\n  CharacterCodes2[CharacterCodes2[\"_4\"] = 52] = \"_4\";\r\n  CharacterCodes2[CharacterCodes2[\"_5\"] = 53] = \"_5\";\r\n  CharacterCodes2[CharacterCodes2[\"_6\"] = 54] = \"_6\";\r\n  CharacterCodes2[CharacterCodes2[\"_7\"] = 55] = \"_7\";\r\n  CharacterCodes2[CharacterCodes2[\"_8\"] = 56] = \"_8\";\r\n  CharacterCodes2[CharacterCodes2[\"_9\"] = 57] = \"_9\";\r\n  CharacterCodes2[CharacterCodes2[\"a\"] = 97] = \"a\";\r\n  CharacterCodes2[CharacterCodes2[\"b\"] = 98] = \"b\";\r\n  CharacterCodes2[CharacterCodes2[\"c\"] = 99] = \"c\";\r\n  CharacterCodes2[CharacterCodes2[\"d\"] = 100] = \"d\";\r\n  CharacterCodes2[CharacterCodes2[\"e\"] = 101] = \"e\";\r\n  CharacterCodes2[CharacterCodes2[\"f\"] = 102] = \"f\";\r\n  CharacterCodes2[CharacterCodes2[\"g\"] = 103] = \"g\";\r\n  CharacterCodes2[CharacterCodes2[\"h\"] = 104] = \"h\";\r\n  CharacterCodes2[CharacterCodes2[\"i\"] = 105] = \"i\";\r\n  CharacterCodes2[CharacterCodes2[\"j\"] = 106] = \"j\";\r\n  CharacterCodes2[CharacterCodes2[\"k\"] = 107] = \"k\";\r\n  CharacterCodes2[CharacterCodes2[\"l\"] = 108] = \"l\";\r\n  CharacterCodes2[CharacterCodes2[\"m\"] = 109] = \"m\";\r\n  CharacterCodes2[CharacterCodes2[\"n\"] = 110] = \"n\";\r\n  CharacterCodes2[CharacterCodes2[\"o\"] = 111] = \"o\";\r\n  CharacterCodes2[CharacterCodes2[\"p\"] = 112] = \"p\";\r\n  CharacterCodes2[CharacterCodes2[\"q\"] = 113] = \"q\";\r\n  CharacterCodes2[CharacterCodes2[\"r\"] = 114] = \"r\";\r\n  CharacterCodes2[CharacterCodes2[\"s\"] = 115] = \"s\";\r\n  CharacterCodes2[CharacterCodes2[\"t\"] = 116] = \"t\";\r\n  CharacterCodes2[CharacterCodes2[\"u\"] = 117] = \"u\";\r\n  CharacterCodes2[CharacterCodes2[\"v\"] = 118] = \"v\";\r\n  CharacterCodes2[CharacterCodes2[\"w\"] = 119] = \"w\";\r\n  CharacterCodes2[CharacterCodes2[\"x\"] = 120] = \"x\";\r\n  CharacterCodes2[CharacterCodes2[\"y\"] = 121] = \"y\";\r\n  CharacterCodes2[CharacterCodes2[\"z\"] = 122] = \"z\";\r\n  CharacterCodes2[CharacterCodes2[\"A\"] = 65] = \"A\";\r\n  CharacterCodes2[CharacterCodes2[\"B\"] = 66] = \"B\";\r\n  CharacterCodes2[CharacterCodes2[\"C\"] = 67] = \"C\";\r\n  CharacterCodes2[CharacterCodes2[\"D\"] = 68] = \"D\";\r\n  CharacterCodes2[CharacterCodes2[\"E\"] = 69] = \"E\";\r\n  CharacterCodes2[CharacterCodes2[\"F\"] = 70] = \"F\";\r\n  CharacterCodes2[CharacterCodes2[\"G\"] = 71] = \"G\";\r\n  CharacterCodes2[CharacterCodes2[\"H\"] = 72] = \"H\";\r\n  CharacterCodes2[CharacterCodes2[\"I\"] = 73] = \"I\";\r\n  CharacterCodes2[CharacterCodes2[\"J\"] = 74] = \"J\";\r\n  CharacterCodes2[CharacterCodes2[\"K\"] = 75] = \"K\";\r\n  CharacterCodes2[CharacterCodes2[\"L\"] = 76] = \"L\";\r\n  CharacterCodes2[CharacterCodes2[\"M\"] = 77] = \"M\";\r\n  CharacterCodes2[CharacterCodes2[\"N\"] = 78] = \"N\";\r\n  CharacterCodes2[CharacterCodes2[\"O\"] = 79] = \"O\";\r\n  CharacterCodes2[CharacterCodes2[\"P\"] = 80] = \"P\";\r\n  CharacterCodes2[CharacterCodes2[\"Q\"] = 81] = \"Q\";\r\n  CharacterCodes2[CharacterCodes2[\"R\"] = 82] = \"R\";\r\n  CharacterCodes2[CharacterCodes2[\"S\"] = 83] = \"S\";\r\n  CharacterCodes2[CharacterCodes2[\"T\"] = 84] = \"T\";\r\n  CharacterCodes2[CharacterCodes2[\"U\"] = 85] = \"U\";\r\n  CharacterCodes2[CharacterCodes2[\"V\"] = 86] = \"V\";\r\n  CharacterCodes2[CharacterCodes2[\"W\"] = 87] = \"W\";\r\n  CharacterCodes2[CharacterCodes2[\"X\"] = 88] = \"X\";\r\n  CharacterCodes2[CharacterCodes2[\"Y\"] = 89] = \"Y\";\r\n  CharacterCodes2[CharacterCodes2[\"Z\"] = 90] = \"Z\";\r\n  CharacterCodes2[CharacterCodes2[\"asterisk\"] = 42] = \"asterisk\";\r\n  CharacterCodes2[CharacterCodes2[\"backslash\"] = 92] = \"backslash\";\r\n  CharacterCodes2[CharacterCodes2[\"closeBrace\"] = 125] = \"closeBrace\";\r\n  CharacterCodes2[CharacterCodes2[\"closeBracket\"] = 93] = \"closeBracket\";\r\n  CharacterCodes2[CharacterCodes2[\"colon\"] = 58] = \"colon\";\r\n  CharacterCodes2[CharacterCodes2[\"comma\"] = 44] = \"comma\";\r\n  CharacterCodes2[CharacterCodes2[\"dot\"] = 46] = \"dot\";\r\n  CharacterCodes2[CharacterCodes2[\"doubleQuote\"] = 34] = \"doubleQuote\";\r\n  CharacterCodes2[CharacterCodes2[\"minus\"] = 45] = \"minus\";\r\n  CharacterCodes2[CharacterCodes2[\"openBrace\"] = 123] = \"openBrace\";\r\n  CharacterCodes2[CharacterCodes2[\"openBracket\"] = 91] = \"openBracket\";\r\n  CharacterCodes2[CharacterCodes2[\"plus\"] = 43] = \"plus\";\r\n  CharacterCodes2[CharacterCodes2[\"slash\"] = 47] = \"slash\";\r\n  CharacterCodes2[CharacterCodes2[\"formFeed\"] = 12] = \"formFeed\";\r\n  CharacterCodes2[CharacterCodes2[\"tab\"] = 9] = \"tab\";\r\n})(CharacterCodes || (CharacterCodes = {}));\r\n\r\n// node_modules/jsonc-parser/lib/esm/impl/string-intern.js\r\nvar cachedSpaces = new Array(20).fill(0).map((_, index) => {\r\n  return \" \".repeat(index);\r\n});\r\nvar maxCachedValues = 200;\r\nvar cachedBreakLinesWithSpaces = {\r\n  \" \": {\r\n    \"\\n\": new Array(maxCachedValues).fill(0).map((_, index) => {\r\n      return \"\\n\" + \" \".repeat(index);\r\n    }),\r\n    \"\\r\": new Array(maxCachedValues).fill(0).map((_, index) => {\r\n      return \"\\r\" + \" \".repeat(index);\r\n    }),\r\n    \"\\r\\n\": new Array(maxCachedValues).fill(0).map((_, index) => {\r\n      return \"\\r\\n\" + \" \".repeat(index);\r\n    })\r\n  },\r\n  \"\t\": {\r\n    \"\\n\": new Array(maxCachedValues).fill(0).map((_, index) => {\r\n      return \"\\n\" + \"\t\".repeat(index);\r\n    }),\r\n    \"\\r\": new Array(maxCachedValues).fill(0).map((_, index) => {\r\n      return \"\\r\" + \"\t\".repeat(index);\r\n    }),\r\n    \"\\r\\n\": new Array(maxCachedValues).fill(0).map((_, index) => {\r\n      return \"\\r\\n\" + \"\t\".repeat(index);\r\n    })\r\n  }\r\n};\r\nvar supportedEols = [\"\\n\", \"\\r\", \"\\r\\n\"];\r\n\r\n// node_modules/jsonc-parser/lib/esm/impl/format.js\r\nfunction format(documentText, range, options) {\r\n  let initialIndentLevel;\r\n  let formatText;\r\n  let formatTextStart;\r\n  let rangeStart;\r\n  let rangeEnd;\r\n  if (range) {\r\n    rangeStart = range.offset;\r\n    rangeEnd = rangeStart + range.length;\r\n    formatTextStart = rangeStart;\r\n    while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\r\n      formatTextStart--;\r\n    }\r\n    let endOffset = rangeEnd;\r\n    while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\r\n      endOffset++;\r\n    }\r\n    formatText = documentText.substring(formatTextStart, endOffset);\r\n    initialIndentLevel = computeIndentLevel(formatText, options);\r\n  } else {\r\n    formatText = documentText;\r\n    initialIndentLevel = 0;\r\n    formatTextStart = 0;\r\n    rangeStart = 0;\r\n    rangeEnd = documentText.length;\r\n  }\r\n  const eol = getEOL(options, documentText);\r\n  const eolFastPathSupported = supportedEols.includes(eol);\r\n  let numberLineBreaks = 0;\r\n  let indentLevel = 0;\r\n  let indentValue;\r\n  if (options.insertSpaces) {\r\n    indentValue = cachedSpaces[options.tabSize || 4] ?? repeat(cachedSpaces[1], options.tabSize || 4);\r\n  } else {\r\n    indentValue = \"\t\";\r\n  }\r\n  const indentType = indentValue === \"\t\" ? \"\t\" : \" \";\r\n  let scanner = createScanner(formatText, false);\r\n  let hasError = false;\r\n  function newLinesAndIndent() {\r\n    if (numberLineBreaks > 1) {\r\n      return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\r\n    }\r\n    const amountOfSpaces = indentValue.length * (initialIndentLevel + indentLevel);\r\n    if (!eolFastPathSupported || amountOfSpaces > cachedBreakLinesWithSpaces[indentType][eol].length) {\r\n      return eol + repeat(indentValue, initialIndentLevel + indentLevel);\r\n    }\r\n    if (amountOfSpaces <= 0) {\r\n      return eol;\r\n    }\r\n    return cachedBreakLinesWithSpaces[indentType][eol][amountOfSpaces];\r\n  }\r\n  function scanNext() {\r\n    let token = scanner.scan();\r\n    numberLineBreaks = 0;\r\n    while (token === 15 || token === 14) {\r\n      if (token === 14 && options.keepLines) {\r\n        numberLineBreaks += 1;\r\n      } else if (token === 14) {\r\n        numberLineBreaks = 1;\r\n      }\r\n      token = scanner.scan();\r\n    }\r\n    hasError = token === 16 || scanner.getTokenError() !== 0;\r\n    return token;\r\n  }\r\n  const editOperations = [];\r\n  function addEdit(text, startOffset, endOffset) {\r\n    if (!hasError && (!range || startOffset < rangeEnd && endOffset > rangeStart) && documentText.substring(startOffset, endOffset) !== text) {\r\n      editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\r\n    }\r\n  }\r\n  let firstToken = scanNext();\r\n  if (options.keepLines && numberLineBreaks > 0) {\r\n    addEdit(repeat(eol, numberLineBreaks), 0, 0);\r\n  }\r\n  if (firstToken !== 17) {\r\n    let firstTokenStart = scanner.getTokenOffset() + formatTextStart;\r\n    let initialIndent = indentValue.length * initialIndentLevel < 20 && options.insertSpaces ? cachedSpaces[indentValue.length * initialIndentLevel] : repeat(indentValue, initialIndentLevel);\r\n    addEdit(initialIndent, formatTextStart, firstTokenStart);\r\n  }\r\n  while (firstToken !== 17) {\r\n    let firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\r\n    let secondToken = scanNext();\r\n    let replaceContent = \"\";\r\n    let needsLineBreak = false;\r\n    while (numberLineBreaks === 0 && (secondToken === 12 || secondToken === 13)) {\r\n      let commentTokenStart = scanner.getTokenOffset() + formatTextStart;\r\n      addEdit(cachedSpaces[1], firstTokenEnd, commentTokenStart);\r\n      firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\r\n      needsLineBreak = secondToken === 12;\r\n      replaceContent = needsLineBreak ? newLinesAndIndent() : \"\";\r\n      secondToken = scanNext();\r\n    }\r\n    if (secondToken === 2) {\r\n      if (firstToken !== 1) {\r\n        indentLevel--;\r\n      }\r\n      ;\r\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1) {\r\n        replaceContent = newLinesAndIndent();\r\n      } else if (options.keepLines) {\r\n        replaceContent = cachedSpaces[1];\r\n      }\r\n    } else if (secondToken === 4) {\r\n      if (firstToken !== 3) {\r\n        indentLevel--;\r\n      }\r\n      ;\r\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3) {\r\n        replaceContent = newLinesAndIndent();\r\n      } else if (options.keepLines) {\r\n        replaceContent = cachedSpaces[1];\r\n      }\r\n    } else {\r\n      switch (firstToken) {\r\n        case 3:\r\n        case 1:\r\n          indentLevel++;\r\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\r\n            replaceContent = newLinesAndIndent();\r\n          } else {\r\n            replaceContent = cachedSpaces[1];\r\n          }\r\n          break;\r\n        case 5:\r\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\r\n            replaceContent = newLinesAndIndent();\r\n          } else {\r\n            replaceContent = cachedSpaces[1];\r\n          }\r\n          break;\r\n        case 12:\r\n          replaceContent = newLinesAndIndent();\r\n          break;\r\n        case 13:\r\n          if (numberLineBreaks > 0) {\r\n            replaceContent = newLinesAndIndent();\r\n          } else if (!needsLineBreak) {\r\n            replaceContent = cachedSpaces[1];\r\n          }\r\n          break;\r\n        case 6:\r\n          if (options.keepLines && numberLineBreaks > 0) {\r\n            replaceContent = newLinesAndIndent();\r\n          } else if (!needsLineBreak) {\r\n            replaceContent = cachedSpaces[1];\r\n          }\r\n          break;\r\n        case 10:\r\n          if (options.keepLines && numberLineBreaks > 0) {\r\n            replaceContent = newLinesAndIndent();\r\n          } else if (secondToken === 6 && !needsLineBreak) {\r\n            replaceContent = \"\";\r\n          }\r\n          break;\r\n        case 7:\r\n        case 8:\r\n        case 9:\r\n        case 11:\r\n        case 2:\r\n        case 4:\r\n          if (options.keepLines && numberLineBreaks > 0) {\r\n            replaceContent = newLinesAndIndent();\r\n          } else {\r\n            if ((secondToken === 12 || secondToken === 13) && !needsLineBreak) {\r\n              replaceContent = cachedSpaces[1];\r\n            } else if (secondToken !== 5 && secondToken !== 17) {\r\n              hasError = true;\r\n            }\r\n          }\r\n          break;\r\n        case 16:\r\n          hasError = true;\r\n          break;\r\n      }\r\n      if (numberLineBreaks > 0 && (secondToken === 12 || secondToken === 13)) {\r\n        replaceContent = newLinesAndIndent();\r\n      }\r\n    }\r\n    if (secondToken === 17) {\r\n      if (options.keepLines && numberLineBreaks > 0) {\r\n        replaceContent = newLinesAndIndent();\r\n      } else {\r\n        replaceContent = options.insertFinalNewline ? eol : \"\";\r\n      }\r\n    }\r\n    const secondTokenStart = scanner.getTokenOffset() + formatTextStart;\r\n    addEdit(replaceContent, firstTokenEnd, secondTokenStart);\r\n    firstToken = secondToken;\r\n  }\r\n  return editOperations;\r\n}\r\nfunction repeat(s, count) {\r\n  let result = \"\";\r\n  for (let i = 0; i < count; i++) {\r\n    result += s;\r\n  }\r\n  return result;\r\n}\r\nfunction computeIndentLevel(content, options) {\r\n  let i = 0;\r\n  let nChars = 0;\r\n  const tabSize = options.tabSize || 4;\r\n  while (i < content.length) {\r\n    let ch = content.charAt(i);\r\n    if (ch === cachedSpaces[1]) {\r\n      nChars++;\r\n    } else if (ch === \"\t\") {\r\n      nChars += tabSize;\r\n    } else {\r\n      break;\r\n    }\r\n    i++;\r\n  }\r\n  return Math.floor(nChars / tabSize);\r\n}\r\nfunction getEOL(options, text) {\r\n  for (let i = 0; i < text.length; i++) {\r\n    const ch = text.charAt(i);\r\n    if (ch === \"\\r\") {\r\n      if (i + 1 < text.length && text.charAt(i + 1) === \"\\n\") {\r\n        return \"\\r\\n\";\r\n      }\r\n      return \"\\r\";\r\n    } else if (ch === \"\\n\") {\r\n      return \"\\n\";\r\n    }\r\n  }\r\n  return options && options.eol || \"\\n\";\r\n}\r\nfunction isEOL(text, offset) {\r\n  return \"\\r\\n\".indexOf(text.charAt(offset)) !== -1;\r\n}\r\n\r\n// node_modules/jsonc-parser/lib/esm/impl/parser.js\r\nvar ParseOptions;\r\n(function(ParseOptions2) {\r\n  ParseOptions2.DEFAULT = {\r\n    allowTrailingComma: false\r\n  };\r\n})(ParseOptions || (ParseOptions = {}));\r\nfunction parse(text, errors = [], options = ParseOptions.DEFAULT) {\r\n  let currentProperty = null;\r\n  let currentParent = [];\r\n  const previousParents = [];\r\n  function onValue(value) {\r\n    if (Array.isArray(currentParent)) {\r\n      currentParent.push(value);\r\n    } else if (currentProperty !== null) {\r\n      currentParent[currentProperty] = value;\r\n    }\r\n  }\r\n  const visitor = {\r\n    onObjectBegin: () => {\r\n      const object = {};\r\n      onValue(object);\r\n      previousParents.push(currentParent);\r\n      currentParent = object;\r\n      currentProperty = null;\r\n    },\r\n    onObjectProperty: (name) => {\r\n      currentProperty = name;\r\n    },\r\n    onObjectEnd: () => {\r\n      currentParent = previousParents.pop();\r\n    },\r\n    onArrayBegin: () => {\r\n      const array = [];\r\n      onValue(array);\r\n      previousParents.push(currentParent);\r\n      currentParent = array;\r\n      currentProperty = null;\r\n    },\r\n    onArrayEnd: () => {\r\n      currentParent = previousParents.pop();\r\n    },\r\n    onLiteralValue: onValue,\r\n    onError: (error, offset, length) => {\r\n      errors.push({ error, offset, length });\r\n    }\r\n  };\r\n  visit(text, visitor, options);\r\n  return currentParent[0];\r\n}\r\nfunction getNodePath(node) {\r\n  if (!node.parent || !node.parent.children) {\r\n    return [];\r\n  }\r\n  const path = getNodePath(node.parent);\r\n  if (node.parent.type === \"property\") {\r\n    const key = node.parent.children[0].value;\r\n    path.push(key);\r\n  } else if (node.parent.type === \"array\") {\r\n    const index = node.parent.children.indexOf(node);\r\n    if (index !== -1) {\r\n      path.push(index);\r\n    }\r\n  }\r\n  return path;\r\n}\r\nfunction getNodeValue(node) {\r\n  switch (node.type) {\r\n    case \"array\":\r\n      return node.children.map(getNodeValue);\r\n    case \"object\":\r\n      const obj = /* @__PURE__ */ Object.create(null);\r\n      for (let prop of node.children) {\r\n        const valueNode = prop.children[1];\r\n        if (valueNode) {\r\n          obj[prop.children[0].value] = getNodeValue(valueNode);\r\n        }\r\n      }\r\n      return obj;\r\n    case \"null\":\r\n    case \"string\":\r\n    case \"number\":\r\n    case \"boolean\":\r\n      return node.value;\r\n    default:\r\n      return void 0;\r\n  }\r\n}\r\nfunction contains(node, offset, includeRightBound = false) {\r\n  return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;\r\n}\r\nfunction findNodeAtOffset(node, offset, includeRightBound = false) {\r\n  if (contains(node, offset, includeRightBound)) {\r\n    const children = node.children;\r\n    if (Array.isArray(children)) {\r\n      for (let i = 0; i < children.length && children[i].offset <= offset; i++) {\r\n        const item = findNodeAtOffset(children[i], offset, includeRightBound);\r\n        if (item) {\r\n          return item;\r\n        }\r\n      }\r\n    }\r\n    return node;\r\n  }\r\n  return void 0;\r\n}\r\nfunction visit(text, visitor, options = ParseOptions.DEFAULT) {\r\n  const _scanner = createScanner(text, false);\r\n  const _jsonPath = [];\r\n  function toNoArgVisit(visitFunction) {\r\n    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\r\n  }\r\n  function toNoArgVisitWithPath(visitFunction) {\r\n    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;\r\n  }\r\n  function toOneArgVisit(visitFunction) {\r\n    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\r\n  }\r\n  function toOneArgVisitWithPath(visitFunction) {\r\n    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;\r\n  }\r\n  const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\r\n  const disallowComments = options && options.disallowComments;\r\n  const allowTrailingComma = options && options.allowTrailingComma;\r\n  function scanNext() {\r\n    while (true) {\r\n      const token = _scanner.scan();\r\n      switch (_scanner.getTokenError()) {\r\n        case 4:\r\n          handleError(\r\n            14\r\n            /* ParseErrorCode.InvalidUnicode */\r\n          );\r\n          break;\r\n        case 5:\r\n          handleError(\r\n            15\r\n            /* ParseErrorCode.InvalidEscapeCharacter */\r\n          );\r\n          break;\r\n        case 3:\r\n          handleError(\r\n            13\r\n            /* ParseErrorCode.UnexpectedEndOfNumber */\r\n          );\r\n          break;\r\n        case 1:\r\n          if (!disallowComments) {\r\n            handleError(\r\n              11\r\n              /* ParseErrorCode.UnexpectedEndOfComment */\r\n            );\r\n          }\r\n          break;\r\n        case 2:\r\n          handleError(\r\n            12\r\n            /* ParseErrorCode.UnexpectedEndOfString */\r\n          );\r\n          break;\r\n        case 6:\r\n          handleError(\r\n            16\r\n            /* ParseErrorCode.InvalidCharacter */\r\n          );\r\n          break;\r\n      }\r\n      switch (token) {\r\n        case 12:\r\n        case 13:\r\n          if (disallowComments) {\r\n            handleError(\r\n              10\r\n              /* ParseErrorCode.InvalidCommentToken */\r\n            );\r\n          } else {\r\n            onComment();\r\n          }\r\n          break;\r\n        case 16:\r\n          handleError(\r\n            1\r\n            /* ParseErrorCode.InvalidSymbol */\r\n          );\r\n          break;\r\n        case 15:\r\n        case 14:\r\n          break;\r\n        default:\r\n          return token;\r\n      }\r\n    }\r\n  }\r\n  function handleError(error, skipUntilAfter = [], skipUntil = []) {\r\n    onError(error);\r\n    if (skipUntilAfter.length + skipUntil.length > 0) {\r\n      let token = _scanner.getToken();\r\n      while (token !== 17) {\r\n        if (skipUntilAfter.indexOf(token) !== -1) {\r\n          scanNext();\r\n          break;\r\n        } else if (skipUntil.indexOf(token) !== -1) {\r\n          break;\r\n        }\r\n        token = scanNext();\r\n      }\r\n    }\r\n  }\r\n  function parseString(isValue) {\r\n    const value = _scanner.getTokenValue();\r\n    if (isValue) {\r\n      onLiteralValue(value);\r\n    } else {\r\n      onObjectProperty(value);\r\n      _jsonPath.push(value);\r\n    }\r\n    scanNext();\r\n    return true;\r\n  }\r\n  function parseLiteral() {\r\n    switch (_scanner.getToken()) {\r\n      case 11:\r\n        const tokenValue = _scanner.getTokenValue();\r\n        let value = Number(tokenValue);\r\n        if (isNaN(value)) {\r\n          handleError(\r\n            2\r\n            /* ParseErrorCode.InvalidNumberFormat */\r\n          );\r\n          value = 0;\r\n        }\r\n        onLiteralValue(value);\r\n        break;\r\n      case 7:\r\n        onLiteralValue(null);\r\n        break;\r\n      case 8:\r\n        onLiteralValue(true);\r\n        break;\r\n      case 9:\r\n        onLiteralValue(false);\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n    scanNext();\r\n    return true;\r\n  }\r\n  function parseProperty() {\r\n    if (_scanner.getToken() !== 10) {\r\n      handleError(3, [], [\r\n        2,\r\n        5\r\n        /* SyntaxKind.CommaToken */\r\n      ]);\r\n      return false;\r\n    }\r\n    parseString(false);\r\n    if (_scanner.getToken() === 6) {\r\n      onSeparator(\":\");\r\n      scanNext();\r\n      if (!parseValue()) {\r\n        handleError(4, [], [\r\n          2,\r\n          5\r\n          /* SyntaxKind.CommaToken */\r\n        ]);\r\n      }\r\n    } else {\r\n      handleError(5, [], [\r\n        2,\r\n        5\r\n        /* SyntaxKind.CommaToken */\r\n      ]);\r\n    }\r\n    _jsonPath.pop();\r\n    return true;\r\n  }\r\n  function parseObject() {\r\n    onObjectBegin();\r\n    scanNext();\r\n    let needsComma = false;\r\n    while (_scanner.getToken() !== 2 && _scanner.getToken() !== 17) {\r\n      if (_scanner.getToken() === 5) {\r\n        if (!needsComma) {\r\n          handleError(4, [], []);\r\n        }\r\n        onSeparator(\",\");\r\n        scanNext();\r\n        if (_scanner.getToken() === 2 && allowTrailingComma) {\r\n          break;\r\n        }\r\n      } else if (needsComma) {\r\n        handleError(6, [], []);\r\n      }\r\n      if (!parseProperty()) {\r\n        handleError(4, [], [\r\n          2,\r\n          5\r\n          /* SyntaxKind.CommaToken */\r\n        ]);\r\n      }\r\n      needsComma = true;\r\n    }\r\n    onObjectEnd();\r\n    if (_scanner.getToken() !== 2) {\r\n      handleError(7, [\r\n        2\r\n        /* SyntaxKind.CloseBraceToken */\r\n      ], []);\r\n    } else {\r\n      scanNext();\r\n    }\r\n    return true;\r\n  }\r\n  function parseArray() {\r\n    onArrayBegin();\r\n    scanNext();\r\n    let isFirstElement = true;\r\n    let needsComma = false;\r\n    while (_scanner.getToken() !== 4 && _scanner.getToken() !== 17) {\r\n      if (_scanner.getToken() === 5) {\r\n        if (!needsComma) {\r\n          handleError(4, [], []);\r\n        }\r\n        onSeparator(\",\");\r\n        scanNext();\r\n        if (_scanner.getToken() === 4 && allowTrailingComma) {\r\n          break;\r\n        }\r\n      } else if (needsComma) {\r\n        handleError(6, [], []);\r\n      }\r\n      if (isFirstElement) {\r\n        _jsonPath.push(0);\r\n        isFirstElement = false;\r\n      } else {\r\n        _jsonPath[_jsonPath.length - 1]++;\r\n      }\r\n      if (!parseValue()) {\r\n        handleError(4, [], [\r\n          4,\r\n          5\r\n          /* SyntaxKind.CommaToken */\r\n        ]);\r\n      }\r\n      needsComma = true;\r\n    }\r\n    onArrayEnd();\r\n    if (!isFirstElement) {\r\n      _jsonPath.pop();\r\n    }\r\n    if (_scanner.getToken() !== 4) {\r\n      handleError(8, [\r\n        4\r\n        /* SyntaxKind.CloseBracketToken */\r\n      ], []);\r\n    } else {\r\n      scanNext();\r\n    }\r\n    return true;\r\n  }\r\n  function parseValue() {\r\n    switch (_scanner.getToken()) {\r\n      case 3:\r\n        return parseArray();\r\n      case 1:\r\n        return parseObject();\r\n      case 10:\r\n        return parseString(true);\r\n      default:\r\n        return parseLiteral();\r\n    }\r\n  }\r\n  scanNext();\r\n  if (_scanner.getToken() === 17) {\r\n    if (options.allowEmptyContent) {\r\n      return true;\r\n    }\r\n    handleError(4, [], []);\r\n    return false;\r\n  }\r\n  if (!parseValue()) {\r\n    handleError(4, [], []);\r\n    return false;\r\n  }\r\n  if (_scanner.getToken() !== 17) {\r\n    handleError(9, [], []);\r\n  }\r\n  return true;\r\n}\r\n\r\n// node_modules/jsonc-parser/lib/esm/main.js\r\nvar createScanner2 = createScanner;\r\nvar ScanError;\r\n(function(ScanError2) {\r\n  ScanError2[ScanError2[\"None\"] = 0] = \"None\";\r\n  ScanError2[ScanError2[\"UnexpectedEndOfComment\"] = 1] = \"UnexpectedEndOfComment\";\r\n  ScanError2[ScanError2[\"UnexpectedEndOfString\"] = 2] = \"UnexpectedEndOfString\";\r\n  ScanError2[ScanError2[\"UnexpectedEndOfNumber\"] = 3] = \"UnexpectedEndOfNumber\";\r\n  ScanError2[ScanError2[\"InvalidUnicode\"] = 4] = \"InvalidUnicode\";\r\n  ScanError2[ScanError2[\"InvalidEscapeCharacter\"] = 5] = \"InvalidEscapeCharacter\";\r\n  ScanError2[ScanError2[\"InvalidCharacter\"] = 6] = \"InvalidCharacter\";\r\n})(ScanError || (ScanError = {}));\r\nvar SyntaxKind;\r\n(function(SyntaxKind2) {\r\n  SyntaxKind2[SyntaxKind2[\"OpenBraceToken\"] = 1] = \"OpenBraceToken\";\r\n  SyntaxKind2[SyntaxKind2[\"CloseBraceToken\"] = 2] = \"CloseBraceToken\";\r\n  SyntaxKind2[SyntaxKind2[\"OpenBracketToken\"] = 3] = \"OpenBracketToken\";\r\n  SyntaxKind2[SyntaxKind2[\"CloseBracketToken\"] = 4] = \"CloseBracketToken\";\r\n  SyntaxKind2[SyntaxKind2[\"CommaToken\"] = 5] = \"CommaToken\";\r\n  SyntaxKind2[SyntaxKind2[\"ColonToken\"] = 6] = \"ColonToken\";\r\n  SyntaxKind2[SyntaxKind2[\"NullKeyword\"] = 7] = \"NullKeyword\";\r\n  SyntaxKind2[SyntaxKind2[\"TrueKeyword\"] = 8] = \"TrueKeyword\";\r\n  SyntaxKind2[SyntaxKind2[\"FalseKeyword\"] = 9] = \"FalseKeyword\";\r\n  SyntaxKind2[SyntaxKind2[\"StringLiteral\"] = 10] = \"StringLiteral\";\r\n  SyntaxKind2[SyntaxKind2[\"NumericLiteral\"] = 11] = \"NumericLiteral\";\r\n  SyntaxKind2[SyntaxKind2[\"LineCommentTrivia\"] = 12] = \"LineCommentTrivia\";\r\n  SyntaxKind2[SyntaxKind2[\"BlockCommentTrivia\"] = 13] = \"BlockCommentTrivia\";\r\n  SyntaxKind2[SyntaxKind2[\"LineBreakTrivia\"] = 14] = \"LineBreakTrivia\";\r\n  SyntaxKind2[SyntaxKind2[\"Trivia\"] = 15] = \"Trivia\";\r\n  SyntaxKind2[SyntaxKind2[\"Unknown\"] = 16] = \"Unknown\";\r\n  SyntaxKind2[SyntaxKind2[\"EOF\"] = 17] = \"EOF\";\r\n})(SyntaxKind || (SyntaxKind = {}));\r\nvar parse2 = parse;\r\nvar findNodeAtOffset2 = findNodeAtOffset;\r\nvar getNodePath2 = getNodePath;\r\nvar getNodeValue2 = getNodeValue;\r\nvar ParseErrorCode;\r\n(function(ParseErrorCode2) {\r\n  ParseErrorCode2[ParseErrorCode2[\"InvalidSymbol\"] = 1] = \"InvalidSymbol\";\r\n  ParseErrorCode2[ParseErrorCode2[\"InvalidNumberFormat\"] = 2] = \"InvalidNumberFormat\";\r\n  ParseErrorCode2[ParseErrorCode2[\"PropertyNameExpected\"] = 3] = \"PropertyNameExpected\";\r\n  ParseErrorCode2[ParseErrorCode2[\"ValueExpected\"] = 4] = \"ValueExpected\";\r\n  ParseErrorCode2[ParseErrorCode2[\"ColonExpected\"] = 5] = \"ColonExpected\";\r\n  ParseErrorCode2[ParseErrorCode2[\"CommaExpected\"] = 6] = \"CommaExpected\";\r\n  ParseErrorCode2[ParseErrorCode2[\"CloseBraceExpected\"] = 7] = \"CloseBraceExpected\";\r\n  ParseErrorCode2[ParseErrorCode2[\"CloseBracketExpected\"] = 8] = \"CloseBracketExpected\";\r\n  ParseErrorCode2[ParseErrorCode2[\"EndOfFileExpected\"] = 9] = \"EndOfFileExpected\";\r\n  ParseErrorCode2[ParseErrorCode2[\"InvalidCommentToken\"] = 10] = \"InvalidCommentToken\";\r\n  ParseErrorCode2[ParseErrorCode2[\"UnexpectedEndOfComment\"] = 11] = \"UnexpectedEndOfComment\";\r\n  ParseErrorCode2[ParseErrorCode2[\"UnexpectedEndOfString\"] = 12] = \"UnexpectedEndOfString\";\r\n  ParseErrorCode2[ParseErrorCode2[\"UnexpectedEndOfNumber\"] = 13] = \"UnexpectedEndOfNumber\";\r\n  ParseErrorCode2[ParseErrorCode2[\"InvalidUnicode\"] = 14] = \"InvalidUnicode\";\r\n  ParseErrorCode2[ParseErrorCode2[\"InvalidEscapeCharacter\"] = 15] = \"InvalidEscapeCharacter\";\r\n  ParseErrorCode2[ParseErrorCode2[\"InvalidCharacter\"] = 16] = \"InvalidCharacter\";\r\n})(ParseErrorCode || (ParseErrorCode = {}));\r\nfunction format2(documentText, range, options) {\r\n  return format(documentText, range, options);\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/utils/objects.js\r\nfunction equals(one, other) {\r\n  if (one === other) {\r\n    return true;\r\n  }\r\n  if (one === null || one === void 0 || other === null || other === void 0) {\r\n    return false;\r\n  }\r\n  if (typeof one !== typeof other) {\r\n    return false;\r\n  }\r\n  if (typeof one !== \"object\") {\r\n    return false;\r\n  }\r\n  if (Array.isArray(one) !== Array.isArray(other)) {\r\n    return false;\r\n  }\r\n  let i, key;\r\n  if (Array.isArray(one)) {\r\n    if (one.length !== other.length) {\r\n      return false;\r\n    }\r\n    for (i = 0; i < one.length; i++) {\r\n      if (!equals(one[i], other[i])) {\r\n        return false;\r\n      }\r\n    }\r\n  } else {\r\n    const oneKeys = [];\r\n    for (key in one) {\r\n      oneKeys.push(key);\r\n    }\r\n    oneKeys.sort();\r\n    const otherKeys = [];\r\n    for (key in other) {\r\n      otherKeys.push(key);\r\n    }\r\n    otherKeys.sort();\r\n    if (!equals(oneKeys, otherKeys)) {\r\n      return false;\r\n    }\r\n    for (i = 0; i < oneKeys.length; i++) {\r\n      if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction isNumber(val) {\r\n  return typeof val === \"number\";\r\n}\r\nfunction isDefined(val) {\r\n  return typeof val !== \"undefined\";\r\n}\r\nfunction isBoolean(val) {\r\n  return typeof val === \"boolean\";\r\n}\r\nfunction isString(val) {\r\n  return typeof val === \"string\";\r\n}\r\nfunction isObject(val) {\r\n  return typeof val === \"object\" && val !== null && !Array.isArray(val);\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/utils/strings.js\r\nfunction startsWith(haystack, needle) {\r\n  if (haystack.length < needle.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < needle.length; i++) {\r\n    if (haystack[i] !== needle[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction endsWith(haystack, needle) {\r\n  const diff = haystack.length - needle.length;\r\n  if (diff > 0) {\r\n    return haystack.lastIndexOf(needle) === diff;\r\n  } else if (diff === 0) {\r\n    return haystack === needle;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\nfunction extendedRegExp(pattern) {\r\n  let flags = \"\";\r\n  if (startsWith(pattern, \"(?i)\")) {\r\n    pattern = pattern.substring(4);\r\n    flags = \"i\";\r\n  }\r\n  try {\r\n    return new RegExp(pattern, flags + \"u\");\r\n  } catch (e) {\r\n    try {\r\n      return new RegExp(pattern, flags);\r\n    } catch (e2) {\r\n      return void 0;\r\n    }\r\n  }\r\n}\r\nfunction stringLength(str) {\r\n  let count = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    count++;\r\n    const code = str.charCodeAt(i);\r\n    if (55296 <= code && code <= 56319) {\r\n      i++;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\n// node_modules/vscode-languageserver-types/lib/esm/main.js\r\nvar DocumentUri;\r\n(function(DocumentUri2) {\r\n  function is(value) {\r\n    return typeof value === \"string\";\r\n  }\r\n  DocumentUri2.is = is;\r\n})(DocumentUri || (DocumentUri = {}));\r\nvar URI;\r\n(function(URI3) {\r\n  function is(value) {\r\n    return typeof value === \"string\";\r\n  }\r\n  URI3.is = is;\r\n})(URI || (URI = {}));\r\nvar integer;\r\n(function(integer2) {\r\n  integer2.MIN_VALUE = -2147483648;\r\n  integer2.MAX_VALUE = 2147483647;\r\n  function is(value) {\r\n    return typeof value === \"number\" && integer2.MIN_VALUE <= value && value <= integer2.MAX_VALUE;\r\n  }\r\n  integer2.is = is;\r\n})(integer || (integer = {}));\r\nvar uinteger;\r\n(function(uinteger2) {\r\n  uinteger2.MIN_VALUE = 0;\r\n  uinteger2.MAX_VALUE = 2147483647;\r\n  function is(value) {\r\n    return typeof value === \"number\" && uinteger2.MIN_VALUE <= value && value <= uinteger2.MAX_VALUE;\r\n  }\r\n  uinteger2.is = is;\r\n})(uinteger || (uinteger = {}));\r\nvar Position;\r\n(function(Position2) {\r\n  function create(line, character) {\r\n    if (line === Number.MAX_VALUE) {\r\n      line = uinteger.MAX_VALUE;\r\n    }\r\n    if (character === Number.MAX_VALUE) {\r\n      character = uinteger.MAX_VALUE;\r\n    }\r\n    return { line, character };\r\n  }\r\n  Position2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\r\n  }\r\n  Position2.is = is;\r\n})(Position || (Position = {}));\r\nvar Range;\r\n(function(Range2) {\r\n  function create(one, two, three, four) {\r\n    if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\r\n      return { start: Position.create(one, two), end: Position.create(three, four) };\r\n    } else if (Position.is(one) && Position.is(two)) {\r\n      return { start: one, end: two };\r\n    } else {\r\n      throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\r\n    }\r\n  }\r\n  Range2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\r\n  }\r\n  Range2.is = is;\r\n})(Range || (Range = {}));\r\nvar Location;\r\n(function(Location2) {\r\n  function create(uri, range) {\r\n    return { uri, range };\r\n  }\r\n  Location2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\r\n  }\r\n  Location2.is = is;\r\n})(Location || (Location = {}));\r\nvar LocationLink;\r\n(function(LocationLink2) {\r\n  function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\r\n    return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\r\n  }\r\n  LocationLink2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\r\n  }\r\n  LocationLink2.is = is;\r\n})(LocationLink || (LocationLink = {}));\r\nvar Color;\r\n(function(Color2) {\r\n  function create(red, green, blue, alpha) {\r\n    return {\r\n      red,\r\n      green,\r\n      blue,\r\n      alpha\r\n    };\r\n  }\r\n  Color2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);\r\n  }\r\n  Color2.is = is;\r\n})(Color || (Color = {}));\r\nvar ColorInformation;\r\n(function(ColorInformation2) {\r\n  function create(range, color) {\r\n    return {\r\n      range,\r\n      color\r\n    };\r\n  }\r\n  ColorInformation2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\r\n  }\r\n  ColorInformation2.is = is;\r\n})(ColorInformation || (ColorInformation = {}));\r\nvar ColorPresentation;\r\n(function(ColorPresentation2) {\r\n  function create(label, textEdit, additionalTextEdits) {\r\n    return {\r\n      label,\r\n      textEdit,\r\n      additionalTextEdits\r\n    };\r\n  }\r\n  ColorPresentation2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\r\n  }\r\n  ColorPresentation2.is = is;\r\n})(ColorPresentation || (ColorPresentation = {}));\r\nvar FoldingRangeKind;\r\n(function(FoldingRangeKind2) {\r\n  FoldingRangeKind2.Comment = \"comment\";\r\n  FoldingRangeKind2.Imports = \"imports\";\r\n  FoldingRangeKind2.Region = \"region\";\r\n})(FoldingRangeKind || (FoldingRangeKind = {}));\r\nvar FoldingRange;\r\n(function(FoldingRange2) {\r\n  function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\r\n    const result = {\r\n      startLine,\r\n      endLine\r\n    };\r\n    if (Is.defined(startCharacter)) {\r\n      result.startCharacter = startCharacter;\r\n    }\r\n    if (Is.defined(endCharacter)) {\r\n      result.endCharacter = endCharacter;\r\n    }\r\n    if (Is.defined(kind)) {\r\n      result.kind = kind;\r\n    }\r\n    if (Is.defined(collapsedText)) {\r\n      result.collapsedText = collapsedText;\r\n    }\r\n    return result;\r\n  }\r\n  FoldingRange2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\r\n  }\r\n  FoldingRange2.is = is;\r\n})(FoldingRange || (FoldingRange = {}));\r\nvar DiagnosticRelatedInformation;\r\n(function(DiagnosticRelatedInformation2) {\r\n  function create(location, message) {\r\n    return {\r\n      location,\r\n      message\r\n    };\r\n  }\r\n  DiagnosticRelatedInformation2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\r\n  }\r\n  DiagnosticRelatedInformation2.is = is;\r\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\r\nvar DiagnosticSeverity;\r\n(function(DiagnosticSeverity2) {\r\n  DiagnosticSeverity2.Error = 1;\r\n  DiagnosticSeverity2.Warning = 2;\r\n  DiagnosticSeverity2.Information = 3;\r\n  DiagnosticSeverity2.Hint = 4;\r\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\r\nvar DiagnosticTag;\r\n(function(DiagnosticTag2) {\r\n  DiagnosticTag2.Unnecessary = 1;\r\n  DiagnosticTag2.Deprecated = 2;\r\n})(DiagnosticTag || (DiagnosticTag = {}));\r\nvar CodeDescription;\r\n(function(CodeDescription2) {\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && Is.string(candidate.href);\r\n  }\r\n  CodeDescription2.is = is;\r\n})(CodeDescription || (CodeDescription = {}));\r\nvar Diagnostic;\r\n(function(Diagnostic2) {\r\n  function create(range, message, severity, code, source, relatedInformation) {\r\n    let result = { range, message };\r\n    if (Is.defined(severity)) {\r\n      result.severity = severity;\r\n    }\r\n    if (Is.defined(code)) {\r\n      result.code = code;\r\n    }\r\n    if (Is.defined(source)) {\r\n      result.source = source;\r\n    }\r\n    if (Is.defined(relatedInformation)) {\r\n      result.relatedInformation = relatedInformation;\r\n    }\r\n    return result;\r\n  }\r\n  Diagnostic2.create = create;\r\n  function is(value) {\r\n    var _a;\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\r\n  }\r\n  Diagnostic2.is = is;\r\n})(Diagnostic || (Diagnostic = {}));\r\nvar Command;\r\n(function(Command2) {\r\n  function create(title, command, ...args) {\r\n    let result = { title, command };\r\n    if (Is.defined(args) && args.length > 0) {\r\n      result.arguments = args;\r\n    }\r\n    return result;\r\n  }\r\n  Command2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\r\n  }\r\n  Command2.is = is;\r\n})(Command || (Command = {}));\r\nvar TextEdit;\r\n(function(TextEdit2) {\r\n  function replace(range, newText) {\r\n    return { range, newText };\r\n  }\r\n  TextEdit2.replace = replace;\r\n  function insert(position, newText) {\r\n    return { range: { start: position, end: position }, newText };\r\n  }\r\n  TextEdit2.insert = insert;\r\n  function del(range) {\r\n    return { range, newText: \"\" };\r\n  }\r\n  TextEdit2.del = del;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);\r\n  }\r\n  TextEdit2.is = is;\r\n})(TextEdit || (TextEdit = {}));\r\nvar ChangeAnnotation;\r\n(function(ChangeAnnotation2) {\r\n  function create(label, needsConfirmation, description) {\r\n    const result = { label };\r\n    if (needsConfirmation !== void 0) {\r\n      result.needsConfirmation = needsConfirmation;\r\n    }\r\n    if (description !== void 0) {\r\n      result.description = description;\r\n    }\r\n    return result;\r\n  }\r\n  ChangeAnnotation2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);\r\n  }\r\n  ChangeAnnotation2.is = is;\r\n})(ChangeAnnotation || (ChangeAnnotation = {}));\r\nvar ChangeAnnotationIdentifier;\r\n(function(ChangeAnnotationIdentifier2) {\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.string(candidate);\r\n  }\r\n  ChangeAnnotationIdentifier2.is = is;\r\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\r\nvar AnnotatedTextEdit;\r\n(function(AnnotatedTextEdit2) {\r\n  function replace(range, newText, annotation) {\r\n    return { range, newText, annotationId: annotation };\r\n  }\r\n  AnnotatedTextEdit2.replace = replace;\r\n  function insert(position, newText, annotation) {\r\n    return { range: { start: position, end: position }, newText, annotationId: annotation };\r\n  }\r\n  AnnotatedTextEdit2.insert = insert;\r\n  function del(range, annotation) {\r\n    return { range, newText: \"\", annotationId: annotation };\r\n  }\r\n  AnnotatedTextEdit2.del = del;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\r\n  }\r\n  AnnotatedTextEdit2.is = is;\r\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\r\nvar TextDocumentEdit;\r\n(function(TextDocumentEdit2) {\r\n  function create(textDocument, edits) {\r\n    return { textDocument, edits };\r\n  }\r\n  TextDocumentEdit2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);\r\n  }\r\n  TextDocumentEdit2.is = is;\r\n})(TextDocumentEdit || (TextDocumentEdit = {}));\r\nvar CreateFile;\r\n(function(CreateFile2) {\r\n  function create(uri, options, annotation) {\r\n    let result = {\r\n      kind: \"create\",\r\n      uri\r\n    };\r\n    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n      result.options = options;\r\n    }\r\n    if (annotation !== void 0) {\r\n      result.annotationId = annotation;\r\n    }\r\n    return result;\r\n  }\r\n  CreateFile2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return candidate && candidate.kind === \"create\" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));\r\n  }\r\n  CreateFile2.is = is;\r\n})(CreateFile || (CreateFile = {}));\r\nvar RenameFile;\r\n(function(RenameFile2) {\r\n  function create(oldUri, newUri, options, annotation) {\r\n    let result = {\r\n      kind: \"rename\",\r\n      oldUri,\r\n      newUri\r\n    };\r\n    if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {\r\n      result.options = options;\r\n    }\r\n    if (annotation !== void 0) {\r\n      result.annotationId = annotation;\r\n    }\r\n    return result;\r\n  }\r\n  RenameFile2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return candidate && candidate.kind === \"rename\" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));\r\n  }\r\n  RenameFile2.is = is;\r\n})(RenameFile || (RenameFile = {}));\r\nvar DeleteFile;\r\n(function(DeleteFile2) {\r\n  function create(uri, options, annotation) {\r\n    let result = {\r\n      kind: \"delete\",\r\n      uri\r\n    };\r\n    if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {\r\n      result.options = options;\r\n    }\r\n    if (annotation !== void 0) {\r\n      result.annotationId = annotation;\r\n    }\r\n    return result;\r\n  }\r\n  DeleteFile2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return candidate && candidate.kind === \"delete\" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));\r\n  }\r\n  DeleteFile2.is = is;\r\n})(DeleteFile || (DeleteFile = {}));\r\nvar WorkspaceEdit;\r\n(function(WorkspaceEdit2) {\r\n  function is(value) {\r\n    let candidate = value;\r\n    return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every((change) => {\r\n      if (Is.string(change.kind)) {\r\n        return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\r\n      } else {\r\n        return TextDocumentEdit.is(change);\r\n      }\r\n    }));\r\n  }\r\n  WorkspaceEdit2.is = is;\r\n})(WorkspaceEdit || (WorkspaceEdit = {}));\r\nvar TextDocumentIdentifier;\r\n(function(TextDocumentIdentifier2) {\r\n  function create(uri) {\r\n    return { uri };\r\n  }\r\n  TextDocumentIdentifier2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Is.string(candidate.uri);\r\n  }\r\n  TextDocumentIdentifier2.is = is;\r\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\r\nvar VersionedTextDocumentIdentifier;\r\n(function(VersionedTextDocumentIdentifier2) {\r\n  function create(uri, version) {\r\n    return { uri, version };\r\n  }\r\n  VersionedTextDocumentIdentifier2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\r\n  }\r\n  VersionedTextDocumentIdentifier2.is = is;\r\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\r\nvar OptionalVersionedTextDocumentIdentifier;\r\n(function(OptionalVersionedTextDocumentIdentifier2) {\r\n  function create(uri, version) {\r\n    return { uri, version };\r\n  }\r\n  OptionalVersionedTextDocumentIdentifier2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\r\n  }\r\n  OptionalVersionedTextDocumentIdentifier2.is = is;\r\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\r\nvar TextDocumentItem;\r\n(function(TextDocumentItem2) {\r\n  function create(uri, languageId, version, text) {\r\n    return { uri, languageId, version, text };\r\n  }\r\n  TextDocumentItem2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\r\n  }\r\n  TextDocumentItem2.is = is;\r\n})(TextDocumentItem || (TextDocumentItem = {}));\r\nvar MarkupKind;\r\n(function(MarkupKind2) {\r\n  MarkupKind2.PlainText = \"plaintext\";\r\n  MarkupKind2.Markdown = \"markdown\";\r\n  function is(value) {\r\n    const candidate = value;\r\n    return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;\r\n  }\r\n  MarkupKind2.is = is;\r\n})(MarkupKind || (MarkupKind = {}));\r\nvar MarkupContent;\r\n(function(MarkupContent2) {\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\r\n  }\r\n  MarkupContent2.is = is;\r\n})(MarkupContent || (MarkupContent = {}));\r\nvar CompletionItemKind;\r\n(function(CompletionItemKind2) {\r\n  CompletionItemKind2.Text = 1;\r\n  CompletionItemKind2.Method = 2;\r\n  CompletionItemKind2.Function = 3;\r\n  CompletionItemKind2.Constructor = 4;\r\n  CompletionItemKind2.Field = 5;\r\n  CompletionItemKind2.Variable = 6;\r\n  CompletionItemKind2.Class = 7;\r\n  CompletionItemKind2.Interface = 8;\r\n  CompletionItemKind2.Module = 9;\r\n  CompletionItemKind2.Property = 10;\r\n  CompletionItemKind2.Unit = 11;\r\n  CompletionItemKind2.Value = 12;\r\n  CompletionItemKind2.Enum = 13;\r\n  CompletionItemKind2.Keyword = 14;\r\n  CompletionItemKind2.Snippet = 15;\r\n  CompletionItemKind2.Color = 16;\r\n  CompletionItemKind2.File = 17;\r\n  CompletionItemKind2.Reference = 18;\r\n  CompletionItemKind2.Folder = 19;\r\n  CompletionItemKind2.EnumMember = 20;\r\n  CompletionItemKind2.Constant = 21;\r\n  CompletionItemKind2.Struct = 22;\r\n  CompletionItemKind2.Event = 23;\r\n  CompletionItemKind2.Operator = 24;\r\n  CompletionItemKind2.TypeParameter = 25;\r\n})(CompletionItemKind || (CompletionItemKind = {}));\r\nvar InsertTextFormat;\r\n(function(InsertTextFormat2) {\r\n  InsertTextFormat2.PlainText = 1;\r\n  InsertTextFormat2.Snippet = 2;\r\n})(InsertTextFormat || (InsertTextFormat = {}));\r\nvar CompletionItemTag;\r\n(function(CompletionItemTag2) {\r\n  CompletionItemTag2.Deprecated = 1;\r\n})(CompletionItemTag || (CompletionItemTag = {}));\r\nvar InsertReplaceEdit;\r\n(function(InsertReplaceEdit2) {\r\n  function create(newText, insert, replace) {\r\n    return { newText, insert, replace };\r\n  }\r\n  InsertReplaceEdit2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\r\n  }\r\n  InsertReplaceEdit2.is = is;\r\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\r\nvar InsertTextMode;\r\n(function(InsertTextMode2) {\r\n  InsertTextMode2.asIs = 1;\r\n  InsertTextMode2.adjustIndentation = 2;\r\n})(InsertTextMode || (InsertTextMode = {}));\r\nvar CompletionItemLabelDetails;\r\n(function(CompletionItemLabelDetails2) {\r\n  function is(value) {\r\n    const candidate = value;\r\n    return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);\r\n  }\r\n  CompletionItemLabelDetails2.is = is;\r\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\r\nvar CompletionItem;\r\n(function(CompletionItem2) {\r\n  function create(label) {\r\n    return { label };\r\n  }\r\n  CompletionItem2.create = create;\r\n})(CompletionItem || (CompletionItem = {}));\r\nvar CompletionList;\r\n(function(CompletionList2) {\r\n  function create(items, isIncomplete) {\r\n    return { items: items ? items : [], isIncomplete: !!isIncomplete };\r\n  }\r\n  CompletionList2.create = create;\r\n})(CompletionList || (CompletionList = {}));\r\nvar MarkedString;\r\n(function(MarkedString2) {\r\n  function fromPlainText(plainText) {\r\n    return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\");\r\n  }\r\n  MarkedString2.fromPlainText = fromPlainText;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);\r\n  }\r\n  MarkedString2.is = is;\r\n})(MarkedString || (MarkedString = {}));\r\nvar Hover;\r\n(function(Hover2) {\r\n  function is(value) {\r\n    let candidate = value;\r\n    return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\r\n  }\r\n  Hover2.is = is;\r\n})(Hover || (Hover = {}));\r\nvar ParameterInformation;\r\n(function(ParameterInformation2) {\r\n  function create(label, documentation) {\r\n    return documentation ? { label, documentation } : { label };\r\n  }\r\n  ParameterInformation2.create = create;\r\n})(ParameterInformation || (ParameterInformation = {}));\r\nvar SignatureInformation;\r\n(function(SignatureInformation2) {\r\n  function create(label, documentation, ...parameters) {\r\n    let result = { label };\r\n    if (Is.defined(documentation)) {\r\n      result.documentation = documentation;\r\n    }\r\n    if (Is.defined(parameters)) {\r\n      result.parameters = parameters;\r\n    } else {\r\n      result.parameters = [];\r\n    }\r\n    return result;\r\n  }\r\n  SignatureInformation2.create = create;\r\n})(SignatureInformation || (SignatureInformation = {}));\r\nvar DocumentHighlightKind;\r\n(function(DocumentHighlightKind2) {\r\n  DocumentHighlightKind2.Text = 1;\r\n  DocumentHighlightKind2.Read = 2;\r\n  DocumentHighlightKind2.Write = 3;\r\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\r\nvar DocumentHighlight;\r\n(function(DocumentHighlight2) {\r\n  function create(range, kind) {\r\n    let result = { range };\r\n    if (Is.number(kind)) {\r\n      result.kind = kind;\r\n    }\r\n    return result;\r\n  }\r\n  DocumentHighlight2.create = create;\r\n})(DocumentHighlight || (DocumentHighlight = {}));\r\nvar SymbolKind;\r\n(function(SymbolKind2) {\r\n  SymbolKind2.File = 1;\r\n  SymbolKind2.Module = 2;\r\n  SymbolKind2.Namespace = 3;\r\n  SymbolKind2.Package = 4;\r\n  SymbolKind2.Class = 5;\r\n  SymbolKind2.Method = 6;\r\n  SymbolKind2.Property = 7;\r\n  SymbolKind2.Field = 8;\r\n  SymbolKind2.Constructor = 9;\r\n  SymbolKind2.Enum = 10;\r\n  SymbolKind2.Interface = 11;\r\n  SymbolKind2.Function = 12;\r\n  SymbolKind2.Variable = 13;\r\n  SymbolKind2.Constant = 14;\r\n  SymbolKind2.String = 15;\r\n  SymbolKind2.Number = 16;\r\n  SymbolKind2.Boolean = 17;\r\n  SymbolKind2.Array = 18;\r\n  SymbolKind2.Object = 19;\r\n  SymbolKind2.Key = 20;\r\n  SymbolKind2.Null = 21;\r\n  SymbolKind2.EnumMember = 22;\r\n  SymbolKind2.Struct = 23;\r\n  SymbolKind2.Event = 24;\r\n  SymbolKind2.Operator = 25;\r\n  SymbolKind2.TypeParameter = 26;\r\n})(SymbolKind || (SymbolKind = {}));\r\nvar SymbolTag;\r\n(function(SymbolTag2) {\r\n  SymbolTag2.Deprecated = 1;\r\n})(SymbolTag || (SymbolTag = {}));\r\nvar SymbolInformation;\r\n(function(SymbolInformation2) {\r\n  function create(name, kind, range, uri, containerName) {\r\n    let result = {\r\n      name,\r\n      kind,\r\n      location: { uri, range }\r\n    };\r\n    if (containerName) {\r\n      result.containerName = containerName;\r\n    }\r\n    return result;\r\n  }\r\n  SymbolInformation2.create = create;\r\n})(SymbolInformation || (SymbolInformation = {}));\r\nvar WorkspaceSymbol;\r\n(function(WorkspaceSymbol2) {\r\n  function create(name, kind, uri, range) {\r\n    return range !== void 0 ? { name, kind, location: { uri, range } } : { name, kind, location: { uri } };\r\n  }\r\n  WorkspaceSymbol2.create = create;\r\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\r\nvar DocumentSymbol;\r\n(function(DocumentSymbol2) {\r\n  function create(name, detail, kind, range, selectionRange, children) {\r\n    let result = {\r\n      name,\r\n      detail,\r\n      kind,\r\n      range,\r\n      selectionRange\r\n    };\r\n    if (children !== void 0) {\r\n      result.children = children;\r\n    }\r\n    return result;\r\n  }\r\n  DocumentSymbol2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));\r\n  }\r\n  DocumentSymbol2.is = is;\r\n})(DocumentSymbol || (DocumentSymbol = {}));\r\nvar CodeActionKind;\r\n(function(CodeActionKind2) {\r\n  CodeActionKind2.Empty = \"\";\r\n  CodeActionKind2.QuickFix = \"quickfix\";\r\n  CodeActionKind2.Refactor = \"refactor\";\r\n  CodeActionKind2.RefactorExtract = \"refactor.extract\";\r\n  CodeActionKind2.RefactorInline = \"refactor.inline\";\r\n  CodeActionKind2.RefactorRewrite = \"refactor.rewrite\";\r\n  CodeActionKind2.Source = \"source\";\r\n  CodeActionKind2.SourceOrganizeImports = \"source.organizeImports\";\r\n  CodeActionKind2.SourceFixAll = \"source.fixAll\";\r\n})(CodeActionKind || (CodeActionKind = {}));\r\nvar CodeActionTriggerKind;\r\n(function(CodeActionTriggerKind2) {\r\n  CodeActionTriggerKind2.Invoked = 1;\r\n  CodeActionTriggerKind2.Automatic = 2;\r\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\r\nvar CodeActionContext;\r\n(function(CodeActionContext2) {\r\n  function create(diagnostics, only, triggerKind) {\r\n    let result = { diagnostics };\r\n    if (only !== void 0 && only !== null) {\r\n      result.only = only;\r\n    }\r\n    if (triggerKind !== void 0 && triggerKind !== null) {\r\n      result.triggerKind = triggerKind;\r\n    }\r\n    return result;\r\n  }\r\n  CodeActionContext2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\r\n  }\r\n  CodeActionContext2.is = is;\r\n})(CodeActionContext || (CodeActionContext = {}));\r\nvar CodeAction;\r\n(function(CodeAction2) {\r\n  function create(title, kindOrCommandOrEdit, kind) {\r\n    let result = { title };\r\n    let checkKind = true;\r\n    if (typeof kindOrCommandOrEdit === \"string\") {\r\n      checkKind = false;\r\n      result.kind = kindOrCommandOrEdit;\r\n    } else if (Command.is(kindOrCommandOrEdit)) {\r\n      result.command = kindOrCommandOrEdit;\r\n    } else {\r\n      result.edit = kindOrCommandOrEdit;\r\n    }\r\n    if (checkKind && kind !== void 0) {\r\n      result.kind = kind;\r\n    }\r\n    return result;\r\n  }\r\n  CodeAction2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\r\n  }\r\n  CodeAction2.is = is;\r\n})(CodeAction || (CodeAction = {}));\r\nvar CodeLens;\r\n(function(CodeLens2) {\r\n  function create(range, data) {\r\n    let result = { range };\r\n    if (Is.defined(data)) {\r\n      result.data = data;\r\n    }\r\n    return result;\r\n  }\r\n  CodeLens2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\r\n  }\r\n  CodeLens2.is = is;\r\n})(CodeLens || (CodeLens = {}));\r\nvar FormattingOptions;\r\n(function(FormattingOptions2) {\r\n  function create(tabSize, insertSpaces) {\r\n    return { tabSize, insertSpaces };\r\n  }\r\n  FormattingOptions2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\r\n  }\r\n  FormattingOptions2.is = is;\r\n})(FormattingOptions || (FormattingOptions = {}));\r\nvar DocumentLink;\r\n(function(DocumentLink2) {\r\n  function create(range, target, data) {\r\n    return { range, target, data };\r\n  }\r\n  DocumentLink2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\r\n  }\r\n  DocumentLink2.is = is;\r\n})(DocumentLink || (DocumentLink = {}));\r\nvar SelectionRange;\r\n(function(SelectionRange2) {\r\n  function create(range, parent) {\r\n    return { range, parent };\r\n  }\r\n  SelectionRange2.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === void 0 || SelectionRange2.is(candidate.parent));\r\n  }\r\n  SelectionRange2.is = is;\r\n})(SelectionRange || (SelectionRange = {}));\r\nvar SemanticTokenTypes;\r\n(function(SemanticTokenTypes2) {\r\n  SemanticTokenTypes2[\"namespace\"] = \"namespace\";\r\n  SemanticTokenTypes2[\"type\"] = \"type\";\r\n  SemanticTokenTypes2[\"class\"] = \"class\";\r\n  SemanticTokenTypes2[\"enum\"] = \"enum\";\r\n  SemanticTokenTypes2[\"interface\"] = \"interface\";\r\n  SemanticTokenTypes2[\"struct\"] = \"struct\";\r\n  SemanticTokenTypes2[\"typeParameter\"] = \"typeParameter\";\r\n  SemanticTokenTypes2[\"parameter\"] = \"parameter\";\r\n  SemanticTokenTypes2[\"variable\"] = \"variable\";\r\n  SemanticTokenTypes2[\"property\"] = \"property\";\r\n  SemanticTokenTypes2[\"enumMember\"] = \"enumMember\";\r\n  SemanticTokenTypes2[\"event\"] = \"event\";\r\n  SemanticTokenTypes2[\"function\"] = \"function\";\r\n  SemanticTokenTypes2[\"method\"] = \"method\";\r\n  SemanticTokenTypes2[\"macro\"] = \"macro\";\r\n  SemanticTokenTypes2[\"keyword\"] = \"keyword\";\r\n  SemanticTokenTypes2[\"modifier\"] = \"modifier\";\r\n  SemanticTokenTypes2[\"comment\"] = \"comment\";\r\n  SemanticTokenTypes2[\"string\"] = \"string\";\r\n  SemanticTokenTypes2[\"number\"] = \"number\";\r\n  SemanticTokenTypes2[\"regexp\"] = \"regexp\";\r\n  SemanticTokenTypes2[\"operator\"] = \"operator\";\r\n  SemanticTokenTypes2[\"decorator\"] = \"decorator\";\r\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\r\nvar SemanticTokenModifiers;\r\n(function(SemanticTokenModifiers2) {\r\n  SemanticTokenModifiers2[\"declaration\"] = \"declaration\";\r\n  SemanticTokenModifiers2[\"definition\"] = \"definition\";\r\n  SemanticTokenModifiers2[\"readonly\"] = \"readonly\";\r\n  SemanticTokenModifiers2[\"static\"] = \"static\";\r\n  SemanticTokenModifiers2[\"deprecated\"] = \"deprecated\";\r\n  SemanticTokenModifiers2[\"abstract\"] = \"abstract\";\r\n  SemanticTokenModifiers2[\"async\"] = \"async\";\r\n  SemanticTokenModifiers2[\"modification\"] = \"modification\";\r\n  SemanticTokenModifiers2[\"documentation\"] = \"documentation\";\r\n  SemanticTokenModifiers2[\"defaultLibrary\"] = \"defaultLibrary\";\r\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\r\nvar SemanticTokens;\r\n(function(SemanticTokens2) {\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === \"string\") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === \"number\");\r\n  }\r\n  SemanticTokens2.is = is;\r\n})(SemanticTokens || (SemanticTokens = {}));\r\nvar InlineValueText;\r\n(function(InlineValueText2) {\r\n  function create(range, text) {\r\n    return { range, text };\r\n  }\r\n  InlineValueText2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\r\n  }\r\n  InlineValueText2.is = is;\r\n})(InlineValueText || (InlineValueText = {}));\r\nvar InlineValueVariableLookup;\r\n(function(InlineValueVariableLookup2) {\r\n  function create(range, variableName, caseSensitiveLookup) {\r\n    return { range, variableName, caseSensitiveLookup };\r\n  }\r\n  InlineValueVariableLookup2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);\r\n  }\r\n  InlineValueVariableLookup2.is = is;\r\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\r\nvar InlineValueEvaluatableExpression;\r\n(function(InlineValueEvaluatableExpression2) {\r\n  function create(range, expression) {\r\n    return { range, expression };\r\n  }\r\n  InlineValueEvaluatableExpression2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);\r\n  }\r\n  InlineValueEvaluatableExpression2.is = is;\r\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\r\nvar InlineValueContext;\r\n(function(InlineValueContext2) {\r\n  function create(frameId, stoppedLocation) {\r\n    return { frameId, stoppedLocation };\r\n  }\r\n  InlineValueContext2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.defined(candidate) && Range.is(value.stoppedLocation);\r\n  }\r\n  InlineValueContext2.is = is;\r\n})(InlineValueContext || (InlineValueContext = {}));\r\nvar InlayHintKind;\r\n(function(InlayHintKind2) {\r\n  InlayHintKind2.Type = 1;\r\n  InlayHintKind2.Parameter = 2;\r\n  function is(value) {\r\n    return value === 1 || value === 2;\r\n  }\r\n  InlayHintKind2.is = is;\r\n})(InlayHintKind || (InlayHintKind = {}));\r\nvar InlayHintLabelPart;\r\n(function(InlayHintLabelPart2) {\r\n  function create(value) {\r\n    return { value };\r\n  }\r\n  InlayHintLabelPart2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command.is(candidate.command));\r\n  }\r\n  InlayHintLabelPart2.is = is;\r\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\r\nvar InlayHint;\r\n(function(InlayHint2) {\r\n  function create(position, label, kind) {\r\n    const result = { position, label };\r\n    if (kind !== void 0) {\r\n      result.kind = kind;\r\n    }\r\n    return result;\r\n  }\r\n  InlayHint2.create = create;\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));\r\n  }\r\n  InlayHint2.is = is;\r\n})(InlayHint || (InlayHint = {}));\r\nvar StringValue;\r\n(function(StringValue2) {\r\n  function createSnippet(value) {\r\n    return { kind: \"snippet\", value };\r\n  }\r\n  StringValue2.createSnippet = createSnippet;\r\n})(StringValue || (StringValue = {}));\r\nvar InlineCompletionItem;\r\n(function(InlineCompletionItem2) {\r\n  function create(insertText, filterText, range, command) {\r\n    return { insertText, filterText, range, command };\r\n  }\r\n  InlineCompletionItem2.create = create;\r\n})(InlineCompletionItem || (InlineCompletionItem = {}));\r\nvar InlineCompletionList;\r\n(function(InlineCompletionList2) {\r\n  function create(items) {\r\n    return { items };\r\n  }\r\n  InlineCompletionList2.create = create;\r\n})(InlineCompletionList || (InlineCompletionList = {}));\r\nvar InlineCompletionTriggerKind;\r\n(function(InlineCompletionTriggerKind2) {\r\n  InlineCompletionTriggerKind2.Invoked = 0;\r\n  InlineCompletionTriggerKind2.Automatic = 1;\r\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\r\nvar SelectedCompletionInfo;\r\n(function(SelectedCompletionInfo2) {\r\n  function create(range, text) {\r\n    return { range, text };\r\n  }\r\n  SelectedCompletionInfo2.create = create;\r\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\r\nvar InlineCompletionContext;\r\n(function(InlineCompletionContext2) {\r\n  function create(triggerKind, selectedCompletionInfo) {\r\n    return { triggerKind, selectedCompletionInfo };\r\n  }\r\n  InlineCompletionContext2.create = create;\r\n})(InlineCompletionContext || (InlineCompletionContext = {}));\r\nvar WorkspaceFolder;\r\n(function(WorkspaceFolder2) {\r\n  function is(value) {\r\n    const candidate = value;\r\n    return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\r\n  }\r\n  WorkspaceFolder2.is = is;\r\n})(WorkspaceFolder || (WorkspaceFolder = {}));\r\nvar TextDocument;\r\n(function(TextDocument3) {\r\n  function create(uri, languageId, version, content) {\r\n    return new FullTextDocument(uri, languageId, version, content);\r\n  }\r\n  TextDocument3.create = create;\r\n  function is(value) {\r\n    let candidate = value;\r\n    return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\r\n  }\r\n  TextDocument3.is = is;\r\n  function applyEdits(document, edits) {\r\n    let text = document.getText();\r\n    let sortedEdits = mergeSort2(edits, (a2, b) => {\r\n      let diff = a2.range.start.line - b.range.start.line;\r\n      if (diff === 0) {\r\n        return a2.range.start.character - b.range.start.character;\r\n      }\r\n      return diff;\r\n    });\r\n    let lastModifiedOffset = text.length;\r\n    for (let i = sortedEdits.length - 1; i >= 0; i--) {\r\n      let e = sortedEdits[i];\r\n      let startOffset = document.offsetAt(e.range.start);\r\n      let endOffset = document.offsetAt(e.range.end);\r\n      if (endOffset <= lastModifiedOffset) {\r\n        text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\r\n      } else {\r\n        throw new Error(\"Overlapping edit\");\r\n      }\r\n      lastModifiedOffset = startOffset;\r\n    }\r\n    return text;\r\n  }\r\n  TextDocument3.applyEdits = applyEdits;\r\n  function mergeSort2(data, compare) {\r\n    if (data.length <= 1) {\r\n      return data;\r\n    }\r\n    const p = data.length / 2 | 0;\r\n    const left = data.slice(0, p);\r\n    const right = data.slice(p);\r\n    mergeSort2(left, compare);\r\n    mergeSort2(right, compare);\r\n    let leftIdx = 0;\r\n    let rightIdx = 0;\r\n    let i = 0;\r\n    while (leftIdx < left.length && rightIdx < right.length) {\r\n      let ret = compare(left[leftIdx], right[rightIdx]);\r\n      if (ret <= 0) {\r\n        data[i++] = left[leftIdx++];\r\n      } else {\r\n        data[i++] = right[rightIdx++];\r\n      }\r\n    }\r\n    while (leftIdx < left.length) {\r\n      data[i++] = left[leftIdx++];\r\n    }\r\n    while (rightIdx < right.length) {\r\n      data[i++] = right[rightIdx++];\r\n    }\r\n    return data;\r\n  }\r\n})(TextDocument || (TextDocument = {}));\r\nvar FullTextDocument = class {\r\n  constructor(uri, languageId, version, content) {\r\n    this._uri = uri;\r\n    this._languageId = languageId;\r\n    this._version = version;\r\n    this._content = content;\r\n    this._lineOffsets = void 0;\r\n  }\r\n  get uri() {\r\n    return this._uri;\r\n  }\r\n  get languageId() {\r\n    return this._languageId;\r\n  }\r\n  get version() {\r\n    return this._version;\r\n  }\r\n  getText(range) {\r\n    if (range) {\r\n      let start = this.offsetAt(range.start);\r\n      let end = this.offsetAt(range.end);\r\n      return this._content.substring(start, end);\r\n    }\r\n    return this._content;\r\n  }\r\n  update(event, version) {\r\n    this._content = event.text;\r\n    this._version = version;\r\n    this._lineOffsets = void 0;\r\n  }\r\n  getLineOffsets() {\r\n    if (this._lineOffsets === void 0) {\r\n      let lineOffsets = [];\r\n      let text = this._content;\r\n      let isLineStart = true;\r\n      for (let i = 0; i < text.length; i++) {\r\n        if (isLineStart) {\r\n          lineOffsets.push(i);\r\n          isLineStart = false;\r\n        }\r\n        let ch = text.charAt(i);\r\n        isLineStart = ch === \"\\r\" || ch === \"\\n\";\r\n        if (ch === \"\\r\" && i + 1 < text.length && text.charAt(i + 1) === \"\\n\") {\r\n          i++;\r\n        }\r\n      }\r\n      if (isLineStart && text.length > 0) {\r\n        lineOffsets.push(text.length);\r\n      }\r\n      this._lineOffsets = lineOffsets;\r\n    }\r\n    return this._lineOffsets;\r\n  }\r\n  positionAt(offset) {\r\n    offset = Math.max(Math.min(offset, this._content.length), 0);\r\n    let lineOffsets = this.getLineOffsets();\r\n    let low = 0, high = lineOffsets.length;\r\n    if (high === 0) {\r\n      return Position.create(0, offset);\r\n    }\r\n    while (low < high) {\r\n      let mid = Math.floor((low + high) / 2);\r\n      if (lineOffsets[mid] > offset) {\r\n        high = mid;\r\n      } else {\r\n        low = mid + 1;\r\n      }\r\n    }\r\n    let line = low - 1;\r\n    return Position.create(line, offset - lineOffsets[line]);\r\n  }\r\n  offsetAt(position) {\r\n    let lineOffsets = this.getLineOffsets();\r\n    if (position.line >= lineOffsets.length) {\r\n      return this._content.length;\r\n    } else if (position.line < 0) {\r\n      return 0;\r\n    }\r\n    let lineOffset = lineOffsets[position.line];\r\n    let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;\r\n    return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\r\n  }\r\n  get lineCount() {\r\n    return this.getLineOffsets().length;\r\n  }\r\n};\r\nvar Is;\r\n(function(Is2) {\r\n  const toString = Object.prototype.toString;\r\n  function defined(value) {\r\n    return typeof value !== \"undefined\";\r\n  }\r\n  Is2.defined = defined;\r\n  function undefined2(value) {\r\n    return typeof value === \"undefined\";\r\n  }\r\n  Is2.undefined = undefined2;\r\n  function boolean(value) {\r\n    return value === true || value === false;\r\n  }\r\n  Is2.boolean = boolean;\r\n  function string(value) {\r\n    return toString.call(value) === \"[object String]\";\r\n  }\r\n  Is2.string = string;\r\n  function number(value) {\r\n    return toString.call(value) === \"[object Number]\";\r\n  }\r\n  Is2.number = number;\r\n  function numberRange(value, min, max) {\r\n    return toString.call(value) === \"[object Number]\" && min <= value && value <= max;\r\n  }\r\n  Is2.numberRange = numberRange;\r\n  function integer2(value) {\r\n    return toString.call(value) === \"[object Number]\" && -2147483648 <= value && value <= 2147483647;\r\n  }\r\n  Is2.integer = integer2;\r\n  function uinteger2(value) {\r\n    return toString.call(value) === \"[object Number]\" && 0 <= value && value <= 2147483647;\r\n  }\r\n  Is2.uinteger = uinteger2;\r\n  function func(value) {\r\n    return toString.call(value) === \"[object Function]\";\r\n  }\r\n  Is2.func = func;\r\n  function objectLiteral(value) {\r\n    return value !== null && typeof value === \"object\";\r\n  }\r\n  Is2.objectLiteral = objectLiteral;\r\n  function typedArray(value, check) {\r\n    return Array.isArray(value) && value.every(check);\r\n  }\r\n  Is2.typedArray = typedArray;\r\n})(Is || (Is = {}));\r\n\r\n// node_modules/vscode-languageserver-textdocument/lib/esm/main.js\r\nvar FullTextDocument2 = class _FullTextDocument {\r\n  constructor(uri, languageId, version, content) {\r\n    this._uri = uri;\r\n    this._languageId = languageId;\r\n    this._version = version;\r\n    this._content = content;\r\n    this._lineOffsets = void 0;\r\n  }\r\n  get uri() {\r\n    return this._uri;\r\n  }\r\n  get languageId() {\r\n    return this._languageId;\r\n  }\r\n  get version() {\r\n    return this._version;\r\n  }\r\n  getText(range) {\r\n    if (range) {\r\n      const start = this.offsetAt(range.start);\r\n      const end = this.offsetAt(range.end);\r\n      return this._content.substring(start, end);\r\n    }\r\n    return this._content;\r\n  }\r\n  update(changes, version) {\r\n    for (let change of changes) {\r\n      if (_FullTextDocument.isIncremental(change)) {\r\n        const range = getWellformedRange(change.range);\r\n        const startOffset = this.offsetAt(range.start);\r\n        const endOffset = this.offsetAt(range.end);\r\n        this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\r\n        const startLine = Math.max(range.start.line, 0);\r\n        const endLine = Math.max(range.end.line, 0);\r\n        let lineOffsets = this._lineOffsets;\r\n        const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\r\n        if (endLine - startLine === addedLineOffsets.length) {\r\n          for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\r\n            lineOffsets[i + startLine + 1] = addedLineOffsets[i];\r\n          }\r\n        } else {\r\n          if (addedLineOffsets.length < 1e4) {\r\n            lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\r\n          } else {\r\n            this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\r\n          }\r\n        }\r\n        const diff = change.text.length - (endOffset - startOffset);\r\n        if (diff !== 0) {\r\n          for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\r\n            lineOffsets[i] = lineOffsets[i] + diff;\r\n          }\r\n        }\r\n      } else if (_FullTextDocument.isFull(change)) {\r\n        this._content = change.text;\r\n        this._lineOffsets = void 0;\r\n      } else {\r\n        throw new Error(\"Unknown change event received\");\r\n      }\r\n    }\r\n    this._version = version;\r\n  }\r\n  getLineOffsets() {\r\n    if (this._lineOffsets === void 0) {\r\n      this._lineOffsets = computeLineOffsets(this._content, true);\r\n    }\r\n    return this._lineOffsets;\r\n  }\r\n  positionAt(offset) {\r\n    offset = Math.max(Math.min(offset, this._content.length), 0);\r\n    let lineOffsets = this.getLineOffsets();\r\n    let low = 0, high = lineOffsets.length;\r\n    if (high === 0) {\r\n      return { line: 0, character: offset };\r\n    }\r\n    while (low < high) {\r\n      let mid = Math.floor((low + high) / 2);\r\n      if (lineOffsets[mid] > offset) {\r\n        high = mid;\r\n      } else {\r\n        low = mid + 1;\r\n      }\r\n    }\r\n    let line = low - 1;\r\n    return { line, character: offset - lineOffsets[line] };\r\n  }\r\n  offsetAt(position) {\r\n    let lineOffsets = this.getLineOffsets();\r\n    if (position.line >= lineOffsets.length) {\r\n      return this._content.length;\r\n    } else if (position.line < 0) {\r\n      return 0;\r\n    }\r\n    let lineOffset = lineOffsets[position.line];\r\n    let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;\r\n    return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\r\n  }\r\n  get lineCount() {\r\n    return this.getLineOffsets().length;\r\n  }\r\n  static isIncremental(event) {\r\n    let candidate = event;\r\n    return candidate !== void 0 && candidate !== null && typeof candidate.text === \"string\" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === \"number\");\r\n  }\r\n  static isFull(event) {\r\n    let candidate = event;\r\n    return candidate !== void 0 && candidate !== null && typeof candidate.text === \"string\" && candidate.range === void 0 && candidate.rangeLength === void 0;\r\n  }\r\n};\r\nvar TextDocument2;\r\n(function(TextDocument3) {\r\n  function create(uri, languageId, version, content) {\r\n    return new FullTextDocument2(uri, languageId, version, content);\r\n  }\r\n  TextDocument3.create = create;\r\n  function update(document, changes, version) {\r\n    if (document instanceof FullTextDocument2) {\r\n      document.update(changes, version);\r\n      return document;\r\n    } else {\r\n      throw new Error(\"TextDocument.update: document must be created by TextDocument.create\");\r\n    }\r\n  }\r\n  TextDocument3.update = update;\r\n  function applyEdits(document, edits) {\r\n    let text = document.getText();\r\n    let sortedEdits = mergeSort(edits.map(getWellformedEdit), (a2, b) => {\r\n      let diff = a2.range.start.line - b.range.start.line;\r\n      if (diff === 0) {\r\n        return a2.range.start.character - b.range.start.character;\r\n      }\r\n      return diff;\r\n    });\r\n    let lastModifiedOffset = 0;\r\n    const spans = [];\r\n    for (const e of sortedEdits) {\r\n      let startOffset = document.offsetAt(e.range.start);\r\n      if (startOffset < lastModifiedOffset) {\r\n        throw new Error(\"Overlapping edit\");\r\n      } else if (startOffset > lastModifiedOffset) {\r\n        spans.push(text.substring(lastModifiedOffset, startOffset));\r\n      }\r\n      if (e.newText.length) {\r\n        spans.push(e.newText);\r\n      }\r\n      lastModifiedOffset = document.offsetAt(e.range.end);\r\n    }\r\n    spans.push(text.substr(lastModifiedOffset));\r\n    return spans.join(\"\");\r\n  }\r\n  TextDocument3.applyEdits = applyEdits;\r\n})(TextDocument2 || (TextDocument2 = {}));\r\nfunction mergeSort(data, compare) {\r\n  if (data.length <= 1) {\r\n    return data;\r\n  }\r\n  const p = data.length / 2 | 0;\r\n  const left = data.slice(0, p);\r\n  const right = data.slice(p);\r\n  mergeSort(left, compare);\r\n  mergeSort(right, compare);\r\n  let leftIdx = 0;\r\n  let rightIdx = 0;\r\n  let i = 0;\r\n  while (leftIdx < left.length && rightIdx < right.length) {\r\n    let ret = compare(left[leftIdx], right[rightIdx]);\r\n    if (ret <= 0) {\r\n      data[i++] = left[leftIdx++];\r\n    } else {\r\n      data[i++] = right[rightIdx++];\r\n    }\r\n  }\r\n  while (leftIdx < left.length) {\r\n    data[i++] = left[leftIdx++];\r\n  }\r\n  while (rightIdx < right.length) {\r\n    data[i++] = right[rightIdx++];\r\n  }\r\n  return data;\r\n}\r\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\r\n  const result = isAtLineStart ? [textOffset] : [];\r\n  for (let i = 0; i < text.length; i++) {\r\n    let ch = text.charCodeAt(i);\r\n    if (ch === 13 || ch === 10) {\r\n      if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {\r\n        i++;\r\n      }\r\n      result.push(textOffset + i + 1);\r\n    }\r\n  }\r\n  return result;\r\n}\r\nfunction getWellformedRange(range) {\r\n  const start = range.start;\r\n  const end = range.end;\r\n  if (start.line > end.line || start.line === end.line && start.character > end.character) {\r\n    return { start: end, end: start };\r\n  }\r\n  return range;\r\n}\r\nfunction getWellformedEdit(textEdit) {\r\n  const range = getWellformedRange(textEdit.range);\r\n  if (range !== textEdit.range) {\r\n    return { newText: textEdit.newText, range };\r\n  }\r\n  return textEdit;\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/jsonLanguageTypes.js\r\nvar ErrorCode;\r\n(function(ErrorCode2) {\r\n  ErrorCode2[ErrorCode2[\"Undefined\"] = 0] = \"Undefined\";\r\n  ErrorCode2[ErrorCode2[\"EnumValueMismatch\"] = 1] = \"EnumValueMismatch\";\r\n  ErrorCode2[ErrorCode2[\"Deprecated\"] = 2] = \"Deprecated\";\r\n  ErrorCode2[ErrorCode2[\"UnexpectedEndOfComment\"] = 257] = \"UnexpectedEndOfComment\";\r\n  ErrorCode2[ErrorCode2[\"UnexpectedEndOfString\"] = 258] = \"UnexpectedEndOfString\";\r\n  ErrorCode2[ErrorCode2[\"UnexpectedEndOfNumber\"] = 259] = \"UnexpectedEndOfNumber\";\r\n  ErrorCode2[ErrorCode2[\"InvalidUnicode\"] = 260] = \"InvalidUnicode\";\r\n  ErrorCode2[ErrorCode2[\"InvalidEscapeCharacter\"] = 261] = \"InvalidEscapeCharacter\";\r\n  ErrorCode2[ErrorCode2[\"InvalidCharacter\"] = 262] = \"InvalidCharacter\";\r\n  ErrorCode2[ErrorCode2[\"PropertyExpected\"] = 513] = \"PropertyExpected\";\r\n  ErrorCode2[ErrorCode2[\"CommaExpected\"] = 514] = \"CommaExpected\";\r\n  ErrorCode2[ErrorCode2[\"ColonExpected\"] = 515] = \"ColonExpected\";\r\n  ErrorCode2[ErrorCode2[\"ValueExpected\"] = 516] = \"ValueExpected\";\r\n  ErrorCode2[ErrorCode2[\"CommaOrCloseBacketExpected\"] = 517] = \"CommaOrCloseBacketExpected\";\r\n  ErrorCode2[ErrorCode2[\"CommaOrCloseBraceExpected\"] = 518] = \"CommaOrCloseBraceExpected\";\r\n  ErrorCode2[ErrorCode2[\"TrailingComma\"] = 519] = \"TrailingComma\";\r\n  ErrorCode2[ErrorCode2[\"DuplicateKey\"] = 520] = \"DuplicateKey\";\r\n  ErrorCode2[ErrorCode2[\"CommentNotPermitted\"] = 521] = \"CommentNotPermitted\";\r\n  ErrorCode2[ErrorCode2[\"PropertyKeysMustBeDoublequoted\"] = 528] = \"PropertyKeysMustBeDoublequoted\";\r\n  ErrorCode2[ErrorCode2[\"SchemaResolveError\"] = 768] = \"SchemaResolveError\";\r\n  ErrorCode2[ErrorCode2[\"SchemaUnsupportedFeature\"] = 769] = \"SchemaUnsupportedFeature\";\r\n})(ErrorCode || (ErrorCode = {}));\r\nvar SchemaDraft;\r\n(function(SchemaDraft2) {\r\n  SchemaDraft2[SchemaDraft2[\"v3\"] = 3] = \"v3\";\r\n  SchemaDraft2[SchemaDraft2[\"v4\"] = 4] = \"v4\";\r\n  SchemaDraft2[SchemaDraft2[\"v6\"] = 6] = \"v6\";\r\n  SchemaDraft2[SchemaDraft2[\"v7\"] = 7] = \"v7\";\r\n  SchemaDraft2[SchemaDraft2[\"v2019_09\"] = 19] = \"v2019_09\";\r\n  SchemaDraft2[SchemaDraft2[\"v2020_12\"] = 20] = \"v2020_12\";\r\n})(SchemaDraft || (SchemaDraft = {}));\r\nvar ClientCapabilities;\r\n(function(ClientCapabilities2) {\r\n  ClientCapabilities2.LATEST = {\r\n    textDocument: {\r\n      completion: {\r\n        completionItem: {\r\n          documentationFormat: [MarkupKind.Markdown, MarkupKind.PlainText],\r\n          commitCharactersSupport: true,\r\n          labelDetailsSupport: true\r\n        }\r\n      }\r\n    }\r\n  };\r\n})(ClientCapabilities || (ClientCapabilities = {}));\r\n\r\n// node_modules/@vscode/l10n/dist/browser.js\r\nvar bundle;\r\nfunction t(...args) {\r\n  const firstArg = args[0];\r\n  let key;\r\n  let message;\r\n  let formatArgs;\r\n  if (typeof firstArg === \"string\") {\r\n    key = firstArg;\r\n    message = firstArg;\r\n    args.splice(0, 1);\r\n    formatArgs = !args || typeof args[0] !== \"object\" ? args : args[0];\r\n  } else if (firstArg instanceof Array) {\r\n    const replacements = args.slice(1);\r\n    if (firstArg.length !== replacements.length + 1) {\r\n      throw new Error(\"expected a string as the first argument to l10n.t\");\r\n    }\r\n    let str = firstArg[0];\r\n    for (let i = 1; i < firstArg.length; i++) {\r\n      str += `{${i - 1}}` + firstArg[i];\r\n    }\r\n    return t(str, ...replacements);\r\n  } else {\r\n    message = firstArg.message;\r\n    key = message;\r\n    if (firstArg.comment && firstArg.comment.length > 0) {\r\n      key += `/${Array.isArray(firstArg.comment) ? firstArg.comment.join(\"\") : firstArg.comment}`;\r\n    }\r\n    formatArgs = firstArg.args ?? {};\r\n  }\r\n  const messageFromBundle = bundle?.[key];\r\n  if (!messageFromBundle) {\r\n    return format3(message, formatArgs);\r\n  }\r\n  if (typeof messageFromBundle === \"string\") {\r\n    return format3(messageFromBundle, formatArgs);\r\n  }\r\n  if (messageFromBundle.comment) {\r\n    return format3(messageFromBundle.message, formatArgs);\r\n  }\r\n  return format3(message, formatArgs);\r\n}\r\nvar _format2Regexp = /{([^}]+)}/g;\r\nfunction format3(template, values) {\r\n  if (Object.keys(values).length === 0) {\r\n    return template;\r\n  }\r\n  return template.replace(_format2Regexp, (match, group) => values[group] ?? match);\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/parser/jsonParser.js\r\nvar formats = {\r\n  \"color-hex\": { errorMessage: t(\"Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA.\"), pattern: /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/ },\r\n  \"date-time\": { errorMessage: t(\"String is not a RFC3339 date-time.\"), pattern: /^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i },\r\n  \"date\": { errorMessage: t(\"String is not a RFC3339 date.\"), pattern: /^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i },\r\n  \"time\": { errorMessage: t(\"String is not a RFC3339 time.\"), pattern: /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i },\r\n  \"email\": { errorMessage: t(\"String is not an e-mail address.\"), pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}))$/ },\r\n  \"hostname\": { errorMessage: t(\"String is not a hostname.\"), pattern: /^(?=.{1,253}\\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\\.?$/i },\r\n  \"ipv4\": { errorMessage: t(\"String is not an IPv4 address.\"), pattern: /^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/ },\r\n  \"ipv6\": { errorMessage: t(\"String is not an IPv6 address.\"), pattern: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))$/i }\r\n};\r\nvar ASTNodeImpl = class {\r\n  constructor(parent, offset, length = 0) {\r\n    this.offset = offset;\r\n    this.length = length;\r\n    this.parent = parent;\r\n  }\r\n  get children() {\r\n    return [];\r\n  }\r\n  toString() {\r\n    return \"type: \" + this.type + \" (\" + this.offset + \"/\" + this.length + \")\" + (this.parent ? \" parent: {\" + this.parent.toString() + \"}\" : \"\");\r\n  }\r\n};\r\nvar NullASTNodeImpl = class extends ASTNodeImpl {\r\n  constructor(parent, offset) {\r\n    super(parent, offset);\r\n    this.type = \"null\";\r\n    this.value = null;\r\n  }\r\n};\r\nvar BooleanASTNodeImpl = class extends ASTNodeImpl {\r\n  constructor(parent, boolValue, offset) {\r\n    super(parent, offset);\r\n    this.type = \"boolean\";\r\n    this.value = boolValue;\r\n  }\r\n};\r\nvar ArrayASTNodeImpl = class extends ASTNodeImpl {\r\n  constructor(parent, offset) {\r\n    super(parent, offset);\r\n    this.type = \"array\";\r\n    this.items = [];\r\n  }\r\n  get children() {\r\n    return this.items;\r\n  }\r\n};\r\nvar NumberASTNodeImpl = class extends ASTNodeImpl {\r\n  constructor(parent, offset) {\r\n    super(parent, offset);\r\n    this.type = \"number\";\r\n    this.isInteger = true;\r\n    this.value = Number.NaN;\r\n  }\r\n};\r\nvar StringASTNodeImpl = class extends ASTNodeImpl {\r\n  constructor(parent, offset, length) {\r\n    super(parent, offset, length);\r\n    this.type = \"string\";\r\n    this.value = \"\";\r\n  }\r\n};\r\nvar PropertyASTNodeImpl = class extends ASTNodeImpl {\r\n  constructor(parent, offset, keyNode) {\r\n    super(parent, offset);\r\n    this.type = \"property\";\r\n    this.colonOffset = -1;\r\n    this.keyNode = keyNode;\r\n  }\r\n  get children() {\r\n    return this.valueNode ? [this.keyNode, this.valueNode] : [this.keyNode];\r\n  }\r\n};\r\nvar ObjectASTNodeImpl = class extends ASTNodeImpl {\r\n  constructor(parent, offset) {\r\n    super(parent, offset);\r\n    this.type = \"object\";\r\n    this.properties = [];\r\n  }\r\n  get children() {\r\n    return this.properties;\r\n  }\r\n};\r\nfunction asSchema(schema) {\r\n  if (isBoolean(schema)) {\r\n    return schema ? {} : { \"not\": {} };\r\n  }\r\n  return schema;\r\n}\r\nvar EnumMatch;\r\n(function(EnumMatch2) {\r\n  EnumMatch2[EnumMatch2[\"Key\"] = 0] = \"Key\";\r\n  EnumMatch2[EnumMatch2[\"Enum\"] = 1] = \"Enum\";\r\n})(EnumMatch || (EnumMatch = {}));\r\nvar schemaDraftFromId = {\r\n  \"http://json-schema.org/draft-03/schema#\": SchemaDraft.v3,\r\n  \"http://json-schema.org/draft-04/schema#\": SchemaDraft.v4,\r\n  \"http://json-schema.org/draft-06/schema#\": SchemaDraft.v6,\r\n  \"http://json-schema.org/draft-07/schema#\": SchemaDraft.v7,\r\n  \"https://json-schema.org/draft/2019-09/schema\": SchemaDraft.v2019_09,\r\n  \"https://json-schema.org/draft/2020-12/schema\": SchemaDraft.v2020_12\r\n};\r\nvar EvaluationContext = class {\r\n  constructor(schemaDraft) {\r\n    this.schemaDraft = schemaDraft;\r\n  }\r\n};\r\nvar SchemaCollector = class _SchemaCollector {\r\n  constructor(focusOffset = -1, exclude) {\r\n    this.focusOffset = focusOffset;\r\n    this.exclude = exclude;\r\n    this.schemas = [];\r\n  }\r\n  add(schema) {\r\n    this.schemas.push(schema);\r\n  }\r\n  merge(other) {\r\n    Array.prototype.push.apply(this.schemas, other.schemas);\r\n  }\r\n  include(node) {\r\n    return (this.focusOffset === -1 || contains2(node, this.focusOffset)) && node !== this.exclude;\r\n  }\r\n  newSub() {\r\n    return new _SchemaCollector(-1, this.exclude);\r\n  }\r\n};\r\nvar NoOpSchemaCollector = class {\r\n  constructor() {\r\n  }\r\n  get schemas() {\r\n    return [];\r\n  }\r\n  add(_schema) {\r\n  }\r\n  merge(_other) {\r\n  }\r\n  include(_node) {\r\n    return true;\r\n  }\r\n  newSub() {\r\n    return this;\r\n  }\r\n};\r\nNoOpSchemaCollector.instance = new NoOpSchemaCollector();\r\nvar ValidationResult = class {\r\n  constructor() {\r\n    this.problems = [];\r\n    this.propertiesMatches = 0;\r\n    this.processedProperties = /* @__PURE__ */ new Set();\r\n    this.propertiesValueMatches = 0;\r\n    this.primaryValueMatches = 0;\r\n    this.enumValueMatch = false;\r\n    this.enumValues = void 0;\r\n  }\r\n  hasProblems() {\r\n    return !!this.problems.length;\r\n  }\r\n  merge(validationResult) {\r\n    this.problems = this.problems.concat(validationResult.problems);\r\n    this.propertiesMatches += validationResult.propertiesMatches;\r\n    this.propertiesValueMatches += validationResult.propertiesValueMatches;\r\n    this.mergeProcessedProperties(validationResult);\r\n  }\r\n  mergeEnumValues(validationResult) {\r\n    if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {\r\n      this.enumValues = this.enumValues.concat(validationResult.enumValues);\r\n      for (const error of this.problems) {\r\n        if (error.code === ErrorCode.EnumValueMismatch) {\r\n          error.message = t(\"Value is not accepted. Valid values: {0}.\", this.enumValues.map((v) => JSON.stringify(v)).join(\", \"));\r\n        }\r\n      }\r\n    }\r\n  }\r\n  mergePropertyMatch(propertyValidationResult) {\r\n    this.problems = this.problems.concat(propertyValidationResult.problems);\r\n    this.propertiesMatches++;\r\n    if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {\r\n      this.propertiesValueMatches++;\r\n    }\r\n    if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues && propertyValidationResult.enumValues.length === 1) {\r\n      this.primaryValueMatches++;\r\n    }\r\n  }\r\n  mergeProcessedProperties(validationResult) {\r\n    validationResult.processedProperties.forEach((p) => this.processedProperties.add(p));\r\n  }\r\n  compare(other) {\r\n    const hasProblems = this.hasProblems();\r\n    if (hasProblems !== other.hasProblems()) {\r\n      return hasProblems ? -1 : 1;\r\n    }\r\n    if (this.enumValueMatch !== other.enumValueMatch) {\r\n      return other.enumValueMatch ? -1 : 1;\r\n    }\r\n    if (this.primaryValueMatches !== other.primaryValueMatches) {\r\n      return this.primaryValueMatches - other.primaryValueMatches;\r\n    }\r\n    if (this.propertiesValueMatches !== other.propertiesValueMatches) {\r\n      return this.propertiesValueMatches - other.propertiesValueMatches;\r\n    }\r\n    return this.propertiesMatches - other.propertiesMatches;\r\n  }\r\n};\r\nfunction newJSONDocument(root, diagnostics = []) {\r\n  return new JSONDocument(root, diagnostics, []);\r\n}\r\nfunction getNodeValue3(node) {\r\n  return getNodeValue2(node);\r\n}\r\nfunction getNodePath3(node) {\r\n  return getNodePath2(node);\r\n}\r\nfunction contains2(node, offset, includeRightBound = false) {\r\n  return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;\r\n}\r\nvar JSONDocument = class {\r\n  constructor(root, syntaxErrors = [], comments = []) {\r\n    this.root = root;\r\n    this.syntaxErrors = syntaxErrors;\r\n    this.comments = comments;\r\n  }\r\n  getNodeFromOffset(offset, includeRightBound = false) {\r\n    if (this.root) {\r\n      return findNodeAtOffset2(this.root, offset, includeRightBound);\r\n    }\r\n    return void 0;\r\n  }\r\n  visit(visitor) {\r\n    if (this.root) {\r\n      const doVisit = (node) => {\r\n        let ctn = visitor(node);\r\n        const children = node.children;\r\n        if (Array.isArray(children)) {\r\n          for (let i = 0; i < children.length && ctn; i++) {\r\n            ctn = doVisit(children[i]);\r\n          }\r\n        }\r\n        return ctn;\r\n      };\r\n      doVisit(this.root);\r\n    }\r\n  }\r\n  validate(textDocument, schema, severity = DiagnosticSeverity.Warning, schemaDraft) {\r\n    if (this.root && schema) {\r\n      const validationResult = new ValidationResult();\r\n      validate(this.root, schema, validationResult, NoOpSchemaCollector.instance, new EvaluationContext(schemaDraft ?? getSchemaDraft(schema)));\r\n      return validationResult.problems.map((p) => {\r\n        const range = Range.create(textDocument.positionAt(p.location.offset), textDocument.positionAt(p.location.offset + p.location.length));\r\n        return Diagnostic.create(range, p.message, p.severity ?? severity, p.code);\r\n      });\r\n    }\r\n    return void 0;\r\n  }\r\n  getMatchingSchemas(schema, focusOffset = -1, exclude) {\r\n    if (this.root && schema) {\r\n      const matchingSchemas = new SchemaCollector(focusOffset, exclude);\r\n      const schemaDraft = getSchemaDraft(schema);\r\n      const context = new EvaluationContext(schemaDraft);\r\n      validate(this.root, schema, new ValidationResult(), matchingSchemas, context);\r\n      return matchingSchemas.schemas;\r\n    }\r\n    return [];\r\n  }\r\n};\r\nfunction getSchemaDraft(schema, fallBack = SchemaDraft.v2020_12) {\r\n  let schemaId = schema.$schema;\r\n  if (schemaId) {\r\n    return schemaDraftFromId[schemaId] ?? fallBack;\r\n  }\r\n  return fallBack;\r\n}\r\nfunction validate(n, schema, validationResult, matchingSchemas, context) {\r\n  if (!n || !matchingSchemas.include(n)) {\r\n    return;\r\n  }\r\n  if (n.type === \"property\") {\r\n    return validate(n.valueNode, schema, validationResult, matchingSchemas, context);\r\n  }\r\n  const node = n;\r\n  _validateNode();\r\n  switch (node.type) {\r\n    case \"object\":\r\n      _validateObjectNode(node);\r\n      break;\r\n    case \"array\":\r\n      _validateArrayNode(node);\r\n      break;\r\n    case \"string\":\r\n      _validateStringNode(node);\r\n      break;\r\n    case \"number\":\r\n      _validateNumberNode(node);\r\n      break;\r\n  }\r\n  matchingSchemas.add({ node, schema });\r\n  function _validateNode() {\r\n    function matchesType(type) {\r\n      return node.type === type || type === \"integer\" && node.type === \"number\" && node.isInteger;\r\n    }\r\n    if (Array.isArray(schema.type)) {\r\n      if (!schema.type.some(matchesType)) {\r\n        validationResult.problems.push({\r\n          location: { offset: node.offset, length: node.length },\r\n          message: schema.errorMessage || t(\"Incorrect type. Expected one of {0}.\", schema.type.join(\", \"))\r\n        });\r\n      }\r\n    } else if (schema.type) {\r\n      if (!matchesType(schema.type)) {\r\n        validationResult.problems.push({\r\n          location: { offset: node.offset, length: node.length },\r\n          message: schema.errorMessage || t('Incorrect type. Expected \"{0}\".', schema.type)\r\n        });\r\n      }\r\n    }\r\n    if (Array.isArray(schema.allOf)) {\r\n      for (const subSchemaRef of schema.allOf) {\r\n        const subValidationResult = new ValidationResult();\r\n        const subMatchingSchemas = matchingSchemas.newSub();\r\n        validate(node, asSchema(subSchemaRef), subValidationResult, subMatchingSchemas, context);\r\n        validationResult.merge(subValidationResult);\r\n        matchingSchemas.merge(subMatchingSchemas);\r\n      }\r\n    }\r\n    const notSchema = asSchema(schema.not);\r\n    if (notSchema) {\r\n      const subValidationResult = new ValidationResult();\r\n      const subMatchingSchemas = matchingSchemas.newSub();\r\n      validate(node, notSchema, subValidationResult, subMatchingSchemas, context);\r\n      if (!subValidationResult.hasProblems()) {\r\n        validationResult.problems.push({\r\n          location: { offset: node.offset, length: node.length },\r\n          message: schema.errorMessage || t(\"Matches a schema that is not allowed.\")\r\n        });\r\n      }\r\n      for (const ms of subMatchingSchemas.schemas) {\r\n        ms.inverted = !ms.inverted;\r\n        matchingSchemas.add(ms);\r\n      }\r\n    }\r\n    const testAlternatives = (alternatives, maxOneMatch) => {\r\n      const matches = [];\r\n      let bestMatch = void 0;\r\n      for (const subSchemaRef of alternatives) {\r\n        const subSchema = asSchema(subSchemaRef);\r\n        const subValidationResult = new ValidationResult();\r\n        const subMatchingSchemas = matchingSchemas.newSub();\r\n        validate(node, subSchema, subValidationResult, subMatchingSchemas, context);\r\n        if (!subValidationResult.hasProblems()) {\r\n          matches.push(subSchema);\r\n        }\r\n        if (!bestMatch) {\r\n          bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };\r\n        } else {\r\n          if (!maxOneMatch && !subValidationResult.hasProblems() && !bestMatch.validationResult.hasProblems()) {\r\n            bestMatch.matchingSchemas.merge(subMatchingSchemas);\r\n            bestMatch.validationResult.propertiesMatches += subValidationResult.propertiesMatches;\r\n            bestMatch.validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;\r\n            bestMatch.validationResult.mergeProcessedProperties(subValidationResult);\r\n          } else {\r\n            const compareResult = subValidationResult.compare(bestMatch.validationResult);\r\n            if (compareResult > 0) {\r\n              bestMatch = { schema: subSchema, validationResult: subValidationResult, matchingSchemas: subMatchingSchemas };\r\n            } else if (compareResult === 0) {\r\n              bestMatch.matchingSchemas.merge(subMatchingSchemas);\r\n              bestMatch.validationResult.mergeEnumValues(subValidationResult);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (matches.length > 1 && maxOneMatch) {\r\n        validationResult.problems.push({\r\n          location: { offset: node.offset, length: 1 },\r\n          message: t(\"Matches multiple schemas when only one must validate.\")\r\n        });\r\n      }\r\n      if (bestMatch) {\r\n        validationResult.merge(bestMatch.validationResult);\r\n        matchingSchemas.merge(bestMatch.matchingSchemas);\r\n      }\r\n      return matches.length;\r\n    };\r\n    if (Array.isArray(schema.anyOf)) {\r\n      testAlternatives(schema.anyOf, false);\r\n    }\r\n    if (Array.isArray(schema.oneOf)) {\r\n      testAlternatives(schema.oneOf, true);\r\n    }\r\n    const testBranch = (schema2) => {\r\n      const subValidationResult = new ValidationResult();\r\n      const subMatchingSchemas = matchingSchemas.newSub();\r\n      validate(node, asSchema(schema2), subValidationResult, subMatchingSchemas, context);\r\n      validationResult.merge(subValidationResult);\r\n      matchingSchemas.merge(subMatchingSchemas);\r\n    };\r\n    const testCondition = (ifSchema2, thenSchema, elseSchema) => {\r\n      const subSchema = asSchema(ifSchema2);\r\n      const subValidationResult = new ValidationResult();\r\n      const subMatchingSchemas = matchingSchemas.newSub();\r\n      validate(node, subSchema, subValidationResult, subMatchingSchemas, context);\r\n      matchingSchemas.merge(subMatchingSchemas);\r\n      validationResult.mergeProcessedProperties(subValidationResult);\r\n      if (!subValidationResult.hasProblems()) {\r\n        if (thenSchema) {\r\n          testBranch(thenSchema);\r\n        }\r\n      } else if (elseSchema) {\r\n        testBranch(elseSchema);\r\n      }\r\n    };\r\n    const ifSchema = asSchema(schema.if);\r\n    if (ifSchema) {\r\n      testCondition(ifSchema, asSchema(schema.then), asSchema(schema.else));\r\n    }\r\n    if (Array.isArray(schema.enum)) {\r\n      const val = getNodeValue3(node);\r\n      let enumValueMatch = false;\r\n      for (const e of schema.enum) {\r\n        if (equals(val, e)) {\r\n          enumValueMatch = true;\r\n          break;\r\n        }\r\n      }\r\n      validationResult.enumValues = schema.enum;\r\n      validationResult.enumValueMatch = enumValueMatch;\r\n      if (!enumValueMatch) {\r\n        validationResult.problems.push({\r\n          location: { offset: node.offset, length: node.length },\r\n          code: ErrorCode.EnumValueMismatch,\r\n          message: schema.errorMessage || t(\"Value is not accepted. Valid values: {0}.\", schema.enum.map((v) => JSON.stringify(v)).join(\", \"))\r\n        });\r\n      }\r\n    }\r\n    if (isDefined(schema.const)) {\r\n      const val = getNodeValue3(node);\r\n      if (!equals(val, schema.const)) {\r\n        validationResult.problems.push({\r\n          location: { offset: node.offset, length: node.length },\r\n          code: ErrorCode.EnumValueMismatch,\r\n          message: schema.errorMessage || t(\"Value must be {0}.\", JSON.stringify(schema.const))\r\n        });\r\n        validationResult.enumValueMatch = false;\r\n      } else {\r\n        validationResult.enumValueMatch = true;\r\n      }\r\n      validationResult.enumValues = [schema.const];\r\n    }\r\n    let deprecationMessage = schema.deprecationMessage;\r\n    if (deprecationMessage || schema.deprecated) {\r\n      deprecationMessage = deprecationMessage || t(\"Value is deprecated\");\r\n      let targetNode = node.parent?.type === \"property\" ? node.parent : node;\r\n      validationResult.problems.push({\r\n        location: { offset: targetNode.offset, length: targetNode.length },\r\n        severity: DiagnosticSeverity.Warning,\r\n        message: deprecationMessage,\r\n        code: ErrorCode.Deprecated\r\n      });\r\n    }\r\n  }\r\n  function _validateNumberNode(node2) {\r\n    const val = node2.value;\r\n    function normalizeFloats(float) {\r\n      const parts = /^(-?\\d+)(?:\\.(\\d+))?(?:e([-+]\\d+))?$/.exec(float.toString());\r\n      return parts && {\r\n        value: Number(parts[1] + (parts[2] || \"\")),\r\n        multiplier: (parts[2]?.length || 0) - (parseInt(parts[3]) || 0)\r\n      };\r\n    }\r\n    ;\r\n    if (isNumber(schema.multipleOf)) {\r\n      let remainder = -1;\r\n      if (Number.isInteger(schema.multipleOf)) {\r\n        remainder = val % schema.multipleOf;\r\n      } else {\r\n        let normMultipleOf = normalizeFloats(schema.multipleOf);\r\n        let normValue = normalizeFloats(val);\r\n        if (normMultipleOf && normValue) {\r\n          const multiplier = 10 ** Math.abs(normValue.multiplier - normMultipleOf.multiplier);\r\n          if (normValue.multiplier < normMultipleOf.multiplier) {\r\n            normValue.value *= multiplier;\r\n          } else {\r\n            normMultipleOf.value *= multiplier;\r\n          }\r\n          remainder = normValue.value % normMultipleOf.value;\r\n        }\r\n      }\r\n      if (remainder !== 0) {\r\n        validationResult.problems.push({\r\n          location: { offset: node2.offset, length: node2.length },\r\n          message: t(\"Value is not divisible by {0}.\", schema.multipleOf)\r\n        });\r\n      }\r\n    }\r\n    function getExclusiveLimit(limit, exclusive) {\r\n      if (isNumber(exclusive)) {\r\n        return exclusive;\r\n      }\r\n      if (isBoolean(exclusive) && exclusive) {\r\n        return limit;\r\n      }\r\n      return void 0;\r\n    }\r\n    function getLimit(limit, exclusive) {\r\n      if (!isBoolean(exclusive) || !exclusive) {\r\n        return limit;\r\n      }\r\n      return void 0;\r\n    }\r\n    const exclusiveMinimum = getExclusiveLimit(schema.minimum, schema.exclusiveMinimum);\r\n    if (isNumber(exclusiveMinimum) && val <= exclusiveMinimum) {\r\n      validationResult.problems.push({\r\n        location: { offset: node2.offset, length: node2.length },\r\n        message: t(\"Value is below the exclusive minimum of {0}.\", exclusiveMinimum)\r\n      });\r\n    }\r\n    const exclusiveMaximum = getExclusiveLimit(schema.maximum, schema.exclusiveMaximum);\r\n    if (isNumber(exclusiveMaximum) && val >= exclusiveMaximum) {\r\n      validationResult.problems.push({\r\n        location: { offset: node2.offset, length: node2.length },\r\n        message: t(\"Value is above the exclusive maximum of {0}.\", exclusiveMaximum)\r\n      });\r\n    }\r\n    const minimum = getLimit(schema.minimum, schema.exclusiveMinimum);\r\n    if (isNumber(minimum) && val < minimum) {\r\n      validationResult.problems.push({\r\n        location: { offset: node2.offset, length: node2.length },\r\n        message: t(\"Value is below the minimum of {0}.\", minimum)\r\n      });\r\n    }\r\n    const maximum = getLimit(schema.maximum, schema.exclusiveMaximum);\r\n    if (isNumber(maximum) && val > maximum) {\r\n      validationResult.problems.push({\r\n        location: { offset: node2.offset, length: node2.length },\r\n        message: t(\"Value is above the maximum of {0}.\", maximum)\r\n      });\r\n    }\r\n  }\r\n  function _validateStringNode(node2) {\r\n    if (isNumber(schema.minLength) && stringLength(node2.value) < schema.minLength) {\r\n      validationResult.problems.push({\r\n        location: { offset: node2.offset, length: node2.length },\r\n        message: t(\"String is shorter than the minimum length of {0}.\", schema.minLength)\r\n      });\r\n    }\r\n    if (isNumber(schema.maxLength) && stringLength(node2.value) > schema.maxLength) {\r\n      validationResult.problems.push({\r\n        location: { offset: node2.offset, length: node2.length },\r\n        message: t(\"String is longer than the maximum length of {0}.\", schema.maxLength)\r\n      });\r\n    }\r\n    if (isString(schema.pattern)) {\r\n      const regex = extendedRegExp(schema.pattern);\r\n      if (!regex?.test(node2.value)) {\r\n        validationResult.problems.push({\r\n          location: { offset: node2.offset, length: node2.length },\r\n          message: schema.patternErrorMessage || schema.errorMessage || t('String does not match the pattern of \"{0}\".', schema.pattern)\r\n        });\r\n      }\r\n    }\r\n    if (schema.format) {\r\n      switch (schema.format) {\r\n        case \"uri\":\r\n        case \"uri-reference\":\r\n          {\r\n            let errorMessage;\r\n            if (!node2.value) {\r\n              errorMessage = t(\"URI expected.\");\r\n            } else {\r\n              const match = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/.exec(node2.value);\r\n              if (!match) {\r\n                errorMessage = t(\"URI is expected.\");\r\n              } else if (!match[2] && schema.format === \"uri\") {\r\n                errorMessage = t(\"URI with a scheme is expected.\");\r\n              }\r\n            }\r\n            if (errorMessage) {\r\n              validationResult.problems.push({\r\n                location: { offset: node2.offset, length: node2.length },\r\n                message: schema.patternErrorMessage || schema.errorMessage || t(\"String is not a URI: {0}\", errorMessage)\r\n              });\r\n            }\r\n          }\r\n          break;\r\n        case \"color-hex\":\r\n        case \"date-time\":\r\n        case \"date\":\r\n        case \"time\":\r\n        case \"email\":\r\n        case \"hostname\":\r\n        case \"ipv4\":\r\n        case \"ipv6\":\r\n          const format5 = formats[schema.format];\r\n          if (!node2.value || !format5.pattern.exec(node2.value)) {\r\n            validationResult.problems.push({\r\n              location: { offset: node2.offset, length: node2.length },\r\n              message: schema.patternErrorMessage || schema.errorMessage || format5.errorMessage\r\n            });\r\n          }\r\n        default:\r\n      }\r\n    }\r\n  }\r\n  function _validateArrayNode(node2) {\r\n    let prefixItemsSchemas;\r\n    let additionalItemSchema;\r\n    if (context.schemaDraft >= SchemaDraft.v2020_12) {\r\n      prefixItemsSchemas = schema.prefixItems;\r\n      additionalItemSchema = !Array.isArray(schema.items) ? schema.items : void 0;\r\n    } else {\r\n      prefixItemsSchemas = Array.isArray(schema.items) ? schema.items : void 0;\r\n      additionalItemSchema = !Array.isArray(schema.items) ? schema.items : schema.additionalItems;\r\n    }\r\n    let index = 0;\r\n    if (prefixItemsSchemas !== void 0) {\r\n      const max = Math.min(prefixItemsSchemas.length, node2.items.length);\r\n      for (; index < max; index++) {\r\n        const subSchemaRef = prefixItemsSchemas[index];\r\n        const subSchema = asSchema(subSchemaRef);\r\n        const itemValidationResult = new ValidationResult();\r\n        const item = node2.items[index];\r\n        if (item) {\r\n          validate(item, subSchema, itemValidationResult, matchingSchemas, context);\r\n          validationResult.mergePropertyMatch(itemValidationResult);\r\n        }\r\n        validationResult.processedProperties.add(String(index));\r\n      }\r\n    }\r\n    if (additionalItemSchema !== void 0 && index < node2.items.length) {\r\n      if (typeof additionalItemSchema === \"boolean\") {\r\n        if (additionalItemSchema === false) {\r\n          validationResult.problems.push({\r\n            location: { offset: node2.offset, length: node2.length },\r\n            message: t(\"Array has too many items according to schema. Expected {0} or fewer.\", index)\r\n          });\r\n        }\r\n        for (; index < node2.items.length; index++) {\r\n          validationResult.processedProperties.add(String(index));\r\n          validationResult.propertiesValueMatches++;\r\n        }\r\n      } else {\r\n        for (; index < node2.items.length; index++) {\r\n          const itemValidationResult = new ValidationResult();\r\n          validate(node2.items[index], additionalItemSchema, itemValidationResult, matchingSchemas, context);\r\n          validationResult.mergePropertyMatch(itemValidationResult);\r\n          validationResult.processedProperties.add(String(index));\r\n        }\r\n      }\r\n    }\r\n    const containsSchema = asSchema(schema.contains);\r\n    if (containsSchema) {\r\n      let containsCount = 0;\r\n      for (let index2 = 0; index2 < node2.items.length; index2++) {\r\n        const item = node2.items[index2];\r\n        const itemValidationResult = new ValidationResult();\r\n        validate(item, containsSchema, itemValidationResult, NoOpSchemaCollector.instance, context);\r\n        if (!itemValidationResult.hasProblems()) {\r\n          containsCount++;\r\n          if (context.schemaDraft >= SchemaDraft.v2020_12) {\r\n            validationResult.processedProperties.add(String(index2));\r\n          }\r\n        }\r\n      }\r\n      if (containsCount === 0 && !isNumber(schema.minContains)) {\r\n        validationResult.problems.push({\r\n          location: { offset: node2.offset, length: node2.length },\r\n          message: schema.errorMessage || t(\"Array does not contain required item.\")\r\n        });\r\n      }\r\n      if (isNumber(schema.minContains) && containsCount < schema.minContains) {\r\n        validationResult.problems.push({\r\n          location: { offset: node2.offset, length: node2.length },\r\n          message: schema.errorMessage || t(\"Array has too few items that match the contains contraint. Expected {0} or more.\", schema.minContains)\r\n        });\r\n      }\r\n      if (isNumber(schema.maxContains) && containsCount > schema.maxContains) {\r\n        validationResult.problems.push({\r\n          location: { offset: node2.offset, length: node2.length },\r\n          message: schema.errorMessage || t(\"Array has too many items that match the contains contraint. Expected {0} or less.\", schema.maxContains)\r\n        });\r\n      }\r\n    }\r\n    const unevaluatedItems = schema.unevaluatedItems;\r\n    if (unevaluatedItems !== void 0) {\r\n      for (let i = 0; i < node2.items.length; i++) {\r\n        if (!validationResult.processedProperties.has(String(i))) {\r\n          if (unevaluatedItems === false) {\r\n            validationResult.problems.push({\r\n              location: { offset: node2.offset, length: node2.length },\r\n              message: t(\"Item does not match any validation rule from the array.\")\r\n            });\r\n          } else {\r\n            const itemValidationResult = new ValidationResult();\r\n            validate(node2.items[i], schema.unevaluatedItems, itemValidationResult, matchingSchemas, context);\r\n            validationResult.mergePropertyMatch(itemValidationResult);\r\n          }\r\n        }\r\n        validationResult.processedProperties.add(String(i));\r\n        validationResult.propertiesValueMatches++;\r\n      }\r\n    }\r\n    if (isNumber(schema.minItems) && node2.items.length < schema.minItems) {\r\n      validationResult.problems.push({\r\n        location: { offset: node2.offset, length: node2.length },\r\n        message: t(\"Array has too few items. Expected {0} or more.\", schema.minItems)\r\n      });\r\n    }\r\n    if (isNumber(schema.maxItems) && node2.items.length > schema.maxItems) {\r\n      validationResult.problems.push({\r\n        location: { offset: node2.offset, length: node2.length },\r\n        message: t(\"Array has too many items. Expected {0} or fewer.\", schema.maxItems)\r\n      });\r\n    }\r\n    if (schema.uniqueItems === true) {\r\n      let hasDuplicates = function() {\r\n        for (let i = 0; i < values.length - 1; i++) {\r\n          const value = values[i];\r\n          for (let j = i + 1; j < values.length; j++) {\r\n            if (equals(value, values[j])) {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n      const values = getNodeValue3(node2);\r\n      if (hasDuplicates()) {\r\n        validationResult.problems.push({\r\n          location: { offset: node2.offset, length: node2.length },\r\n          message: t(\"Array has duplicate items.\")\r\n        });\r\n      }\r\n    }\r\n  }\r\n  function _validateObjectNode(node2) {\r\n    const seenKeys = /* @__PURE__ */ Object.create(null);\r\n    const unprocessedProperties = /* @__PURE__ */ new Set();\r\n    for (const propertyNode of node2.properties) {\r\n      const key = propertyNode.keyNode.value;\r\n      seenKeys[key] = propertyNode.valueNode;\r\n      unprocessedProperties.add(key);\r\n    }\r\n    if (Array.isArray(schema.required)) {\r\n      for (const propertyName of schema.required) {\r\n        if (!seenKeys[propertyName]) {\r\n          const keyNode = node2.parent && node2.parent.type === \"property\" && node2.parent.keyNode;\r\n          const location = keyNode ? { offset: keyNode.offset, length: keyNode.length } : { offset: node2.offset, length: 1 };\r\n          validationResult.problems.push({\r\n            location,\r\n            message: t('Missing property \"{0}\".', propertyName)\r\n          });\r\n        }\r\n      }\r\n    }\r\n    const propertyProcessed = (prop) => {\r\n      unprocessedProperties.delete(prop);\r\n      validationResult.processedProperties.add(prop);\r\n    };\r\n    if (schema.properties) {\r\n      for (const propertyName of Object.keys(schema.properties)) {\r\n        propertyProcessed(propertyName);\r\n        const propertySchema = schema.properties[propertyName];\r\n        const child = seenKeys[propertyName];\r\n        if (child) {\r\n          if (isBoolean(propertySchema)) {\r\n            if (!propertySchema) {\r\n              const propertyNode = child.parent;\r\n              validationResult.problems.push({\r\n                location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },\r\n                message: schema.errorMessage || t(\"Property {0} is not allowed.\", propertyName)\r\n              });\r\n            } else {\r\n              validationResult.propertiesMatches++;\r\n              validationResult.propertiesValueMatches++;\r\n            }\r\n          } else {\r\n            const propertyValidationResult = new ValidationResult();\r\n            validate(child, propertySchema, propertyValidationResult, matchingSchemas, context);\r\n            validationResult.mergePropertyMatch(propertyValidationResult);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (schema.patternProperties) {\r\n      for (const propertyPattern of Object.keys(schema.patternProperties)) {\r\n        const regex = extendedRegExp(propertyPattern);\r\n        if (regex) {\r\n          const processed = [];\r\n          for (const propertyName of unprocessedProperties) {\r\n            if (regex.test(propertyName)) {\r\n              processed.push(propertyName);\r\n              const child = seenKeys[propertyName];\r\n              if (child) {\r\n                const propertySchema = schema.patternProperties[propertyPattern];\r\n                if (isBoolean(propertySchema)) {\r\n                  if (!propertySchema) {\r\n                    const propertyNode = child.parent;\r\n                    validationResult.problems.push({\r\n                      location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },\r\n                      message: schema.errorMessage || t(\"Property {0} is not allowed.\", propertyName)\r\n                    });\r\n                  } else {\r\n                    validationResult.propertiesMatches++;\r\n                    validationResult.propertiesValueMatches++;\r\n                  }\r\n                } else {\r\n                  const propertyValidationResult = new ValidationResult();\r\n                  validate(child, propertySchema, propertyValidationResult, matchingSchemas, context);\r\n                  validationResult.mergePropertyMatch(propertyValidationResult);\r\n                }\r\n              }\r\n            }\r\n          }\r\n          processed.forEach(propertyProcessed);\r\n        }\r\n      }\r\n    }\r\n    const additionalProperties = schema.additionalProperties;\r\n    if (additionalProperties !== void 0) {\r\n      for (const propertyName of unprocessedProperties) {\r\n        propertyProcessed(propertyName);\r\n        const child = seenKeys[propertyName];\r\n        if (child) {\r\n          if (additionalProperties === false) {\r\n            const propertyNode = child.parent;\r\n            validationResult.problems.push({\r\n              location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },\r\n              message: schema.errorMessage || t(\"Property {0} is not allowed.\", propertyName)\r\n            });\r\n          } else if (additionalProperties !== true) {\r\n            const propertyValidationResult = new ValidationResult();\r\n            validate(child, additionalProperties, propertyValidationResult, matchingSchemas, context);\r\n            validationResult.mergePropertyMatch(propertyValidationResult);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const unevaluatedProperties = schema.unevaluatedProperties;\r\n    if (unevaluatedProperties !== void 0) {\r\n      const processed = [];\r\n      for (const propertyName of unprocessedProperties) {\r\n        if (!validationResult.processedProperties.has(propertyName)) {\r\n          processed.push(propertyName);\r\n          const child = seenKeys[propertyName];\r\n          if (child) {\r\n            if (unevaluatedProperties === false) {\r\n              const propertyNode = child.parent;\r\n              validationResult.problems.push({\r\n                location: { offset: propertyNode.keyNode.offset, length: propertyNode.keyNode.length },\r\n                message: schema.errorMessage || t(\"Property {0} is not allowed.\", propertyName)\r\n              });\r\n            } else if (unevaluatedProperties !== true) {\r\n              const propertyValidationResult = new ValidationResult();\r\n              validate(child, unevaluatedProperties, propertyValidationResult, matchingSchemas, context);\r\n              validationResult.mergePropertyMatch(propertyValidationResult);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      processed.forEach(propertyProcessed);\r\n    }\r\n    if (isNumber(schema.maxProperties)) {\r\n      if (node2.properties.length > schema.maxProperties) {\r\n        validationResult.problems.push({\r\n          location: { offset: node2.offset, length: node2.length },\r\n          message: t(\"Object has more properties than limit of {0}.\", schema.maxProperties)\r\n        });\r\n      }\r\n    }\r\n    if (isNumber(schema.minProperties)) {\r\n      if (node2.properties.length < schema.minProperties) {\r\n        validationResult.problems.push({\r\n          location: { offset: node2.offset, length: node2.length },\r\n          message: t(\"Object has fewer properties than the required number of {0}\", schema.minProperties)\r\n        });\r\n      }\r\n    }\r\n    if (schema.dependentRequired) {\r\n      for (const key in schema.dependentRequired) {\r\n        const prop = seenKeys[key];\r\n        const propertyDeps = schema.dependentRequired[key];\r\n        if (prop && Array.isArray(propertyDeps)) {\r\n          _validatePropertyDependencies(key, propertyDeps);\r\n        }\r\n      }\r\n    }\r\n    if (schema.dependentSchemas) {\r\n      for (const key in schema.dependentSchemas) {\r\n        const prop = seenKeys[key];\r\n        const propertyDeps = schema.dependentSchemas[key];\r\n        if (prop && isObject(propertyDeps)) {\r\n          _validatePropertyDependencies(key, propertyDeps);\r\n        }\r\n      }\r\n    }\r\n    if (schema.dependencies) {\r\n      for (const key in schema.dependencies) {\r\n        const prop = seenKeys[key];\r\n        if (prop) {\r\n          _validatePropertyDependencies(key, schema.dependencies[key]);\r\n        }\r\n      }\r\n    }\r\n    const propertyNames = asSchema(schema.propertyNames);\r\n    if (propertyNames) {\r\n      for (const f2 of node2.properties) {\r\n        const key = f2.keyNode;\r\n        if (key) {\r\n          validate(key, propertyNames, validationResult, NoOpSchemaCollector.instance, context);\r\n        }\r\n      }\r\n    }\r\n    function _validatePropertyDependencies(key, propertyDep) {\r\n      if (Array.isArray(propertyDep)) {\r\n        for (const requiredProp of propertyDep) {\r\n          if (!seenKeys[requiredProp]) {\r\n            validationResult.problems.push({\r\n              location: { offset: node2.offset, length: node2.length },\r\n              message: t(\"Object is missing property {0} required by property {1}.\", requiredProp, key)\r\n            });\r\n          } else {\r\n            validationResult.propertiesValueMatches++;\r\n          }\r\n        }\r\n      } else {\r\n        const propertySchema = asSchema(propertyDep);\r\n        if (propertySchema) {\r\n          const propertyValidationResult = new ValidationResult();\r\n          validate(node2, propertySchema, propertyValidationResult, matchingSchemas, context);\r\n          validationResult.mergePropertyMatch(propertyValidationResult);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction parse3(textDocument, config) {\r\n  const problems = [];\r\n  let lastProblemOffset = -1;\r\n  const text = textDocument.getText();\r\n  const scanner = createScanner2(text, false);\r\n  const commentRanges = config && config.collectComments ? [] : void 0;\r\n  function _scanNext() {\r\n    while (true) {\r\n      const token2 = scanner.scan();\r\n      _checkScanError();\r\n      switch (token2) {\r\n        case 12:\r\n        case 13:\r\n          if (Array.isArray(commentRanges)) {\r\n            commentRanges.push(Range.create(textDocument.positionAt(scanner.getTokenOffset()), textDocument.positionAt(scanner.getTokenOffset() + scanner.getTokenLength())));\r\n          }\r\n          break;\r\n        case 15:\r\n        case 14:\r\n          break;\r\n        default:\r\n          return token2;\r\n      }\r\n    }\r\n  }\r\n  function _accept(token2) {\r\n    if (scanner.getToken() === token2) {\r\n      _scanNext();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  function _errorAtRange(message, code, startOffset, endOffset, severity = DiagnosticSeverity.Error) {\r\n    if (problems.length === 0 || startOffset !== lastProblemOffset) {\r\n      const range = Range.create(textDocument.positionAt(startOffset), textDocument.positionAt(endOffset));\r\n      problems.push(Diagnostic.create(range, message, severity, code, textDocument.languageId));\r\n      lastProblemOffset = startOffset;\r\n    }\r\n  }\r\n  function _error(message, code, node = void 0, skipUntilAfter = [], skipUntil = []) {\r\n    let start = scanner.getTokenOffset();\r\n    let end = scanner.getTokenOffset() + scanner.getTokenLength();\r\n    if (start === end && start > 0) {\r\n      start--;\r\n      while (start > 0 && /\\s/.test(text.charAt(start))) {\r\n        start--;\r\n      }\r\n      end = start + 1;\r\n    }\r\n    _errorAtRange(message, code, start, end);\r\n    if (node) {\r\n      _finalize(node, false);\r\n    }\r\n    if (skipUntilAfter.length + skipUntil.length > 0) {\r\n      let token2 = scanner.getToken();\r\n      while (token2 !== 17) {\r\n        if (skipUntilAfter.indexOf(token2) !== -1) {\r\n          _scanNext();\r\n          break;\r\n        } else if (skipUntil.indexOf(token2) !== -1) {\r\n          break;\r\n        }\r\n        token2 = _scanNext();\r\n      }\r\n    }\r\n    return node;\r\n  }\r\n  function _checkScanError() {\r\n    switch (scanner.getTokenError()) {\r\n      case 4:\r\n        _error(t(\"Invalid unicode sequence in string.\"), ErrorCode.InvalidUnicode);\r\n        return true;\r\n      case 5:\r\n        _error(t(\"Invalid escape character in string.\"), ErrorCode.InvalidEscapeCharacter);\r\n        return true;\r\n      case 3:\r\n        _error(t(\"Unexpected end of number.\"), ErrorCode.UnexpectedEndOfNumber);\r\n        return true;\r\n      case 1:\r\n        _error(t(\"Unexpected end of comment.\"), ErrorCode.UnexpectedEndOfComment);\r\n        return true;\r\n      case 2:\r\n        _error(t(\"Unexpected end of string.\"), ErrorCode.UnexpectedEndOfString);\r\n        return true;\r\n      case 6:\r\n        _error(t(\"Invalid characters in string. Control characters must be escaped.\"), ErrorCode.InvalidCharacter);\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n  function _finalize(node, scanNext) {\r\n    node.length = scanner.getTokenOffset() + scanner.getTokenLength() - node.offset;\r\n    if (scanNext) {\r\n      _scanNext();\r\n    }\r\n    return node;\r\n  }\r\n  function _parseArray(parent) {\r\n    if (scanner.getToken() !== 3) {\r\n      return void 0;\r\n    }\r\n    const node = new ArrayASTNodeImpl(parent, scanner.getTokenOffset());\r\n    _scanNext();\r\n    const count = 0;\r\n    let needsComma = false;\r\n    while (scanner.getToken() !== 4 && scanner.getToken() !== 17) {\r\n      if (scanner.getToken() === 5) {\r\n        if (!needsComma) {\r\n          _error(t(\"Value expected\"), ErrorCode.ValueExpected);\r\n        }\r\n        const commaOffset = scanner.getTokenOffset();\r\n        _scanNext();\r\n        if (scanner.getToken() === 4) {\r\n          if (needsComma) {\r\n            _errorAtRange(t(\"Trailing comma\"), ErrorCode.TrailingComma, commaOffset, commaOffset + 1);\r\n          }\r\n          continue;\r\n        }\r\n      } else if (needsComma) {\r\n        _error(t(\"Expected comma\"), ErrorCode.CommaExpected);\r\n      }\r\n      const item = _parseValue(node);\r\n      if (!item) {\r\n        _error(t(\"Value expected\"), ErrorCode.ValueExpected, void 0, [], [\r\n          4,\r\n          5\r\n          /* Json.SyntaxKind.CommaToken */\r\n        ]);\r\n      } else {\r\n        node.items.push(item);\r\n      }\r\n      needsComma = true;\r\n    }\r\n    if (scanner.getToken() !== 4) {\r\n      return _error(t(\"Expected comma or closing bracket\"), ErrorCode.CommaOrCloseBacketExpected, node);\r\n    }\r\n    return _finalize(node, true);\r\n  }\r\n  const keyPlaceholder = new StringASTNodeImpl(void 0, 0, 0);\r\n  function _parseProperty(parent, keysSeen) {\r\n    const node = new PropertyASTNodeImpl(parent, scanner.getTokenOffset(), keyPlaceholder);\r\n    let key = _parseString(node);\r\n    if (!key) {\r\n      if (scanner.getToken() === 16) {\r\n        _error(t(\"Property keys must be doublequoted\"), ErrorCode.PropertyKeysMustBeDoublequoted);\r\n        const keyNode = new StringASTNodeImpl(node, scanner.getTokenOffset(), scanner.getTokenLength());\r\n        keyNode.value = scanner.getTokenValue();\r\n        key = keyNode;\r\n        _scanNext();\r\n      } else {\r\n        return void 0;\r\n      }\r\n    }\r\n    node.keyNode = key;\r\n    if (key.value !== \"//\") {\r\n      const seen = keysSeen[key.value];\r\n      if (seen) {\r\n        _errorAtRange(t(\"Duplicate object key\"), ErrorCode.DuplicateKey, node.keyNode.offset, node.keyNode.offset + node.keyNode.length, DiagnosticSeverity.Warning);\r\n        if (isObject(seen)) {\r\n          _errorAtRange(t(\"Duplicate object key\"), ErrorCode.DuplicateKey, seen.keyNode.offset, seen.keyNode.offset + seen.keyNode.length, DiagnosticSeverity.Warning);\r\n        }\r\n        keysSeen[key.value] = true;\r\n      } else {\r\n        keysSeen[key.value] = node;\r\n      }\r\n    }\r\n    if (scanner.getToken() === 6) {\r\n      node.colonOffset = scanner.getTokenOffset();\r\n      _scanNext();\r\n    } else {\r\n      _error(t(\"Colon expected\"), ErrorCode.ColonExpected);\r\n      if (scanner.getToken() === 10 && textDocument.positionAt(key.offset + key.length).line < textDocument.positionAt(scanner.getTokenOffset()).line) {\r\n        node.length = key.length;\r\n        return node;\r\n      }\r\n    }\r\n    const value = _parseValue(node);\r\n    if (!value) {\r\n      return _error(t(\"Value expected\"), ErrorCode.ValueExpected, node, [], [\r\n        2,\r\n        5\r\n        /* Json.SyntaxKind.CommaToken */\r\n      ]);\r\n    }\r\n    node.valueNode = value;\r\n    node.length = value.offset + value.length - node.offset;\r\n    return node;\r\n  }\r\n  function _parseObject(parent) {\r\n    if (scanner.getToken() !== 1) {\r\n      return void 0;\r\n    }\r\n    const node = new ObjectASTNodeImpl(parent, scanner.getTokenOffset());\r\n    const keysSeen = /* @__PURE__ */ Object.create(null);\r\n    _scanNext();\r\n    let needsComma = false;\r\n    while (scanner.getToken() !== 2 && scanner.getToken() !== 17) {\r\n      if (scanner.getToken() === 5) {\r\n        if (!needsComma) {\r\n          _error(t(\"Property expected\"), ErrorCode.PropertyExpected);\r\n        }\r\n        const commaOffset = scanner.getTokenOffset();\r\n        _scanNext();\r\n        if (scanner.getToken() === 2) {\r\n          if (needsComma) {\r\n            _errorAtRange(t(\"Trailing comma\"), ErrorCode.TrailingComma, commaOffset, commaOffset + 1);\r\n          }\r\n          continue;\r\n        }\r\n      } else if (needsComma) {\r\n        _error(t(\"Expected comma\"), ErrorCode.CommaExpected);\r\n      }\r\n      const property = _parseProperty(node, keysSeen);\r\n      if (!property) {\r\n        _error(t(\"Property expected\"), ErrorCode.PropertyExpected, void 0, [], [\r\n          2,\r\n          5\r\n          /* Json.SyntaxKind.CommaToken */\r\n        ]);\r\n      } else {\r\n        node.properties.push(property);\r\n      }\r\n      needsComma = true;\r\n    }\r\n    if (scanner.getToken() !== 2) {\r\n      return _error(t(\"Expected comma or closing brace\"), ErrorCode.CommaOrCloseBraceExpected, node);\r\n    }\r\n    return _finalize(node, true);\r\n  }\r\n  function _parseString(parent) {\r\n    if (scanner.getToken() !== 10) {\r\n      return void 0;\r\n    }\r\n    const node = new StringASTNodeImpl(parent, scanner.getTokenOffset());\r\n    node.value = scanner.getTokenValue();\r\n    return _finalize(node, true);\r\n  }\r\n  function _parseNumber(parent) {\r\n    if (scanner.getToken() !== 11) {\r\n      return void 0;\r\n    }\r\n    const node = new NumberASTNodeImpl(parent, scanner.getTokenOffset());\r\n    if (scanner.getTokenError() === 0) {\r\n      const tokenValue = scanner.getTokenValue();\r\n      try {\r\n        const numberValue = JSON.parse(tokenValue);\r\n        if (!isNumber(numberValue)) {\r\n          return _error(t(\"Invalid number format.\"), ErrorCode.Undefined, node);\r\n        }\r\n        node.value = numberValue;\r\n      } catch (e) {\r\n        return _error(t(\"Invalid number format.\"), ErrorCode.Undefined, node);\r\n      }\r\n      node.isInteger = tokenValue.indexOf(\".\") === -1;\r\n    }\r\n    return _finalize(node, true);\r\n  }\r\n  function _parseLiteral(parent) {\r\n    let node;\r\n    switch (scanner.getToken()) {\r\n      case 7:\r\n        return _finalize(new NullASTNodeImpl(parent, scanner.getTokenOffset()), true);\r\n      case 8:\r\n        return _finalize(new BooleanASTNodeImpl(parent, true, scanner.getTokenOffset()), true);\r\n      case 9:\r\n        return _finalize(new BooleanASTNodeImpl(parent, false, scanner.getTokenOffset()), true);\r\n      default:\r\n        return void 0;\r\n    }\r\n  }\r\n  function _parseValue(parent) {\r\n    return _parseArray(parent) || _parseObject(parent) || _parseString(parent) || _parseNumber(parent) || _parseLiteral(parent);\r\n  }\r\n  let _root = void 0;\r\n  const token = _scanNext();\r\n  if (token !== 17) {\r\n    _root = _parseValue(_root);\r\n    if (!_root) {\r\n      _error(t(\"Expected a JSON object, array or literal.\"), ErrorCode.Undefined);\r\n    } else if (scanner.getToken() !== 17) {\r\n      _error(t(\"End of file expected.\"), ErrorCode.Undefined);\r\n    }\r\n  }\r\n  return new JSONDocument(_root, problems, commentRanges);\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/utils/json.js\r\nfunction stringifyObject(obj, indent, stringifyLiteral) {\r\n  if (obj !== null && typeof obj === \"object\") {\r\n    const newIndent = indent + \"\t\";\r\n    if (Array.isArray(obj)) {\r\n      if (obj.length === 0) {\r\n        return \"[]\";\r\n      }\r\n      let result = \"[\\n\";\r\n      for (let i = 0; i < obj.length; i++) {\r\n        result += newIndent + stringifyObject(obj[i], newIndent, stringifyLiteral);\r\n        if (i < obj.length - 1) {\r\n          result += \",\";\r\n        }\r\n        result += \"\\n\";\r\n      }\r\n      result += indent + \"]\";\r\n      return result;\r\n    } else {\r\n      const keys = Object.keys(obj);\r\n      if (keys.length === 0) {\r\n        return \"{}\";\r\n      }\r\n      let result = \"{\\n\";\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const key = keys[i];\r\n        result += newIndent + JSON.stringify(key) + \": \" + stringifyObject(obj[key], newIndent, stringifyLiteral);\r\n        if (i < keys.length - 1) {\r\n          result += \",\";\r\n        }\r\n        result += \"\\n\";\r\n      }\r\n      result += indent + \"}\";\r\n      return result;\r\n    }\r\n  }\r\n  return stringifyLiteral(obj);\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/services/jsonCompletion.js\r\nvar valueCommitCharacters = [\",\", \"}\", \"]\"];\r\nvar propertyCommitCharacters = [\":\"];\r\nvar JSONCompletion = class {\r\n  constructor(schemaService, contributions = [], promiseConstructor = Promise, clientCapabilities = {}) {\r\n    this.schemaService = schemaService;\r\n    this.contributions = contributions;\r\n    this.promiseConstructor = promiseConstructor;\r\n    this.clientCapabilities = clientCapabilities;\r\n  }\r\n  doResolve(item) {\r\n    for (let i = this.contributions.length - 1; i >= 0; i--) {\r\n      const resolveCompletion = this.contributions[i].resolveCompletion;\r\n      if (resolveCompletion) {\r\n        const resolver = resolveCompletion(item);\r\n        if (resolver) {\r\n          return resolver;\r\n        }\r\n      }\r\n    }\r\n    return this.promiseConstructor.resolve(item);\r\n  }\r\n  doComplete(document, position, doc) {\r\n    const result = {\r\n      items: [],\r\n      isIncomplete: false\r\n    };\r\n    const text = document.getText();\r\n    const offset = document.offsetAt(position);\r\n    let node = doc.getNodeFromOffset(offset, true);\r\n    if (this.isInComment(document, node ? node.offset : 0, offset)) {\r\n      return Promise.resolve(result);\r\n    }\r\n    if (node && offset === node.offset + node.length && offset > 0) {\r\n      const ch = text[offset - 1];\r\n      if (node.type === \"object\" && ch === \"}\" || node.type === \"array\" && ch === \"]\") {\r\n        node = node.parent;\r\n      }\r\n    }\r\n    const currentWord = this.getCurrentWord(document, offset);\r\n    let overwriteRange;\r\n    if (node && (node.type === \"string\" || node.type === \"number\" || node.type === \"boolean\" || node.type === \"null\")) {\r\n      overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));\r\n    } else {\r\n      let overwriteStart = offset - currentWord.length;\r\n      if (overwriteStart > 0 && text[overwriteStart - 1] === '\"') {\r\n        overwriteStart--;\r\n      }\r\n      overwriteRange = Range.create(document.positionAt(overwriteStart), position);\r\n    }\r\n    const supportsCommitCharacters = false;\r\n    const proposed = /* @__PURE__ */ new Map();\r\n    const collector = {\r\n      add: (suggestion) => {\r\n        let label = suggestion.label;\r\n        const existing = proposed.get(label);\r\n        if (!existing) {\r\n          label = label.replace(/[\\n]/g, \"\\u21B5\");\r\n          if (label.length > 60) {\r\n            const shortendedLabel = label.substr(0, 57).trim() + \"...\";\r\n            if (!proposed.has(shortendedLabel)) {\r\n              label = shortendedLabel;\r\n            }\r\n          }\r\n          suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);\r\n          if (supportsCommitCharacters) {\r\n            suggestion.commitCharacters = suggestion.kind === CompletionItemKind.Property ? propertyCommitCharacters : valueCommitCharacters;\r\n          }\r\n          suggestion.label = label;\r\n          proposed.set(label, suggestion);\r\n          result.items.push(suggestion);\r\n        } else {\r\n          if (!existing.documentation) {\r\n            existing.documentation = suggestion.documentation;\r\n          }\r\n          if (!existing.detail) {\r\n            existing.detail = suggestion.detail;\r\n          }\r\n          if (!existing.labelDetails) {\r\n            existing.labelDetails = suggestion.labelDetails;\r\n          }\r\n        }\r\n      },\r\n      setAsIncomplete: () => {\r\n        result.isIncomplete = true;\r\n      },\r\n      error: (message) => {\r\n        console.error(message);\r\n      },\r\n      getNumberOfProposals: () => {\r\n        return result.items.length;\r\n      }\r\n    };\r\n    return this.schemaService.getSchemaForResource(document.uri, doc).then((schema) => {\r\n      const collectionPromises = [];\r\n      let addValue = true;\r\n      let currentKey = \"\";\r\n      let currentProperty = void 0;\r\n      if (node) {\r\n        if (node.type === \"string\") {\r\n          const parent = node.parent;\r\n          if (parent && parent.type === \"property\" && parent.keyNode === node) {\r\n            addValue = !parent.valueNode;\r\n            currentProperty = parent;\r\n            currentKey = text.substr(node.offset + 1, node.length - 2);\r\n            if (parent) {\r\n              node = parent.parent;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (node && node.type === \"object\") {\r\n        if (node.offset === offset) {\r\n          return result;\r\n        }\r\n        const properties = node.properties;\r\n        properties.forEach((p) => {\r\n          if (!currentProperty || currentProperty !== p) {\r\n            proposed.set(p.keyNode.value, CompletionItem.create(\"__\"));\r\n          }\r\n        });\r\n        let separatorAfter = \"\";\r\n        if (addValue) {\r\n          separatorAfter = this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));\r\n        }\r\n        if (schema) {\r\n          this.getPropertyCompletions(schema, doc, node, addValue, separatorAfter, collector);\r\n        } else {\r\n          this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);\r\n        }\r\n        const location = getNodePath3(node);\r\n        this.contributions.forEach((contribution) => {\r\n          const collectPromise = contribution.collectPropertyCompletions(document.uri, location, currentWord, addValue, separatorAfter === \"\", collector);\r\n          if (collectPromise) {\r\n            collectionPromises.push(collectPromise);\r\n          }\r\n        });\r\n        if (!schema && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '\"') {\r\n          collector.add({\r\n            kind: CompletionItemKind.Property,\r\n            label: this.getLabelForValue(currentWord),\r\n            insertText: this.getInsertTextForProperty(currentWord, void 0, false, separatorAfter),\r\n            insertTextFormat: InsertTextFormat.Snippet,\r\n            documentation: \"\"\r\n          });\r\n          collector.setAsIncomplete();\r\n        }\r\n      }\r\n      const types = {};\r\n      if (schema) {\r\n        this.getValueCompletions(schema, doc, node, offset, document, collector, types);\r\n      } else {\r\n        this.getSchemaLessValueCompletions(doc, node, offset, document, collector);\r\n      }\r\n      if (this.contributions.length > 0) {\r\n        this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);\r\n      }\r\n      return this.promiseConstructor.all(collectionPromises).then(() => {\r\n        if (collector.getNumberOfProposals() === 0) {\r\n          let offsetForSeparator = offset;\r\n          if (node && (node.type === \"string\" || node.type === \"number\" || node.type === \"boolean\" || node.type === \"null\")) {\r\n            offsetForSeparator = node.offset + node.length;\r\n          }\r\n          const separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);\r\n          this.addFillerValueCompletions(types, separatorAfter, collector);\r\n        }\r\n        return result;\r\n      });\r\n    });\r\n  }\r\n  getPropertyCompletions(schema, doc, node, addValue, separatorAfter, collector) {\r\n    const matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);\r\n    matchingSchemas.forEach((s) => {\r\n      if (s.node === node && !s.inverted) {\r\n        const schemaProperties = s.schema.properties;\r\n        if (schemaProperties) {\r\n          Object.keys(schemaProperties).forEach((key) => {\r\n            const propertySchema = schemaProperties[key];\r\n            if (typeof propertySchema === \"object\" && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {\r\n              const proposal = {\r\n                kind: CompletionItemKind.Property,\r\n                label: key,\r\n                insertText: this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),\r\n                insertTextFormat: InsertTextFormat.Snippet,\r\n                filterText: this.getFilterTextForValue(key),\r\n                documentation: this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || \"\"\r\n              };\r\n              if (propertySchema.suggestSortText !== void 0) {\r\n                proposal.sortText = propertySchema.suggestSortText;\r\n              }\r\n              if (proposal.insertText && endsWith(proposal.insertText, `$1${separatorAfter}`)) {\r\n                proposal.command = {\r\n                  title: \"Suggest\",\r\n                  command: \"editor.action.triggerSuggest\"\r\n                };\r\n              }\r\n              collector.add(proposal);\r\n            }\r\n          });\r\n        }\r\n        const schemaPropertyNames = s.schema.propertyNames;\r\n        if (typeof schemaPropertyNames === \"object\" && !schemaPropertyNames.deprecationMessage && !schemaPropertyNames.doNotSuggest) {\r\n          const propertyNameCompletionItem = (name, enumDescription = void 0) => {\r\n            const proposal = {\r\n              kind: CompletionItemKind.Property,\r\n              label: name,\r\n              insertText: this.getInsertTextForProperty(name, void 0, addValue, separatorAfter),\r\n              insertTextFormat: InsertTextFormat.Snippet,\r\n              filterText: this.getFilterTextForValue(name),\r\n              documentation: enumDescription || this.fromMarkup(schemaPropertyNames.markdownDescription) || schemaPropertyNames.description || \"\"\r\n            };\r\n            if (schemaPropertyNames.suggestSortText !== void 0) {\r\n              proposal.sortText = schemaPropertyNames.suggestSortText;\r\n            }\r\n            if (proposal.insertText && endsWith(proposal.insertText, `$1${separatorAfter}`)) {\r\n              proposal.command = {\r\n                title: \"Suggest\",\r\n                command: \"editor.action.triggerSuggest\"\r\n              };\r\n            }\r\n            collector.add(proposal);\r\n          };\r\n          if (schemaPropertyNames.enum) {\r\n            for (let i = 0; i < schemaPropertyNames.enum.length; i++) {\r\n              let enumDescription = void 0;\r\n              if (schemaPropertyNames.markdownEnumDescriptions && i < schemaPropertyNames.markdownEnumDescriptions.length) {\r\n                enumDescription = this.fromMarkup(schemaPropertyNames.markdownEnumDescriptions[i]);\r\n              } else if (schemaPropertyNames.enumDescriptions && i < schemaPropertyNames.enumDescriptions.length) {\r\n                enumDescription = schemaPropertyNames.enumDescriptions[i];\r\n              }\r\n              propertyNameCompletionItem(schemaPropertyNames.enum[i], enumDescription);\r\n            }\r\n          }\r\n          if (schemaPropertyNames.const) {\r\n            propertyNameCompletionItem(schemaPropertyNames.const);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  getSchemaLessPropertyCompletions(doc, node, currentKey, collector) {\r\n    const collectCompletionsForSimilarObject = (obj) => {\r\n      obj.properties.forEach((p) => {\r\n        const key = p.keyNode.value;\r\n        collector.add({\r\n          kind: CompletionItemKind.Property,\r\n          label: key,\r\n          insertText: this.getInsertTextForValue(key, \"\"),\r\n          insertTextFormat: InsertTextFormat.Snippet,\r\n          filterText: this.getFilterTextForValue(key),\r\n          documentation: \"\"\r\n        });\r\n      });\r\n    };\r\n    if (node.parent) {\r\n      if (node.parent.type === \"property\") {\r\n        const parentKey = node.parent.keyNode.value;\r\n        doc.visit((n) => {\r\n          if (n.type === \"property\" && n !== node.parent && n.keyNode.value === parentKey && n.valueNode && n.valueNode.type === \"object\") {\r\n            collectCompletionsForSimilarObject(n.valueNode);\r\n          }\r\n          return true;\r\n        });\r\n      } else if (node.parent.type === \"array\") {\r\n        node.parent.items.forEach((n) => {\r\n          if (n.type === \"object\" && n !== node) {\r\n            collectCompletionsForSimilarObject(n);\r\n          }\r\n        });\r\n      }\r\n    } else if (node.type === \"object\") {\r\n      collector.add({\r\n        kind: CompletionItemKind.Property,\r\n        label: \"$schema\",\r\n        insertText: this.getInsertTextForProperty(\"$schema\", void 0, true, \"\"),\r\n        insertTextFormat: InsertTextFormat.Snippet,\r\n        documentation: \"\",\r\n        filterText: this.getFilterTextForValue(\"$schema\")\r\n      });\r\n    }\r\n  }\r\n  getSchemaLessValueCompletions(doc, node, offset, document, collector) {\r\n    let offsetForSeparator = offset;\r\n    if (node && (node.type === \"string\" || node.type === \"number\" || node.type === \"boolean\" || node.type === \"null\")) {\r\n      offsetForSeparator = node.offset + node.length;\r\n      node = node.parent;\r\n    }\r\n    if (!node) {\r\n      collector.add({\r\n        kind: this.getSuggestionKind(\"object\"),\r\n        label: \"Empty object\",\r\n        insertText: this.getInsertTextForValue({}, \"\"),\r\n        insertTextFormat: InsertTextFormat.Snippet,\r\n        documentation: \"\"\r\n      });\r\n      collector.add({\r\n        kind: this.getSuggestionKind(\"array\"),\r\n        label: \"Empty array\",\r\n        insertText: this.getInsertTextForValue([], \"\"),\r\n        insertTextFormat: InsertTextFormat.Snippet,\r\n        documentation: \"\"\r\n      });\r\n      return;\r\n    }\r\n    const separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);\r\n    const collectSuggestionsForValues = (value) => {\r\n      if (value.parent && !contains2(value.parent, offset, true)) {\r\n        collector.add({\r\n          kind: this.getSuggestionKind(value.type),\r\n          label: this.getLabelTextForMatchingNode(value, document),\r\n          insertText: this.getInsertTextForMatchingNode(value, document, separatorAfter),\r\n          insertTextFormat: InsertTextFormat.Snippet,\r\n          documentation: \"\"\r\n        });\r\n      }\r\n      if (value.type === \"boolean\") {\r\n        this.addBooleanValueCompletion(!value.value, separatorAfter, collector);\r\n      }\r\n    };\r\n    if (node.type === \"property\") {\r\n      if (offset > (node.colonOffset || 0)) {\r\n        const valueNode = node.valueNode;\r\n        if (valueNode && (offset > valueNode.offset + valueNode.length || valueNode.type === \"object\" || valueNode.type === \"array\")) {\r\n          return;\r\n        }\r\n        const parentKey = node.keyNode.value;\r\n        doc.visit((n) => {\r\n          if (n.type === \"property\" && n.keyNode.value === parentKey && n.valueNode) {\r\n            collectSuggestionsForValues(n.valueNode);\r\n          }\r\n          return true;\r\n        });\r\n        if (parentKey === \"$schema\" && node.parent && !node.parent.parent) {\r\n          this.addDollarSchemaCompletions(separatorAfter, collector);\r\n        }\r\n      }\r\n    }\r\n    if (node.type === \"array\") {\r\n      if (node.parent && node.parent.type === \"property\") {\r\n        const parentKey = node.parent.keyNode.value;\r\n        doc.visit((n) => {\r\n          if (n.type === \"property\" && n.keyNode.value === parentKey && n.valueNode && n.valueNode.type === \"array\") {\r\n            n.valueNode.items.forEach(collectSuggestionsForValues);\r\n          }\r\n          return true;\r\n        });\r\n      } else {\r\n        node.items.forEach(collectSuggestionsForValues);\r\n      }\r\n    }\r\n  }\r\n  getValueCompletions(schema, doc, node, offset, document, collector, types) {\r\n    let offsetForSeparator = offset;\r\n    let parentKey = void 0;\r\n    let valueNode = void 0;\r\n    if (node && (node.type === \"string\" || node.type === \"number\" || node.type === \"boolean\" || node.type === \"null\")) {\r\n      offsetForSeparator = node.offset + node.length;\r\n      valueNode = node;\r\n      node = node.parent;\r\n    }\r\n    if (!node) {\r\n      this.addSchemaValueCompletions(schema.schema, \"\", collector, types);\r\n      return;\r\n    }\r\n    if (node.type === \"property\" && offset > (node.colonOffset || 0)) {\r\n      const valueNode2 = node.valueNode;\r\n      if (valueNode2 && offset > valueNode2.offset + valueNode2.length) {\r\n        return;\r\n      }\r\n      parentKey = node.keyNode.value;\r\n      node = node.parent;\r\n    }\r\n    if (node && (parentKey !== void 0 || node.type === \"array\")) {\r\n      const separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);\r\n      const matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset, valueNode);\r\n      for (const s of matchingSchemas) {\r\n        if (s.node === node && !s.inverted && s.schema) {\r\n          if (node.type === \"array\" && s.schema.items) {\r\n            let c = collector;\r\n            if (s.schema.uniqueItems) {\r\n              const existingValues = /* @__PURE__ */ new Set();\r\n              node.children.forEach((n) => {\r\n                if (n.type !== \"array\" && n.type !== \"object\") {\r\n                  existingValues.add(this.getLabelForValue(getNodeValue3(n)));\r\n                }\r\n              });\r\n              c = {\r\n                ...collector,\r\n                add(suggestion) {\r\n                  if (!existingValues.has(suggestion.label)) {\r\n                    collector.add(suggestion);\r\n                  }\r\n                }\r\n              };\r\n            }\r\n            if (Array.isArray(s.schema.items)) {\r\n              const index = this.findItemAtOffset(node, document, offset);\r\n              if (index < s.schema.items.length) {\r\n                this.addSchemaValueCompletions(s.schema.items[index], separatorAfter, c, types);\r\n              }\r\n            } else {\r\n              this.addSchemaValueCompletions(s.schema.items, separatorAfter, c, types);\r\n            }\r\n          }\r\n          if (parentKey !== void 0) {\r\n            let propertyMatched = false;\r\n            if (s.schema.properties) {\r\n              const propertySchema = s.schema.properties[parentKey];\r\n              if (propertySchema) {\r\n                propertyMatched = true;\r\n                this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);\r\n              }\r\n            }\r\n            if (s.schema.patternProperties && !propertyMatched) {\r\n              for (const pattern of Object.keys(s.schema.patternProperties)) {\r\n                const regex = extendedRegExp(pattern);\r\n                if (regex?.test(parentKey)) {\r\n                  propertyMatched = true;\r\n                  const propertySchema = s.schema.patternProperties[pattern];\r\n                  this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);\r\n                }\r\n              }\r\n            }\r\n            if (s.schema.additionalProperties && !propertyMatched) {\r\n              const propertySchema = s.schema.additionalProperties;\r\n              this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (parentKey === \"$schema\" && !node.parent) {\r\n        this.addDollarSchemaCompletions(separatorAfter, collector);\r\n      }\r\n      if (types[\"boolean\"]) {\r\n        this.addBooleanValueCompletion(true, separatorAfter, collector);\r\n        this.addBooleanValueCompletion(false, separatorAfter, collector);\r\n      }\r\n      if (types[\"null\"]) {\r\n        this.addNullValueCompletion(separatorAfter, collector);\r\n      }\r\n    }\r\n  }\r\n  getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises) {\r\n    if (!node) {\r\n      this.contributions.forEach((contribution) => {\r\n        const collectPromise = contribution.collectDefaultCompletions(document.uri, collector);\r\n        if (collectPromise) {\r\n          collectionPromises.push(collectPromise);\r\n        }\r\n      });\r\n    } else {\r\n      if (node.type === \"string\" || node.type === \"number\" || node.type === \"boolean\" || node.type === \"null\") {\r\n        node = node.parent;\r\n      }\r\n      if (node && node.type === \"property\" && offset > (node.colonOffset || 0)) {\r\n        const parentKey = node.keyNode.value;\r\n        const valueNode = node.valueNode;\r\n        if ((!valueNode || offset <= valueNode.offset + valueNode.length) && node.parent) {\r\n          const location = getNodePath3(node.parent);\r\n          this.contributions.forEach((contribution) => {\r\n            const collectPromise = contribution.collectValueCompletions(document.uri, location, parentKey, collector);\r\n            if (collectPromise) {\r\n              collectionPromises.push(collectPromise);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  addSchemaValueCompletions(schema, separatorAfter, collector, types) {\r\n    if (typeof schema === \"object\") {\r\n      this.addEnumValueCompletions(schema, separatorAfter, collector);\r\n      this.addDefaultValueCompletions(schema, separatorAfter, collector);\r\n      this.collectTypes(schema, types);\r\n      if (Array.isArray(schema.allOf)) {\r\n        schema.allOf.forEach((s) => this.addSchemaValueCompletions(s, separatorAfter, collector, types));\r\n      }\r\n      if (Array.isArray(schema.anyOf)) {\r\n        schema.anyOf.forEach((s) => this.addSchemaValueCompletions(s, separatorAfter, collector, types));\r\n      }\r\n      if (Array.isArray(schema.oneOf)) {\r\n        schema.oneOf.forEach((s) => this.addSchemaValueCompletions(s, separatorAfter, collector, types));\r\n      }\r\n    }\r\n  }\r\n  addDefaultValueCompletions(schema, separatorAfter, collector, arrayDepth = 0) {\r\n    let hasProposals = false;\r\n    if (isDefined(schema.default)) {\r\n      let type = schema.type;\r\n      let value = schema.default;\r\n      for (let i = arrayDepth; i > 0; i--) {\r\n        value = [value];\r\n        type = \"array\";\r\n      }\r\n      const completionItem = {\r\n        kind: this.getSuggestionKind(type),\r\n        label: this.getLabelForValue(value),\r\n        insertText: this.getInsertTextForValue(value, separatorAfter),\r\n        insertTextFormat: InsertTextFormat.Snippet\r\n      };\r\n      if (this.doesSupportsLabelDetails()) {\r\n        completionItem.labelDetails = { description: t(\"Default value\") };\r\n      } else {\r\n        completionItem.detail = t(\"Default value\");\r\n      }\r\n      collector.add(completionItem);\r\n      hasProposals = true;\r\n    }\r\n    if (Array.isArray(schema.examples)) {\r\n      schema.examples.forEach((example) => {\r\n        let type = schema.type;\r\n        let value = example;\r\n        for (let i = arrayDepth; i > 0; i--) {\r\n          value = [value];\r\n          type = \"array\";\r\n        }\r\n        collector.add({\r\n          kind: this.getSuggestionKind(type),\r\n          label: this.getLabelForValue(value),\r\n          insertText: this.getInsertTextForValue(value, separatorAfter),\r\n          insertTextFormat: InsertTextFormat.Snippet\r\n        });\r\n        hasProposals = true;\r\n      });\r\n    }\r\n    if (Array.isArray(schema.defaultSnippets)) {\r\n      schema.defaultSnippets.forEach((s) => {\r\n        let type = schema.type;\r\n        let value = s.body;\r\n        let label = s.label;\r\n        let insertText;\r\n        let filterText;\r\n        if (isDefined(value)) {\r\n          let type2 = schema.type;\r\n          for (let i = arrayDepth; i > 0; i--) {\r\n            value = [value];\r\n            type2 = \"array\";\r\n          }\r\n          insertText = this.getInsertTextForSnippetValue(value, separatorAfter);\r\n          filterText = this.getFilterTextForSnippetValue(value);\r\n          label = label || this.getLabelForSnippetValue(value);\r\n        } else if (typeof s.bodyText === \"string\") {\r\n          let prefix = \"\", suffix = \"\", indent = \"\";\r\n          for (let i = arrayDepth; i > 0; i--) {\r\n            prefix = prefix + indent + \"[\\n\";\r\n            suffix = suffix + \"\\n\" + indent + \"]\";\r\n            indent += \"\t\";\r\n            type = \"array\";\r\n          }\r\n          insertText = prefix + indent + s.bodyText.split(\"\\n\").join(\"\\n\" + indent) + suffix + separatorAfter;\r\n          label = label || insertText, filterText = insertText.replace(/[\\n]/g, \"\");\r\n        } else {\r\n          return;\r\n        }\r\n        collector.add({\r\n          kind: this.getSuggestionKind(type),\r\n          label,\r\n          documentation: this.fromMarkup(s.markdownDescription) || s.description,\r\n          insertText,\r\n          insertTextFormat: InsertTextFormat.Snippet,\r\n          filterText\r\n        });\r\n        hasProposals = true;\r\n      });\r\n    }\r\n    if (!hasProposals && typeof schema.items === \"object\" && !Array.isArray(schema.items) && arrayDepth < 5) {\r\n      this.addDefaultValueCompletions(schema.items, separatorAfter, collector, arrayDepth + 1);\r\n    }\r\n  }\r\n  addEnumValueCompletions(schema, separatorAfter, collector) {\r\n    if (isDefined(schema.const)) {\r\n      collector.add({\r\n        kind: this.getSuggestionKind(schema.type),\r\n        label: this.getLabelForValue(schema.const),\r\n        insertText: this.getInsertTextForValue(schema.const, separatorAfter),\r\n        insertTextFormat: InsertTextFormat.Snippet,\r\n        documentation: this.fromMarkup(schema.markdownDescription) || schema.description\r\n      });\r\n    }\r\n    if (Array.isArray(schema.enum)) {\r\n      for (let i = 0, length = schema.enum.length; i < length; i++) {\r\n        const enm = schema.enum[i];\r\n        let documentation = this.fromMarkup(schema.markdownDescription) || schema.description;\r\n        if (schema.markdownEnumDescriptions && i < schema.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {\r\n          documentation = this.fromMarkup(schema.markdownEnumDescriptions[i]);\r\n        } else if (schema.enumDescriptions && i < schema.enumDescriptions.length) {\r\n          documentation = schema.enumDescriptions[i];\r\n        }\r\n        collector.add({\r\n          kind: this.getSuggestionKind(schema.type),\r\n          label: this.getLabelForValue(enm),\r\n          insertText: this.getInsertTextForValue(enm, separatorAfter),\r\n          insertTextFormat: InsertTextFormat.Snippet,\r\n          documentation\r\n        });\r\n      }\r\n    }\r\n  }\r\n  collectTypes(schema, types) {\r\n    if (Array.isArray(schema.enum) || isDefined(schema.const)) {\r\n      return;\r\n    }\r\n    const type = schema.type;\r\n    if (Array.isArray(type)) {\r\n      type.forEach((t2) => types[t2] = true);\r\n    } else if (type) {\r\n      types[type] = true;\r\n    }\r\n  }\r\n  addFillerValueCompletions(types, separatorAfter, collector) {\r\n    if (types[\"object\"]) {\r\n      collector.add({\r\n        kind: this.getSuggestionKind(\"object\"),\r\n        label: \"{}\",\r\n        insertText: this.getInsertTextForGuessedValue({}, separatorAfter),\r\n        insertTextFormat: InsertTextFormat.Snippet,\r\n        detail: t(\"New object\"),\r\n        documentation: \"\"\r\n      });\r\n    }\r\n    if (types[\"array\"]) {\r\n      collector.add({\r\n        kind: this.getSuggestionKind(\"array\"),\r\n        label: \"[]\",\r\n        insertText: this.getInsertTextForGuessedValue([], separatorAfter),\r\n        insertTextFormat: InsertTextFormat.Snippet,\r\n        detail: t(\"New array\"),\r\n        documentation: \"\"\r\n      });\r\n    }\r\n  }\r\n  addBooleanValueCompletion(value, separatorAfter, collector) {\r\n    collector.add({\r\n      kind: this.getSuggestionKind(\"boolean\"),\r\n      label: value ? \"true\" : \"false\",\r\n      insertText: this.getInsertTextForValue(value, separatorAfter),\r\n      insertTextFormat: InsertTextFormat.Snippet,\r\n      documentation: \"\"\r\n    });\r\n  }\r\n  addNullValueCompletion(separatorAfter, collector) {\r\n    collector.add({\r\n      kind: this.getSuggestionKind(\"null\"),\r\n      label: \"null\",\r\n      insertText: \"null\" + separatorAfter,\r\n      insertTextFormat: InsertTextFormat.Snippet,\r\n      documentation: \"\"\r\n    });\r\n  }\r\n  addDollarSchemaCompletions(separatorAfter, collector) {\r\n    const schemaIds = this.schemaService.getRegisteredSchemaIds((schema) => schema === \"http\" || schema === \"https\");\r\n    schemaIds.forEach((schemaId) => {\r\n      if (schemaId.startsWith(\"http://json-schema.org/draft-\")) {\r\n        schemaId = schemaId + \"#\";\r\n      }\r\n      collector.add({\r\n        kind: CompletionItemKind.Module,\r\n        label: this.getLabelForValue(schemaId),\r\n        filterText: this.getFilterTextForValue(schemaId),\r\n        insertText: this.getInsertTextForValue(schemaId, separatorAfter),\r\n        insertTextFormat: InsertTextFormat.Snippet,\r\n        documentation: \"\"\r\n      });\r\n    });\r\n  }\r\n  getLabelForValue(value) {\r\n    return JSON.stringify(value);\r\n  }\r\n  getValueFromLabel(value) {\r\n    return JSON.parse(value);\r\n  }\r\n  getFilterTextForValue(value) {\r\n    return JSON.stringify(value);\r\n  }\r\n  getFilterTextForSnippetValue(value) {\r\n    return JSON.stringify(value).replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, \"$1\");\r\n  }\r\n  getLabelForSnippetValue(value) {\r\n    const label = JSON.stringify(value);\r\n    return label.replace(/\\$\\{\\d+:([^}]+)\\}|\\$\\d+/g, \"$1\");\r\n  }\r\n  getInsertTextForPlainText(text) {\r\n    return text.replace(/[\\\\\\$\\}]/g, \"\\\\$&\");\r\n  }\r\n  getInsertTextForValue(value, separatorAfter) {\r\n    const text = JSON.stringify(value, null, \"\t\");\r\n    if (text === \"{}\") {\r\n      return \"{$1}\" + separatorAfter;\r\n    } else if (text === \"[]\") {\r\n      return \"[$1]\" + separatorAfter;\r\n    }\r\n    return this.getInsertTextForPlainText(text + separatorAfter);\r\n  }\r\n  getInsertTextForSnippetValue(value, separatorAfter) {\r\n    const replacer = (value2) => {\r\n      if (typeof value2 === \"string\") {\r\n        if (value2[0] === \"^\") {\r\n          return value2.substr(1);\r\n        }\r\n      }\r\n      return JSON.stringify(value2);\r\n    };\r\n    return stringifyObject(value, \"\", replacer) + separatorAfter;\r\n  }\r\n  getInsertTextForGuessedValue(value, separatorAfter) {\r\n    switch (typeof value) {\r\n      case \"object\":\r\n        if (value === null) {\r\n          return \"${1:null}\" + separatorAfter;\r\n        }\r\n        return this.getInsertTextForValue(value, separatorAfter);\r\n      case \"string\":\r\n        let snippetValue = JSON.stringify(value);\r\n        snippetValue = snippetValue.substr(1, snippetValue.length - 2);\r\n        snippetValue = this.getInsertTextForPlainText(snippetValue);\r\n        return '\"${1:' + snippetValue + '}\"' + separatorAfter;\r\n      case \"number\":\r\n      case \"boolean\":\r\n        return \"${1:\" + JSON.stringify(value) + \"}\" + separatorAfter;\r\n    }\r\n    return this.getInsertTextForValue(value, separatorAfter);\r\n  }\r\n  getSuggestionKind(type) {\r\n    if (Array.isArray(type)) {\r\n      const array = type;\r\n      type = array.length > 0 ? array[0] : void 0;\r\n    }\r\n    if (!type) {\r\n      return CompletionItemKind.Value;\r\n    }\r\n    switch (type) {\r\n      case \"string\":\r\n        return CompletionItemKind.Value;\r\n      case \"object\":\r\n        return CompletionItemKind.Module;\r\n      case \"property\":\r\n        return CompletionItemKind.Property;\r\n      default:\r\n        return CompletionItemKind.Value;\r\n    }\r\n  }\r\n  getLabelTextForMatchingNode(node, document) {\r\n    switch (node.type) {\r\n      case \"array\":\r\n        return \"[]\";\r\n      case \"object\":\r\n        return \"{}\";\r\n      default:\r\n        const content = document.getText().substr(node.offset, node.length);\r\n        return content;\r\n    }\r\n  }\r\n  getInsertTextForMatchingNode(node, document, separatorAfter) {\r\n    switch (node.type) {\r\n      case \"array\":\r\n        return this.getInsertTextForValue([], separatorAfter);\r\n      case \"object\":\r\n        return this.getInsertTextForValue({}, separatorAfter);\r\n      default:\r\n        const content = document.getText().substr(node.offset, node.length) + separatorAfter;\r\n        return this.getInsertTextForPlainText(content);\r\n    }\r\n  }\r\n  getInsertTextForProperty(key, propertySchema, addValue, separatorAfter) {\r\n    const propertyText = this.getInsertTextForValue(key, \"\");\r\n    if (!addValue) {\r\n      return propertyText;\r\n    }\r\n    const resultText = propertyText + \": \";\r\n    let value;\r\n    let nValueProposals = 0;\r\n    if (propertySchema) {\r\n      if (Array.isArray(propertySchema.defaultSnippets)) {\r\n        if (propertySchema.defaultSnippets.length === 1) {\r\n          const body = propertySchema.defaultSnippets[0].body;\r\n          if (isDefined(body)) {\r\n            value = this.getInsertTextForSnippetValue(body, \"\");\r\n          }\r\n        }\r\n        nValueProposals += propertySchema.defaultSnippets.length;\r\n      }\r\n      if (propertySchema.enum) {\r\n        if (!value && propertySchema.enum.length === 1) {\r\n          value = this.getInsertTextForGuessedValue(propertySchema.enum[0], \"\");\r\n        }\r\n        nValueProposals += propertySchema.enum.length;\r\n      }\r\n      if (isDefined(propertySchema.const)) {\r\n        if (!value) {\r\n          value = this.getInsertTextForGuessedValue(propertySchema.const, \"\");\r\n        }\r\n        nValueProposals++;\r\n      }\r\n      if (isDefined(propertySchema.default)) {\r\n        if (!value) {\r\n          value = this.getInsertTextForGuessedValue(propertySchema.default, \"\");\r\n        }\r\n        nValueProposals++;\r\n      }\r\n      if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {\r\n        if (!value) {\r\n          value = this.getInsertTextForGuessedValue(propertySchema.examples[0], \"\");\r\n        }\r\n        nValueProposals += propertySchema.examples.length;\r\n      }\r\n      if (nValueProposals === 0) {\r\n        let type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;\r\n        if (!type) {\r\n          if (propertySchema.properties) {\r\n            type = \"object\";\r\n          } else if (propertySchema.items) {\r\n            type = \"array\";\r\n          }\r\n        }\r\n        switch (type) {\r\n          case \"boolean\":\r\n            value = \"$1\";\r\n            break;\r\n          case \"string\":\r\n            value = '\"$1\"';\r\n            break;\r\n          case \"object\":\r\n            value = \"{$1}\";\r\n            break;\r\n          case \"array\":\r\n            value = \"[$1]\";\r\n            break;\r\n          case \"number\":\r\n          case \"integer\":\r\n            value = \"${1:0}\";\r\n            break;\r\n          case \"null\":\r\n            value = \"${1:null}\";\r\n            break;\r\n          default:\r\n            return propertyText;\r\n        }\r\n      }\r\n    }\r\n    if (!value || nValueProposals > 1) {\r\n      value = \"$1\";\r\n    }\r\n    return resultText + value + separatorAfter;\r\n  }\r\n  getCurrentWord(document, offset) {\r\n    let i = offset - 1;\r\n    const text = document.getText();\r\n    while (i >= 0 && ' \t\\n\\r\\v\":{[,]}'.indexOf(text.charAt(i)) === -1) {\r\n      i--;\r\n    }\r\n    return text.substring(i + 1, offset);\r\n  }\r\n  evaluateSeparatorAfter(document, offset) {\r\n    const scanner = createScanner2(document.getText(), true);\r\n    scanner.setPosition(offset);\r\n    const token = scanner.scan();\r\n    switch (token) {\r\n      case 5:\r\n      case 2:\r\n      case 4:\r\n      case 17:\r\n        return \"\";\r\n      default:\r\n        return \",\";\r\n    }\r\n  }\r\n  findItemAtOffset(node, document, offset) {\r\n    const scanner = createScanner2(document.getText(), true);\r\n    const children = node.items;\r\n    for (let i = children.length - 1; i >= 0; i--) {\r\n      const child = children[i];\r\n      if (offset > child.offset + child.length) {\r\n        scanner.setPosition(child.offset + child.length);\r\n        const token = scanner.scan();\r\n        if (token === 5 && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {\r\n          return i + 1;\r\n        }\r\n        return i;\r\n      } else if (offset >= child.offset) {\r\n        return i;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n  isInComment(document, start, offset) {\r\n    const scanner = createScanner2(document.getText(), false);\r\n    scanner.setPosition(start);\r\n    let token = scanner.scan();\r\n    while (token !== 17 && scanner.getTokenOffset() + scanner.getTokenLength() < offset) {\r\n      token = scanner.scan();\r\n    }\r\n    return (token === 12 || token === 13) && scanner.getTokenOffset() <= offset;\r\n  }\r\n  fromMarkup(markupString) {\r\n    if (markupString && this.doesSupportMarkdown()) {\r\n      return {\r\n        kind: MarkupKind.Markdown,\r\n        value: markupString\r\n      };\r\n    }\r\n    return void 0;\r\n  }\r\n  doesSupportMarkdown() {\r\n    if (!isDefined(this.supportsMarkdown)) {\r\n      const documentationFormat = this.clientCapabilities.textDocument?.completion?.completionItem?.documentationFormat;\r\n      this.supportsMarkdown = Array.isArray(documentationFormat) && documentationFormat.indexOf(MarkupKind.Markdown) !== -1;\r\n    }\r\n    return this.supportsMarkdown;\r\n  }\r\n  doesSupportsCommitCharacters() {\r\n    if (!isDefined(this.supportsCommitCharacters)) {\r\n      this.labelDetailsSupport = this.clientCapabilities.textDocument?.completion?.completionItem?.commitCharactersSupport;\r\n    }\r\n    return this.supportsCommitCharacters;\r\n  }\r\n  doesSupportsLabelDetails() {\r\n    if (!isDefined(this.labelDetailsSupport)) {\r\n      this.labelDetailsSupport = this.clientCapabilities.textDocument?.completion?.completionItem?.labelDetailsSupport;\r\n    }\r\n    return this.labelDetailsSupport;\r\n  }\r\n};\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/services/jsonHover.js\r\nvar JSONHover = class {\r\n  constructor(schemaService, contributions = [], promiseConstructor) {\r\n    this.schemaService = schemaService;\r\n    this.contributions = contributions;\r\n    this.promise = promiseConstructor || Promise;\r\n  }\r\n  doHover(document, position, doc) {\r\n    const offset = document.offsetAt(position);\r\n    let node = doc.getNodeFromOffset(offset);\r\n    if (!node || (node.type === \"object\" || node.type === \"array\") && offset > node.offset + 1 && offset < node.offset + node.length - 1) {\r\n      return this.promise.resolve(null);\r\n    }\r\n    const hoverRangeNode = node;\r\n    if (node.type === \"string\") {\r\n      const parent = node.parent;\r\n      if (parent && parent.type === \"property\" && parent.keyNode === node) {\r\n        node = parent.valueNode;\r\n        if (!node) {\r\n          return this.promise.resolve(null);\r\n        }\r\n      }\r\n    }\r\n    const hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));\r\n    const createHover = (contents) => {\r\n      const result = {\r\n        contents,\r\n        range: hoverRange\r\n      };\r\n      return result;\r\n    };\r\n    const location = getNodePath3(node);\r\n    for (let i = this.contributions.length - 1; i >= 0; i--) {\r\n      const contribution = this.contributions[i];\r\n      const promise = contribution.getInfoContribution(document.uri, location);\r\n      if (promise) {\r\n        return promise.then((htmlContent) => createHover(htmlContent));\r\n      }\r\n    }\r\n    return this.schemaService.getSchemaForResource(document.uri, doc).then((schema) => {\r\n      if (schema && node) {\r\n        const matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);\r\n        let title = void 0;\r\n        let markdownDescription = void 0;\r\n        let markdownEnumValueDescription = void 0, enumValue = void 0;\r\n        matchingSchemas.every((s) => {\r\n          if (s.node === node && !s.inverted && s.schema) {\r\n            title = title || s.schema.title;\r\n            markdownDescription = markdownDescription || s.schema.markdownDescription || toMarkdown(s.schema.description);\r\n            if (s.schema.enum) {\r\n              const idx = s.schema.enum.indexOf(getNodeValue3(node));\r\n              if (s.schema.markdownEnumDescriptions) {\r\n                markdownEnumValueDescription = s.schema.markdownEnumDescriptions[idx];\r\n              } else if (s.schema.enumDescriptions) {\r\n                markdownEnumValueDescription = toMarkdown(s.schema.enumDescriptions[idx]);\r\n              }\r\n              if (markdownEnumValueDescription) {\r\n                enumValue = s.schema.enum[idx];\r\n                if (typeof enumValue !== \"string\") {\r\n                  enumValue = JSON.stringify(enumValue);\r\n                }\r\n              }\r\n            }\r\n          }\r\n          return true;\r\n        });\r\n        let result = \"\";\r\n        if (title) {\r\n          result = toMarkdown(title);\r\n        }\r\n        if (markdownDescription) {\r\n          if (result.length > 0) {\r\n            result += \"\\n\\n\";\r\n          }\r\n          result += markdownDescription;\r\n        }\r\n        if (markdownEnumValueDescription) {\r\n          if (result.length > 0) {\r\n            result += \"\\n\\n\";\r\n          }\r\n          result += `\\`${toMarkdownCodeBlock(enumValue)}\\`: ${markdownEnumValueDescription}`;\r\n        }\r\n        return createHover([result]);\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n};\r\nfunction toMarkdown(plain) {\r\n  if (plain) {\r\n    const res = plain.replace(/([^\\n\\r])(\\r?\\n)([^\\n\\r])/gm, \"$1\\n\\n$3\");\r\n    return res.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\");\r\n  }\r\n  return void 0;\r\n}\r\nfunction toMarkdownCodeBlock(content) {\r\n  if (content.indexOf(\"`\") !== -1) {\r\n    return \"`` \" + content + \" ``\";\r\n  }\r\n  return content;\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/services/jsonValidation.js\r\nvar JSONValidation = class {\r\n  constructor(jsonSchemaService, promiseConstructor) {\r\n    this.jsonSchemaService = jsonSchemaService;\r\n    this.promise = promiseConstructor;\r\n    this.validationEnabled = true;\r\n  }\r\n  configure(raw) {\r\n    if (raw) {\r\n      this.validationEnabled = raw.validate !== false;\r\n      this.commentSeverity = raw.allowComments ? void 0 : DiagnosticSeverity.Error;\r\n    }\r\n  }\r\n  doValidation(textDocument, jsonDocument, documentSettings, schema) {\r\n    if (!this.validationEnabled) {\r\n      return this.promise.resolve([]);\r\n    }\r\n    const diagnostics = [];\r\n    const added = {};\r\n    const addProblem = (problem) => {\r\n      const signature = problem.range.start.line + \" \" + problem.range.start.character + \" \" + problem.message;\r\n      if (!added[signature]) {\r\n        added[signature] = true;\r\n        diagnostics.push(problem);\r\n      }\r\n    };\r\n    const getDiagnostics = (schema2) => {\r\n      let trailingCommaSeverity = documentSettings?.trailingCommas ? toDiagnosticSeverity(documentSettings.trailingCommas) : DiagnosticSeverity.Error;\r\n      let commentSeverity = documentSettings?.comments ? toDiagnosticSeverity(documentSettings.comments) : this.commentSeverity;\r\n      let schemaValidation = documentSettings?.schemaValidation ? toDiagnosticSeverity(documentSettings.schemaValidation) : DiagnosticSeverity.Warning;\r\n      let schemaRequest = documentSettings?.schemaRequest ? toDiagnosticSeverity(documentSettings.schemaRequest) : DiagnosticSeverity.Warning;\r\n      if (schema2) {\r\n        const addSchemaProblem = (errorMessage, errorCode) => {\r\n          if (jsonDocument.root && schemaRequest) {\r\n            const astRoot = jsonDocument.root;\r\n            const property = astRoot.type === \"object\" ? astRoot.properties[0] : void 0;\r\n            if (property && property.keyNode.value === \"$schema\") {\r\n              const node = property.valueNode || property;\r\n              const range = Range.create(textDocument.positionAt(node.offset), textDocument.positionAt(node.offset + node.length));\r\n              addProblem(Diagnostic.create(range, errorMessage, schemaRequest, errorCode));\r\n            } else {\r\n              const range = Range.create(textDocument.positionAt(astRoot.offset), textDocument.positionAt(astRoot.offset + 1));\r\n              addProblem(Diagnostic.create(range, errorMessage, schemaRequest, errorCode));\r\n            }\r\n          }\r\n        };\r\n        if (schema2.errors.length) {\r\n          addSchemaProblem(schema2.errors[0], ErrorCode.SchemaResolveError);\r\n        } else if (schemaValidation) {\r\n          for (const warning of schema2.warnings) {\r\n            addSchemaProblem(warning, ErrorCode.SchemaUnsupportedFeature);\r\n          }\r\n          const semanticErrors = jsonDocument.validate(textDocument, schema2.schema, schemaValidation, documentSettings?.schemaDraft);\r\n          if (semanticErrors) {\r\n            semanticErrors.forEach(addProblem);\r\n          }\r\n        }\r\n        if (schemaAllowsComments(schema2.schema)) {\r\n          commentSeverity = void 0;\r\n        }\r\n        if (schemaAllowsTrailingCommas(schema2.schema)) {\r\n          trailingCommaSeverity = void 0;\r\n        }\r\n      }\r\n      for (const p of jsonDocument.syntaxErrors) {\r\n        if (p.code === ErrorCode.TrailingComma) {\r\n          if (typeof trailingCommaSeverity !== \"number\") {\r\n            continue;\r\n          }\r\n          p.severity = trailingCommaSeverity;\r\n        }\r\n        addProblem(p);\r\n      }\r\n      if (typeof commentSeverity === \"number\") {\r\n        const message = t(\"Comments are not permitted in JSON.\");\r\n        jsonDocument.comments.forEach((c) => {\r\n          addProblem(Diagnostic.create(c, message, commentSeverity, ErrorCode.CommentNotPermitted));\r\n        });\r\n      }\r\n      return diagnostics;\r\n    };\r\n    if (schema) {\r\n      const uri = schema.id || \"schemaservice://untitled/\" + idCounter++;\r\n      const handle = this.jsonSchemaService.registerExternalSchema({ uri, schema });\r\n      return handle.getResolvedSchema().then((resolvedSchema) => {\r\n        return getDiagnostics(resolvedSchema);\r\n      });\r\n    }\r\n    return this.jsonSchemaService.getSchemaForResource(textDocument.uri, jsonDocument).then((schema2) => {\r\n      return getDiagnostics(schema2);\r\n    });\r\n  }\r\n  getLanguageStatus(textDocument, jsonDocument) {\r\n    return { schemas: this.jsonSchemaService.getSchemaURIsForResource(textDocument.uri, jsonDocument) };\r\n  }\r\n};\r\nvar idCounter = 0;\r\nfunction schemaAllowsComments(schemaRef) {\r\n  if (schemaRef && typeof schemaRef === \"object\") {\r\n    if (isBoolean(schemaRef.allowComments)) {\r\n      return schemaRef.allowComments;\r\n    }\r\n    if (schemaRef.allOf) {\r\n      for (const schema of schemaRef.allOf) {\r\n        const allow = schemaAllowsComments(schema);\r\n        if (isBoolean(allow)) {\r\n          return allow;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return void 0;\r\n}\r\nfunction schemaAllowsTrailingCommas(schemaRef) {\r\n  if (schemaRef && typeof schemaRef === \"object\") {\r\n    if (isBoolean(schemaRef.allowTrailingCommas)) {\r\n      return schemaRef.allowTrailingCommas;\r\n    }\r\n    const deprSchemaRef = schemaRef;\r\n    if (isBoolean(deprSchemaRef[\"allowsTrailingCommas\"])) {\r\n      return deprSchemaRef[\"allowsTrailingCommas\"];\r\n    }\r\n    if (schemaRef.allOf) {\r\n      for (const schema of schemaRef.allOf) {\r\n        const allow = schemaAllowsTrailingCommas(schema);\r\n        if (isBoolean(allow)) {\r\n          return allow;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return void 0;\r\n}\r\nfunction toDiagnosticSeverity(severityLevel) {\r\n  switch (severityLevel) {\r\n    case \"error\":\r\n      return DiagnosticSeverity.Error;\r\n    case \"warning\":\r\n      return DiagnosticSeverity.Warning;\r\n    case \"ignore\":\r\n      return void 0;\r\n  }\r\n  return void 0;\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/utils/colors.js\r\nvar Digit0 = 48;\r\nvar Digit9 = 57;\r\nvar A = 65;\r\nvar a = 97;\r\nvar f = 102;\r\nfunction hexDigit(charCode) {\r\n  if (charCode < Digit0) {\r\n    return 0;\r\n  }\r\n  if (charCode <= Digit9) {\r\n    return charCode - Digit0;\r\n  }\r\n  if (charCode < a) {\r\n    charCode += a - A;\r\n  }\r\n  if (charCode >= a && charCode <= f) {\r\n    return charCode - a + 10;\r\n  }\r\n  return 0;\r\n}\r\nfunction colorFromHex(text) {\r\n  if (text[0] !== \"#\") {\r\n    return void 0;\r\n  }\r\n  switch (text.length) {\r\n    case 4:\r\n      return {\r\n        red: hexDigit(text.charCodeAt(1)) * 17 / 255,\r\n        green: hexDigit(text.charCodeAt(2)) * 17 / 255,\r\n        blue: hexDigit(text.charCodeAt(3)) * 17 / 255,\r\n        alpha: 1\r\n      };\r\n    case 5:\r\n      return {\r\n        red: hexDigit(text.charCodeAt(1)) * 17 / 255,\r\n        green: hexDigit(text.charCodeAt(2)) * 17 / 255,\r\n        blue: hexDigit(text.charCodeAt(3)) * 17 / 255,\r\n        alpha: hexDigit(text.charCodeAt(4)) * 17 / 255\r\n      };\r\n    case 7:\r\n      return {\r\n        red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,\r\n        green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,\r\n        blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,\r\n        alpha: 1\r\n      };\r\n    case 9:\r\n      return {\r\n        red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,\r\n        green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,\r\n        blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,\r\n        alpha: (hexDigit(text.charCodeAt(7)) * 16 + hexDigit(text.charCodeAt(8))) / 255\r\n      };\r\n  }\r\n  return void 0;\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/services/jsonDocumentSymbols.js\r\nvar JSONDocumentSymbols = class {\r\n  constructor(schemaService) {\r\n    this.schemaService = schemaService;\r\n  }\r\n  findDocumentSymbols(document, doc, context = { resultLimit: Number.MAX_VALUE }) {\r\n    const root = doc.root;\r\n    if (!root) {\r\n      return [];\r\n    }\r\n    let limit = context.resultLimit || Number.MAX_VALUE;\r\n    const resourceString = document.uri;\r\n    if (resourceString === \"vscode://defaultsettings/keybindings.json\" || endsWith(resourceString.toLowerCase(), \"/user/keybindings.json\")) {\r\n      if (root.type === \"array\") {\r\n        const result2 = [];\r\n        for (const item of root.items) {\r\n          if (item.type === \"object\") {\r\n            for (const property of item.properties) {\r\n              if (property.keyNode.value === \"key\" && property.valueNode) {\r\n                const location = Location.create(document.uri, getRange(document, item));\r\n                result2.push({ name: getName(property.valueNode), kind: SymbolKind.Function, location });\r\n                limit--;\r\n                if (limit <= 0) {\r\n                  if (context && context.onResultLimitExceeded) {\r\n                    context.onResultLimitExceeded(resourceString);\r\n                  }\r\n                  return result2;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return result2;\r\n      }\r\n    }\r\n    const toVisit = [\r\n      { node: root, containerName: \"\" }\r\n    ];\r\n    let nextToVisit = 0;\r\n    let limitExceeded = false;\r\n    const result = [];\r\n    const collectOutlineEntries = (node, containerName) => {\r\n      if (node.type === \"array\") {\r\n        node.items.forEach((node2) => {\r\n          if (node2) {\r\n            toVisit.push({ node: node2, containerName });\r\n          }\r\n        });\r\n      } else if (node.type === \"object\") {\r\n        node.properties.forEach((property) => {\r\n          const valueNode = property.valueNode;\r\n          if (valueNode) {\r\n            if (limit > 0) {\r\n              limit--;\r\n              const location = Location.create(document.uri, getRange(document, property));\r\n              const childContainerName = containerName ? containerName + \".\" + property.keyNode.value : property.keyNode.value;\r\n              result.push({ name: this.getKeyLabel(property), kind: this.getSymbolKind(valueNode.type), location, containerName });\r\n              toVisit.push({ node: valueNode, containerName: childContainerName });\r\n            } else {\r\n              limitExceeded = true;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    };\r\n    while (nextToVisit < toVisit.length) {\r\n      const next = toVisit[nextToVisit++];\r\n      collectOutlineEntries(next.node, next.containerName);\r\n    }\r\n    if (limitExceeded && context && context.onResultLimitExceeded) {\r\n      context.onResultLimitExceeded(resourceString);\r\n    }\r\n    return result;\r\n  }\r\n  findDocumentSymbols2(document, doc, context = { resultLimit: Number.MAX_VALUE }) {\r\n    const root = doc.root;\r\n    if (!root) {\r\n      return [];\r\n    }\r\n    let limit = context.resultLimit || Number.MAX_VALUE;\r\n    const resourceString = document.uri;\r\n    if (resourceString === \"vscode://defaultsettings/keybindings.json\" || endsWith(resourceString.toLowerCase(), \"/user/keybindings.json\")) {\r\n      if (root.type === \"array\") {\r\n        const result2 = [];\r\n        for (const item of root.items) {\r\n          if (item.type === \"object\") {\r\n            for (const property of item.properties) {\r\n              if (property.keyNode.value === \"key\" && property.valueNode) {\r\n                const range = getRange(document, item);\r\n                const selectionRange = getRange(document, property.keyNode);\r\n                result2.push({ name: getName(property.valueNode), kind: SymbolKind.Function, range, selectionRange });\r\n                limit--;\r\n                if (limit <= 0) {\r\n                  if (context && context.onResultLimitExceeded) {\r\n                    context.onResultLimitExceeded(resourceString);\r\n                  }\r\n                  return result2;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return result2;\r\n      }\r\n    }\r\n    const result = [];\r\n    const toVisit = [\r\n      { node: root, result }\r\n    ];\r\n    let nextToVisit = 0;\r\n    let limitExceeded = false;\r\n    const collectOutlineEntries = (node, result2) => {\r\n      if (node.type === \"array\") {\r\n        node.items.forEach((node2, index) => {\r\n          if (node2) {\r\n            if (limit > 0) {\r\n              limit--;\r\n              const range = getRange(document, node2);\r\n              const selectionRange = range;\r\n              const name = String(index);\r\n              const symbol = { name, kind: this.getSymbolKind(node2.type), range, selectionRange, children: [] };\r\n              result2.push(symbol);\r\n              toVisit.push({ result: symbol.children, node: node2 });\r\n            } else {\r\n              limitExceeded = true;\r\n            }\r\n          }\r\n        });\r\n      } else if (node.type === \"object\") {\r\n        node.properties.forEach((property) => {\r\n          const valueNode = property.valueNode;\r\n          if (valueNode) {\r\n            if (limit > 0) {\r\n              limit--;\r\n              const range = getRange(document, property);\r\n              const selectionRange = getRange(document, property.keyNode);\r\n              const children = [];\r\n              const symbol = { name: this.getKeyLabel(property), kind: this.getSymbolKind(valueNode.type), range, selectionRange, children, detail: this.getDetail(valueNode) };\r\n              result2.push(symbol);\r\n              toVisit.push({ result: children, node: valueNode });\r\n            } else {\r\n              limitExceeded = true;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    };\r\n    while (nextToVisit < toVisit.length) {\r\n      const next = toVisit[nextToVisit++];\r\n      collectOutlineEntries(next.node, next.result);\r\n    }\r\n    if (limitExceeded && context && context.onResultLimitExceeded) {\r\n      context.onResultLimitExceeded(resourceString);\r\n    }\r\n    return result;\r\n  }\r\n  getSymbolKind(nodeType) {\r\n    switch (nodeType) {\r\n      case \"object\":\r\n        return SymbolKind.Module;\r\n      case \"string\":\r\n        return SymbolKind.String;\r\n      case \"number\":\r\n        return SymbolKind.Number;\r\n      case \"array\":\r\n        return SymbolKind.Array;\r\n      case \"boolean\":\r\n        return SymbolKind.Boolean;\r\n      default:\r\n        return SymbolKind.Variable;\r\n    }\r\n  }\r\n  getKeyLabel(property) {\r\n    let name = property.keyNode.value;\r\n    if (name) {\r\n      name = name.replace(/[\\n]/g, \"\\u21B5\");\r\n    }\r\n    if (name && name.trim()) {\r\n      return name;\r\n    }\r\n    return `\"${name}\"`;\r\n  }\r\n  getDetail(node) {\r\n    if (!node) {\r\n      return void 0;\r\n    }\r\n    if (node.type === \"boolean\" || node.type === \"number\" || node.type === \"null\" || node.type === \"string\") {\r\n      return String(node.value);\r\n    } else {\r\n      if (node.type === \"array\") {\r\n        return node.children.length ? void 0 : \"[]\";\r\n      } else if (node.type === \"object\") {\r\n        return node.children.length ? void 0 : \"{}\";\r\n      }\r\n    }\r\n    return void 0;\r\n  }\r\n  findDocumentColors(document, doc, context) {\r\n    return this.schemaService.getSchemaForResource(document.uri, doc).then((schema) => {\r\n      const result = [];\r\n      if (schema) {\r\n        let limit = context && typeof context.resultLimit === \"number\" ? context.resultLimit : Number.MAX_VALUE;\r\n        const matchingSchemas = doc.getMatchingSchemas(schema.schema);\r\n        const visitedNode = {};\r\n        for (const s of matchingSchemas) {\r\n          if (!s.inverted && s.schema && (s.schema.format === \"color\" || s.schema.format === \"color-hex\") && s.node && s.node.type === \"string\") {\r\n            const nodeId = String(s.node.offset);\r\n            if (!visitedNode[nodeId]) {\r\n              const color = colorFromHex(getNodeValue3(s.node));\r\n              if (color) {\r\n                const range = getRange(document, s.node);\r\n                result.push({ color, range });\r\n              }\r\n              visitedNode[nodeId] = true;\r\n              limit--;\r\n              if (limit <= 0) {\r\n                if (context && context.onResultLimitExceeded) {\r\n                  context.onResultLimitExceeded(document.uri);\r\n                }\r\n                return result;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    });\r\n  }\r\n  getColorPresentations(document, doc, color, range) {\r\n    const result = [];\r\n    const red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);\r\n    function toTwoDigitHex(n) {\r\n      const r = n.toString(16);\r\n      return r.length !== 2 ? \"0\" + r : r;\r\n    }\r\n    let label;\r\n    if (color.alpha === 1) {\r\n      label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}`;\r\n    } else {\r\n      label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}${toTwoDigitHex(Math.round(color.alpha * 255))}`;\r\n    }\r\n    result.push({ label, textEdit: TextEdit.replace(range, JSON.stringify(label)) });\r\n    return result;\r\n  }\r\n};\r\nfunction getRange(document, node) {\r\n  return Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));\r\n}\r\nfunction getName(node) {\r\n  return getNodeValue3(node) || t(\"<empty>\");\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/services/configuration.js\r\nvar schemaContributions = {\r\n  schemaAssociations: [],\r\n  schemas: {\r\n    // bundle the schema-schema to include (localized) descriptions\r\n    \"http://json-schema.org/draft-04/schema#\": {\r\n      \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n      \"definitions\": {\r\n        \"schemaArray\": {\r\n          \"type\": \"array\",\r\n          \"minItems\": 1,\r\n          \"items\": {\r\n            \"$ref\": \"#\"\r\n          }\r\n        },\r\n        \"positiveInteger\": {\r\n          \"type\": \"integer\",\r\n          \"minimum\": 0\r\n        },\r\n        \"positiveIntegerDefault0\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/positiveInteger\"\r\n            },\r\n            {\r\n              \"default\": 0\r\n            }\r\n          ]\r\n        },\r\n        \"simpleTypes\": {\r\n          \"type\": \"string\",\r\n          \"enum\": [\r\n            \"array\",\r\n            \"boolean\",\r\n            \"integer\",\r\n            \"null\",\r\n            \"number\",\r\n            \"object\",\r\n            \"string\"\r\n          ]\r\n        },\r\n        \"stringArray\": {\r\n          \"type\": \"array\",\r\n          \"items\": {\r\n            \"type\": \"string\"\r\n          },\r\n          \"minItems\": 1,\r\n          \"uniqueItems\": true\r\n        }\r\n      },\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"id\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"uri\"\r\n        },\r\n        \"$schema\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"uri\"\r\n        },\r\n        \"title\": {\r\n          \"type\": \"string\"\r\n        },\r\n        \"description\": {\r\n          \"type\": \"string\"\r\n        },\r\n        \"default\": {},\r\n        \"multipleOf\": {\r\n          \"type\": \"number\",\r\n          \"minimum\": 0,\r\n          \"exclusiveMinimum\": true\r\n        },\r\n        \"maximum\": {\r\n          \"type\": \"number\"\r\n        },\r\n        \"exclusiveMaximum\": {\r\n          \"type\": \"boolean\",\r\n          \"default\": false\r\n        },\r\n        \"minimum\": {\r\n          \"type\": \"number\"\r\n        },\r\n        \"exclusiveMinimum\": {\r\n          \"type\": \"boolean\",\r\n          \"default\": false\r\n        },\r\n        \"maxLength\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/positiveInteger\"\r\n            }\r\n          ]\r\n        },\r\n        \"minLength\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/positiveIntegerDefault0\"\r\n            }\r\n          ]\r\n        },\r\n        \"pattern\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"regex\"\r\n        },\r\n        \"additionalItems\": {\r\n          \"anyOf\": [\r\n            {\r\n              \"type\": \"boolean\"\r\n            },\r\n            {\r\n              \"$ref\": \"#\"\r\n            }\r\n          ],\r\n          \"default\": {}\r\n        },\r\n        \"items\": {\r\n          \"anyOf\": [\r\n            {\r\n              \"$ref\": \"#\"\r\n            },\r\n            {\r\n              \"$ref\": \"#/definitions/schemaArray\"\r\n            }\r\n          ],\r\n          \"default\": {}\r\n        },\r\n        \"maxItems\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/positiveInteger\"\r\n            }\r\n          ]\r\n        },\r\n        \"minItems\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/positiveIntegerDefault0\"\r\n            }\r\n          ]\r\n        },\r\n        \"uniqueItems\": {\r\n          \"type\": \"boolean\",\r\n          \"default\": false\r\n        },\r\n        \"maxProperties\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/positiveInteger\"\r\n            }\r\n          ]\r\n        },\r\n        \"minProperties\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/positiveIntegerDefault0\"\r\n            }\r\n          ]\r\n        },\r\n        \"required\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/stringArray\"\r\n            }\r\n          ]\r\n        },\r\n        \"additionalProperties\": {\r\n          \"anyOf\": [\r\n            {\r\n              \"type\": \"boolean\"\r\n            },\r\n            {\r\n              \"$ref\": \"#\"\r\n            }\r\n          ],\r\n          \"default\": {}\r\n        },\r\n        \"definitions\": {\r\n          \"type\": \"object\",\r\n          \"additionalProperties\": {\r\n            \"$ref\": \"#\"\r\n          },\r\n          \"default\": {}\r\n        },\r\n        \"properties\": {\r\n          \"type\": \"object\",\r\n          \"additionalProperties\": {\r\n            \"$ref\": \"#\"\r\n          },\r\n          \"default\": {}\r\n        },\r\n        \"patternProperties\": {\r\n          \"type\": \"object\",\r\n          \"additionalProperties\": {\r\n            \"$ref\": \"#\"\r\n          },\r\n          \"default\": {}\r\n        },\r\n        \"dependencies\": {\r\n          \"type\": \"object\",\r\n          \"additionalProperties\": {\r\n            \"anyOf\": [\r\n              {\r\n                \"$ref\": \"#\"\r\n              },\r\n              {\r\n                \"$ref\": \"#/definitions/stringArray\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        \"enum\": {\r\n          \"type\": \"array\",\r\n          \"minItems\": 1,\r\n          \"uniqueItems\": true\r\n        },\r\n        \"type\": {\r\n          \"anyOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/simpleTypes\"\r\n            },\r\n            {\r\n              \"type\": \"array\",\r\n              \"items\": {\r\n                \"$ref\": \"#/definitions/simpleTypes\"\r\n              },\r\n              \"minItems\": 1,\r\n              \"uniqueItems\": true\r\n            }\r\n          ]\r\n        },\r\n        \"format\": {\r\n          \"anyOf\": [\r\n            {\r\n              \"type\": \"string\",\r\n              \"enum\": [\r\n                \"date-time\",\r\n                \"uri\",\r\n                \"email\",\r\n                \"hostname\",\r\n                \"ipv4\",\r\n                \"ipv6\",\r\n                \"regex\"\r\n              ]\r\n            },\r\n            {\r\n              \"type\": \"string\"\r\n            }\r\n          ]\r\n        },\r\n        \"allOf\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/schemaArray\"\r\n            }\r\n          ]\r\n        },\r\n        \"anyOf\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/schemaArray\"\r\n            }\r\n          ]\r\n        },\r\n        \"oneOf\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#/definitions/schemaArray\"\r\n            }\r\n          ]\r\n        },\r\n        \"not\": {\r\n          \"allOf\": [\r\n            {\r\n              \"$ref\": \"#\"\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"dependencies\": {\r\n        \"exclusiveMaximum\": [\r\n          \"maximum\"\r\n        ],\r\n        \"exclusiveMinimum\": [\r\n          \"minimum\"\r\n        ]\r\n      },\r\n      \"default\": {}\r\n    },\r\n    \"http://json-schema.org/draft-07/schema#\": {\r\n      \"definitions\": {\r\n        \"schemaArray\": {\r\n          \"type\": \"array\",\r\n          \"minItems\": 1,\r\n          \"items\": { \"$ref\": \"#\" }\r\n        },\r\n        \"nonNegativeInteger\": {\r\n          \"type\": \"integer\",\r\n          \"minimum\": 0\r\n        },\r\n        \"nonNegativeIntegerDefault0\": {\r\n          \"allOf\": [\r\n            { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r\n            { \"default\": 0 }\r\n          ]\r\n        },\r\n        \"simpleTypes\": {\r\n          \"enum\": [\r\n            \"array\",\r\n            \"boolean\",\r\n            \"integer\",\r\n            \"null\",\r\n            \"number\",\r\n            \"object\",\r\n            \"string\"\r\n          ]\r\n        },\r\n        \"stringArray\": {\r\n          \"type\": \"array\",\r\n          \"items\": { \"type\": \"string\" },\r\n          \"uniqueItems\": true,\r\n          \"default\": []\r\n        }\r\n      },\r\n      \"type\": [\"object\", \"boolean\"],\r\n      \"properties\": {\r\n        \"$id\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"uri-reference\"\r\n        },\r\n        \"$schema\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"uri\"\r\n        },\r\n        \"$ref\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"uri-reference\"\r\n        },\r\n        \"$comment\": {\r\n          \"type\": \"string\"\r\n        },\r\n        \"title\": {\r\n          \"type\": \"string\"\r\n        },\r\n        \"description\": {\r\n          \"type\": \"string\"\r\n        },\r\n        \"default\": true,\r\n        \"readOnly\": {\r\n          \"type\": \"boolean\",\r\n          \"default\": false\r\n        },\r\n        \"examples\": {\r\n          \"type\": \"array\",\r\n          \"items\": true\r\n        },\r\n        \"multipleOf\": {\r\n          \"type\": \"number\",\r\n          \"exclusiveMinimum\": 0\r\n        },\r\n        \"maximum\": {\r\n          \"type\": \"number\"\r\n        },\r\n        \"exclusiveMaximum\": {\r\n          \"type\": \"number\"\r\n        },\r\n        \"minimum\": {\r\n          \"type\": \"number\"\r\n        },\r\n        \"exclusiveMinimum\": {\r\n          \"type\": \"number\"\r\n        },\r\n        \"maxLength\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r\n        \"minLength\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\r\n        \"pattern\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"regex\"\r\n        },\r\n        \"additionalItems\": { \"$ref\": \"#\" },\r\n        \"items\": {\r\n          \"anyOf\": [\r\n            { \"$ref\": \"#\" },\r\n            { \"$ref\": \"#/definitions/schemaArray\" }\r\n          ],\r\n          \"default\": true\r\n        },\r\n        \"maxItems\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r\n        \"minItems\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\r\n        \"uniqueItems\": {\r\n          \"type\": \"boolean\",\r\n          \"default\": false\r\n        },\r\n        \"contains\": { \"$ref\": \"#\" },\r\n        \"maxProperties\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r\n        \"minProperties\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\r\n        \"required\": { \"$ref\": \"#/definitions/stringArray\" },\r\n        \"additionalProperties\": { \"$ref\": \"#\" },\r\n        \"definitions\": {\r\n          \"type\": \"object\",\r\n          \"additionalProperties\": { \"$ref\": \"#\" },\r\n          \"default\": {}\r\n        },\r\n        \"properties\": {\r\n          \"type\": \"object\",\r\n          \"additionalProperties\": { \"$ref\": \"#\" },\r\n          \"default\": {}\r\n        },\r\n        \"patternProperties\": {\r\n          \"type\": \"object\",\r\n          \"additionalProperties\": { \"$ref\": \"#\" },\r\n          \"propertyNames\": { \"format\": \"regex\" },\r\n          \"default\": {}\r\n        },\r\n        \"dependencies\": {\r\n          \"type\": \"object\",\r\n          \"additionalProperties\": {\r\n            \"anyOf\": [\r\n              { \"$ref\": \"#\" },\r\n              { \"$ref\": \"#/definitions/stringArray\" }\r\n            ]\r\n          }\r\n        },\r\n        \"propertyNames\": { \"$ref\": \"#\" },\r\n        \"const\": true,\r\n        \"enum\": {\r\n          \"type\": \"array\",\r\n          \"items\": true,\r\n          \"minItems\": 1,\r\n          \"uniqueItems\": true\r\n        },\r\n        \"type\": {\r\n          \"anyOf\": [\r\n            { \"$ref\": \"#/definitions/simpleTypes\" },\r\n            {\r\n              \"type\": \"array\",\r\n              \"items\": { \"$ref\": \"#/definitions/simpleTypes\" },\r\n              \"minItems\": 1,\r\n              \"uniqueItems\": true\r\n            }\r\n          ]\r\n        },\r\n        \"format\": { \"type\": \"string\" },\r\n        \"contentMediaType\": { \"type\": \"string\" },\r\n        \"contentEncoding\": { \"type\": \"string\" },\r\n        \"if\": { \"$ref\": \"#\" },\r\n        \"then\": { \"$ref\": \"#\" },\r\n        \"else\": { \"$ref\": \"#\" },\r\n        \"allOf\": { \"$ref\": \"#/definitions/schemaArray\" },\r\n        \"anyOf\": { \"$ref\": \"#/definitions/schemaArray\" },\r\n        \"oneOf\": { \"$ref\": \"#/definitions/schemaArray\" },\r\n        \"not\": { \"$ref\": \"#\" }\r\n      },\r\n      \"default\": true\r\n    }\r\n  }\r\n};\r\nvar descriptions = {\r\n  id: t(\"A unique identifier for the schema.\"),\r\n  $schema: t(\"The schema to verify this document against.\"),\r\n  title: t(\"A descriptive title of the element.\"),\r\n  description: t(\"A long description of the element. Used in hover menus and suggestions.\"),\r\n  default: t(\"A default value. Used by suggestions.\"),\r\n  multipleOf: t(\"A number that should cleanly divide the current value (i.e. have no remainder).\"),\r\n  maximum: t(\"The maximum numerical value, inclusive by default.\"),\r\n  exclusiveMaximum: t(\"Makes the maximum property exclusive.\"),\r\n  minimum: t(\"The minimum numerical value, inclusive by default.\"),\r\n  exclusiveMinimum: t(\"Makes the minimum property exclusive.\"),\r\n  maxLength: t(\"The maximum length of a string.\"),\r\n  minLength: t(\"The minimum length of a string.\"),\r\n  pattern: t(\"A regular expression to match the string against. It is not implicitly anchored.\"),\r\n  additionalItems: t(\"For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail.\"),\r\n  items: t(\"For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on.\"),\r\n  maxItems: t(\"The maximum number of items that can be inside an array. Inclusive.\"),\r\n  minItems: t(\"The minimum number of items that can be inside an array. Inclusive.\"),\r\n  uniqueItems: t(\"If all of the items in the array must be unique. Defaults to false.\"),\r\n  maxProperties: t(\"The maximum number of properties an object can have. Inclusive.\"),\r\n  minProperties: t(\"The minimum number of properties an object can have. Inclusive.\"),\r\n  required: t(\"An array of strings that lists the names of all properties required on this object.\"),\r\n  additionalProperties: t(\"Either a schema or a boolean. If a schema, then used to validate all properties not matched by 'properties' or 'patternProperties'. If false, then any properties not matched by either will cause this schema to fail.\"),\r\n  definitions: t(\"Not used for validation. Place subschemas here that you wish to reference inline with $ref.\"),\r\n  properties: t(\"A map of property names to schemas for each property.\"),\r\n  patternProperties: t(\"A map of regular expressions on property names to schemas for matching properties.\"),\r\n  dependencies: t(\"A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object.\"),\r\n  enum: t(\"The set of literal values that are valid.\"),\r\n  type: t(\"Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types.\"),\r\n  format: t(\"Describes the format expected for the value.\"),\r\n  allOf: t(\"An array of schemas, all of which must match.\"),\r\n  anyOf: t(\"An array of schemas, where at least one must match.\"),\r\n  oneOf: t(\"An array of schemas, exactly one of which must match.\"),\r\n  not: t(\"A schema which must not match.\"),\r\n  $id: t(\"A unique identifier for the schema.\"),\r\n  $ref: t(\"Reference a definition hosted on any location.\"),\r\n  $comment: t(\"Comments from schema authors to readers or maintainers of the schema.\"),\r\n  readOnly: t(\"Indicates that the value of the instance is managed exclusively by the owning authority.\"),\r\n  examples: t(\"Sample JSON values associated with a particular schema, for the purpose of illustrating usage.\"),\r\n  contains: t('An array instance is valid against \"contains\" if at least one of its elements is valid against the given schema.'),\r\n  propertyNames: t(\"If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema.\"),\r\n  const: t(\"An instance validates successfully against this keyword if its value is equal to the value of the keyword.\"),\r\n  contentMediaType: t(\"Describes the media type of a string property.\"),\r\n  contentEncoding: t(\"Describes the content encoding of a string property.\"),\r\n  if: t('The validation outcome of the \"if\" subschema controls which of the \"then\" or \"else\" keywords are evaluated.'),\r\n  then: t('The \"if\" subschema is used for validation when the \"if\" subschema succeeds.'),\r\n  else: t('The \"else\" subschema is used for validation when the \"if\" subschema fails.')\r\n};\r\nfor (const schemaName in schemaContributions.schemas) {\r\n  const schema = schemaContributions.schemas[schemaName];\r\n  for (const property in schema.properties) {\r\n    let propertyObject = schema.properties[property];\r\n    if (typeof propertyObject === \"boolean\") {\r\n      propertyObject = schema.properties[property] = {};\r\n    }\r\n    const description = descriptions[property];\r\n    if (description) {\r\n      propertyObject[\"description\"] = description;\r\n    }\r\n  }\r\n}\r\n\r\n// node_modules/vscode-uri/lib/esm/index.mjs\r\nvar LIB;\r\n(() => {\r\n  \"use strict\";\r\n  var t2 = { 470: (t3) => {\r\n    function e2(t4) {\r\n      if (\"string\" != typeof t4)\r\n        throw new TypeError(\"Path must be a string. Received \" + JSON.stringify(t4));\r\n    }\r\n    function r2(t4, e3) {\r\n      for (var r3, n3 = \"\", i = 0, o = -1, s = 0, h = 0; h <= t4.length; ++h) {\r\n        if (h < t4.length)\r\n          r3 = t4.charCodeAt(h);\r\n        else {\r\n          if (47 === r3)\r\n            break;\r\n          r3 = 47;\r\n        }\r\n        if (47 === r3) {\r\n          if (o === h - 1 || 1 === s)\r\n            ;\r\n          else if (o !== h - 1 && 2 === s) {\r\n            if (n3.length < 2 || 2 !== i || 46 !== n3.charCodeAt(n3.length - 1) || 46 !== n3.charCodeAt(n3.length - 2)) {\r\n              if (n3.length > 2) {\r\n                var a2 = n3.lastIndexOf(\"/\");\r\n                if (a2 !== n3.length - 1) {\r\n                  -1 === a2 ? (n3 = \"\", i = 0) : i = (n3 = n3.slice(0, a2)).length - 1 - n3.lastIndexOf(\"/\"), o = h, s = 0;\r\n                  continue;\r\n                }\r\n              } else if (2 === n3.length || 1 === n3.length) {\r\n                n3 = \"\", i = 0, o = h, s = 0;\r\n                continue;\r\n              }\r\n            }\r\n            e3 && (n3.length > 0 ? n3 += \"/..\" : n3 = \"..\", i = 2);\r\n          } else\r\n            n3.length > 0 ? n3 += \"/\" + t4.slice(o + 1, h) : n3 = t4.slice(o + 1, h), i = h - o - 1;\r\n          o = h, s = 0;\r\n        } else\r\n          46 === r3 && -1 !== s ? ++s : s = -1;\r\n      }\r\n      return n3;\r\n    }\r\n    var n2 = { resolve: function() {\r\n      for (var t4, n3 = \"\", i = false, o = arguments.length - 1; o >= -1 && !i; o--) {\r\n        var s;\r\n        o >= 0 ? s = arguments[o] : (void 0 === t4 && (t4 = process.cwd()), s = t4), e2(s), 0 !== s.length && (n3 = s + \"/\" + n3, i = 47 === s.charCodeAt(0));\r\n      }\r\n      return n3 = r2(n3, !i), i ? n3.length > 0 ? \"/\" + n3 : \"/\" : n3.length > 0 ? n3 : \".\";\r\n    }, normalize: function(t4) {\r\n      if (e2(t4), 0 === t4.length)\r\n        return \".\";\r\n      var n3 = 47 === t4.charCodeAt(0), i = 47 === t4.charCodeAt(t4.length - 1);\r\n      return 0 !== (t4 = r2(t4, !n3)).length || n3 || (t4 = \".\"), t4.length > 0 && i && (t4 += \"/\"), n3 ? \"/\" + t4 : t4;\r\n    }, isAbsolute: function(t4) {\r\n      return e2(t4), t4.length > 0 && 47 === t4.charCodeAt(0);\r\n    }, join: function() {\r\n      if (0 === arguments.length)\r\n        return \".\";\r\n      for (var t4, r3 = 0; r3 < arguments.length; ++r3) {\r\n        var i = arguments[r3];\r\n        e2(i), i.length > 0 && (void 0 === t4 ? t4 = i : t4 += \"/\" + i);\r\n      }\r\n      return void 0 === t4 ? \".\" : n2.normalize(t4);\r\n    }, relative: function(t4, r3) {\r\n      if (e2(t4), e2(r3), t4 === r3)\r\n        return \"\";\r\n      if ((t4 = n2.resolve(t4)) === (r3 = n2.resolve(r3)))\r\n        return \"\";\r\n      for (var i = 1; i < t4.length && 47 === t4.charCodeAt(i); ++i)\r\n        ;\r\n      for (var o = t4.length, s = o - i, h = 1; h < r3.length && 47 === r3.charCodeAt(h); ++h)\r\n        ;\r\n      for (var a2 = r3.length - h, c = s < a2 ? s : a2, f2 = -1, u = 0; u <= c; ++u) {\r\n        if (u === c) {\r\n          if (a2 > c) {\r\n            if (47 === r3.charCodeAt(h + u))\r\n              return r3.slice(h + u + 1);\r\n            if (0 === u)\r\n              return r3.slice(h + u);\r\n          } else\r\n            s > c && (47 === t4.charCodeAt(i + u) ? f2 = u : 0 === u && (f2 = 0));\r\n          break;\r\n        }\r\n        var l = t4.charCodeAt(i + u);\r\n        if (l !== r3.charCodeAt(h + u))\r\n          break;\r\n        47 === l && (f2 = u);\r\n      }\r\n      var g = \"\";\r\n      for (u = i + f2 + 1; u <= o; ++u)\r\n        u !== o && 47 !== t4.charCodeAt(u) || (0 === g.length ? g += \"..\" : g += \"/..\");\r\n      return g.length > 0 ? g + r3.slice(h + f2) : (h += f2, 47 === r3.charCodeAt(h) && ++h, r3.slice(h));\r\n    }, _makeLong: function(t4) {\r\n      return t4;\r\n    }, dirname: function(t4) {\r\n      if (e2(t4), 0 === t4.length)\r\n        return \".\";\r\n      for (var r3 = t4.charCodeAt(0), n3 = 47 === r3, i = -1, o = true, s = t4.length - 1; s >= 1; --s)\r\n        if (47 === (r3 = t4.charCodeAt(s))) {\r\n          if (!o) {\r\n            i = s;\r\n            break;\r\n          }\r\n        } else\r\n          o = false;\r\n      return -1 === i ? n3 ? \"/\" : \".\" : n3 && 1 === i ? \"//\" : t4.slice(0, i);\r\n    }, basename: function(t4, r3) {\r\n      if (void 0 !== r3 && \"string\" != typeof r3)\r\n        throw new TypeError('\"ext\" argument must be a string');\r\n      e2(t4);\r\n      var n3, i = 0, o = -1, s = true;\r\n      if (void 0 !== r3 && r3.length > 0 && r3.length <= t4.length) {\r\n        if (r3.length === t4.length && r3 === t4)\r\n          return \"\";\r\n        var h = r3.length - 1, a2 = -1;\r\n        for (n3 = t4.length - 1; n3 >= 0; --n3) {\r\n          var c = t4.charCodeAt(n3);\r\n          if (47 === c) {\r\n            if (!s) {\r\n              i = n3 + 1;\r\n              break;\r\n            }\r\n          } else\r\n            -1 === a2 && (s = false, a2 = n3 + 1), h >= 0 && (c === r3.charCodeAt(h) ? -1 == --h && (o = n3) : (h = -1, o = a2));\r\n        }\r\n        return i === o ? o = a2 : -1 === o && (o = t4.length), t4.slice(i, o);\r\n      }\r\n      for (n3 = t4.length - 1; n3 >= 0; --n3)\r\n        if (47 === t4.charCodeAt(n3)) {\r\n          if (!s) {\r\n            i = n3 + 1;\r\n            break;\r\n          }\r\n        } else\r\n          -1 === o && (s = false, o = n3 + 1);\r\n      return -1 === o ? \"\" : t4.slice(i, o);\r\n    }, extname: function(t4) {\r\n      e2(t4);\r\n      for (var r3 = -1, n3 = 0, i = -1, o = true, s = 0, h = t4.length - 1; h >= 0; --h) {\r\n        var a2 = t4.charCodeAt(h);\r\n        if (47 !== a2)\r\n          -1 === i && (o = false, i = h + 1), 46 === a2 ? -1 === r3 ? r3 = h : 1 !== s && (s = 1) : -1 !== r3 && (s = -1);\r\n        else if (!o) {\r\n          n3 = h + 1;\r\n          break;\r\n        }\r\n      }\r\n      return -1 === r3 || -1 === i || 0 === s || 1 === s && r3 === i - 1 && r3 === n3 + 1 ? \"\" : t4.slice(r3, i);\r\n    }, format: function(t4) {\r\n      if (null === t4 || \"object\" != typeof t4)\r\n        throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof t4);\r\n      return function(t5, e3) {\r\n        var r3 = e3.dir || e3.root, n3 = e3.base || (e3.name || \"\") + (e3.ext || \"\");\r\n        return r3 ? r3 === e3.root ? r3 + n3 : r3 + \"/\" + n3 : n3;\r\n      }(0, t4);\r\n    }, parse: function(t4) {\r\n      e2(t4);\r\n      var r3 = { root: \"\", dir: \"\", base: \"\", ext: \"\", name: \"\" };\r\n      if (0 === t4.length)\r\n        return r3;\r\n      var n3, i = t4.charCodeAt(0), o = 47 === i;\r\n      o ? (r3.root = \"/\", n3 = 1) : n3 = 0;\r\n      for (var s = -1, h = 0, a2 = -1, c = true, f2 = t4.length - 1, u = 0; f2 >= n3; --f2)\r\n        if (47 !== (i = t4.charCodeAt(f2)))\r\n          -1 === a2 && (c = false, a2 = f2 + 1), 46 === i ? -1 === s ? s = f2 : 1 !== u && (u = 1) : -1 !== s && (u = -1);\r\n        else if (!c) {\r\n          h = f2 + 1;\r\n          break;\r\n        }\r\n      return -1 === s || -1 === a2 || 0 === u || 1 === u && s === a2 - 1 && s === h + 1 ? -1 !== a2 && (r3.base = r3.name = 0 === h && o ? t4.slice(1, a2) : t4.slice(h, a2)) : (0 === h && o ? (r3.name = t4.slice(1, s), r3.base = t4.slice(1, a2)) : (r3.name = t4.slice(h, s), r3.base = t4.slice(h, a2)), r3.ext = t4.slice(s, a2)), h > 0 ? r3.dir = t4.slice(0, h - 1) : o && (r3.dir = \"/\"), r3;\r\n    }, sep: \"/\", delimiter: \":\", win32: null, posix: null };\r\n    n2.posix = n2, t3.exports = n2;\r\n  } }, e = {};\r\n  function r(n2) {\r\n    var i = e[n2];\r\n    if (void 0 !== i)\r\n      return i.exports;\r\n    var o = e[n2] = { exports: {} };\r\n    return t2[n2](o, o.exports, r), o.exports;\r\n  }\r\n  r.d = (t3, e2) => {\r\n    for (var n2 in e2)\r\n      r.o(e2, n2) && !r.o(t3, n2) && Object.defineProperty(t3, n2, { enumerable: true, get: e2[n2] });\r\n  }, r.o = (t3, e2) => Object.prototype.hasOwnProperty.call(t3, e2), r.r = (t3) => {\r\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t3, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(t3, \"__esModule\", { value: true });\r\n  };\r\n  var n = {};\r\n  (() => {\r\n    let t3;\r\n    if (r.r(n), r.d(n, { URI: () => f2, Utils: () => P }), \"object\" == typeof process)\r\n      t3 = \"win32\" === process.platform;\r\n    else if (\"object\" == typeof navigator) {\r\n      let e3 = navigator.userAgent;\r\n      t3 = e3.indexOf(\"Windows\") >= 0;\r\n    }\r\n    const e2 = /^\\w[\\w\\d+.-]*$/, i = /^\\//, o = /^\\/\\//;\r\n    function s(t4, r2) {\r\n      if (!t4.scheme && r2)\r\n        throw new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${t4.authority}\", path: \"${t4.path}\", query: \"${t4.query}\", fragment: \"${t4.fragment}\"}`);\r\n      if (t4.scheme && !e2.test(t4.scheme))\r\n        throw new Error(\"[UriError]: Scheme contains illegal characters.\");\r\n      if (t4.path) {\r\n        if (t4.authority) {\r\n          if (!i.test(t4.path))\r\n            throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\r\n        } else if (o.test(t4.path))\r\n          throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\r\n      }\r\n    }\r\n    const h = \"\", a2 = \"/\", c = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\r\n    class f2 {\r\n      static isUri(t4) {\r\n        return t4 instanceof f2 || !!t4 && \"string\" == typeof t4.authority && \"string\" == typeof t4.fragment && \"string\" == typeof t4.path && \"string\" == typeof t4.query && \"string\" == typeof t4.scheme && \"string\" == typeof t4.fsPath && \"function\" == typeof t4.with && \"function\" == typeof t4.toString;\r\n      }\r\n      scheme;\r\n      authority;\r\n      path;\r\n      query;\r\n      fragment;\r\n      constructor(t4, e3, r2, n2, i2, o2 = false) {\r\n        \"object\" == typeof t4 ? (this.scheme = t4.scheme || h, this.authority = t4.authority || h, this.path = t4.path || h, this.query = t4.query || h, this.fragment = t4.fragment || h) : (this.scheme = /* @__PURE__ */ function(t5, e4) {\r\n          return t5 || e4 ? t5 : \"file\";\r\n        }(t4, o2), this.authority = e3 || h, this.path = function(t5, e4) {\r\n          switch (t5) {\r\n            case \"https\":\r\n            case \"http\":\r\n            case \"file\":\r\n              e4 ? e4[0] !== a2 && (e4 = a2 + e4) : e4 = a2;\r\n          }\r\n          return e4;\r\n        }(this.scheme, r2 || h), this.query = n2 || h, this.fragment = i2 || h, s(this, o2));\r\n      }\r\n      get fsPath() {\r\n        return m(this, false);\r\n      }\r\n      with(t4) {\r\n        if (!t4)\r\n          return this;\r\n        let { scheme: e3, authority: r2, path: n2, query: i2, fragment: o2 } = t4;\r\n        return void 0 === e3 ? e3 = this.scheme : null === e3 && (e3 = h), void 0 === r2 ? r2 = this.authority : null === r2 && (r2 = h), void 0 === n2 ? n2 = this.path : null === n2 && (n2 = h), void 0 === i2 ? i2 = this.query : null === i2 && (i2 = h), void 0 === o2 ? o2 = this.fragment : null === o2 && (o2 = h), e3 === this.scheme && r2 === this.authority && n2 === this.path && i2 === this.query && o2 === this.fragment ? this : new l(e3, r2, n2, i2, o2);\r\n      }\r\n      static parse(t4, e3 = false) {\r\n        const r2 = c.exec(t4);\r\n        return r2 ? new l(r2[2] || h, C(r2[4] || h), C(r2[5] || h), C(r2[7] || h), C(r2[9] || h), e3) : new l(h, h, h, h, h);\r\n      }\r\n      static file(e3) {\r\n        let r2 = h;\r\n        if (t3 && (e3 = e3.replace(/\\\\/g, a2)), e3[0] === a2 && e3[1] === a2) {\r\n          const t4 = e3.indexOf(a2, 2);\r\n          -1 === t4 ? (r2 = e3.substring(2), e3 = a2) : (r2 = e3.substring(2, t4), e3 = e3.substring(t4) || a2);\r\n        }\r\n        return new l(\"file\", r2, e3, h, h);\r\n      }\r\n      static from(t4) {\r\n        const e3 = new l(t4.scheme, t4.authority, t4.path, t4.query, t4.fragment);\r\n        return s(e3, true), e3;\r\n      }\r\n      toString(t4 = false) {\r\n        return y(this, t4);\r\n      }\r\n      toJSON() {\r\n        return this;\r\n      }\r\n      static revive(t4) {\r\n        if (t4) {\r\n          if (t4 instanceof f2)\r\n            return t4;\r\n          {\r\n            const e3 = new l(t4);\r\n            return e3._formatted = t4.external, e3._fsPath = t4._sep === u ? t4.fsPath : null, e3;\r\n          }\r\n        }\r\n        return t4;\r\n      }\r\n    }\r\n    const u = t3 ? 1 : void 0;\r\n    class l extends f2 {\r\n      _formatted = null;\r\n      _fsPath = null;\r\n      get fsPath() {\r\n        return this._fsPath || (this._fsPath = m(this, false)), this._fsPath;\r\n      }\r\n      toString(t4 = false) {\r\n        return t4 ? y(this, true) : (this._formatted || (this._formatted = y(this, false)), this._formatted);\r\n      }\r\n      toJSON() {\r\n        const t4 = { $mid: 1 };\r\n        return this._fsPath && (t4.fsPath = this._fsPath, t4._sep = u), this._formatted && (t4.external = this._formatted), this.path && (t4.path = this.path), this.scheme && (t4.scheme = this.scheme), this.authority && (t4.authority = this.authority), this.query && (t4.query = this.query), this.fragment && (t4.fragment = this.fragment), t4;\r\n      }\r\n    }\r\n    const g = { 58: \"%3A\", 47: \"%2F\", 63: \"%3F\", 35: \"%23\", 91: \"%5B\", 93: \"%5D\", 64: \"%40\", 33: \"%21\", 36: \"%24\", 38: \"%26\", 39: \"%27\", 40: \"%28\", 41: \"%29\", 42: \"%2A\", 43: \"%2B\", 44: \"%2C\", 59: \"%3B\", 61: \"%3D\", 32: \"%20\" };\r\n    function d(t4, e3, r2) {\r\n      let n2, i2 = -1;\r\n      for (let o2 = 0; o2 < t4.length; o2++) {\r\n        const s2 = t4.charCodeAt(o2);\r\n        if (s2 >= 97 && s2 <= 122 || s2 >= 65 && s2 <= 90 || s2 >= 48 && s2 <= 57 || 45 === s2 || 46 === s2 || 95 === s2 || 126 === s2 || e3 && 47 === s2 || r2 && 91 === s2 || r2 && 93 === s2 || r2 && 58 === s2)\r\n          -1 !== i2 && (n2 += encodeURIComponent(t4.substring(i2, o2)), i2 = -1), void 0 !== n2 && (n2 += t4.charAt(o2));\r\n        else {\r\n          void 0 === n2 && (n2 = t4.substr(0, o2));\r\n          const e4 = g[s2];\r\n          void 0 !== e4 ? (-1 !== i2 && (n2 += encodeURIComponent(t4.substring(i2, o2)), i2 = -1), n2 += e4) : -1 === i2 && (i2 = o2);\r\n        }\r\n      }\r\n      return -1 !== i2 && (n2 += encodeURIComponent(t4.substring(i2))), void 0 !== n2 ? n2 : t4;\r\n    }\r\n    function p(t4) {\r\n      let e3;\r\n      for (let r2 = 0; r2 < t4.length; r2++) {\r\n        const n2 = t4.charCodeAt(r2);\r\n        35 === n2 || 63 === n2 ? (void 0 === e3 && (e3 = t4.substr(0, r2)), e3 += g[n2]) : void 0 !== e3 && (e3 += t4[r2]);\r\n      }\r\n      return void 0 !== e3 ? e3 : t4;\r\n    }\r\n    function m(e3, r2) {\r\n      let n2;\r\n      return n2 = e3.authority && e3.path.length > 1 && \"file\" === e3.scheme ? `//${e3.authority}${e3.path}` : 47 === e3.path.charCodeAt(0) && (e3.path.charCodeAt(1) >= 65 && e3.path.charCodeAt(1) <= 90 || e3.path.charCodeAt(1) >= 97 && e3.path.charCodeAt(1) <= 122) && 58 === e3.path.charCodeAt(2) ? r2 ? e3.path.substr(1) : e3.path[1].toLowerCase() + e3.path.substr(2) : e3.path, t3 && (n2 = n2.replace(/\\//g, \"\\\\\")), n2;\r\n    }\r\n    function y(t4, e3) {\r\n      const r2 = e3 ? p : d;\r\n      let n2 = \"\", { scheme: i2, authority: o2, path: s2, query: h2, fragment: c2 } = t4;\r\n      if (i2 && (n2 += i2, n2 += \":\"), (o2 || \"file\" === i2) && (n2 += a2, n2 += a2), o2) {\r\n        let t5 = o2.indexOf(\"@\");\r\n        if (-1 !== t5) {\r\n          const e4 = o2.substr(0, t5);\r\n          o2 = o2.substr(t5 + 1), t5 = e4.lastIndexOf(\":\"), -1 === t5 ? n2 += r2(e4, false, false) : (n2 += r2(e4.substr(0, t5), false, false), n2 += \":\", n2 += r2(e4.substr(t5 + 1), false, true)), n2 += \"@\";\r\n        }\r\n        o2 = o2.toLowerCase(), t5 = o2.lastIndexOf(\":\"), -1 === t5 ? n2 += r2(o2, false, true) : (n2 += r2(o2.substr(0, t5), false, true), n2 += o2.substr(t5));\r\n      }\r\n      if (s2) {\r\n        if (s2.length >= 3 && 47 === s2.charCodeAt(0) && 58 === s2.charCodeAt(2)) {\r\n          const t5 = s2.charCodeAt(1);\r\n          t5 >= 65 && t5 <= 90 && (s2 = `/${String.fromCharCode(t5 + 32)}:${s2.substr(3)}`);\r\n        } else if (s2.length >= 2 && 58 === s2.charCodeAt(1)) {\r\n          const t5 = s2.charCodeAt(0);\r\n          t5 >= 65 && t5 <= 90 && (s2 = `${String.fromCharCode(t5 + 32)}:${s2.substr(2)}`);\r\n        }\r\n        n2 += r2(s2, true, false);\r\n      }\r\n      return h2 && (n2 += \"?\", n2 += r2(h2, false, false)), c2 && (n2 += \"#\", n2 += e3 ? c2 : d(c2, false, false)), n2;\r\n    }\r\n    function v(t4) {\r\n      try {\r\n        return decodeURIComponent(t4);\r\n      } catch {\r\n        return t4.length > 3 ? t4.substr(0, 3) + v(t4.substr(3)) : t4;\r\n      }\r\n    }\r\n    const b = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\r\n    function C(t4) {\r\n      return t4.match(b) ? t4.replace(b, (t5) => v(t5)) : t4;\r\n    }\r\n    var A2 = r(470);\r\n    const w = A2.posix || A2, x = \"/\";\r\n    var P;\r\n    !function(t4) {\r\n      t4.joinPath = function(t5, ...e3) {\r\n        return t5.with({ path: w.join(t5.path, ...e3) });\r\n      }, t4.resolvePath = function(t5, ...e3) {\r\n        let r2 = t5.path, n2 = false;\r\n        r2[0] !== x && (r2 = x + r2, n2 = true);\r\n        let i2 = w.resolve(r2, ...e3);\r\n        return n2 && i2[0] === x && !t5.authority && (i2 = i2.substring(1)), t5.with({ path: i2 });\r\n      }, t4.dirname = function(t5) {\r\n        if (0 === t5.path.length || t5.path === x)\r\n          return t5;\r\n        let e3 = w.dirname(t5.path);\r\n        return 1 === e3.length && 46 === e3.charCodeAt(0) && (e3 = \"\"), t5.with({ path: e3 });\r\n      }, t4.basename = function(t5) {\r\n        return w.basename(t5.path);\r\n      }, t4.extname = function(t5) {\r\n        return w.extname(t5.path);\r\n      };\r\n    }(P || (P = {}));\r\n  })(), LIB = n;\r\n})();\r\nvar { URI: URI2, Utils } = LIB;\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/utils/glob.js\r\nfunction createRegex(glob, opts) {\r\n  if (typeof glob !== \"string\") {\r\n    throw new TypeError(\"Expected a string\");\r\n  }\r\n  const str = String(glob);\r\n  let reStr = \"\";\r\n  const extended = opts ? !!opts.extended : false;\r\n  const globstar = opts ? !!opts.globstar : false;\r\n  let inGroup = false;\r\n  const flags = opts && typeof opts.flags === \"string\" ? opts.flags : \"\";\r\n  let c;\r\n  for (let i = 0, len = str.length; i < len; i++) {\r\n    c = str[i];\r\n    switch (c) {\r\n      case \"/\":\r\n      case \"$\":\r\n      case \"^\":\r\n      case \"+\":\r\n      case \".\":\r\n      case \"(\":\r\n      case \")\":\r\n      case \"=\":\r\n      case \"!\":\r\n      case \"|\":\r\n        reStr += \"\\\\\" + c;\r\n        break;\r\n      case \"?\":\r\n        if (extended) {\r\n          reStr += \".\";\r\n          break;\r\n        }\r\n      case \"[\":\r\n      case \"]\":\r\n        if (extended) {\r\n          reStr += c;\r\n          break;\r\n        }\r\n      case \"{\":\r\n        if (extended) {\r\n          inGroup = true;\r\n          reStr += \"(\";\r\n          break;\r\n        }\r\n      case \"}\":\r\n        if (extended) {\r\n          inGroup = false;\r\n          reStr += \")\";\r\n          break;\r\n        }\r\n      case \",\":\r\n        if (inGroup) {\r\n          reStr += \"|\";\r\n          break;\r\n        }\r\n        reStr += \"\\\\\" + c;\r\n        break;\r\n      case \"*\":\r\n        const prevChar = str[i - 1];\r\n        let starCount = 1;\r\n        while (str[i + 1] === \"*\") {\r\n          starCount++;\r\n          i++;\r\n        }\r\n        const nextChar = str[i + 1];\r\n        if (!globstar) {\r\n          reStr += \".*\";\r\n        } else {\r\n          const isGlobstar = starCount > 1 && (prevChar === \"/\" || prevChar === void 0 || prevChar === \"{\" || prevChar === \",\") && (nextChar === \"/\" || nextChar === void 0 || nextChar === \",\" || nextChar === \"}\");\r\n          if (isGlobstar) {\r\n            if (nextChar === \"/\") {\r\n              i++;\r\n            } else if (prevChar === \"/\" && reStr.endsWith(\"\\\\/\")) {\r\n              reStr = reStr.substr(0, reStr.length - 2);\r\n            }\r\n            reStr += \"((?:[^/]*(?:/|$))*)\";\r\n          } else {\r\n            reStr += \"([^/]*)\";\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        reStr += c;\r\n    }\r\n  }\r\n  if (!flags || !~flags.indexOf(\"g\")) {\r\n    reStr = \"^\" + reStr + \"$\";\r\n  }\r\n  return new RegExp(reStr, flags);\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/services/jsonSchemaService.js\r\nvar BANG = \"!\";\r\nvar PATH_SEP = \"/\";\r\nvar FilePatternAssociation = class {\r\n  constructor(pattern, folderUri, uris) {\r\n    this.folderUri = folderUri;\r\n    this.uris = uris;\r\n    this.globWrappers = [];\r\n    try {\r\n      for (let patternString of pattern) {\r\n        const include = patternString[0] !== BANG;\r\n        if (!include) {\r\n          patternString = patternString.substring(1);\r\n        }\r\n        if (patternString.length > 0) {\r\n          if (patternString[0] === PATH_SEP) {\r\n            patternString = patternString.substring(1);\r\n          }\r\n          this.globWrappers.push({\r\n            regexp: createRegex(\"**/\" + patternString, { extended: true, globstar: true }),\r\n            include\r\n          });\r\n        }\r\n      }\r\n      ;\r\n      if (folderUri) {\r\n        folderUri = normalizeResourceForMatching(folderUri);\r\n        if (!folderUri.endsWith(\"/\")) {\r\n          folderUri = folderUri + \"/\";\r\n        }\r\n        this.folderUri = folderUri;\r\n      }\r\n    } catch (e) {\r\n      this.globWrappers.length = 0;\r\n      this.uris = [];\r\n    }\r\n  }\r\n  matchesPattern(fileName) {\r\n    if (this.folderUri && !fileName.startsWith(this.folderUri)) {\r\n      return false;\r\n    }\r\n    let match = false;\r\n    for (const { regexp, include } of this.globWrappers) {\r\n      if (regexp.test(fileName)) {\r\n        match = include;\r\n      }\r\n    }\r\n    return match;\r\n  }\r\n  getURIs() {\r\n    return this.uris;\r\n  }\r\n};\r\nvar SchemaHandle = class {\r\n  constructor(service, uri, unresolvedSchemaContent) {\r\n    this.service = service;\r\n    this.uri = uri;\r\n    this.dependencies = /* @__PURE__ */ new Set();\r\n    this.anchors = void 0;\r\n    if (unresolvedSchemaContent) {\r\n      this.unresolvedSchema = this.service.promise.resolve(new UnresolvedSchema(unresolvedSchemaContent));\r\n    }\r\n  }\r\n  getUnresolvedSchema() {\r\n    if (!this.unresolvedSchema) {\r\n      this.unresolvedSchema = this.service.loadSchema(this.uri);\r\n    }\r\n    return this.unresolvedSchema;\r\n  }\r\n  getResolvedSchema() {\r\n    if (!this.resolvedSchema) {\r\n      this.resolvedSchema = this.getUnresolvedSchema().then((unresolved) => {\r\n        return this.service.resolveSchemaContent(unresolved, this);\r\n      });\r\n    }\r\n    return this.resolvedSchema;\r\n  }\r\n  clearSchema() {\r\n    const hasChanges = !!this.unresolvedSchema;\r\n    this.resolvedSchema = void 0;\r\n    this.unresolvedSchema = void 0;\r\n    this.dependencies.clear();\r\n    this.anchors = void 0;\r\n    return hasChanges;\r\n  }\r\n};\r\nvar UnresolvedSchema = class {\r\n  constructor(schema, errors = []) {\r\n    this.schema = schema;\r\n    this.errors = errors;\r\n  }\r\n};\r\nvar ResolvedSchema = class {\r\n  constructor(schema, errors = [], warnings = [], schemaDraft) {\r\n    this.schema = schema;\r\n    this.errors = errors;\r\n    this.warnings = warnings;\r\n    this.schemaDraft = schemaDraft;\r\n  }\r\n  getSection(path) {\r\n    const schemaRef = this.getSectionRecursive(path, this.schema);\r\n    if (schemaRef) {\r\n      return asSchema(schemaRef);\r\n    }\r\n    return void 0;\r\n  }\r\n  getSectionRecursive(path, schema) {\r\n    if (!schema || typeof schema === \"boolean\" || path.length === 0) {\r\n      return schema;\r\n    }\r\n    const next = path.shift();\r\n    if (schema.properties && typeof schema.properties[next]) {\r\n      return this.getSectionRecursive(path, schema.properties[next]);\r\n    } else if (schema.patternProperties) {\r\n      for (const pattern of Object.keys(schema.patternProperties)) {\r\n        const regex = extendedRegExp(pattern);\r\n        if (regex?.test(next)) {\r\n          return this.getSectionRecursive(path, schema.patternProperties[pattern]);\r\n        }\r\n      }\r\n    } else if (typeof schema.additionalProperties === \"object\") {\r\n      return this.getSectionRecursive(path, schema.additionalProperties);\r\n    } else if (next.match(\"[0-9]+\")) {\r\n      if (Array.isArray(schema.items)) {\r\n        const index = parseInt(next, 10);\r\n        if (!isNaN(index) && schema.items[index]) {\r\n          return this.getSectionRecursive(path, schema.items[index]);\r\n        }\r\n      } else if (schema.items) {\r\n        return this.getSectionRecursive(path, schema.items);\r\n      }\r\n    }\r\n    return void 0;\r\n  }\r\n};\r\nvar JSONSchemaService = class {\r\n  constructor(requestService, contextService, promiseConstructor) {\r\n    this.contextService = contextService;\r\n    this.requestService = requestService;\r\n    this.promiseConstructor = promiseConstructor || Promise;\r\n    this.callOnDispose = [];\r\n    this.contributionSchemas = {};\r\n    this.contributionAssociations = [];\r\n    this.schemasById = {};\r\n    this.filePatternAssociations = [];\r\n    this.registeredSchemasIds = {};\r\n  }\r\n  getRegisteredSchemaIds(filter) {\r\n    return Object.keys(this.registeredSchemasIds).filter((id) => {\r\n      const scheme = URI2.parse(id).scheme;\r\n      return scheme !== \"schemaservice\" && (!filter || filter(scheme));\r\n    });\r\n  }\r\n  get promise() {\r\n    return this.promiseConstructor;\r\n  }\r\n  dispose() {\r\n    while (this.callOnDispose.length > 0) {\r\n      this.callOnDispose.pop()();\r\n    }\r\n  }\r\n  onResourceChange(uri) {\r\n    this.cachedSchemaForResource = void 0;\r\n    let hasChanges = false;\r\n    uri = normalizeId(uri);\r\n    const toWalk = [uri];\r\n    const all = Object.keys(this.schemasById).map((key) => this.schemasById[key]);\r\n    while (toWalk.length) {\r\n      const curr = toWalk.pop();\r\n      for (let i = 0; i < all.length; i++) {\r\n        const handle = all[i];\r\n        if (handle && (handle.uri === curr || handle.dependencies.has(curr))) {\r\n          if (handle.uri !== curr) {\r\n            toWalk.push(handle.uri);\r\n          }\r\n          if (handle.clearSchema()) {\r\n            hasChanges = true;\r\n          }\r\n          all[i] = void 0;\r\n        }\r\n      }\r\n    }\r\n    return hasChanges;\r\n  }\r\n  setSchemaContributions(schemaContributions2) {\r\n    if (schemaContributions2.schemas) {\r\n      const schemas = schemaContributions2.schemas;\r\n      for (const id in schemas) {\r\n        const normalizedId = normalizeId(id);\r\n        this.contributionSchemas[normalizedId] = this.addSchemaHandle(normalizedId, schemas[id]);\r\n      }\r\n    }\r\n    if (Array.isArray(schemaContributions2.schemaAssociations)) {\r\n      const schemaAssociations = schemaContributions2.schemaAssociations;\r\n      for (let schemaAssociation of schemaAssociations) {\r\n        const uris = schemaAssociation.uris.map(normalizeId);\r\n        const association = this.addFilePatternAssociation(schemaAssociation.pattern, schemaAssociation.folderUri, uris);\r\n        this.contributionAssociations.push(association);\r\n      }\r\n    }\r\n  }\r\n  addSchemaHandle(id, unresolvedSchemaContent) {\r\n    const schemaHandle = new SchemaHandle(this, id, unresolvedSchemaContent);\r\n    this.schemasById[id] = schemaHandle;\r\n    return schemaHandle;\r\n  }\r\n  getOrAddSchemaHandle(id, unresolvedSchemaContent) {\r\n    return this.schemasById[id] || this.addSchemaHandle(id, unresolvedSchemaContent);\r\n  }\r\n  addFilePatternAssociation(pattern, folderUri, uris) {\r\n    const fpa = new FilePatternAssociation(pattern, folderUri, uris);\r\n    this.filePatternAssociations.push(fpa);\r\n    return fpa;\r\n  }\r\n  registerExternalSchema(config) {\r\n    const id = normalizeId(config.uri);\r\n    this.registeredSchemasIds[id] = true;\r\n    this.cachedSchemaForResource = void 0;\r\n    if (config.fileMatch && config.fileMatch.length) {\r\n      this.addFilePatternAssociation(config.fileMatch, config.folderUri, [id]);\r\n    }\r\n    return config.schema ? this.addSchemaHandle(id, config.schema) : this.getOrAddSchemaHandle(id);\r\n  }\r\n  clearExternalSchemas() {\r\n    this.schemasById = {};\r\n    this.filePatternAssociations = [];\r\n    this.registeredSchemasIds = {};\r\n    this.cachedSchemaForResource = void 0;\r\n    for (const id in this.contributionSchemas) {\r\n      this.schemasById[id] = this.contributionSchemas[id];\r\n      this.registeredSchemasIds[id] = true;\r\n    }\r\n    for (const contributionAssociation of this.contributionAssociations) {\r\n      this.filePatternAssociations.push(contributionAssociation);\r\n    }\r\n  }\r\n  getResolvedSchema(schemaId) {\r\n    const id = normalizeId(schemaId);\r\n    const schemaHandle = this.schemasById[id];\r\n    if (schemaHandle) {\r\n      return schemaHandle.getResolvedSchema();\r\n    }\r\n    return this.promise.resolve(void 0);\r\n  }\r\n  loadSchema(url) {\r\n    if (!this.requestService) {\r\n      const errorMessage = t(\"Unable to load schema from '{0}'. No schema request service available\", toDisplayString(url));\r\n      return this.promise.resolve(new UnresolvedSchema({}, [errorMessage]));\r\n    }\r\n    if (url.startsWith(\"http://json-schema.org/\")) {\r\n      url = \"https\" + url.substring(4);\r\n    }\r\n    return this.requestService(url).then((content) => {\r\n      if (!content) {\r\n        const errorMessage = t(\"Unable to load schema from '{0}': No content.\", toDisplayString(url));\r\n        return new UnresolvedSchema({}, [errorMessage]);\r\n      }\r\n      const errors = [];\r\n      if (content.charCodeAt(0) === 65279) {\r\n        errors.push(t(\"Problem reading content from '{0}': UTF-8 with BOM detected, only UTF 8 is allowed.\", toDisplayString(url)));\r\n        content = content.trimStart();\r\n      }\r\n      let schemaContent = {};\r\n      const jsonErrors = [];\r\n      schemaContent = parse2(content, jsonErrors);\r\n      if (jsonErrors.length) {\r\n        errors.push(t(\"Unable to parse content from '{0}': Parse error at offset {1}.\", toDisplayString(url), jsonErrors[0].offset));\r\n      }\r\n      return new UnresolvedSchema(schemaContent, errors);\r\n    }, (error) => {\r\n      let errorMessage = error.toString();\r\n      const errorSplit = error.toString().split(\"Error: \");\r\n      if (errorSplit.length > 1) {\r\n        errorMessage = errorSplit[1];\r\n      }\r\n      if (endsWith(errorMessage, \".\")) {\r\n        errorMessage = errorMessage.substr(0, errorMessage.length - 1);\r\n      }\r\n      return new UnresolvedSchema({}, [t(\"Unable to load schema from '{0}': {1}.\", toDisplayString(url), errorMessage)]);\r\n    });\r\n  }\r\n  resolveSchemaContent(schemaToResolve, handle) {\r\n    const resolveErrors = schemaToResolve.errors.slice(0);\r\n    const schema = schemaToResolve.schema;\r\n    let schemaDraft = schema.$schema ? normalizeId(schema.$schema) : void 0;\r\n    if (schemaDraft === \"http://json-schema.org/draft-03/schema\") {\r\n      return this.promise.resolve(new ResolvedSchema({}, [t(\"Draft-03 schemas are not supported.\")], [], schemaDraft));\r\n    }\r\n    let usesUnsupportedFeatures = /* @__PURE__ */ new Set();\r\n    const contextService = this.contextService;\r\n    const findSectionByJSONPointer = (schema2, path) => {\r\n      path = decodeURIComponent(path);\r\n      let current = schema2;\r\n      if (path[0] === \"/\") {\r\n        path = path.substring(1);\r\n      }\r\n      path.split(\"/\").some((part) => {\r\n        part = part.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\r\n        current = current[part];\r\n        return !current;\r\n      });\r\n      return current;\r\n    };\r\n    const findSchemaById = (schema2, handle2, id) => {\r\n      if (!handle2.anchors) {\r\n        handle2.anchors = collectAnchors(schema2);\r\n      }\r\n      return handle2.anchors.get(id);\r\n    };\r\n    const merge = (target, section) => {\r\n      for (const key in section) {\r\n        if (section.hasOwnProperty(key) && key !== \"id\" && key !== \"$id\") {\r\n          target[key] = section[key];\r\n        }\r\n      }\r\n    };\r\n    const mergeRef = (target, sourceRoot, sourceHandle, refSegment) => {\r\n      let section;\r\n      if (refSegment === void 0 || refSegment.length === 0) {\r\n        section = sourceRoot;\r\n      } else if (refSegment.charAt(0) === \"/\") {\r\n        section = findSectionByJSONPointer(sourceRoot, refSegment);\r\n      } else {\r\n        section = findSchemaById(sourceRoot, sourceHandle, refSegment);\r\n      }\r\n      if (section) {\r\n        merge(target, section);\r\n      } else {\r\n        resolveErrors.push(t(\"$ref '{0}' in '{1}' can not be resolved.\", refSegment || \"\", sourceHandle.uri));\r\n      }\r\n    };\r\n    const resolveExternalLink = (node, uri, refSegment, parentHandle) => {\r\n      if (contextService && !/^[A-Za-z][A-Za-z0-9+\\-.+]*:\\/\\/.*/.test(uri)) {\r\n        uri = contextService.resolveRelativePath(uri, parentHandle.uri);\r\n      }\r\n      uri = normalizeId(uri);\r\n      const referencedHandle = this.getOrAddSchemaHandle(uri);\r\n      return referencedHandle.getUnresolvedSchema().then((unresolvedSchema) => {\r\n        parentHandle.dependencies.add(uri);\r\n        if (unresolvedSchema.errors.length) {\r\n          const loc = refSegment ? uri + \"#\" + refSegment : uri;\r\n          resolveErrors.push(t(\"Problems loading reference '{0}': {1}\", loc, unresolvedSchema.errors[0]));\r\n        }\r\n        mergeRef(node, unresolvedSchema.schema, referencedHandle, refSegment);\r\n        return resolveRefs(node, unresolvedSchema.schema, referencedHandle);\r\n      });\r\n    };\r\n    const resolveRefs = (node, parentSchema, parentHandle) => {\r\n      const openPromises = [];\r\n      this.traverseNodes(node, (next) => {\r\n        const seenRefs = /* @__PURE__ */ new Set();\r\n        while (next.$ref) {\r\n          const ref = next.$ref;\r\n          const segments = ref.split(\"#\", 2);\r\n          delete next.$ref;\r\n          if (segments[0].length > 0) {\r\n            openPromises.push(resolveExternalLink(next, segments[0], segments[1], parentHandle));\r\n            return;\r\n          } else {\r\n            if (!seenRefs.has(ref)) {\r\n              const id = segments[1];\r\n              mergeRef(next, parentSchema, parentHandle, id);\r\n              seenRefs.add(ref);\r\n            }\r\n          }\r\n        }\r\n        if (next.$recursiveRef) {\r\n          usesUnsupportedFeatures.add(\"$recursiveRef\");\r\n        }\r\n        if (next.$dynamicRef) {\r\n          usesUnsupportedFeatures.add(\"$dynamicRef\");\r\n        }\r\n      });\r\n      return this.promise.all(openPromises);\r\n    };\r\n    const collectAnchors = (root) => {\r\n      const result = /* @__PURE__ */ new Map();\r\n      this.traverseNodes(root, (next) => {\r\n        const id = next.$id || next.id;\r\n        const anchor = isString(id) && id.charAt(0) === \"#\" ? id.substring(1) : next.$anchor;\r\n        if (anchor) {\r\n          if (result.has(anchor)) {\r\n            resolveErrors.push(t(\"Duplicate anchor declaration: '{0}'\", anchor));\r\n          } else {\r\n            result.set(anchor, next);\r\n          }\r\n        }\r\n        if (next.$recursiveAnchor) {\r\n          usesUnsupportedFeatures.add(\"$recursiveAnchor\");\r\n        }\r\n        if (next.$dynamicAnchor) {\r\n          usesUnsupportedFeatures.add(\"$dynamicAnchor\");\r\n        }\r\n      });\r\n      return result;\r\n    };\r\n    return resolveRefs(schema, schema, handle).then((_) => {\r\n      let resolveWarnings = [];\r\n      if (usesUnsupportedFeatures.size) {\r\n        resolveWarnings.push(t(\"The schema uses meta-schema features ({0}) that are not yet supported by the validator.\", Array.from(usesUnsupportedFeatures.keys()).join(\", \")));\r\n      }\r\n      return new ResolvedSchema(schema, resolveErrors, resolveWarnings, schemaDraft);\r\n    });\r\n  }\r\n  traverseNodes(root, handle) {\r\n    if (!root || typeof root !== \"object\") {\r\n      return Promise.resolve(null);\r\n    }\r\n    const seen = /* @__PURE__ */ new Set();\r\n    const collectEntries = (...entries) => {\r\n      for (const entry of entries) {\r\n        if (isObject(entry)) {\r\n          toWalk.push(entry);\r\n        }\r\n      }\r\n    };\r\n    const collectMapEntries = (...maps) => {\r\n      for (const map of maps) {\r\n        if (isObject(map)) {\r\n          for (const k in map) {\r\n            const key = k;\r\n            const entry = map[key];\r\n            if (isObject(entry)) {\r\n              toWalk.push(entry);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n    const collectArrayEntries = (...arrays) => {\r\n      for (const array of arrays) {\r\n        if (Array.isArray(array)) {\r\n          for (const entry of array) {\r\n            if (isObject(entry)) {\r\n              toWalk.push(entry);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n    const collectEntryOrArrayEntries = (items) => {\r\n      if (Array.isArray(items)) {\r\n        for (const entry of items) {\r\n          if (isObject(entry)) {\r\n            toWalk.push(entry);\r\n          }\r\n        }\r\n      } else if (isObject(items)) {\r\n        toWalk.push(items);\r\n      }\r\n    };\r\n    const toWalk = [root];\r\n    let next = toWalk.pop();\r\n    while (next) {\r\n      if (!seen.has(next)) {\r\n        seen.add(next);\r\n        handle(next);\r\n        collectEntries(next.additionalItems, next.additionalProperties, next.not, next.contains, next.propertyNames, next.if, next.then, next.else, next.unevaluatedItems, next.unevaluatedProperties);\r\n        collectMapEntries(next.definitions, next.$defs, next.properties, next.patternProperties, next.dependencies, next.dependentSchemas);\r\n        collectArrayEntries(next.anyOf, next.allOf, next.oneOf, next.prefixItems);\r\n        collectEntryOrArrayEntries(next.items);\r\n      }\r\n      next = toWalk.pop();\r\n    }\r\n  }\r\n  getSchemaFromProperty(resource, document) {\r\n    if (document.root?.type === \"object\") {\r\n      for (const p of document.root.properties) {\r\n        if (p.keyNode.value === \"$schema\" && p.valueNode?.type === \"string\") {\r\n          let schemaId = p.valueNode.value;\r\n          if (this.contextService && !/^\\w[\\w\\d+.-]*:/.test(schemaId)) {\r\n            schemaId = this.contextService.resolveRelativePath(schemaId, resource);\r\n          }\r\n          return schemaId;\r\n        }\r\n      }\r\n    }\r\n    return void 0;\r\n  }\r\n  getAssociatedSchemas(resource) {\r\n    const seen = /* @__PURE__ */ Object.create(null);\r\n    const schemas = [];\r\n    const normalizedResource = normalizeResourceForMatching(resource);\r\n    for (const entry of this.filePatternAssociations) {\r\n      if (entry.matchesPattern(normalizedResource)) {\r\n        for (const schemaId of entry.getURIs()) {\r\n          if (!seen[schemaId]) {\r\n            schemas.push(schemaId);\r\n            seen[schemaId] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return schemas;\r\n  }\r\n  getSchemaURIsForResource(resource, document) {\r\n    let schemeId = document && this.getSchemaFromProperty(resource, document);\r\n    if (schemeId) {\r\n      return [schemeId];\r\n    }\r\n    return this.getAssociatedSchemas(resource);\r\n  }\r\n  getSchemaForResource(resource, document) {\r\n    if (document) {\r\n      let schemeId = this.getSchemaFromProperty(resource, document);\r\n      if (schemeId) {\r\n        const id = normalizeId(schemeId);\r\n        return this.getOrAddSchemaHandle(id).getResolvedSchema();\r\n      }\r\n    }\r\n    if (this.cachedSchemaForResource && this.cachedSchemaForResource.resource === resource) {\r\n      return this.cachedSchemaForResource.resolvedSchema;\r\n    }\r\n    const schemas = this.getAssociatedSchemas(resource);\r\n    const resolvedSchema = schemas.length > 0 ? this.createCombinedSchema(resource, schemas).getResolvedSchema() : this.promise.resolve(void 0);\r\n    this.cachedSchemaForResource = { resource, resolvedSchema };\r\n    return resolvedSchema;\r\n  }\r\n  createCombinedSchema(resource, schemaIds) {\r\n    if (schemaIds.length === 1) {\r\n      return this.getOrAddSchemaHandle(schemaIds[0]);\r\n    } else {\r\n      const combinedSchemaId = \"schemaservice://combinedSchema/\" + encodeURIComponent(resource);\r\n      const combinedSchema = {\r\n        allOf: schemaIds.map((schemaId) => ({ $ref: schemaId }))\r\n      };\r\n      return this.addSchemaHandle(combinedSchemaId, combinedSchema);\r\n    }\r\n  }\r\n  getMatchingSchemas(document, jsonDocument, schema) {\r\n    if (schema) {\r\n      const id = schema.id || \"schemaservice://untitled/matchingSchemas/\" + idCounter2++;\r\n      const handle = this.addSchemaHandle(id, schema);\r\n      return handle.getResolvedSchema().then((resolvedSchema) => {\r\n        return jsonDocument.getMatchingSchemas(resolvedSchema.schema).filter((s) => !s.inverted);\r\n      });\r\n    }\r\n    return this.getSchemaForResource(document.uri, jsonDocument).then((schema2) => {\r\n      if (schema2) {\r\n        return jsonDocument.getMatchingSchemas(schema2.schema).filter((s) => !s.inverted);\r\n      }\r\n      return [];\r\n    });\r\n  }\r\n};\r\nvar idCounter2 = 0;\r\nfunction normalizeId(id) {\r\n  try {\r\n    return URI2.parse(id).toString(true);\r\n  } catch (e) {\r\n    return id;\r\n  }\r\n}\r\nfunction normalizeResourceForMatching(resource) {\r\n  try {\r\n    return URI2.parse(resource).with({ fragment: null, query: null }).toString(true);\r\n  } catch (e) {\r\n    return resource;\r\n  }\r\n}\r\nfunction toDisplayString(url) {\r\n  try {\r\n    const uri = URI2.parse(url);\r\n    if (uri.scheme === \"file\") {\r\n      return uri.fsPath;\r\n    }\r\n  } catch (e) {\r\n  }\r\n  return url;\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/services/jsonFolding.js\r\nfunction getFoldingRanges(document, context) {\r\n  const ranges = [];\r\n  const nestingLevels = [];\r\n  const stack = [];\r\n  let prevStart = -1;\r\n  const scanner = createScanner2(document.getText(), false);\r\n  let token = scanner.scan();\r\n  function addRange(range) {\r\n    ranges.push(range);\r\n    nestingLevels.push(stack.length);\r\n  }\r\n  while (token !== 17) {\r\n    switch (token) {\r\n      case 1:\r\n      case 3: {\r\n        const startLine = document.positionAt(scanner.getTokenOffset()).line;\r\n        const range = { startLine, endLine: startLine, kind: token === 1 ? \"object\" : \"array\" };\r\n        stack.push(range);\r\n        break;\r\n      }\r\n      case 2:\r\n      case 4: {\r\n        const kind = token === 2 ? \"object\" : \"array\";\r\n        if (stack.length > 0 && stack[stack.length - 1].kind === kind) {\r\n          const range = stack.pop();\r\n          const line = document.positionAt(scanner.getTokenOffset()).line;\r\n          if (range && line > range.startLine + 1 && prevStart !== range.startLine) {\r\n            range.endLine = line - 1;\r\n            addRange(range);\r\n            prevStart = range.startLine;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 13: {\r\n        const startLine = document.positionAt(scanner.getTokenOffset()).line;\r\n        const endLine = document.positionAt(scanner.getTokenOffset() + scanner.getTokenLength()).line;\r\n        if (scanner.getTokenError() === 1 && startLine + 1 < document.lineCount) {\r\n          scanner.setPosition(document.offsetAt(Position.create(startLine + 1, 0)));\r\n        } else {\r\n          if (startLine < endLine) {\r\n            addRange({ startLine, endLine, kind: FoldingRangeKind.Comment });\r\n            prevStart = startLine;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 12: {\r\n        const text = document.getText().substr(scanner.getTokenOffset(), scanner.getTokenLength());\r\n        const m = text.match(/^\\/\\/\\s*#(region\\b)|(endregion\\b)/);\r\n        if (m) {\r\n          const line = document.positionAt(scanner.getTokenOffset()).line;\r\n          if (m[1]) {\r\n            const range = { startLine: line, endLine: line, kind: FoldingRangeKind.Region };\r\n            stack.push(range);\r\n          } else {\r\n            let i = stack.length - 1;\r\n            while (i >= 0 && stack[i].kind !== FoldingRangeKind.Region) {\r\n              i--;\r\n            }\r\n            if (i >= 0) {\r\n              const range = stack[i];\r\n              stack.length = i;\r\n              if (line > range.startLine && prevStart !== range.startLine) {\r\n                range.endLine = line;\r\n                addRange(range);\r\n                prevStart = range.startLine;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    token = scanner.scan();\r\n  }\r\n  const rangeLimit = context && context.rangeLimit;\r\n  if (typeof rangeLimit !== \"number\" || ranges.length <= rangeLimit) {\r\n    return ranges;\r\n  }\r\n  if (context && context.onRangeLimitExceeded) {\r\n    context.onRangeLimitExceeded(document.uri);\r\n  }\r\n  const counts = [];\r\n  for (let level of nestingLevels) {\r\n    if (level < 30) {\r\n      counts[level] = (counts[level] || 0) + 1;\r\n    }\r\n  }\r\n  let entries = 0;\r\n  let maxLevel = 0;\r\n  for (let i = 0; i < counts.length; i++) {\r\n    const n = counts[i];\r\n    if (n) {\r\n      if (n + entries > rangeLimit) {\r\n        maxLevel = i;\r\n        break;\r\n      }\r\n      entries += n;\r\n    }\r\n  }\r\n  const result = [];\r\n  for (let i = 0; i < ranges.length; i++) {\r\n    const level = nestingLevels[i];\r\n    if (typeof level === \"number\") {\r\n      if (level < maxLevel || level === maxLevel && entries++ < rangeLimit) {\r\n        result.push(ranges[i]);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/services/jsonSelectionRanges.js\r\nfunction getSelectionRanges(document, positions, doc) {\r\n  function getSelectionRange(position) {\r\n    let offset = document.offsetAt(position);\r\n    let node = doc.getNodeFromOffset(offset, true);\r\n    const result = [];\r\n    while (node) {\r\n      switch (node.type) {\r\n        case \"string\":\r\n        case \"object\":\r\n        case \"array\":\r\n          const cStart = node.offset + 1, cEnd = node.offset + node.length - 1;\r\n          if (cStart < cEnd && offset >= cStart && offset <= cEnd) {\r\n            result.push(newRange(cStart, cEnd));\r\n          }\r\n          result.push(newRange(node.offset, node.offset + node.length));\r\n          break;\r\n        case \"number\":\r\n        case \"boolean\":\r\n        case \"null\":\r\n        case \"property\":\r\n          result.push(newRange(node.offset, node.offset + node.length));\r\n          break;\r\n      }\r\n      if (node.type === \"property\" || node.parent && node.parent.type === \"array\") {\r\n        const afterCommaOffset = getOffsetAfterNextToken(\r\n          node.offset + node.length,\r\n          5\r\n          /* SyntaxKind.CommaToken */\r\n        );\r\n        if (afterCommaOffset !== -1) {\r\n          result.push(newRange(node.offset, afterCommaOffset));\r\n        }\r\n      }\r\n      node = node.parent;\r\n    }\r\n    let current = void 0;\r\n    for (let index = result.length - 1; index >= 0; index--) {\r\n      current = SelectionRange.create(result[index], current);\r\n    }\r\n    if (!current) {\r\n      current = SelectionRange.create(Range.create(position, position));\r\n    }\r\n    return current;\r\n  }\r\n  function newRange(start, end) {\r\n    return Range.create(document.positionAt(start), document.positionAt(end));\r\n  }\r\n  const scanner = createScanner2(document.getText(), true);\r\n  function getOffsetAfterNextToken(offset, expectedToken) {\r\n    scanner.setPosition(offset);\r\n    let token = scanner.scan();\r\n    if (token === expectedToken) {\r\n      return scanner.getTokenOffset() + scanner.getTokenLength();\r\n    }\r\n    return -1;\r\n  }\r\n  return positions.map(getSelectionRange);\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/utils/format.js\r\nfunction format4(documentToFormat, formattingOptions, formattingRange) {\r\n  let range = void 0;\r\n  if (formattingRange) {\r\n    const offset = documentToFormat.offsetAt(formattingRange.start);\r\n    const length = documentToFormat.offsetAt(formattingRange.end) - offset;\r\n    range = { offset, length };\r\n  }\r\n  const options = {\r\n    tabSize: formattingOptions ? formattingOptions.tabSize : 4,\r\n    insertSpaces: formattingOptions?.insertSpaces === true,\r\n    insertFinalNewline: formattingOptions?.insertFinalNewline === true,\r\n    eol: \"\\n\",\r\n    keepLines: formattingOptions?.keepLines === true\r\n  };\r\n  return format2(documentToFormat.getText(), range, options).map((edit) => {\r\n    return TextEdit.replace(Range.create(documentToFormat.positionAt(edit.offset), documentToFormat.positionAt(edit.offset + edit.length)), edit.content);\r\n  });\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/utils/propertyTree.js\r\nvar Container;\r\n(function(Container2) {\r\n  Container2[Container2[\"Object\"] = 0] = \"Object\";\r\n  Container2[Container2[\"Array\"] = 1] = \"Array\";\r\n})(Container || (Container = {}));\r\nvar PropertyTree = class {\r\n  constructor(propertyName, beginningLineNumber) {\r\n    this.propertyName = propertyName ?? \"\";\r\n    this.beginningLineNumber = beginningLineNumber;\r\n    this.childrenProperties = [];\r\n    this.lastProperty = false;\r\n    this.noKeyName = false;\r\n  }\r\n  addChildProperty(childProperty) {\r\n    childProperty.parent = this;\r\n    if (this.childrenProperties.length > 0) {\r\n      let insertionIndex = 0;\r\n      if (childProperty.noKeyName) {\r\n        insertionIndex = this.childrenProperties.length;\r\n      } else {\r\n        insertionIndex = binarySearchOnPropertyArray(this.childrenProperties, childProperty, compareProperties);\r\n      }\r\n      if (insertionIndex < 0) {\r\n        insertionIndex = insertionIndex * -1 - 1;\r\n      }\r\n      this.childrenProperties.splice(insertionIndex, 0, childProperty);\r\n    } else {\r\n      this.childrenProperties.push(childProperty);\r\n    }\r\n    return childProperty;\r\n  }\r\n};\r\nfunction compareProperties(propertyTree1, propertyTree2) {\r\n  const propertyName1 = propertyTree1.propertyName.toLowerCase();\r\n  const propertyName2 = propertyTree2.propertyName.toLowerCase();\r\n  if (propertyName1 < propertyName2) {\r\n    return -1;\r\n  } else if (propertyName1 > propertyName2) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\nfunction binarySearchOnPropertyArray(propertyTreeArray, propertyTree, compare_fn) {\r\n  const propertyName = propertyTree.propertyName.toLowerCase();\r\n  const firstPropertyInArrayName = propertyTreeArray[0].propertyName.toLowerCase();\r\n  const lastPropertyInArrayName = propertyTreeArray[propertyTreeArray.length - 1].propertyName.toLowerCase();\r\n  if (propertyName < firstPropertyInArrayName) {\r\n    return 0;\r\n  }\r\n  if (propertyName > lastPropertyInArrayName) {\r\n    return propertyTreeArray.length;\r\n  }\r\n  let m = 0;\r\n  let n = propertyTreeArray.length - 1;\r\n  while (m <= n) {\r\n    let k = n + m >> 1;\r\n    let cmp = compare_fn(propertyTree, propertyTreeArray[k]);\r\n    if (cmp > 0) {\r\n      m = k + 1;\r\n    } else if (cmp < 0) {\r\n      n = k - 1;\r\n    } else {\r\n      return k;\r\n    }\r\n  }\r\n  return -m - 1;\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/utils/sort.js\r\nfunction sort(documentToSort, formattingOptions) {\r\n  const options = {\r\n    ...formattingOptions,\r\n    keepLines: false\r\n    // keepLines must be false so that the properties are on separate lines for the sorting\r\n  };\r\n  const formattedJsonString = TextDocument2.applyEdits(documentToSort, format4(documentToSort, options, void 0));\r\n  const formattedJsonDocument = TextDocument2.create(\"test://test.json\", \"json\", 0, formattedJsonString);\r\n  const jsonPropertyTree = findJsoncPropertyTree(formattedJsonDocument);\r\n  const sortedJsonDocument = sortJsoncDocument(formattedJsonDocument, jsonPropertyTree);\r\n  const edits = format4(sortedJsonDocument, options, void 0);\r\n  const sortedAndFormattedJsonDocument = TextDocument2.applyEdits(sortedJsonDocument, edits);\r\n  return [TextEdit.replace(Range.create(Position.create(0, 0), documentToSort.positionAt(documentToSort.getText().length)), sortedAndFormattedJsonDocument)];\r\n}\r\nfunction findJsoncPropertyTree(formattedDocument) {\r\n  const formattedString = formattedDocument.getText();\r\n  const scanner = createScanner2(formattedString, false);\r\n  let rootTree = new PropertyTree();\r\n  let currentTree = rootTree;\r\n  let currentProperty = rootTree;\r\n  let lastProperty = rootTree;\r\n  let token = void 0;\r\n  let lastTokenLine = 0;\r\n  let numberOfCharactersOnPreviousLines = 0;\r\n  let lastNonTriviaNonCommentToken = void 0;\r\n  let secondToLastNonTriviaNonCommentToken = void 0;\r\n  let lineOfLastNonTriviaNonCommentToken = -1;\r\n  let endIndexOfLastNonTriviaNonCommentToken = -1;\r\n  let beginningLineNumber = 0;\r\n  let endLineNumber = 0;\r\n  let currentContainerStack = [];\r\n  let updateLastPropertyEndLineNumber = false;\r\n  let updateBeginningLineNumber = false;\r\n  while ((token = scanner.scan()) !== 17) {\r\n    if (updateLastPropertyEndLineNumber === true && token !== 14 && token !== 15 && token !== 12 && token !== 13 && currentProperty.endLineNumber === void 0) {\r\n      let endLineNumber2 = scanner.getTokenStartLine();\r\n      if (secondToLastNonTriviaNonCommentToken === 2 || secondToLastNonTriviaNonCommentToken === 4) {\r\n        lastProperty.endLineNumber = endLineNumber2 - 1;\r\n      } else {\r\n        currentProperty.endLineNumber = endLineNumber2 - 1;\r\n      }\r\n      beginningLineNumber = endLineNumber2;\r\n      updateLastPropertyEndLineNumber = false;\r\n    }\r\n    if (updateBeginningLineNumber === true && token !== 14 && token !== 15 && token !== 12 && token !== 13) {\r\n      beginningLineNumber = scanner.getTokenStartLine();\r\n      updateBeginningLineNumber = false;\r\n    }\r\n    if (scanner.getTokenStartLine() !== lastTokenLine) {\r\n      for (let i = lastTokenLine; i < scanner.getTokenStartLine(); i++) {\r\n        const lengthOfLine = formattedDocument.getText(Range.create(Position.create(i, 0), Position.create(i + 1, 0))).length;\r\n        numberOfCharactersOnPreviousLines = numberOfCharactersOnPreviousLines + lengthOfLine;\r\n      }\r\n      lastTokenLine = scanner.getTokenStartLine();\r\n    }\r\n    switch (token) {\r\n      case 10: {\r\n        if (lastNonTriviaNonCommentToken === void 0 || lastNonTriviaNonCommentToken === 1 || lastNonTriviaNonCommentToken === 5 && currentContainerStack[currentContainerStack.length - 1] === Container.Object) {\r\n          const childProperty = new PropertyTree(scanner.getTokenValue(), beginningLineNumber);\r\n          lastProperty = currentProperty;\r\n          currentProperty = currentTree.addChildProperty(childProperty);\r\n        }\r\n        break;\r\n      }\r\n      case 3: {\r\n        if (rootTree.beginningLineNumber === void 0) {\r\n          rootTree.beginningLineNumber = scanner.getTokenStartLine();\r\n        }\r\n        if (currentContainerStack[currentContainerStack.length - 1] === Container.Object) {\r\n          currentTree = currentProperty;\r\n        } else if (currentContainerStack[currentContainerStack.length - 1] === Container.Array) {\r\n          const childProperty = new PropertyTree(scanner.getTokenValue(), beginningLineNumber);\r\n          childProperty.noKeyName = true;\r\n          lastProperty = currentProperty;\r\n          currentProperty = currentTree.addChildProperty(childProperty);\r\n          currentTree = currentProperty;\r\n        }\r\n        currentContainerStack.push(Container.Array);\r\n        currentProperty.type = Container.Array;\r\n        beginningLineNumber = scanner.getTokenStartLine();\r\n        beginningLineNumber++;\r\n        break;\r\n      }\r\n      case 1: {\r\n        if (rootTree.beginningLineNumber === void 0) {\r\n          rootTree.beginningLineNumber = scanner.getTokenStartLine();\r\n        } else if (currentContainerStack[currentContainerStack.length - 1] === Container.Array) {\r\n          const childProperty = new PropertyTree(scanner.getTokenValue(), beginningLineNumber);\r\n          childProperty.noKeyName = true;\r\n          lastProperty = currentProperty;\r\n          currentProperty = currentTree.addChildProperty(childProperty);\r\n        }\r\n        currentProperty.type = Container.Object;\r\n        currentContainerStack.push(Container.Object);\r\n        currentTree = currentProperty;\r\n        beginningLineNumber = scanner.getTokenStartLine();\r\n        beginningLineNumber++;\r\n        break;\r\n      }\r\n      case 4: {\r\n        endLineNumber = scanner.getTokenStartLine();\r\n        currentContainerStack.pop();\r\n        if (currentProperty.endLineNumber === void 0 && (lastNonTriviaNonCommentToken === 2 || lastNonTriviaNonCommentToken === 4)) {\r\n          currentProperty.endLineNumber = endLineNumber - 1;\r\n          currentProperty.lastProperty = true;\r\n          currentProperty.lineWhereToAddComma = lineOfLastNonTriviaNonCommentToken;\r\n          currentProperty.indexWhereToAddComa = endIndexOfLastNonTriviaNonCommentToken;\r\n          lastProperty = currentProperty;\r\n          currentProperty = currentProperty ? currentProperty.parent : void 0;\r\n          currentTree = currentProperty;\r\n        }\r\n        rootTree.endLineNumber = endLineNumber;\r\n        beginningLineNumber = endLineNumber + 1;\r\n        break;\r\n      }\r\n      case 2: {\r\n        endLineNumber = scanner.getTokenStartLine();\r\n        currentContainerStack.pop();\r\n        if (lastNonTriviaNonCommentToken !== 1) {\r\n          if (currentProperty.endLineNumber === void 0) {\r\n            currentProperty.endLineNumber = endLineNumber - 1;\r\n            currentProperty.lastProperty = true;\r\n            currentProperty.lineWhereToAddComma = lineOfLastNonTriviaNonCommentToken;\r\n            currentProperty.indexWhereToAddComa = endIndexOfLastNonTriviaNonCommentToken;\r\n          }\r\n          lastProperty = currentProperty;\r\n          currentProperty = currentProperty ? currentProperty.parent : void 0;\r\n          currentTree = currentProperty;\r\n        }\r\n        rootTree.endLineNumber = scanner.getTokenStartLine();\r\n        beginningLineNumber = endLineNumber + 1;\r\n        break;\r\n      }\r\n      case 5: {\r\n        endLineNumber = scanner.getTokenStartLine();\r\n        if (currentProperty.endLineNumber === void 0 && (currentContainerStack[currentContainerStack.length - 1] === Container.Object || currentContainerStack[currentContainerStack.length - 1] === Container.Array && (lastNonTriviaNonCommentToken === 2 || lastNonTriviaNonCommentToken === 4))) {\r\n          currentProperty.endLineNumber = endLineNumber;\r\n          currentProperty.commaIndex = scanner.getTokenOffset() - numberOfCharactersOnPreviousLines;\r\n          currentProperty.commaLine = endLineNumber;\r\n        }\r\n        if (lastNonTriviaNonCommentToken === 2 || lastNonTriviaNonCommentToken === 4) {\r\n          lastProperty = currentProperty;\r\n          currentProperty = currentProperty ? currentProperty.parent : void 0;\r\n          currentTree = currentProperty;\r\n        }\r\n        beginningLineNumber = endLineNumber + 1;\r\n        break;\r\n      }\r\n      case 13: {\r\n        if (lastNonTriviaNonCommentToken === 5 && lineOfLastNonTriviaNonCommentToken === scanner.getTokenStartLine() && (currentContainerStack[currentContainerStack.length - 1] === Container.Array && (secondToLastNonTriviaNonCommentToken === 2 || secondToLastNonTriviaNonCommentToken === 4) || currentContainerStack[currentContainerStack.length - 1] === Container.Object)) {\r\n          if (currentContainerStack[currentContainerStack.length - 1] === Container.Array && (secondToLastNonTriviaNonCommentToken === 2 || secondToLastNonTriviaNonCommentToken === 4) || currentContainerStack[currentContainerStack.length - 1] === Container.Object) {\r\n            currentProperty.endLineNumber = void 0;\r\n            updateLastPropertyEndLineNumber = true;\r\n          }\r\n        }\r\n        if ((lastNonTriviaNonCommentToken === 1 || lastNonTriviaNonCommentToken === 3) && lineOfLastNonTriviaNonCommentToken === scanner.getTokenStartLine()) {\r\n          updateBeginningLineNumber = true;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (token !== 14 && token !== 13 && token !== 12 && token !== 15) {\r\n      secondToLastNonTriviaNonCommentToken = lastNonTriviaNonCommentToken;\r\n      lastNonTriviaNonCommentToken = token;\r\n      lineOfLastNonTriviaNonCommentToken = scanner.getTokenStartLine();\r\n      endIndexOfLastNonTriviaNonCommentToken = scanner.getTokenOffset() + scanner.getTokenLength() - numberOfCharactersOnPreviousLines;\r\n    }\r\n  }\r\n  return rootTree;\r\n}\r\nfunction sortJsoncDocument(jsonDocument, propertyTree) {\r\n  if (propertyTree.childrenProperties.length === 0) {\r\n    return jsonDocument;\r\n  }\r\n  const sortedJsonDocument = TextDocument2.create(\"test://test.json\", \"json\", 0, jsonDocument.getText());\r\n  const queueToSort = [];\r\n  updateSortingQueue(queueToSort, propertyTree, propertyTree.beginningLineNumber);\r\n  while (queueToSort.length > 0) {\r\n    const dataToSort = queueToSort.shift();\r\n    const propertyTreeArray = dataToSort.propertyTreeArray;\r\n    let beginningLineNumber = dataToSort.beginningLineNumber;\r\n    for (let i = 0; i < propertyTreeArray.length; i++) {\r\n      const propertyTree2 = propertyTreeArray[i];\r\n      const range = Range.create(Position.create(propertyTree2.beginningLineNumber, 0), Position.create(propertyTree2.endLineNumber + 1, 0));\r\n      const jsonContentToReplace = jsonDocument.getText(range);\r\n      const jsonDocumentToReplace = TextDocument2.create(\"test://test.json\", \"json\", 0, jsonContentToReplace);\r\n      if (propertyTree2.lastProperty === true && i !== propertyTreeArray.length - 1) {\r\n        const lineWhereToAddComma = propertyTree2.lineWhereToAddComma - propertyTree2.beginningLineNumber;\r\n        const indexWhereToAddComma = propertyTree2.indexWhereToAddComa;\r\n        const edit2 = {\r\n          range: Range.create(Position.create(lineWhereToAddComma, indexWhereToAddComma), Position.create(lineWhereToAddComma, indexWhereToAddComma)),\r\n          text: \",\"\r\n        };\r\n        TextDocument2.update(jsonDocumentToReplace, [edit2], 1);\r\n      } else if (propertyTree2.lastProperty === false && i === propertyTreeArray.length - 1) {\r\n        const commaIndex = propertyTree2.commaIndex;\r\n        const commaLine = propertyTree2.commaLine;\r\n        const lineWhereToRemoveComma = commaLine - propertyTree2.beginningLineNumber;\r\n        const edit2 = {\r\n          range: Range.create(Position.create(lineWhereToRemoveComma, commaIndex), Position.create(lineWhereToRemoveComma, commaIndex + 1)),\r\n          text: \"\"\r\n        };\r\n        TextDocument2.update(jsonDocumentToReplace, [edit2], 1);\r\n      }\r\n      const length = propertyTree2.endLineNumber - propertyTree2.beginningLineNumber + 1;\r\n      const edit = {\r\n        range: Range.create(Position.create(beginningLineNumber, 0), Position.create(beginningLineNumber + length, 0)),\r\n        text: jsonDocumentToReplace.getText()\r\n      };\r\n      TextDocument2.update(sortedJsonDocument, [edit], 1);\r\n      updateSortingQueue(queueToSort, propertyTree2, beginningLineNumber);\r\n      beginningLineNumber = beginningLineNumber + length;\r\n    }\r\n  }\r\n  return sortedJsonDocument;\r\n}\r\nfunction updateSortingQueue(queue, propertyTree, beginningLineNumber) {\r\n  if (propertyTree.childrenProperties.length === 0) {\r\n    return;\r\n  }\r\n  if (propertyTree.type === Container.Object) {\r\n    let minimumBeginningLineNumber = Infinity;\r\n    for (const childProperty of propertyTree.childrenProperties) {\r\n      if (childProperty.beginningLineNumber < minimumBeginningLineNumber) {\r\n        minimumBeginningLineNumber = childProperty.beginningLineNumber;\r\n      }\r\n    }\r\n    const diff = minimumBeginningLineNumber - propertyTree.beginningLineNumber;\r\n    beginningLineNumber = beginningLineNumber + diff;\r\n    queue.push(new SortingRange(beginningLineNumber, propertyTree.childrenProperties));\r\n  } else if (propertyTree.type === Container.Array) {\r\n    updateSortingQueueForArrayProperties(queue, propertyTree, beginningLineNumber);\r\n  }\r\n}\r\nfunction updateSortingQueueForArrayProperties(queue, propertyTree, beginningLineNumber) {\r\n  for (const subObject of propertyTree.childrenProperties) {\r\n    if (subObject.type === Container.Object) {\r\n      let minimumBeginningLineNumber = Infinity;\r\n      for (const childProperty of subObject.childrenProperties) {\r\n        if (childProperty.beginningLineNumber < minimumBeginningLineNumber) {\r\n          minimumBeginningLineNumber = childProperty.beginningLineNumber;\r\n        }\r\n      }\r\n      const diff = minimumBeginningLineNumber - subObject.beginningLineNumber;\r\n      queue.push(new SortingRange(beginningLineNumber + subObject.beginningLineNumber - propertyTree.beginningLineNumber + diff, subObject.childrenProperties));\r\n    }\r\n    if (subObject.type === Container.Array) {\r\n      updateSortingQueueForArrayProperties(queue, subObject, beginningLineNumber + subObject.beginningLineNumber - propertyTree.beginningLineNumber);\r\n    }\r\n  }\r\n}\r\nvar SortingRange = class {\r\n  constructor(beginningLineNumber, propertyTreeArray) {\r\n    this.beginningLineNumber = beginningLineNumber;\r\n    this.propertyTreeArray = propertyTreeArray;\r\n  }\r\n};\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/services/jsonLinks.js\r\nfunction findLinks(document, doc) {\r\n  const links = [];\r\n  doc.visit((node) => {\r\n    if (node.type === \"property\" && node.keyNode.value === \"$ref\" && node.valueNode?.type === \"string\") {\r\n      const path = node.valueNode.value;\r\n      const targetNode = findTargetNode(doc, path);\r\n      if (targetNode) {\r\n        const targetPos = document.positionAt(targetNode.offset);\r\n        links.push({\r\n          target: `${document.uri}#${targetPos.line + 1},${targetPos.character + 1}`,\r\n          range: createRange(document, node.valueNode)\r\n        });\r\n      }\r\n    }\r\n    return true;\r\n  });\r\n  return Promise.resolve(links);\r\n}\r\nfunction createRange(document, node) {\r\n  return Range.create(document.positionAt(node.offset + 1), document.positionAt(node.offset + node.length - 1));\r\n}\r\nfunction findTargetNode(doc, path) {\r\n  const tokens = parseJSONPointer(path);\r\n  if (!tokens) {\r\n    return null;\r\n  }\r\n  return findNode(tokens, doc.root);\r\n}\r\nfunction findNode(pointer, node) {\r\n  if (!node) {\r\n    return null;\r\n  }\r\n  if (pointer.length === 0) {\r\n    return node;\r\n  }\r\n  const token = pointer.shift();\r\n  if (node && node.type === \"object\") {\r\n    const propertyNode = node.properties.find((propertyNode2) => propertyNode2.keyNode.value === token);\r\n    if (!propertyNode) {\r\n      return null;\r\n    }\r\n    return findNode(pointer, propertyNode.valueNode);\r\n  } else if (node && node.type === \"array\") {\r\n    if (token.match(/^(0|[1-9][0-9]*)$/)) {\r\n      const index = Number.parseInt(token);\r\n      const arrayItem = node.items[index];\r\n      if (!arrayItem) {\r\n        return null;\r\n      }\r\n      return findNode(pointer, arrayItem);\r\n    }\r\n  }\r\n  return null;\r\n}\r\nfunction parseJSONPointer(path) {\r\n  if (path === \"#\") {\r\n    return [];\r\n  }\r\n  if (path[0] !== \"#\" || path[1] !== \"/\") {\r\n    return null;\r\n  }\r\n  return path.substring(2).split(/\\//).map(unescape);\r\n}\r\nfunction unescape(str) {\r\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\r\n}\r\n\r\n// node_modules/vscode-json-languageservice/lib/esm/jsonLanguageService.js\r\nfunction getLanguageService(params) {\r\n  const promise = params.promiseConstructor || Promise;\r\n  const jsonSchemaService = new JSONSchemaService(params.schemaRequestService, params.workspaceContext, promise);\r\n  jsonSchemaService.setSchemaContributions(schemaContributions);\r\n  const jsonCompletion = new JSONCompletion(jsonSchemaService, params.contributions, promise, params.clientCapabilities);\r\n  const jsonHover = new JSONHover(jsonSchemaService, params.contributions, promise);\r\n  const jsonDocumentSymbols = new JSONDocumentSymbols(jsonSchemaService);\r\n  const jsonValidation = new JSONValidation(jsonSchemaService, promise);\r\n  return {\r\n    configure: (settings) => {\r\n      jsonSchemaService.clearExternalSchemas();\r\n      settings.schemas?.forEach(jsonSchemaService.registerExternalSchema.bind(jsonSchemaService));\r\n      jsonValidation.configure(settings);\r\n    },\r\n    resetSchema: (uri) => jsonSchemaService.onResourceChange(uri),\r\n    doValidation: jsonValidation.doValidation.bind(jsonValidation),\r\n    getLanguageStatus: jsonValidation.getLanguageStatus.bind(jsonValidation),\r\n    parseJSONDocument: (document) => parse3(document, { collectComments: true }),\r\n    newJSONDocument: (root, diagnostics) => newJSONDocument(root, diagnostics),\r\n    getMatchingSchemas: jsonSchemaService.getMatchingSchemas.bind(jsonSchemaService),\r\n    doResolve: jsonCompletion.doResolve.bind(jsonCompletion),\r\n    doComplete: jsonCompletion.doComplete.bind(jsonCompletion),\r\n    findDocumentSymbols: jsonDocumentSymbols.findDocumentSymbols.bind(jsonDocumentSymbols),\r\n    findDocumentSymbols2: jsonDocumentSymbols.findDocumentSymbols2.bind(jsonDocumentSymbols),\r\n    findDocumentColors: jsonDocumentSymbols.findDocumentColors.bind(jsonDocumentSymbols),\r\n    getColorPresentations: jsonDocumentSymbols.getColorPresentations.bind(jsonDocumentSymbols),\r\n    doHover: jsonHover.doHover.bind(jsonHover),\r\n    getFoldingRanges,\r\n    getSelectionRanges,\r\n    findDefinition: () => Promise.resolve([]),\r\n    findLinks,\r\n    format: (document, range, options) => format4(document, options, range),\r\n    sort: (document, options) => sort(document, options)\r\n  };\r\n}\r\n\r\n// src/language/json/jsonWorker.ts\r\nvar defaultSchemaRequestService;\r\nif (typeof fetch !== \"undefined\") {\r\n  defaultSchemaRequestService = function(url) {\r\n    return fetch(url).then((response) => response.text());\r\n  };\r\n}\r\nvar JSONWorker = class {\r\n  constructor(ctx, createData) {\r\n    this._ctx = ctx;\r\n    this._languageSettings = createData.languageSettings;\r\n    this._languageId = createData.languageId;\r\n    this._languageService = getLanguageService({\r\n      workspaceContext: {\r\n        resolveRelativePath: (relativePath, resource) => {\r\n          const base = resource.substr(0, resource.lastIndexOf(\"/\") + 1);\r\n          return resolvePath(base, relativePath);\r\n        }\r\n      },\r\n      schemaRequestService: createData.enableSchemaRequest ? defaultSchemaRequestService : void 0,\r\n      clientCapabilities: ClientCapabilities.LATEST\r\n    });\r\n    this._languageService.configure(this._languageSettings);\r\n  }\r\n  async doValidation(uri) {\r\n    let document = this._getTextDocument(uri);\r\n    if (document) {\r\n      let jsonDocument = this._languageService.parseJSONDocument(document);\r\n      return this._languageService.doValidation(document, jsonDocument, this._languageSettings);\r\n    }\r\n    return Promise.resolve([]);\r\n  }\r\n  async doComplete(uri, position) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return null;\r\n    }\r\n    let jsonDocument = this._languageService.parseJSONDocument(document);\r\n    return this._languageService.doComplete(document, position, jsonDocument);\r\n  }\r\n  async doResolve(item) {\r\n    return this._languageService.doResolve(item);\r\n  }\r\n  async doHover(uri, position) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return null;\r\n    }\r\n    let jsonDocument = this._languageService.parseJSONDocument(document);\r\n    return this._languageService.doHover(document, position, jsonDocument);\r\n  }\r\n  async format(uri, range, options) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return [];\r\n    }\r\n    let textEdits = this._languageService.format(document, range, options);\r\n    return Promise.resolve(textEdits);\r\n  }\r\n  async resetSchema(uri) {\r\n    return Promise.resolve(this._languageService.resetSchema(uri));\r\n  }\r\n  async findDocumentSymbols(uri) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return [];\r\n    }\r\n    let jsonDocument = this._languageService.parseJSONDocument(document);\r\n    let symbols = this._languageService.findDocumentSymbols2(document, jsonDocument);\r\n    return Promise.resolve(symbols);\r\n  }\r\n  async findDocumentColors(uri) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return [];\r\n    }\r\n    let jsonDocument = this._languageService.parseJSONDocument(document);\r\n    let colorSymbols = this._languageService.findDocumentColors(document, jsonDocument);\r\n    return Promise.resolve(colorSymbols);\r\n  }\r\n  async getColorPresentations(uri, color, range) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return [];\r\n    }\r\n    let jsonDocument = this._languageService.parseJSONDocument(document);\r\n    let colorPresentations = this._languageService.getColorPresentations(\r\n      document,\r\n      jsonDocument,\r\n      color,\r\n      range\r\n    );\r\n    return Promise.resolve(colorPresentations);\r\n  }\r\n  async getFoldingRanges(uri, context) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return [];\r\n    }\r\n    let ranges = this._languageService.getFoldingRanges(document, context);\r\n    return Promise.resolve(ranges);\r\n  }\r\n  async getSelectionRanges(uri, positions) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return [];\r\n    }\r\n    let jsonDocument = this._languageService.parseJSONDocument(document);\r\n    let ranges = this._languageService.getSelectionRanges(document, positions, jsonDocument);\r\n    return Promise.resolve(ranges);\r\n  }\r\n  async parseJSONDocument(uri) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return null;\r\n    }\r\n    let jsonDocument = this._languageService.parseJSONDocument(document);\r\n    return Promise.resolve(jsonDocument);\r\n  }\r\n  async getMatchingSchemas(uri) {\r\n    let document = this._getTextDocument(uri);\r\n    if (!document) {\r\n      return [];\r\n    }\r\n    let jsonDocument = this._languageService.parseJSONDocument(document);\r\n    return Promise.resolve(this._languageService.getMatchingSchemas(document, jsonDocument));\r\n  }\r\n  _getTextDocument(uri) {\r\n    let models = this._ctx.getMirrorModels();\r\n    for (let model of models) {\r\n      if (model.uri.toString() === uri) {\r\n        return TextDocument2.create(\r\n          uri,\r\n          this._languageId,\r\n          model.version,\r\n          model.getValue()\r\n        );\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n};\r\nvar Slash = \"/\".charCodeAt(0);\r\nvar Dot = \".\".charCodeAt(0);\r\nfunction isAbsolutePath(path) {\r\n  return path.charCodeAt(0) === Slash;\r\n}\r\nfunction resolvePath(uriString, path) {\r\n  if (isAbsolutePath(path)) {\r\n    const uri = URI2.parse(uriString);\r\n    const parts = path.split(\"/\");\r\n    return uri.with({ path: normalizePath(parts) }).toString();\r\n  }\r\n  return joinPath(uriString, path);\r\n}\r\nfunction normalizePath(parts) {\r\n  const newParts = [];\r\n  for (const part of parts) {\r\n    if (part.length === 0 || part.length === 1 && part.charCodeAt(0) === Dot) {\r\n    } else if (part.length === 2 && part.charCodeAt(0) === Dot && part.charCodeAt(1) === Dot) {\r\n      newParts.pop();\r\n    } else {\r\n      newParts.push(part);\r\n    }\r\n  }\r\n  if (parts.length > 1 && parts[parts.length - 1].length === 0) {\r\n    newParts.push(\"\");\r\n  }\r\n  let res = newParts.join(\"/\");\r\n  if (parts[0].length === 0) {\r\n    res = \"/\" + res;\r\n  }\r\n  return res;\r\n}\r\nfunction joinPath(uriString, ...paths) {\r\n  const uri = URI2.parse(uriString);\r\n  const parts = uri.path.split(\"/\");\r\n  for (let path of paths) {\r\n    parts.push(...path.split(\"/\"));\r\n  }\r\n  return uri.with({ path: normalizePath(parts) }).toString();\r\n}\r\n\r\n// src/language/json/json.worker.ts\r\nself.onmessage = () => {\r\n  _editor_editor_worker_js__WEBPACK_IMPORTED_MODULE_0__.initialize((ctx, createData) => {\r\n    return new JSONWorker(ctx, createData);\r\n  });\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/language/json/json.worker.js\n");

/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/nls.js":
/*!**************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/nls.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   getConfiguredDefaultLocale: () => (/* binding */ getConfiguredDefaultLocale),\n/* harmony export */   load: () => (/* binding */ load),\n/* harmony export */   localize: () => (/* binding */ localize),\n/* harmony export */   localize2: () => (/* binding */ localize2),\n/* harmony export */   setPseudoTranslation: () => (/* binding */ setPseudoTranslation)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nlet isPseudo = (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);\r\nconst DEFAULT_TAG = 'i-default';\r\nfunction _format(message, args) {\r\n    let result;\r\n    if (args.length === 0) {\r\n        result = message;\r\n    }\r\n    else {\r\n        result = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\r\n            const index = rest[0];\r\n            const arg = args[index];\r\n            let result = match;\r\n            if (typeof arg === 'string') {\r\n                result = arg;\r\n            }\r\n            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\r\n                result = String(arg);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    if (isPseudo) {\r\n        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\r\n        result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\r\n    }\r\n    return result;\r\n}\r\nfunction findLanguageForModule(config, name) {\r\n    let result = config[name];\r\n    if (result) {\r\n        return result;\r\n    }\r\n    result = config['*'];\r\n    if (result) {\r\n        return result;\r\n    }\r\n    return null;\r\n}\r\nfunction endWithSlash(path) {\r\n    if (path.charAt(path.length - 1) === '/') {\r\n        return path;\r\n    }\r\n    return path + '/';\r\n}\r\nasync function getMessagesFromTranslationsService(translationServiceUrl, language, name) {\r\n    const url = endWithSlash(translationServiceUrl) + endWithSlash(language) + 'vscode/' + endWithSlash(name);\r\n    const res = await fetch(url);\r\n    if (res.ok) {\r\n        const messages = await res.json();\r\n        return messages;\r\n    }\r\n    throw new Error(`${res.status} - ${res.statusText}`);\r\n}\r\nfunction createScopedLocalize(scope) {\r\n    return function (idx, defaultValue) {\r\n        const restArgs = Array.prototype.slice.call(arguments, 2);\r\n        return _format(scope[idx], restArgs);\r\n    };\r\n}\r\nfunction createScopedLocalize2(scope) {\r\n    return (idx, defaultValue, ...args) => ({\r\n        value: _format(scope[idx], args),\r\n        original: _format(defaultValue, args)\r\n    });\r\n}\r\n/**\r\n * @skipMangle\r\n */\r\nfunction localize(data, message, ...args) {\r\n    return _format(message, args);\r\n}\r\n/**\r\n * @skipMangle\r\n */\r\nfunction localize2(data, message, ...args) {\r\n    const original = _format(message, args);\r\n    return {\r\n        value: original,\r\n        original\r\n    };\r\n}\r\n/**\r\n * @skipMangle\r\n */\r\nfunction getConfiguredDefaultLocale(_) {\r\n    // This returns undefined because this implementation isn't used and is overwritten by the loader\r\n    // when loaded.\r\n    return undefined;\r\n}\r\n/**\r\n * @skipMangle\r\n */\r\nfunction setPseudoTranslation(value) {\r\n    isPseudo = value;\r\n}\r\n/**\r\n * Invoked in a built product at run-time\r\n * @skipMangle\r\n */\r\nfunction create(key, data) {\r\n    var _a;\r\n    return {\r\n        localize: createScopedLocalize(data[key]),\r\n        localize2: createScopedLocalize2(data[key]),\r\n        getConfiguredDefaultLocale: (_a = data.getConfiguredDefaultLocale) !== null && _a !== void 0 ? _a : ((_) => undefined)\r\n    };\r\n}\r\n/**\r\n * Invoked by the loader at run-time\r\n * @skipMangle\r\n */\r\nfunction load(name, req, load, config) {\r\n    var _a;\r\n    const pluginConfig = (_a = config['vs/nls']) !== null && _a !== void 0 ? _a : {};\r\n    if (!name || name.length === 0) {\r\n        // TODO: We need to give back the mangled names here\r\n        return load({\r\n            localize: localize,\r\n            localize2: localize2,\r\n            getConfiguredDefaultLocale: () => { var _a; return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*']; }\r\n        });\r\n    }\r\n    const language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\r\n    const useDefaultLanguage = language === null || language === DEFAULT_TAG;\r\n    let suffix = '.nls';\r\n    if (!useDefaultLanguage) {\r\n        suffix = suffix + '.' + language;\r\n    }\r\n    const messagesLoaded = (messages) => {\r\n        if (Array.isArray(messages)) {\r\n            messages.localize = createScopedLocalize(messages);\r\n            messages.localize2 = createScopedLocalize2(messages);\r\n        }\r\n        else {\r\n            messages.localize = createScopedLocalize(messages[name]);\r\n            messages.localize2 = createScopedLocalize2(messages[name]);\r\n        }\r\n        messages.getConfiguredDefaultLocale = () => { var _a; return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*']; };\r\n        load(messages);\r\n    };\r\n    if (typeof pluginConfig.loadBundle === 'function') {\r\n        pluginConfig.loadBundle(name, language, (err, messages) => {\r\n            // We have an error. Load the English default strings to not fail\r\n            if (err) {\r\n                req([name + '.nls'], messagesLoaded);\r\n            }\r\n            else {\r\n                messagesLoaded(messages);\r\n            }\r\n        });\r\n    }\r\n    else if (pluginConfig.translationServiceUrl && !useDefaultLanguage) {\r\n        (async () => {\r\n            var _a;\r\n            try {\r\n                const messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, language, name);\r\n                return messagesLoaded(messages);\r\n            }\r\n            catch (err) {\r\n                // Language is already as generic as it gets, so require default messages\r\n                if (!language.includes('-')) {\r\n                    console.error(err);\r\n                    return req([name + '.nls'], messagesLoaded);\r\n                }\r\n                try {\r\n                    // Since there is a dash, the language configured is a specific sub-language of the same generic language.\r\n                    // Since we were unable to load the specific language, try to load the generic language. Ex. we failed to find a\r\n                    // Swiss German (de-CH), so try to load the generic German (de) messages instead.\r\n                    const genericLanguage = language.split('-')[0];\r\n                    const messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, genericLanguage, name);\r\n                    // We got some messages, so we configure the configuration to use the generic language for this session.\r\n                    (_a = pluginConfig.availableLanguages) !== null && _a !== void 0 ? _a : (pluginConfig.availableLanguages = {});\r\n                    pluginConfig.availableLanguages['*'] = genericLanguage;\r\n                    return messagesLoaded(messages);\r\n                }\r\n                catch (err) {\r\n                    console.error(err);\r\n                    return req([name + '.nls'], messagesLoaded);\r\n                }\r\n            }\r\n        })();\r\n    }\r\n    else {\r\n        req([name + suffix], messagesLoaded, (err) => {\r\n            if (suffix === '.nls') {\r\n                console.error('Failed trying to load default language strings', err);\r\n                return;\r\n            }\r\n            console.error(`Failed to load message bundle for language ${language}. Falling back to the default language:`, err);\r\n            req([name + '.nls'], messagesLoaded);\r\n        });\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/monaco-editor/esm/vs/nls.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./node_modules/monaco-editor/esm/vs/language/json/json.worker.js");
/******/ 	
/******/ })()
;